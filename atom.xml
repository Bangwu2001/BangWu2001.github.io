<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bang&#39;s Blog</title>
  
  
  <link href="https://bangwu2001.github.io/atom.xml" rel="self"/>
  
  <link href="https://bangwu2001.github.io/"/>
  <updated>2025-04-03T09:29:14.515Z</updated>
  <id>https://bangwu2001.github.io/</id>
  
  <author>
    <name>Bang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue入门02</title>
    <link href="https://bangwu2001.github.io/2025/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/02%20vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-02/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A802/"/>
    <id>https://bangwu2001.github.io/2025/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/02%20vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-02/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A802/</id>
    <published>2025-04-20T04:18:42.000Z</published>
    <updated>2025-04-03T09:29:14.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue入门02"><a href="#Vue入门02" class="headerlink" title="Vue入门02"></a>Vue入门02</h1><h2 id="指令补充"><a href="#指令补充" class="headerlink" title="指令补充"></a>指令补充</h2><h3 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h3><p>通过<code>&quot;.&quot;</code>指明一些指令后缀，不同后缀封装了不同的处理操作，便于简化代码</p><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><p><code>@keyup.enter</code>：键盘回车监听</p><p>语法：<code>@keyup.enter=事件处理函数</code></p><ul><li><code>@keyup</code>是任何按键时都会触发事件</li></ul><h4 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h4><p><code>v-model.trim</code>：去除首尾空格</p><p><code>v-model.number</code>：转数字</p><p>语法：与<code>v-model</code>语法一致，后面接双向绑定的vue数据</p><h4 id="时间修饰符"><a href="#时间修饰符" class="headerlink" title="时间修饰符"></a>时间修饰符</h4><p><code>@事件名.stop</code>：阻止冒泡</p><p><code>@事件名.prevent</code>：阻止默认行为</p><h3 id="v-bind对于样式控制的增强"><a href="#v-bind对于样式控制的增强" class="headerlink" title="v-bind对于样式控制的增强"></a>v-bind对于样式控制的增强</h3><p>为便于开发者进行样式控制，Vue扩展了<code>v-bind</code>语法，可以针对<code>class类名</code>和<code>style行内样式</code>进行控制</p><h4 id="v-bind操作class"><a href="#v-bind操作class" class="headerlink" title="v-bind操作class"></a>v-bind操作class</h4><p>语法：<code>:class=&quot;对象/数组&quot;</code></p><ul><li>对象，键就是类名，值是布尔值，如果值为<code>true</code>，则有这个类，否则没有</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 例如 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;类名1:布尔值,类名2:布尔值,...&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数组，数组中所有的类都会添加到盒子上，本质就是一个<code>class列表</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[类名1,类名2,类名3,...]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样通过给标签设置不同的类名，便于其根据情况切换不同的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.pink</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.big</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;pink:true,big:true&#125;&quot;</span>&gt;</span>样式切换<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际应用场景：</p><p>网页tab页面高亮，比如不同的栏目模块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>导航栏示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.navbar</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f8f8f8</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.navbar-item</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.navbar-item</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#e2231a</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in tabList&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:item.isActive&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;add(item.id)&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tabList</span>:[&#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;京东秒杀&quot;</span>,<span class="string">&quot;isActive&quot;</span>:<span class="literal">false</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ,&#123;<span class="string">&quot;id&quot;</span>:<span class="number">2</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;每日特价&quot;</span>,<span class="string">&quot;isActive&quot;</span>:<span class="literal">false</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ,&#123;<span class="string">&quot;id&quot;</span>:<span class="number">3</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;品类秒杀&quot;</span>,<span class="string">&quot;isActive&quot;</span>:<span class="literal">false</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">add</span>(<span class="params">id</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">tabList</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        item.<span class="property">isActive</span> = item.<span class="property">id</span>==id</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/02%20vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-02/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A802/tab-change.gif" alt></p><h4 id="v-bind操作style"><a href="#v-bind操作style" class="headerlink" title="v-bind操作style"></a>v-bind操作style</h4><p>语法：<code>:style=&quot;样式对象&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;ccs属性名1：css属性值,css属性名2：css属性值&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&#x27;&#123;color:&quot;red&quot;,width:&quot;100px&quot;,height:&quot;30px&quot;,border:&quot;1px solid&quot;&#125;&#x27;</span>&gt;</span>style样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model应用于其他表单元素"><a href="#v-model应用于其他表单元素" class="headerlink" title="v-model应用于其他表单元素"></a>v-model应用于其他表单元素</h3><p>所有常见的表单元素均可以用<code>v-model</code>绑定关联，进行双向绑定，能够快速获取或者设定表单元素的值</p><p><code>v-model</code>能够根据控件类型，自动选取正确的方法来更新元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputText&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;长文本&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;textArea&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span><span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>乒乓球<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;nation&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;韩国&quot;</span>&gt;</span>韩国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;日本&quot;</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">inputText</span>:<span class="string">&quot;啦啦啦啦啦&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">textArea</span>:<span class="string">&quot;好好看看啦啦啦&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">hobby</span>:[<span class="string">&quot;篮球&quot;</span>,<span class="string">&quot;乒乓球&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>:<span class="string">&quot;女&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">nation</span>:<span class="string">&quot;日本&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="computed属性"><a href="#computed属性" class="headerlink" title="computed属性"></a>computed属性</h2><h3 id="计算属性介绍"><a href="#计算属性介绍" class="headerlink" title="计算属性介绍"></a>计算属性介绍</h3><p>计算属性：基于现有的数据，计算出来的新属性，依赖的数据发生变化，会自动重新计算</p><p>语法：</p><ul><li>声明在<code>computed</code>配置项中，一个计算属性对应一个函数</li><li>使用起来和普通属性一样使用<code>&#123;&#123;计算属性名&#125;&#125;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">计算属性名()&#123;</span><br><span class="line">基于现有数据，编写求值逻辑</span><br><span class="line">return 结果</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>礼物清单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in goods&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.num&#125;&#125;个<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span>礼物总数:&#123;&#123;allCount&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">goods</span>: [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;篮球&quot;</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                    , &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;玩具&quot;</span>, <span class="attr">num</span>: <span class="number">2</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                    , &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;足球&quot;</span>, <span class="attr">num</span>: <span class="number">6</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">allCount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum,item</span>)=&gt;</span></span></span><br><span class="line"><span class="language-javascript">                        sum+item.<span class="property">num</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="computed计算属性-vs-methods方法"><a href="#computed计算属性-vs-methods方法" class="headerlink" title="computed计算属性 vs methods方法"></a>computed计算属性 vs methods方法</h3><h4 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h4><p>功能：封装了一段对于数据的处理，求得一个结果</p><p>语法：</p><ul><li>写在<code>computed</code>配置项中</li><li>作为属性，直接使用<code>this.计算属性</code>或者<code>&#123;&#123;计算属性&#125;&#125;</code></li></ul><p>缓存特性：</p><ul><li>能够一定程度上提升性能，计算属性会对计算出来的结果进行缓存，再次使用时直接读取缓存，如果依赖项发生了变化，会自动计算新的结果并再次缓存</li></ul><h4 id="methods方法"><a href="#methods方法" class="headerlink" title="methods方法"></a>methods方法</h4><p>功能：封装了处理业务逻辑，给实例提供一个方法</p><p>语法：</p><ul><li>写在<code>methods</code>配置项中</li><li>作为方法，需要调用<code>this.方法名()</code>或者<code>@事件名=方法名</code></li></ul><h3 id="计算属性完整写法"><a href="#计算属性完整写法" class="headerlink" title="计算属性完整写法"></a>计算属性完整写法</h3><p>上述是计算属性的简写，这种情况下只能访问，不能修改属性，如果要修改属性，则需要写计算属性的完整写法</p><p><strong>计算属性的完整写法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">计算属性名:&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">代码逻辑（数据计算逻辑）</span><br><span class="line">return 结果</span><br><span class="line">&#125;,</span><br><span class="line">set()&#123;</span><br><span class="line">代码逻辑（数据修改逻辑）</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">lastName</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>=&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入新的名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputName&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;alertName&quot;</span>&gt;</span>改名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">firstName</span>: <span class="string">&quot;李&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lastName</span>: <span class="string">&quot;白&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">inputName</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alertName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">name</span> = <span class="variable language_">this</span>.<span class="property">inputName</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//修改赋值时，value极为传入的新赋予的值</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">firstName</span> = value.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">lastName</span> = value.<span class="title function_">substring</span>(<span class="number">1</span>, value.<span class="property">length</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="watch监听器"><a href="#watch监听器" class="headerlink" title="watch监听器"></a>watch监听器</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>功能：监视一些数据变化，执行相应的业务逻辑或者异步操作</p><p>应用场景分析：在线翻译栏，左边用户输入内容，右边会实时显示翻译内容</p><p>语法：</p><ul><li><p>简单写法：监听简单类型数据</p></li><li><p>完整写法：需要添加额外的配置</p></li></ul><h3 id="简单写法"><a href="#简单写法" class="headerlink" title="简单写法"></a>简单写法</h3><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例--&gt;</span></span><br><span class="line">data:&#123;</span><br><span class="line">words:&quot;苹果&quot;,</span><br><span class="line">obj:&#123;</span><br><span class="line">words:&quot;苹果&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--监视器--&gt;</span></span><br><span class="line">watch:&#123;</span><br><span class="line">//数据变化时会触发对应的操作</span><br><span class="line">//newValue为新值，oldValue为老值</span><br><span class="line">数据属性名(newValue,oldValue)&#123;</span><br><span class="line">对应数据变化的业务逻辑或者异步操作</span><br><span class="line">&#125;,</span><br><span class="line">&#x27;对象.属性名&#x27;(newValue,oldValue)&#123;</span><br><span class="line">对应数据变化的业务逻辑或者一部操作</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>输入内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;words&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>翻译内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;translateWords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">words</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">translateWords</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">words</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">translateWords</span> = newValue.<span class="title function_">toUpperCase</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如何是调用后端API接口进行相关的操作，这时候要注意性能的影响，采取<strong>防抖</strong>，来避免频繁触发调用</p><h3 id="完整写法"><a href="#完整写法" class="headerlink" title="完整写法"></a>完整写法</h3><p>完整写法需要额外配置项</p><ul><li>deep:true，对复杂数据类型深度监视 ，</li><li>immediate:true，初始化立刻执行一次handler方法</li></ul><p>应用场景分析：仍然是文本翻译场景，但是，不仅用户输入内容，实时显示当前文本翻译结果，当用户切换语言类型时，也需要翻译当前文本内容，这时就需要同时监听一个对象的多个属性</p><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">obj:&#123;</span><br><span class="line">words:&quot;苹果&quot;,</span><br><span class="line">lang:&quot;En&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">数据属性名:&#123;</span><br><span class="line">deep:true,</span><br><span class="line">handler(newValue)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;transObj.lang&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;大写&quot;</span>&gt;</span>大写<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;小写&quot;</span>&gt;</span>小写<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>输入内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;transObj.words&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>翻译内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;translateWords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">transObj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">words</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">lang</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">translateWords</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">transObj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">handler</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (newValue.<span class="property">lang</span> == <span class="string">&quot;大写&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">translateWords</span> = newValue.<span class="property">words</span>.<span class="title function_">toUpperCase</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newValue.<span class="property">lang</span> == <span class="string">&quot;小写&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">translateWords</span> = newValue.<span class="property">words</span>.<span class="title function_">toLowerCase</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="综合案例：购物车"><a href="#综合案例：购物车" class="headerlink" title="综合案例：购物车"></a>综合案例：购物车</h2><p>实现下图中的购物车功能</p><p><img src="/2025/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/02%20vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-02/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A802/image-20250403164138551.png" alt="image-20250403164138551" style="zoom:50%;"></p><p>功能分析：</p><ul><li>页面列表渲染：<code>v-for</code></li><li>删除功能</li><li>修改个数</li><li>全选反选</li><li>统计选中商品的数目和总价：<code>computed</code>属性</li><li>持久化到本地：<code>localStorage</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cart</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.total</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.total</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#0056b3</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.delete</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#dc3545</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.delete</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#c82333</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://via.placeholder.com/100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Logo&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;goods.length&gt;0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>选中<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>个数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>小计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>没有商品，购物车为空<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in goods&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.checked&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://via.placeholder.com/50&quot;</span> <span class="attr">:alt</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;item.num&lt;0&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;item.num=1&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;item.num+=1&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price*item.num&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line">        总价：<span class="tag">&lt;<span class="name">span</span>&gt;</span>¥&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>全选:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isAll&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>结算&#123;&#123;totalNum&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> defaultArr = []</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// goods: [&#123; id: 1, name: &quot;火龙果&quot;, price: 6, num: 2, checked: false &#125;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#123; id: 2, name: &quot;草莓&quot;, price: 7, num: 1, checked: false &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//从本地存储读取，如果为空，则用默认值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">goods</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;goods&quot;</span>)) || defaultArr</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">totalPrice</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (item.<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> sum + item.<span class="property">price</span> * item.<span class="property">num</span></span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> sum</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="title function_">totalNum</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (item.<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> sum + item.<span class="property">num</span></span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> sum</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isAll</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="property">length</span>; index++) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">goods</span>[index].<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">goods</span>.<span class="property">length</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              item.<span class="property">checked</span> = value</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">del</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">goods</span> = <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> != id)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//数据持久化，localstorage</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">goods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">handler</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;goods&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(newValue))</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue入门02&quot;&gt;&lt;a href=&quot;#Vue入门02&quot; class=&quot;headerlink&quot; title=&quot;Vue入门02&quot;&gt;&lt;/a&gt;Vue入门02&lt;/h1&gt;&lt;h2 id=&quot;指令补充&quot;&gt;&lt;a href=&quot;#指令补充&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="vue" scheme="https://bangwu2001.github.io/categories/vue/"/>
    
    
    <category term="前端" scheme="https://bangwu2001.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue快速入门</title>
    <link href="https://bangwu2001.github.io/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/"/>
    <id>https://bangwu2001.github.io/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/</id>
    <published>2025-03-30T04:18:42.000Z</published>
    <updated>2025-03-30T03:25:24.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue快速入门"><a href="#Vue快速入门" class="headerlink" title="Vue快速入门"></a>Vue快速入门</h1><h2 id="vue基本概念"><a href="#vue基本概念" class="headerlink" title="vue基本概念"></a>vue基本概念</h2><p><a href="https://cn.vuejs.org/">vue</a>是一个用于构建用户界面的渐进式<code>JavaScript</code>框架</p><h3 id="创建Vue实例并初始化渲染"><a href="#创建Vue实例并初始化渲染" class="headerlink" title="创建Vue实例并初始化渲染"></a>创建Vue实例并初始化渲染</h3><ol><li>准备容器，即Vue所管理的元素范围</li><li>引包，可以从官方文档找到引用的链接地址（开发版本/生产版本）</li><li>创建实例</li><li>添加配置，完成渲染</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--准备容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里会编写用于渲染的代码逻辑--&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//实例化对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,<span class="comment">//通过el配置选择器，指定挂载点，即Vue管理的元素范围</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123; <span class="comment">//data提供渲染的数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:<span class="string">&quot;hello world!!!&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><p>插值表达式<code>&#123;&#123;表达式&#125;&#125;</code>是一种<code>Vue</code>的模板语法，利用表达式进行插值，可以把对应的数据渲染到页面，这里面的表达式可以是被求值的代码，<code>JS</code>引擎会将其进行算法得出结果</p><p>使用插值表达式应注意的点：</p><ul><li>使用的数据必须存在，在<code>vue</code>对象的<code>data</code>中能够找的到</li><li>只支持表达式，而非语句，比如<code>if</code>、<code>for</code>等不支持</li><li>不能在标签的属性中使用插值表达式，一般是用于标签的文本位置用于展示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;userName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;userName.toUpperCase()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&gt;=18?&quot;成年&quot;:&quot;未成年&quot;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">userName</span>:<span class="string">&quot;bob&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&quot;李白&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>:<span class="number">27</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue核心特性：响应式"><a href="#Vue核心特性：响应式" class="headerlink" title="Vue核心特性：响应式"></a>Vue核心特性：响应式</h3><p>响应式：数据发生变化，视图自动更新</p><p>本质上是数据改变，vue底层会监听到数据修改，然后进行相关的dom操作，来自动更新视图</p><ul><li><p>访问数据里面的属性值：对象.属性名</p></li><li><p>修改数据：对象.属性名=新值</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;change&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>变换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&quot;hello word&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//改变message的值</span></span></span><br><span class="line"><span class="language-javascript">      app.<span class="property">message</span> = <span class="string">&quot;we are family&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue开发者工具"><a href="#Vue开发者工具" class="headerlink" title="Vue开发者工具"></a>Vue开发者工具</h3><p><a href="https://devtools.vuejs.org/">Vue DevTools</a> 是一个插件，能够方便开发者调试Vue应用</p><p>安装：通过谷歌应用商店安装（国内可以在 <a href="https://chrome.zzzmh.cn/index">极简插件</a>上下载）</p><p><img src="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/image-20250329214623757.png" alt="image-20250329214623757"></p><p>安装之后在浏览器页面右击检查，可以看到对用选项</p><p><img src="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/image-20250329221240760.png" alt="image-20250329221240760"></p><h2 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h2><p><code>Vue</code>会根据不同的指令，针对标签实现不同的功能</p><p>指令：带有<code>v-</code>前缀的特殊标签属性</p><p>常见的指令参照<a href="https://v2.cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4">官方文档</a></p><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>相当于<code>innerHtml</code>能够对表达式进行解析</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>功能：根据表达式真假，控制元素的显示与隐藏</p><p>语法：<code>v-show=&quot;表达式&quot;</code>，表达式值为<code>true</code>显示，<code>false</code>隐藏</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>功能：根据表达式真假，控制元素的显示与隐藏（条件渲染）</p><p>语法：<code>v-if=&quot;表达式&quot;</code>，表达式值为<code>true</code>显示，<code>false</code>隐藏</p><p><strong>v-show &amp; v-if的区别</strong></p><p><code>v-show</code>是通过<code>display</code>属性来控制元素的显示与隐藏，而<code>v-if</code>是通过条件渲染来实现的</p><p>当表达式值为<code>false</code>时，两者都会使元素不显示，但是存在区别：</p><ul><li><code>v-if</code>此时是通过<code>display=none</code>来不显示元素</li><li><code>v-if</code>此时通过移除元素来实现隐藏</li></ul><p>所以<code>v-show</code>适用于频繁切换隐藏的场景，因为<code>v-if</code>会根据表达式值不断创建和销毁元素，更加耗费性能</p><p>不频繁切换的场景建议使用<code>v-if</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>v-show控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>v-if控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/image-20250329224148152.png" alt="image-20250329224148152"></p><h3 id="v-else和v-else-if"><a href="#v-else和v-else-if" class="headerlink" title="v-else和v-else-if"></a>v-else和v-else-if</h3><p>两者是辅助<code>v-if</code>来进行条件渲染，适用于多条件判断场景</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据分数值显示不同的文字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;score&gt;=90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=60&quot;</span>&gt;</span>合格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-else</span>&gt;</span>不合格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">score</span>: <span class="number">90</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>功能：注册事件，即添加监听+提供处理逻辑</p><p> 语法：</p><ul><li><p>v-on:事件名=”内联语句”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>&#123;&#123;score&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点击按钮 score值会加一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;score++&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">score</span>: <span class="number">90</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-on:事件名=”mehods中的方法名”</p></li><li><p>简写：@事件名=xxx</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>&#123;&#123;score&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点击按钮 score值会加一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">score</span>: <span class="number">90</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;<span class="comment">//mehods里面提供Vue实例的所有方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">score</span>--</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>v-on指令可以调用传参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-on:click=方法名(参数1,参数2)</span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>功能：动态的设置html标签的属性值，比如<code>src</code>、<code>title</code>、<code>color</code>等</p><p>语法：<code>v-bind:属性名=&quot;表达式&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; color: color &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>&#123;&#123;score&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--按钮改变div文本颜色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;red&quot;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;green&quot;</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">score</span>: <span class="number">90</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">color</span>: <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;<span class="comment">//mehods里面提供Vue实例的所有方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">score</span>--</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">red</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">color</span> = <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">green</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">color</span> = <span class="string">&quot;green&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>功能：基于数据循环，多次渲染整个元素</p><p> 语法：</p><ul><li>遍历数组<ul><li><code>v-for=&quot;(item,index) in 数组&quot;</code></li><li><code>v-for=&quot;item in 数组&quot;</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--显示所有图片--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;item&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in imageList&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">imageList</span>: [<span class="string">&quot;./imgs/10-01.png&quot;</span>, <span class="string">&quot;./imgs/10-02.png&quot;</span></span></span><br><span class="line"><span class="language-javascript">          , <span class="string">&quot;./imgs/11-00.gif&quot;</span>, <span class="string">&quot;./imgs//11-01.gif&quot;</span>, <span class="string">&quot;./imgs/11-03.gif&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;./imgs/11-04.png&quot;</span>, <span class="string">&quot;./imgs/11-05.png&quot;</span></span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">index</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;<span class="comment">//mehods里面提供Vue实例的所有方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in bookList&quot;</span>&gt;</span></span><br><span class="line">        《&#123;&#123;item.name&#125;&#125;》--&#123;&#123;item.author&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bookList</span>: [&#123; <span class="string">&quot;id&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;曹雪芹&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;吴承恩&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">2</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;施耐庵&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">3</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;罗贯中&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;<span class="comment">//mehods里面提供Vue实例的所有方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">del</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">bookList</span> = <span class="variable language_">this</span>.<span class="property">bookList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> != id)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/v-for.gif" alt="v-for.gif"></p><h4 id="v-for中的key"><a href="#v-for中的key" class="headerlink" title="v-for中的key"></a>v-for中的key</h4><p>key的作用：给元素添加唯一标识，便于Vue进行列表项的正确排序复用</p><p>语法：<code>v-for=xxx :key=xxx</code></p><p>注意：</p><ul><li>key的值只能是字符串或者数字类型</li><li>key的值必须具有唯一性</li><li>推荐使用id作为key，不推荐使用index作为key（因为index可能会发生变化，不对应）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in bookList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        《&#123;&#123;item.name&#125;&#125;》--&#123;&#123;item.author&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bookList</span>: [&#123; <span class="string">&quot;id&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;曹雪芹&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;吴承恩&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">2</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;施耐庵&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">3</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;罗贯中&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;<span class="comment">//mehods里面提供Vue实例的所有方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">del</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">bookList</span> = <span class="variable language_">this</span>.<span class="property">bookList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> != id)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>功能：给表单元素使用，双向数据绑定，便于快速获取或设置表单元素内容</p><ul><li>数据变化了，视图自动更新</li><li>视图变化了，数据自动更新</li></ul><p>语法：<code>v-model=变量</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.pwd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:&#123;&#123;user.name&#125;&#125;,密码:&#123;&#123;user.pwd&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">pwd</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="综合案例—记事本"><a href="#综合案例—记事本" class="headerlink" title="综合案例—记事本"></a>综合案例—记事本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.notebook</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#d9534f</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.task-input</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">22px</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.add-task</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#d9534f</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.task-list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.task-list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.task-list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.delete-task</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#d9534f</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.task-count</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clear-tasks</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#5bc0de</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;notebook&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>记事本<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;task-input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入任务&quot;</span> <span class="attr">class</span>=<span class="string">&quot;task-input&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputTask&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;add-task&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;task-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item,index in taskList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;index+1&#125;&#125;. &#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;delete-task&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;task-count&quot;</span>&gt;</span>合计: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;taskList.length&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;clear-tasks&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>清空任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">inputTask</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">taskList</span>: []</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">taskList</span> = []</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">inputTask</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="property">length</span>, <span class="attr">text</span>: <span class="variable language_">this</span>.<span class="property">inputTask</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">inputTask</span> = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">del</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">taskList</span> = <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> != id)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/记事本.gif" alt="记事本"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue快速入门&quot;&gt;&lt;a href=&quot;#Vue快速入门&quot; class=&quot;headerlink&quot; title=&quot;Vue快速入门&quot;&gt;&lt;/a&gt;Vue快速入门&lt;/h1&gt;&lt;h2 id=&quot;vue基本概念&quot;&gt;&lt;a href=&quot;#vue基本概念&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="vue" scheme="https://bangwu2001.github.io/categories/vue/"/>
    
    
    <category term="前端" scheme="https://bangwu2001.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>node.js</title>
    <link href="https://bangwu2001.github.io/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/"/>
    <id>https://bangwu2001.github.io/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/</id>
    <published>2025-03-26T07:53:42.000Z</published>
    <updated>2025-03-30T03:26:05.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>node.js</code>是一个跨平台<code>javascript</code>运行环境，开发者可以搭建服务器端的<code>javascript</code>应用程序；<code>node.js</code>还可以进行前端工程化，对前端代码进行压缩、转译和整合，提高前端开发和运行效率。  </p><p> 所谓的前端工程化是指开发项目到上线，整个过程中集成的所有工具和技术，比如格式化工具、压缩工具、转换工具以及后续框架中用到的脚手架工具等。而<code>node.js</code>是前端工程化的基础（因为<code>node.js</code>可以主动读取前端代码内容）</p><p>浏览器之所以能够执行<code>js</code>代码，依靠的是内核中的<strong>V8引擎</strong>，而<code>node.js</code>是基于<strong>Chrome V8引擎</strong>进行封装的。但是注意<code>node.js</code>环境中没有<code>DOM</code>和<code>BOM</code>等对象</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接从<a href="https://nodejs.org/en/download/">官网</a>中选择需要的版本进行下载，下载本地之后按照正常软件安装步骤进行安装即可，最后记得添加环境变量，具体的安装教程可参考<a href="https://blog.csdn.net/WHF__/article/details/129362462">csdn</a>或其他博客。</p><p>最后在<code>cmd</code>中执行<code>node -v</code>可以验证是否成功安装</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250319221027028.png" alt="image-20250319221027028"></p><h2 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h2><p>在<code>node</code>环境下执行<code>js</code>代码，通过<code>node xxx.js</code>即可</p><p>编写简易<code>js</code>代码，在<code>node</code>环境下执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250319221734689.png" alt="image-20250319221734689"></p><h2 id="nodejs常用模块"><a href="#nodejs常用模块" class="headerlink" title="nodejs常用模块"></a>nodejs常用模块</h2><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><p> <code>fs</code>模块用于读写文件，封装了与本机文件系统进行交互的方法和属性</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li><p>加载<code>fs</code>模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>) <span class="comment">//fs是模块标识符（模块的名字）</span></span><br></pre></td></tr></table></figure></li><li><p>写入文件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;文件路径&quot;</span>,<span class="string">&quot;写入的内容&quot;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//写入后的回调函数</span></span><br><span class="line">    <span class="comment">//如果写入过程中出现了错误，err参数会有具体的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>读取文件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;文件路径&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//读取后的回调函数</span></span><br><span class="line">    <span class="comment">//data是文件内容的Buffer数据流,err是异常信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><strong>实例</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;./fn_write.txt&quot;</span>, <span class="string">&quot;nodejs fs模块写入文件&quot;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内容已将全部写入文件!!!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;./fn_write.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取失败&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250319225536809.png" alt="image-20250319225536809"></p><h3 id="Path模块"><a href="#Path模块" class="headerlink" title="Path模块"></a>Path模块</h3><p><code>node.js</code>中的<code>Path</code>模块主要用于路径处理</p><p>比如在<code>node.js</code>代码中，相对路径是根据终端所在路径去查找的，可能无法找到你想要的文件，而在代码中编写的相对路径通常是依据当前<code>js</code>文件所在的路径去查找的，所以在编写时尽量实用绝对路径，可以通过<code>__dirname</code>这个内置变量，获取当前<code>js</code>文件所在目录的绝对路径。</p><p><code>path.join()</code>会使用特定于平台的分隔符作为定界符，将所有给定的路径片段连接在一起</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前文件的绝对路径</span></span><br><span class="line"><span class="keyword">let</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;demo01.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath)</span><br></pre></td></tr></table></figure><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p><code>nodejs</code>的<code>http</code>模块可以用于创建web服务，并响应内容给浏览器</p><p><code>http</code>模块创建<code>web</code>服务的步骤：</p><ol><li>加载<code>http</code>模块，创建<code>web</code>服务对象</li><li>监听<code>request</code>请求事件，设置响应头和响应体</li><li>配置端口号，启动服务</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"><span class="comment">//创建web服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">//监听request事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain;charset=utf-8&quot;</span>)</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;欢迎访问由nodejs创建的web服务&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置端口号，启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&quot;8000&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;web服务启动...&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250325145500987.png" alt="image-20250325145500987"></p><h4 id="案例—基于web服务，开发提供网页资源功能"><a href="#案例—基于web服务，开发提供网页资源功能" class="headerlink" title="案例—基于web服务，开发提供网页资源功能"></a>案例—基于web服务，开发提供网页资源功能</h4><p>浏览器请求资源网页，后端响应指定网页内容，包括html标签、css样式和js等字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="comment">//创建web服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">//监听request事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">`request`</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span> == <span class="string">&quot;/random.html&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//请求对应的页面</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dst/random.html&quot;</span>), <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>)</span><br><span class="line">      res.<span class="title function_">end</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain;charset=utf-8&quot;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;访问的资源不存在&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&quot;8000&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;web服务启动...&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>dst/random.html</code>的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* background-color: antiquewhite; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.num</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div_button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;num&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div_button&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;start&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;end&quot;</span>&gt;</span>结束<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> numTag = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.num&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> startButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.start&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> endButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.end&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> intervalId;</span></span><br><span class="line"><span class="language-javascript">    startButton.<span class="title function_">addEventListener</span>(<span class="string">`click`</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> val = <span class="title class_">Number</span>(numTag.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">      intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        val += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        numTag.<span class="property">innerText</span> = val</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">50</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    endButton.<span class="title function_">addEventListener</span>(<span class="string">`click`</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (intervalId) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearInterval</span>(intervalId)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:8000/random.html</code>即可看到如下内容</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250325152705997.png" alt="image-20250325152705997"></p><h2 id="nodejs模块化"><a href="#nodejs模块化" class="headerlink" title="nodejs模块化"></a>nodejs模块化</h2><p>在<code>node.js</code>中，每个文件都被视为一个单独的模块，一个项目是由多个模块文件组成的</p><p>模块化的好处：提高代码的复用性、按需加载、独立作用域</p><h3 id="commonJS标准—导入和导出"><a href="#commonJS标准—导入和导出" class="headerlink" title="commonJS标准—导入和导出"></a>commonJS标准—导入和导出</h3><p>如何自定义模块供其他模块使用：</p><ul><li><p>需要按照标准语法（CommonJS标准）<strong>导出</strong>和<strong>导入</strong>进行使用</p></li><li><p>导出语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    对外属性名<span class="number">1</span>:xxx,</span><br><span class="line">    对外属性名<span class="number">2</span>:xxx,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>倒入语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;模块名或者路径&quot;</span>)</span><br><span class="line"><span class="comment">//如果是nodejs内置模块，直接写名字，比如fs、path、http等</span></span><br><span class="line"><span class="comment">//如果是自定义模块，则写模块文件路径</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>示例</strong></p><p>在<code>dst</code>目录下创建一个<code>utils.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://www.today.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num1, num2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: url,</span><br><span class="line">  <span class="string">&quot;add&quot;</span>: add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在另一个文件里去导入<code>utils.js</code>模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&quot;./dst/utils.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="property">url</span>)</span><br><span class="line"><span class="keyword">const</span> res = utils.<span class="title function_">add</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure><h3 id="ECMAScript标准—默认导出和导入"><a href="#ECMAScript标准—默认导出和导入" class="headerlink" title="ECMAScript标准—默认导出和导入"></a>ECMAScript标准—默认导出和导入</h3><p> 该标准的默认语法：</p><ul><li><p>导出语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    对外属性名<span class="number">1</span>:xxx,</span><br><span class="line">    对外属性名<span class="number">2</span>:xxx,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导入语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 变量名 <span class="keyword">from</span> <span class="string">&quot;模块名或者路径&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：</strong></p><p><code>nodejs</code>默认支持<code>commonjs</code>语法，如果需要使用<code>ECMAScript</code>标准语法，则需要在运行模块所在文件夹新建<code>package.json</code>文件，并设置<code>&#123;&quot;type&quot;:&quot;module&quot;&#125;</code></p><p><strong>示例:</strong></p><p><code>utils.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://www.today.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num1, num2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">&quot;baseurl&quot;</span>: url,</span><br><span class="line">  <span class="string">&quot;add&quot;</span>: add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>demo01.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">&quot;./dst/utils.js&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="property">baseurl</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="title function_">add</span>(<span class="number">20</span>, <span class="number">40</span>))</span><br></pre></td></tr></table></figure><p><code>package.json</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ECMAScript标准—命名导出和导入"><a href="#ECMAScript标准—命名导出和导入" class="headerlink" title="ECMAScript标准—命名导出和导入"></a>ECMAScript标准—命名导出和导入</h3><p>命名标准使用：</p><ul><li>导出：<code>export</code>修饰定义语句</li><li>导入：<code>import &#123;同名变量&#125; from 模块名或路径</code></li></ul><p>如何选择默认导入和导出以及命名导入和导出?</p><ul><li>按需加载，使用命名导入和导出</li><li>全部加载，使用默认导入和导出</li></ul><p><strong>示例:</strong></p><p><code>utils.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> url = <span class="string">&quot;https://www.today.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num1, num2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>demo01.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; url, add &#125; <span class="keyword">from</span> <span class="string">&quot;./dst/utils.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">20</span>, <span class="number">40</span>))</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>CommonJS标准：一般应用在<code>Node.js</code>项目环境中</li><li>ECMAScript标准：一般应用在前端工程化项目中</li></ul><h2 id="包的概念"><a href="#包的概念" class="headerlink" title="包的概念"></a>包的概念</h2><p>包：将模块、代码以及其他资料聚合成一个文件夹</p><p>包的分类：</p><ul><li>项目包：主要用于编写项目及其业务逻辑</li><li>软件包：封装工具和方法进行使用</li></ul><p>包的要求：在根目录下，必须有<code>package.json</code>文件（包的说明清单文件）</p><p><code>package.json</code>常见的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span>软件包的名称<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span>软件包当前的版本<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span>软件包的简短描述<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span>软件包的入口点<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span>软件包的作者<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span>软件包的许可证（商用后可以用作者名字宣传）</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意：导入软件包时，引入的默认时<code>index.js</code>模块文件/<code>main</code>属性指定的模块文件，该文件是包的唯一出口；该文件的作用是将所有其他模块的方法集中起来，统一向外暴露</p><p><strong>示例</strong></p><p>项目目录如下：</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250326005627881.png" alt="image-20250326005627881"></p><p><code>./lib/arr.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="keyword">function</span> (<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sum + val;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&quot;add&quot;</span>: add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>./lib/str.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">len</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">upp</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">toUpperCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&quot;len&quot;</span>: len,</span><br><span class="line">  <span class="string">&quot;upp&quot;</span>: upp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; add &#125; = <span class="built_in">require</span>(<span class="string">&quot;./lib/arr.js&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; len, upp &#125; = <span class="built_in">require</span>(<span class="string">&quot;./lib/str.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  add,</span><br><span class="line">  len,</span><br><span class="line">  upp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>test.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&quot;./utils&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="title function_">add</span>([<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="title function_">len</span>(<span class="string">&quot;hjj&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="title function_">upp</span>(<span class="string">&quot;klkljh&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="npm-—-软件包管理器"><a href="#npm-—-软件包管理器" class="headerlink" title="npm — 软件包管理器"></a>npm — 软件包管理器</h3><p><code>npm</code>是<code>node.js</code>标准的软件包管理器，安装<code>node.js</code>只会，<code>npm</code>工具也会一同被安装，它能够下载和管理<code>node.js</code>包依赖</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250326010255247.png" alt="image-20250326010255247"></p><p>如何使用<code>npm</code>来下载和管理包依赖：</p><ul><li><p>初始化清单文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">//该命令会自动生成package.json文件，如果当前项目存在该文件，则略过此命令</span><br><span class="line">//package.json里面除了记录前面介绍的那些内容外，还会记录当前项目下载了哪些包</span><br></pre></td></tr></table></figure></li><li><p>下载软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i 软件包名称  #下载对应的软件包</span><br></pre></td></tr></table></figure></li><li><p>使用软件包</p><ul><li>在项目需要的地方导入和使用相关的软件包及其模块</li></ul></li></ul><p><strong>示例：</strong></p><p>新建文件夹<code>npm_demo</code>，在该文件夹下执行<code>npm init -y</code>，会生成<code>package.json</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm_demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>下载第三方依赖<code>dayjs</code>，执行<code>npm i dayjs</code></p><p><code>package.json</code>文件中会记录当前项目下载的依赖包的名称和版本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm_demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dayjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.11.13&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>对应第三方包会下载在该项目下的<code>node_modules</code>文件夹下</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250326151732859.png" alt="image-20250326151732859"></p><p>在当前项目中导入第三方包，使用相关工具模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dayjs = <span class="built_in">require</span>(<span class="string">&quot;dayjs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="title function_">dayjs</span>().<span class="title function_">format</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date)</span><br></pre></td></tr></table></figure><h3 id="npm—安装所有的依赖"><a href="#npm—安装所有的依赖" class="headerlink" title="npm—安装所有的依赖"></a>npm—安装所有的依赖</h3><p>场景：从第三方得到的项目文件，里面有<code>package.json</code>文件，但是没有存储第三方依赖包的<code>node_modules</code>文件夹（这是因为用npm下载依赖比用磁盘传递拷贝要快得多），为了能够让项目成功运行起来，需要安装项目涉及到的所有第三方依赖</p><p>此时需要执行<code>npm i</code>命令，其会下载<code>package.json</code>中记录的所有软件包</p><h3 id="npm—全局软件包nodemon"><a href="#npm—全局软件包nodemon" class="headerlink" title="npm—全局软件包nodemon"></a>npm—全局软件包nodemon</h3><ul><li>本地软件包：当前项目内使用，封装了一些属性和方法，存在于项目目录下的<code>node_modules</code>文件夹</li><li>全局软件包：本机所有项目均可使用，封装了一些命令和工具，存在于系统设置的位置</li></ul><p><code>nodemon</code>的作用：替代<code>node</code>命令，检测代码更改，自动重启程序</p><p> <code>nodemon</code>的使用：</p><ul><li>安装：<code>npm i nodemon -g</code>，<code>-g</code>代表安装到全局环境</li><li>运行：<code>nodemon xxx.js</code>来执行目标<code>js</code>文件</li></ul><p>其能感知代码文件变化，自动重启程序</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250326153842673.png" alt="image-20250326153842673"></p><h3 id="删除软件包"><a href="#删除软件包" class="headerlink" title="删除软件包"></a>删除软件包</h3><p><code>npm uni 软件包名称</code></p><p>执行该命令后，会从<code>node_modules</code>中删除对应包依赖，并且会从<code>package.json</code>和<code>package-lock.json</code>这两个文件中删除相应的记录</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250326154811477.png" alt="image-20250326154811477"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;node-js&quot;&gt;&lt;a href=&quot;#node-js&quot; class=&quot;headerlink&quot; title=&quot;node.js&quot;&gt;&lt;/a&gt;node.js&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简</summary>
      
    
    
    
    <category term="nodeJs" scheme="https://bangwu2001.github.io/categories/nodeJs/"/>
    
    
    <category term="前端" scheme="https://bangwu2001.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>LLaMA2安装</title>
    <link href="https://bangwu2001.github.io/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/"/>
    <id>https://bangwu2001.github.io/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/</id>
    <published>2025-03-20T13:43:42.000Z</published>
    <updated>2025-03-20T14:21:25.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LLaMA2安装"><a href="#LLaMA2安装" class="headerlink" title="LLaMA2安装"></a><code>LLaMA2</code>安装</h1><p><code>LLaMA2</code>是<code>meta</code>开源的大预言模型，基于<code>transformer</code>架构实现。</p><p><a href="https://huggingface.co/meta-llama/Llama-2-7b-chat/tree/main">hugging Face</a> | <a href="https://modelscope.cn/models/shakechen/Llama-2-7b-chat/summary">modelscope</a></p><p>本文介绍如何利用可视化工具<code>text-generation-webui</code>来装载<code>llama2-7b-chat-hf</code>模型，并进行推理测试</p><h2 id="text-generation-webui"><a href="#text-generation-webui" class="headerlink" title="text-generation-webui"></a>text-generation-webui</h2><p><code>text-generation-webui</code>是一个基于<a href="https://gradio.hugging-face.cn/guides/quickstart">gradio</a>开源的<code>web</code>用户界面工具，旨在为大预言模型提供一个简单易用的交互平台</p><p><a href="https://github.com/oobabooga/text-generation-webui">text-generation-webui Github</a></p><h3 id="本地安装步骤"><a href="#本地安装步骤" class="headerlink" title="本地安装步骤"></a>本地安装步骤</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">step1 拉取github仓库</span></span><br><span class="line">git clone https://github.com/oobabooga/text-generation-webui.git</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换代码版本,最新版本的代码本地测试页面ui显示不完全，可能是部分依赖不匹配或者其他原因导致，所以切换到其他版本</span></span><br><span class="line">git checkout 1934cb6</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">step2 进入对应目录，按照要求创建对应的conda虚拟环境（虚拟环境里面应当提前安装了torch等常规依赖）,安装对应依赖</span></span><br><span class="line">pip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">step3 启动服务</span></span><br><span class="line">python server.py</span><br></pre></td></tr></table></figure><p>成功启动的运行结果为：</p><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250319204728764.png" alt="image-20250319204728764"></p><p>浏览器访问<code>http://127.0.0.1:7861</code>，界面为：</p><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250319204832941.png" alt="image-20250319204832941" style="zoom: 50%;"></p><h2 id="安装模型llama2-7b-chat-hf"><a href="#安装模型llama2-7b-chat-hf" class="headerlink" title="安装模型llama2-7b-chat-hf"></a>安装模型llama2-7b-chat-hf</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modelcope download --model shakechen/Llama-2-7b-chat-hf --local_dir &quot;./llama2&quot;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250319110304902.png" alt="image-20250319110304902"></p><h2 id="装载模型-amp-模型推理"><a href="#装载模型-amp-模型推理" class="headerlink" title="装载模型&amp;模型推理"></a>装载模型&amp;模型推理</h2><p>从<code>Github</code>上拉取的代码里面有一个<code>models</code>文件夹，将从<code>hugging face</code>或者<code>modelscope</code>上下载下来的模型文件复制到该目录下</p><p>然后从<code>web</code>页面选择模型进行加载</p><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250320093805796.png" alt="image-20250320093805796" style="zoom: 50%;"></p><p>然后点击<code>chat</code>选项卡，注意<code>chat</code>页面的<code>Mode</code>选择<code>instruct</code>，结果可以看出，<code>llama2</code>可以理解中文问题，但是回答都是英文的，效果一般，这是因为<code>LLaMA2</code>的训练语料中仅有<code>0.13%</code>的中文语料</p><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250320102034914.png" alt="image-20250320102034914"></p><p>利用<code>text-generation-webui</code>装载<code>chatGLM3</code>进行测试，步骤与上述相同，下载模型文件、复制到<code>models</code>目录、从页面选择模型进行装载、测试</p><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250320101628762.png" alt="image-20250320101628762" style="zoom:67%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LLaMA2安装&quot;&gt;&lt;a href=&quot;#LLaMA2安装&quot; class=&quot;headerlink&quot; title=&quot;LLaMA2安装&quot;&gt;&lt;/a&gt;&lt;code&gt;LLaMA2&lt;/code&gt;安装&lt;/h1&gt;&lt;p&gt;&lt;code&gt;LLaMA2&lt;/code&gt;是&lt;code&gt;meta&lt;/c</summary>
      
    
    
    
    <category term="llm" scheme="https://bangwu2001.github.io/categories/llm/"/>
    
    
    <category term="llm" scheme="https://bangwu2001.github.io/tags/llm/"/>
    
  </entry>
  
  <entry>
    <title>LLM本地部署流程</title>
    <link href="https://bangwu2001.github.io/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/"/>
    <id>https://bangwu2001.github.io/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/</id>
    <published>2025-03-20T13:43:42.000Z</published>
    <updated>2025-03-20T14:42:29.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LLM本地部署流程"><a href="#LLM本地部署流程" class="headerlink" title="LLM本地部署流程"></a>LLM本地部署流程</h1><p>下面以本地部署<code>chatglm3-6b</code>模型为例子，展示如何进行本地部署</p><p>本地的环境说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GPU NVIDIA GeForce RTX 3090</span><br><span class="line">CPU 12th Gen Intel(R) Core(TM) i7-12700KF</span><br><span class="line">内存 64.0 GB</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">accelerate==1.5.1</span><br><span class="line">aiofiles==23.2.1</span><br><span class="line">annotated-types==0.7.0</span><br><span class="line">anyio==4.8.0</span><br><span class="line">certifi==2025.1.31</span><br><span class="line">charset-normalizer==3.4.1</span><br><span class="line">click==8.1.8</span><br><span class="line">colorama==0.4.6</span><br><span class="line">cpm-kernels==1.0.11</span><br><span class="line">exceptiongroup==1.2.2</span><br><span class="line">fastapi==0.115.11</span><br><span class="line">ffmpy==0.5.0</span><br><span class="line">filelock==3.13.1</span><br><span class="line">fsspec==2024.6.1</span><br><span class="line">gradio==5.20.1</span><br><span class="line">gradio_client==1.7.2</span><br><span class="line">groovy==0.1.2</span><br><span class="line">h11==0.14.0</span><br><span class="line">httpcore==1.0.7</span><br><span class="line">httpx==0.28.1</span><br><span class="line">huggingface-hub==0.29.3</span><br><span class="line">idna==3.10</span><br><span class="line">intel-openmp==2021.4.0</span><br><span class="line">Jinja2==3.1.4</span><br><span class="line">latex2mathml==3.77.0</span><br><span class="line">Markdown==3.7</span><br><span class="line">markdown-it-py==3.0.0</span><br><span class="line">MarkupSafe==2.1.5</span><br><span class="line">mdtex2html==1.3.1</span><br><span class="line">mdurl==0.1.2</span><br><span class="line">mkl==2021.4.0</span><br><span class="line">mpmath==1.3.0</span><br><span class="line">networkx==3.3</span><br><span class="line">numpy==2.1.2</span><br><span class="line">orjson==3.10.15</span><br><span class="line">packaging==24.2</span><br><span class="line">pandas==2.2.3</span><br><span class="line">pillow==11.0.0</span><br><span class="line">protobuf==6.30.0</span><br><span class="line">psutil==7.0.0</span><br><span class="line">pydantic==2.10.6</span><br><span class="line">pydantic_core==2.27.2</span><br><span class="line">pydub==0.25.1</span><br><span class="line">Pygments==2.19.1</span><br><span class="line">python-dateutil==2.9.0.post0</span><br><span class="line">python-multipart==0.0.20</span><br><span class="line">pytz==2025.1</span><br><span class="line">PyYAML==6.0.2</span><br><span class="line">regex==2024.11.6</span><br><span class="line">requests==2.32.3</span><br><span class="line">rich==13.9.4</span><br><span class="line">ruff==0.9.10</span><br><span class="line">safehttpx==0.1.6</span><br><span class="line">safetensors==0.5.3</span><br><span class="line">semantic-version==2.10.0</span><br><span class="line">sentencepiece==0.2.0</span><br><span class="line">shellingham==1.5.4</span><br><span class="line">six==1.17.0</span><br><span class="line">sniffio==1.3.1</span><br><span class="line">starlette==0.46.1</span><br><span class="line">sympy==1.13.1</span><br><span class="line">tbb==2021.11.0</span><br><span class="line">tokenizers==0.19.1</span><br><span class="line">tomlkit==0.13.2</span><br><span class="line">torch==2.3.0+cu121</span><br><span class="line">torchaudio==2.3.0+cu121</span><br><span class="line">torchvision==0.18.0+cu121</span><br><span class="line">tqdm==4.67.1</span><br><span class="line">transformers==4.40.1</span><br><span class="line">transformers_modules==0.4.0</span><br><span class="line">typer==0.15.2</span><br><span class="line">typing_extensions==4.12.2</span><br><span class="line">tzdata==2025.1</span><br><span class="line">urllib3==2.3.0</span><br><span class="line">uvicorn==0.34.0</span><br><span class="line">websockets==15.0.1</span><br></pre></td></tr></table></figure><h2 id="模型权重文件下载"><a href="#模型权重文件下载" class="headerlink" title="模型权重文件下载"></a>模型权重文件下载</h2><h3 id="方案一：Hugging-Face"><a href="#方案一：Hugging-Face" class="headerlink" title="方案一：Hugging Face"></a>方案一：Hugging Face</h3><p><a href="https://huggingface.co/">Hugging Face</a></p><ul><li>优点：能找到最新的模型和数据</li><li>缺点：国外网站、不稳定、下载速度慢、可能会失败</li></ul><h4 id="下载方法"><a href="#下载方法" class="headerlink" title="下载方法"></a>下载方法</h4><h5 id="手动下载"><a href="#手动下载" class="headerlink" title="手动下载"></a>手动下载</h5><p>进入官网，查找对应模型，进入页面，逐个点击文件下载，这种方法比较耗时和费力</p><p><img src="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/image-20250311171312881.png" alt="image-20250311171312881"></p><h5 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h5><p><strong>安装依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install huggingface_hub</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果速度比较慢，可以尝试国内镜像</span></span><br><span class="line">pip install huggingface_hub -i https://pypi.tuna.tsinghua.edu.cn/simple  #清华源</span><br><span class="line">pip install huggingface_hub -i http://pypi.douban.com/simple/  #豆瓣源</span><br></pre></td></tr></table></figure><p><strong>下载代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">模型下载</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from huggingface_hub import snapshot_download</span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    #指定对应模型</span><br><span class="line">    repo_id = &quot;THUDM/chatglm3-6b&quot;</span><br><span class="line">    #本地存储路径</span><br><span class="line">    local_dir = &quot;./modelroot/chatglm-6b&quot;</span><br><span class="line">    #下载</span><br><span class="line">    snapshot_download(repo_id=repo_id,local_dir=local_dir)</span><br></pre></td></tr></table></figure><p><code>repo_id</code>从如下位置复制</p><p><img src="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/image-20250311171832319.png" alt="image-20250311171832319"></p><h3 id="方案二：阿里魔塔社区"><a href="#方案二：阿里魔塔社区" class="headerlink" title="方案二：阿里魔塔社区"></a>方案二：阿里魔塔社区</h3><p><a href="https://modelscope.cn/home">ModelScope</a></p><ul><li>优点：国内镜像，速度比国外快一些</li><li>缺点：可能有的模型未及时同步，不是最新版本</li></ul><p>同样可以手动和代码下载，手动下载直接点击对应文件即可，下面介绍代码下载，可参考<a href="https://modelscope.cn/docs/home">官方文档</a></p><p><strong>安装依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install modelscope</span><br></pre></td></tr></table></figure><p><strong>下载代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式一：命令行的方式下载</span></span><br><span class="line">modelscope download --model=<span class="string">&quot;模型名称&quot;</span> --local_dir=<span class="string">&quot;本地存储路径&quot;</span></span><br><span class="line"><span class="comment">#方式二：SDK方式下载</span></span><br><span class="line"><span class="keyword">from</span> modelscope <span class="keyword">import</span> snapshot_download</span><br><span class="line">model_dir = snapshot_download(<span class="string">&quot;模型名称&quot;</span>)</span><br></pre></td></tr></table></figure><p>模型名称就是对应的仓库名称，查看方法为：</p><p><img src="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/image-20250312095837826.png" alt="image-20250312095837826" style="zoom:67%;"></p><p><img src="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/image-20250312100413736.png" alt="image-20250312100413736" style="zoom: 67%;"></p><h2 id="模型的加载和推理"><a href="#模型的加载和推理" class="headerlink" title="模型的加载和推理"></a>模型的加载和推理</h2><p>具体步骤可以参照对应模型仓库首页</p><p><a href="https://huggingface.co/THUDM/chatglm3-6b">hugging Face</a>  <a href="https://modelscope.cn/models/ZhipuAI/chatglm3-6b/summary">modelScope</a>，注册阿里魔塔社区，可以免费获得36小时的GPU算力</p><p>安装依赖时，<code>transformers</code>需要指定如下版本，否在会报错，具体问题参考<a href="https://github.com/chatchat-space/Langchain-Chatchat/issues/3915">issue</a></p><p><code>torch</code>版本要与本地的<code>cuda</code>版本要匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主要依赖安装</span></span><br><span class="line">pip install transformers==4.40.1</span><br><span class="line">pip install torch==2.3.0 torchvision==0.18.0 torchaudio==2.3.0 --index-url https://download.pytorch.org/whl/cu121</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#推理代码</span></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer,AutoModel</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start!!!&quot;</span>)</span><br><span class="line">model_path = <span class="string">&quot;D:\software\llm\code\THUDM\chatglm3-6b&quot;</span></span><br><span class="line"></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_path,trust_remote_code=<span class="literal">True</span>)</span><br><span class="line">model = AutoModel.from_pretrained(model_path,trust_remote_code=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">model.to(device)</span><br><span class="line">model = model.to(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line"></span><br><span class="line">model = model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    prompt = <span class="built_in">input</span>(<span class="string">&quot;please input your question,enter q exists:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> prompt==<span class="string">&quot;q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    response,history = model.chat(tokenizer,prompt,history=[])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A:&quot;</span>+response)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/image-20250313110550843.png" alt="image-20250313110550843"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LLM本地部署流程&quot;&gt;&lt;a href=&quot;#LLM本地部署流程&quot; class=&quot;headerlink&quot; title=&quot;LLM本地部署流程&quot;&gt;&lt;/a&gt;LLM本地部署流程&lt;/h1&gt;&lt;p&gt;下面以本地部署&lt;code&gt;chatglm3-6b&lt;/code&gt;模型为例子，展示如何进</summary>
      
    
    
    
    <category term="llm" scheme="https://bangwu2001.github.io/categories/llm/"/>
    
    
    <category term="llm" scheme="https://bangwu2001.github.io/tags/llm/"/>
    
  </entry>
  
  <entry>
    <title>Qwen-VL模型部署</title>
    <link href="https://bangwu2001.github.io/2025/03/20/llm/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/"/>
    <id>https://bangwu2001.github.io/2025/03/20/llm/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/</id>
    <published>2025-03-20T13:43:42.000Z</published>
    <updated>2025-03-20T14:43:15.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qwen-VL模型部署"><a href="#Qwen-VL模型部署" class="headerlink" title="Qwen-VL模型部署"></a>Qwen-VL模型部署</h1><p><strong>Qwen-VL</strong> 是阿里云研发的大规模视觉语言模型（Large Vision Language Model, LVLM）。Qwen-VL 可以以图像、文本、检测框作为输入，并以文本和检测框作为输出。本文主要介绍本地如何安装部署其量化版本模型<code>Qwen-VL_Chat-Int4</code></p><p>参考资料:</p><p><a href="https://huggingface.co/Qwen/Qwen-VL-Chat-Int4">Hugging Face</a>   |  <a href="https://modelscope.cn/models/Qwen/Qwen-VL-Chat-Int4">modelscope</a></p><h2 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建存储目录</span></span><br><span class="line">mkdir &quot;Qwen/Qwen-VL-Chat-Int4&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载模型到指定目录</span></span><br><span class="line">modelscope download --model &quot;Qwen/Qwen-VL-Chat-Int4&quot; --local_dir &quot;./Qwen/Qwen-VL-Chat-Int4&quot;</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#本机使用的torch版本为</span><br><span class="line">pip install torch==2.3.0 torchvision==0.18.0 torchaudio==2.3.0 --index-url https://download.pytorch.org/whl/cu121</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#下载的模型文件里面有一个依赖列表 requirements.txt</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install optimum</span><br><span class="line"></span><br><span class="line">git clone https://github.com/JustinLin610/AutoGPTQ.git &amp; cd AutoGPTQ</span><br><span class="line">pip install -v .</span><br></pre></td></tr></table></figure><p>其中用于大模型量化的工具<a href="https://github.com/JustinLin610/AutoGPTQ">autogptq</a>，可以使用如下方式进行快速安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install auto-gptq</span><br></pre></td></tr></table></figure><p>安装之后出现依赖问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cannot import name ‘Cache‘ from ‘transformers‘</span><br></pre></td></tr></table></figure><p>原因在于<code>transformers</code>和<code>peft</code>两者版本不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#解决办法</span><br><span class="line">peft==0.10.0</span><br><span class="line">transformers==4.37.2</span><br></pre></td></tr></table></figure><h2 id="模型推理"><a href="#模型推理" class="headerlink" title="模型推理"></a>模型推理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForCausalLM, AutoTokenizer</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.manual_seed(<span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: The default behavior now has injection attack prevention off.</span></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(<span class="string">&quot;Qwen/Qwen-VL-Chat-Int4&quot;</span>, trust_remote_code=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use cuda device</span></span><br><span class="line">model = AutoModelForCausalLM.from_pretrained(<span class="string">&quot;Qwen/Qwen-VL-Chat-Int4&quot;</span>, device_map=<span class="string">&quot;cuda&quot;</span>, trust_remote_code=<span class="literal">True</span>).<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1st dialogue turn</span></span><br><span class="line">query = tokenizer.from_list_format([</span><br><span class="line">    &#123;<span class="string">&#x27;image&#x27;</span>: <span class="string">&#x27;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#x27;</span>&#125;,<span class="comment">#如果想要分析本地图片，直接将这个链接改为本地的路径即可</span></span><br><span class="line">    &#123;<span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;这是什么&#x27;</span>&#125;,</span><br><span class="line">])</span><br><span class="line">response, history = model.chat(tokenizer, query=query, history=<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="comment"># 图中是一名年轻女子在沙滩上和她的狗玩耍，狗的品种可能是拉布拉多。她们坐在沙滩上，狗的前腿抬起来，似乎在和人类击掌。两人之间充满了信任和爱。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2nd dialogue turn</span></span><br><span class="line">response, history = model.chat(tokenizer, <span class="string">&#x27;输出&quot;击掌&quot;的检测框&#x27;</span>, history=history)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="comment"># &lt;ref&gt;击掌&lt;/ref&gt;&lt;box&gt;(517,508),(589,611)&lt;/box&gt;</span></span><br><span class="line">image = tokenizer.draw_bbox_on_latest_picture(response, history)</span><br><span class="line"><span class="keyword">if</span> image:</span><br><span class="line">  image.save(<span class="string">&#x27;1.jpg&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;no box&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://modelscope.cn/models/Qwen/Qwen-VL-Chat-Int4/feedback/issueDetail/25169">中间出现问题的解决方法</a></p><p>最终推理的结果：</p><p><img src="/2025/03/20/llm/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/5761433e-b4c5-4d1d-b7d5-cd020d2ee86b.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Qwen-VL模型部署&quot;&gt;&lt;a href=&quot;#Qwen-VL模型部署&quot; class=&quot;headerlink&quot; title=&quot;Qwen-VL模型部署&quot;&gt;&lt;/a&gt;Qwen-VL模型部署&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Qwen-VL&lt;/strong&gt; 是阿里云研发的大规</summary>
      
    
    
    
    <category term="llm" scheme="https://bangwu2001.github.io/categories/llm/"/>
    
    
    <category term="llm" scheme="https://bangwu2001.github.io/tags/llm/"/>
    
  </entry>
  
  <entry>
    <title>Stable Diffusion模型部署</title>
    <link href="https://bangwu2001.github.io/2025/03/20/llm/Stable%20Diffusion%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/Stable%20Diffusion%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/"/>
    <id>https://bangwu2001.github.io/2025/03/20/llm/Stable%20Diffusion%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/Stable%20Diffusion%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/</id>
    <published>2025-03-20T13:43:42.000Z</published>
    <updated>2025-03-20T14:43:52.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stable-Diffusion模型部署"><a href="#Stable-Diffusion模型部署" class="headerlink" title="Stable Diffusion模型部署"></a>Stable Diffusion模型部署</h1><p>多模态应用能够对文本、图像、音频和视频等不同模态数据进行整合，学习不同模态之间的关联，实现文本、音频和视频之间的相互转换和生成</p><p><a href="https://stabledifffusion.com/">Stable Diffusion</a>是<code>Stability AI</code>开发的开源AI绘画工具，它能够根据文本的描述生成精细图像，也可实现图像反推功能，即输入一张图片，可以提取图像关键信息，转换为一段描述该图的文字，即可实现<code>文生图</code>和<code>图生文</code></p><p>本文主要介绍如何本地借助<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">stable-diffusion-webui</a>来部署<code>stable diffusion</code>模型，`s</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>创建<code>python</code>虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n stable-diffusion python=3.10.6</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拉取仓库代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到历史稳定版本</span></span><br><span class="line">git checkout bef51ae</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>从魔塔社区下载模型权重文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;./models/Stable-diffusion&quot;</span><br><span class="line">modelscope download --model AI-ModelScope/stable-diffusion-2-1 --local_dir &quot;./&quot;</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python launch.py --no-half</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--no-half 作用是禁用半精度，如果不禁用可能会报错NansException:A tensor with all NaNs was produced <span class="keyword">in</span> Une</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>访问<a href="http://127.0.0.1:7861/">http://127.0.0.1:7861/</a> 即可看到对应的<code>webui</code></p><p>可以在页面调整采样步骤、生成的图片宽高等信息，采样步骤越大，图片大小越大，生成的图片会越清晰、质量也会越好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Stable-Diffusion模型部署&quot;&gt;&lt;a href=&quot;#Stable-Diffusion模型部署&quot; class=&quot;headerlink&quot; title=&quot;Stable Diffusion模型部署&quot;&gt;&lt;/a&gt;Stable Diffusion模型部署&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="llm" scheme="https://bangwu2001.github.io/categories/llm/"/>
    
    
    <category term="llm" scheme="https://bangwu2001.github.io/tags/llm/"/>
    
  </entry>
  
  <entry>
    <title>Gradio入门</title>
    <link href="https://bangwu2001.github.io/2025/03/20/llm/gradio%E5%85%A5%E9%97%A8/gradio%E5%85%A5%E9%97%A8/"/>
    <id>https://bangwu2001.github.io/2025/03/20/llm/gradio%E5%85%A5%E9%97%A8/gradio%E5%85%A5%E9%97%A8/</id>
    <published>2025-03-20T13:43:42.000Z</published>
    <updated>2025-03-20T13:41:40.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradio入门"><a href="#Gradio入门" class="headerlink" title="Gradio入门"></a>Gradio入门</h1><p><a href="https://gradio.hugging-face.cn/guides/quickstart">官方文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Gradio入门&quot;&gt;&lt;a href=&quot;#Gradio入门&quot; class=&quot;headerlink&quot; title=&quot;Gradio入门&quot;&gt;&lt;/a&gt;Gradio入门&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://gradio.hugging-face.cn/guides</summary>
      
    
    
    
    <category term="llm" scheme="https://bangwu2001.github.io/categories/llm/"/>
    
    
    <category term="llm" scheme="https://bangwu2001.github.io/tags/llm/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bangwu2001.github.io/2024/09/12/NDSS/"/>
    <id>https://bangwu2001.github.io/2024/09/12/NDSS/</id>
    <published>2024-09-12T15:04:15.961Z</published>
    <updated>2024-09-12T15:08:53.654Z</updated>
    
    <content type="html"><![CDATA[<iframe src="_Response_NDSS_2025.pdf" style="width:100%; height:600px;" frameborder="0"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;_Response_NDSS_2025.pdf&quot; style=&quot;width:100%; height:600px;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zookeeper使用</title>
    <link href="https://bangwu2001.github.io/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/"/>
    <id>https://bangwu2001.github.io/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/</id>
    <published>2024-07-21T15:56:42.000Z</published>
    <updated>2024-07-21T15:56:06.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper使用"><a href="#Zookeeper使用" class="headerlink" title="Zookeeper使用"></a>Zookeeper使用</h1><h2 id="Zookeeper概述"><a href="#Zookeeper概述" class="headerlink" title="Zookeeper概述"></a>Zookeeper概述</h2><ul><li><code>Zookeeper</code>是<code>apache Hadoop</code>项目下的一个子项目，是一个树形目录服务</li><li><code>Zookeeper</code>是一个分布式、开源的分布式应用程序的协调服务</li><li><code>Zookeeper</code>提供的主要功能<ul><li>配置管理</li><li>分布式锁</li><li>集群管理<ul><li>注册中心 </li></ul></li></ul></li></ul><h2 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h2><p><a href="https://www.cnblogs.com/xiaoyu-w/p/18263274">参考博客</a></p><h2 id="Zookeeper命令操作"><a href="#Zookeeper命令操作" class="headerlink" title="Zookeeper命令操作"></a>Zookeeper命令操作</h2><p>我们可以通过命令行或者Java API的方式对Zookeeper进行操作</p><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721162218163.png" alt="image-20240721162218163"></p><h3 id="Zookeeper数据模型"><a href="#Zookeeper数据模型" class="headerlink" title="Zookeeper数据模型"></a>Zookeeper数据模型</h3><ul><li><code>zookeeper</code>是一个树形目录服务，其数据模型和Unix文件系统目录树很类似，拥有一个层次化结构</li><li>里面的每一个节点都被称为ZNode，每个节点上都会保存自己的数据和节点信息（比如节点创建时间、节点有多少个子节点等信息）</li><li>节点可以拥有子节点，同时允许少量数据(1M)存储在该节点之下</li><li>里面的节点可以分为四大类<ul><li>PERSISTENT持久化节点</li><li>EPHEMERAL临时节点，-e<ul><li>临时的意思就是节点只在当前会话有效，客户端关闭节点就会消失</li></ul></li><li>PERSISTENT_SEQUENTIAL持久化顺序节点，-s<ul><li>顺序的意思就是创建节点的时候会在节点名后面加上数字序号</li></ul></li><li>EPHEMERAL_SEQUENTIAL临时顺序节点，-es</li></ul></li></ul><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721160720591.png" alt="image-20240721160720591"></p><h3 id="Zookeeper服务端常用命令"><a href="#Zookeeper服务端常用命令" class="headerlink" title="Zookeeper服务端常用命令"></a>Zookeeper服务端常用命令</h3><h4 id="启动Zookeeper服务"><a href="#启动Zookeeper服务" class="headerlink" title="启动Zookeeper服务"></a>启动<code>Zookeeper</code>服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><h4 id="查看Zookeeper服务状态"><a href="#查看Zookeeper服务状态" class="headerlink" title="查看Zookeeper服务状态"></a>查看<code>Zookeeper</code>服务状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure><h4 id="停止Zookeeper服务"><a href="#停止Zookeeper服务" class="headerlink" title="停止Zookeeper服务"></a>停止<code>Zookeeper</code>服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh stop</span><br></pre></td></tr></table></figure><h4 id="重启Zookeeper服务"><a href="#重启Zookeeper服务" class="headerlink" title="重启Zookeeper服务"></a>重启<code>Zookeeper</code>服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh restart</span><br></pre></td></tr></table></figure><h3 id="Zookeeper客户端常用命令"><a href="#Zookeeper客户端常用命令" class="headerlink" title="Zookeeper客户端常用命令"></a>Zookeeper客户端常用命令</h3><h4 id="进入客户端"><a href="#进入客户端" class="headerlink" title="进入客户端"></a>进入客户端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh -server ip:端口号</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果是本机的化</span></span><br><span class="line">./zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721162904784.png" alt="image-20240721162904784"></p><h4 id="退出客户端"><a href="#退出客户端" class="headerlink" title="退出客户端"></a>退出客户端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h4 id="查看某个节点下的子节点列表"><a href="#查看某个节点下的子节点列表" class="headerlink" title="查看某个节点下的子节点列表"></a>查看某个节点下的子节点列表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比如查看根节点下子节点</span></span><br><span class="line">ls /</span><br></pre></td></tr></table></figure><h4 id="查看某个节点的详细信息"><a href="#查看某个节点的详细信息" class="headerlink" title="查看某个节点的详细信息"></a>查看某个节点的详细信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -s 节点名</span><br></pre></td></tr></table></figure><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721170316608.png" alt="image-20240721170316608"></p><p>节点属性字段说明：</p><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721171239522.png" alt="image-20240721171239522"></p><h4 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help</span><br></pre></td></tr></table></figure><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create 节点名 【数据】</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比如</span></span><br><span class="line">create /myNode bang</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意，存在的节点不能重复创建</span></span><br></pre></td></tr></table></figure><h4 id="获取节点数据"><a href="#获取节点数据" class="headerlink" title="获取节点数据"></a>获取节点数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get 节点名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比如</span></span><br><span class="line">get /myNode</span><br></pre></td></tr></table></figure><h4 id="更改某个节点值"><a href="#更改某个节点值" class="headerlink" title="更改某个节点值"></a>更改某个节点值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set 节点名 值</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比如</span></span><br><span class="line">set /myNode test</span><br></pre></td></tr></table></figure><h4 id="删除某个节点"><a href="#删除某个节点" class="headerlink" title="删除某个节点"></a>删除某个节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete 节点名  #该命令无法删除存在子节点的节点</span><br><span class="line"></span><br><span class="line">deleteall 节点名 #可以删除节点及其下的所有子节点 </span><br></pre></td></tr></table></figure><p> 默认都是创建持久化节点</p><h4 id="创建临时节点"><a href="#创建临时节点" class="headerlink" title="创建临时节点"></a>创建临时节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create -e 节点名 【数据】</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">该节点只在当前会话有效，quit之后再进入客户端，该节点就不存在了</span></span><br></pre></td></tr></table></figure><h4 id="创建顺序节点"><a href="#创建顺序节点" class="headerlink" title="创建顺序节点"></a>创建顺序节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create -s 节点名 【节点数据】</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">顺序节点会自动在节点名后加入数字后缀</span></span><br></pre></td></tr></table></figure><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721165957900.png" alt="image-20240721165957900"></p><h4 id="创建临时顺序节点"><a href="#创建临时顺序节点" class="headerlink" title="创建临时顺序节点"></a>创建临时顺序节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -es 节点名 【节点数据】</span><br></pre></td></tr></table></figure><h2 id="Zookeeper-Java-API操作"><a href="#Zookeeper-Java-API操作" class="headerlink" title="Zookeeper Java API操作"></a>Zookeeper Java API操作</h2><h3 id="Curator介绍"><a href="#Curator介绍" class="headerlink" title="Curator介绍"></a>Curator介绍</h3><p><code>Curator</code>是<code>apache Zookeeper</code>提供的<code>Java</code>客户端 ，其目标就是简化<code>Zookeeper</code>客户端的使用</p><p>常见的<code>Zookeeper Java API</code></p><ul><li>原生<code>Java API</code></li><li><code>ZkClient</code></li><li><code>Curator</code></li></ul><p><a href="[Welcome to Apache Curator | Apache Curator](https://curator.apache.org/docs/about">curator官网</a>)，使用时注意版本与<code>zookeeper</code>相对应</p><h3 id="Curator-API常用操作"><a href="#Curator-API常用操作" class="headerlink" title="Curator API常用操作"></a>Curator API常用操作</h3><p><strong>maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//建立连接:方式一</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 四个参数:</span></span><br><span class="line"><span class="comment">         *  String connectString:连接字符串，zk地址和1端口，如果是集群，各个机器之间用逗号隔开,&quot;192.168.134.1:2181,192.168.134.2:2181&quot;</span></span><br><span class="line"><span class="comment">         *  int sessionTimeoutMs:会话超时时间</span></span><br><span class="line"><span class="comment">         *  int connectionTimeoutMs:连接超时时间</span></span><br><span class="line"><span class="comment">         *  RetryPolicy retryPolicy:重试策略</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">//1.建立连接对象</span></span><br><span class="line">    <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.newClient(<span class="string">&quot;192.168.134.129:2181&quot;</span>, <span class="number">60000</span>,</span><br><span class="line">                                                                <span class="number">15000</span>, retryPolicy);</span><br><span class="line">    <span class="comment">//2.开启连接</span></span><br><span class="line">    client.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//建立连接方式二</span></span><br><span class="line">    <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.builder().connectString(<span class="string">&quot;192.168.134.129:2181&quot;</span>)</span><br><span class="line">        .sessionTimeoutMs(<span class="number">60000</span>).connectionTimeoutMs(<span class="number">15000</span>)</span><br><span class="line">        .retryPolicy(retryPolicy).namespace(<span class="string">&quot;zkTest&quot;</span>).build();<span class="comment">//namespace表明此次会话所有操作都是在根目录zkTest下进行</span></span><br><span class="line">    client.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//创建没有数据节点，不指定数据默认节点值为当前客户端ip地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//创建节点指定数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().forPath(<span class="string">&quot;/app2&quot;</span>,<span class="string">&quot;we are test&quot;</span>.getBytes());</span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//创建节点，指定节点类型：比如持久化(默认）、临时、顺序节点</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().withMode(CreateMode.EPHEMERAL).forPath(<span class="string">&quot;/app3&quot;</span>);</span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//创建多级节点，/zkTest/app4/p1</span></span><br><span class="line">    <span class="comment">//正常情况下父节点不存在，直接创建多级节点会报错</span></span><br><span class="line">    <span class="comment">//creatingParentsIfNeeded()会创建父节点</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().creatingParentsIfNeeded().forPath(<span class="string">&quot;/app4/p1&quot;</span>);</span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//删除单节点</span></span><br><span class="line">    client.delete().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//删除带有子节点的节点</span></span><br><span class="line">    client.delete().deletingChildrenIfNeeded().forPath(<span class="string">&quot;/app4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//必须删除成功，即失败之后会自动重试</span></span><br><span class="line">    client.delete().guaranteed().forPath(<span class="string">&quot;/app2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//带回调函数的删除</span></span><br><span class="line">    client.delete().inBackground(<span class="keyword">new</span> <span class="title class_">BackgroundCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processResult</span><span class="params">(CuratorFramework curatorFramework, CuratorEvent curatorEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点被删除&quot;</span>);</span><br><span class="line">            System.out.println(curatorEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//修改节点数据</span></span><br><span class="line">    client.setData().forPath(<span class="string">&quot;/app1&quot;</span>, <span class="string">&quot;test set&quot;</span>.getBytes());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//根据版本哈修改，类似于CAS，只要版本号一致情况下才修改成功,版本不一致会报错</span></span><br><span class="line">    <span class="type">Stat</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">    client.getData().storingStatIn(status).forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">    client.setData().withVersion(status.getVersion()).forPath(<span class="string">&quot;/app1&quot;</span>,<span class="string">&quot;test set v2&quot;</span>.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询节点"><a href="#查询节点" class="headerlink" title="查询节点"></a>查询节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    <span class="type">byte</span>[] data = client.getData().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//查询子节点</span></span><br><span class="line">    List&lt;String&gt; paths = client.getChildren().forPath(<span class="string">&quot;/app4&quot;</span>);</span><br><span class="line">    System.out.println(paths);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//查询节点状态信息</span></span><br><span class="line">    <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">    client.getData().storingStatIn(stat).forPath(<span class="string">&quot;/app4&quot;</span>);</span><br><span class="line">    System.out.println(stat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Watch事件监听"><a href="#Watch事件监听" class="headerlink" title="Watch事件监听"></a>Watch事件监听</h4><ul><li><code>Zookeeper</code>允许用户在指定节点上注册一些<code>Watcher</code>，并且在一些特定事件触发的时候，<code>Zookeeper</code>服务端会将事件通知到感兴趣的客户端上去，该机制是<code>Zookeeper</code>实现分布式协调服务的重要特性</li><li><p><code>Zookeeper</code>中引入了<code>Watcher</code>机制来实现了发布/订阅功能，能够让多个订阅者同时监听某一个对象，当一个对象发生变化时，会通知所有的订阅者</p></li><li><p><code>Curator</code>引入了<code>Cache</code>来实现对<code>Zookeeper</code>服务端事件的监听</p></li><li><p><code>Zookeeper</code>提供了三种不同的<code>Watcher</code></p><ul><li><code>NodeCache</code>：只是监听某一个特定的节点</li><li><code>PathChildrenCache</code>：监听一个<code>ZNode</code>的子节点</li><li><code>TreeCache</code>：可以监听整个树上的所有节点，类似于<code>pathChildrenCache</code>和<code>NodeCache</code>的组合</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWatch1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//NodeCache，监听单个节点</span></span><br><span class="line">    <span class="comment">//1.初始化nodeCache对象</span></span><br><span class="line">    <span class="type">NodeCache</span> <span class="variable">nodeCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NodeCache</span>(client,<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">    <span class="comment">//2.注册监听器</span></span><br><span class="line">    nodeCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">NodeCacheListener</span>() &#123;</span><br><span class="line">        <span class="comment">//监听回调函数</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点发生了变化&quot;</span>);</span><br><span class="line">            <span class="comment">//获取更改后节点数据和状态信息</span></span><br><span class="line">            <span class="type">byte</span>[] data = nodeCache.getCurrentData().getData();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line"></span><br><span class="line">            <span class="type">Stat</span> <span class="variable">status</span> <span class="operator">=</span> nodeCache.getCurrentData().getStat();</span><br><span class="line">            System.out.println(status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3.开启监听</span></span><br><span class="line">    nodeCache.start(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//由于是写在单元测试里面，让服务一直监听下去</span></span><br><span class="line">        <span class="comment">//此时我们去命令行执行节点增删改操作，就会触发该监听器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWatch2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//监听节点子节点的变化</span></span><br><span class="line">    <span class="comment">//1.创建监听器对象</span></span><br><span class="line">    <span class="type">PathChildrenCache</span> <span class="variable">pathChildrenCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathChildrenCache</span>(client,<span class="string">&quot;/app2&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//2.注册监听器</span></span><br><span class="line">    pathChildrenCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">PathChildrenCacheListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">childEvent</span><span class="params">(CuratorFramework curatorFramework, PathChildrenCacheEvent pathChildrenCacheEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子节点发生了变化&quot;</span>);</span><br><span class="line">            <span class="comment">//只要在节点更新时才会进行处理</span></span><br><span class="line">            PathChildrenCacheEvent.<span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> pathChildrenCacheEvent.getType();</span><br><span class="line">            <span class="keyword">if</span>(PathChildrenCacheEvent.Type.CHILD_UPDATED.equals(pathChildrenCacheEvent.getType()))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子节点值发生了更新&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;更新的子节点为:&quot;</span>+pathChildrenCacheEvent.getData().getPath());</span><br><span class="line">                System.out.println(<span class="string">&quot;子节点新值为:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(pathChildrenCacheEvent.getData().getData()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3.启动监听器</span></span><br><span class="line">    pathChildrenCache.start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//由于是写在单元测试里面，让服务一直监听下去</span></span><br><span class="line">        <span class="comment">//此时我们去命令行执行节点增删改操作，就会触发该监听器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWatch3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//TreeCache：既可以监听当前节点又监听其子节点</span></span><br><span class="line">    <span class="type">TreeCache</span> <span class="variable">treeCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeCache</span>(client,<span class="string">&quot;/app2&quot;</span>);</span><br><span class="line">    treeCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">TreeCacheListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">childEvent</span><span class="params">(CuratorFramework curatorFramework, TreeCacheEvent treeCacheEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点发生了变化&quot;</span>);</span><br><span class="line">            System.out.println(treeCacheEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    treeCache.start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//由于是写在单元测试里面，让服务一直监听下去</span></span><br><span class="line">        <span class="comment">//此时我们去命令行执行节点增删改操作，就会触发该监听器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><ul><li>单机开发，涉及并发同步的时候，我们往往采用<code>synchronized</code>或者<code>lock</code>的方式来解决多线程间代码同步问题，这时多线程的运行都是在同一个JVM下，没有任何问题</li><li>在分布式集群工作情况下，属于多<code>JVM</code>工作环境，跨<code>JVM</code>之间已经无法通过多线程的锁解决同步问题</li><li>需要一种更高级别的锁机制，来处理这张跨机器的进程间的数据同步问题——分布式锁</li></ul><h5 id="分布式锁常见的实现机制"><a href="#分布式锁常见的实现机制" class="headerlink" title="分布式锁常见的实现机制"></a>分布式锁常见的实现机制</h5><ul><li>基于缓存的分布式锁<ul><li>Redis</li><li>Memcache</li></ul></li><li>基于Zookeeper实现分布式锁<ul><li>Curator</li></ul></li><li>基于数据库层面实现分布式锁<ul><li>悲观锁、乐观锁</li></ul></li></ul><h5 id="zookeeper实现分布式锁原理"><a href="#zookeeper实现分布式锁原理" class="headerlink" title="zookeeper实现分布式锁原理"></a>zookeeper实现分布式锁原理</h5><ul><li>核心思想：当客户端要获取锁，则创建节点，使用完锁，则删除该节点<ul><li>客户端获取锁时，在<code>lock</code>节点下创建<strong>临时顺序</strong>节点<ul><li>使用临时节点目的是为了避免客户端宕机没有删除节点导致其他客户端永远都无法获取锁</li></ul></li><li>然后获取lock下面的所有子节点，客户端获取所有子节点之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁，使用完锁后，就将该节点删除</li><li>如果发现自己创建的节点并非lock所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，同时对其注册事件监听器，监听删除事件</li><li>如果发现比自己小的那个节点被删除，则客户端的<code>Watcher</code>会收到相应的通知，此时再次判断自己创建的节点是否是lock子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的那一个节点并注册监听</li></ul></li></ul><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721230416991.png" alt="image-20240721230416991" style="zoom: 67%;"></p><h3 id="模拟12306售票案例"><a href="#模拟12306售票案例" class="headerlink" title="模拟12306售票案例"></a>模拟12306售票案例</h3><h4 id="Curator实现分布式锁API"><a href="#Curator实现分布式锁API" class="headerlink" title="Curator实现分布式锁API"></a>Curator实现分布式锁API</h4><p>在<code>Curator</code>中有五种锁方案：</p><ul><li><code>InterProcessSemaphoreMutex</code>：分布式排它锁（非可重入锁）</li><li><code>InterProcessMutex</code>：分布式可重入排他锁</li><li><code>InterProcessReadWriteLock</code>：分布式读写锁</li><li><code>InterProcessMultiLock</code>：将多个锁作为单个实体管理的容器</li><li><code>InterProcessSemaphoreV2</code>：共享信号量</li></ul><h4 id="模拟12306卖票"><a href="#模拟12306卖票" class="headerlink" title="模拟12306卖票"></a>模拟12306卖票</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ticket12306</span> <span class="variable">ticket12306</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket12306</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket12306,<span class="string">&quot;携程&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket12306,<span class="string">&quot;去哪儿&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket12306</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InterProcessMutex lock;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ticketNum=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Ticket12306</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//初始化分布式锁</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.builder().connectString(<span class="string">&quot;192.168.134.129:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60000</span>).connectionTimeoutMs(<span class="number">15000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).namespace(<span class="string">&quot;zkTest&quot;</span>).build();<span class="comment">//namespace表明此次会话所有操作都是在根目录zkTest下进行</span></span><br><span class="line">        client.start();</span><br><span class="line"></span><br><span class="line">        lock = <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(client,<span class="string">&quot;/lock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                lock.acquire();</span><br><span class="line">                <span class="keyword">if</span>(ticketNum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 买的票:&quot;</span>+ticketNum);</span><br><span class="line">                    ticketNum-=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Zookeeper集群"><a href="#Zookeeper集群" class="headerlink" title="Zookeeper集群"></a>Zookeeper集群</h2><h3 id="Zookeeper集群介绍"><a href="#Zookeeper集群介绍" class="headerlink" title="Zookeeper集群介绍"></a>Zookeeper集群介绍</h3><p><code>zookeeper</code>集群，多台机器，客户端访问，哪台机器说了算？</p><p><strong>Leader选举</strong></p><ul><li><code>Serverid</code>：服务器id<ul><li>比如有三台服务器，编号分别为1，2，3。编号越大在选择算法中权重就越大</li></ul></li><li><code>Zxid</code>：数据id<ul><li>服务器中存放数据的最大值id，该值越大说明数据越新，在选举算法中数据越新，权重越大</li></ul></li><li>在选举过程中，如果某台<code>zookeeper</code>服务器获得了超过半数的选票，则此服务器可以成为<code>Leader</code></li></ul><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721233733639.png" alt="image-20240721233733639"></p><h3 id="Zookeeper集群角色"><a href="#Zookeeper集群角色" class="headerlink" title="Zookeeper集群角色"></a>Zookeeper集群角色</h3><p>在<code>Zookeeper</code>集群服务中存在三个角色：</p><ul><li><code>Leader</code>领导者<ul><li>处理事务请求(增删改为事务请求，查询为非事务请求)</li><li>集群内各个服务的调度者</li></ul></li><li><code>Follower</code>跟随者<ul><li>处理客户端非事务请求，转发事务请求给<code>Leader</code>服务器</li><li>参与<code>Leader</code>选举投票</li></ul></li><li><code>Observer</code>观察者<ul><li>处理客户端非事务请求，转发事务请求给<code>Leader</code>服务器</li></ul></li></ul><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721234818813.png" alt="image-20240721234818813"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zookeeper使用&quot;&gt;&lt;a href=&quot;#Zookeeper使用&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper使用&quot;&gt;&lt;/a&gt;Zookeeper使用&lt;/h1&gt;&lt;h2 id=&quot;Zookeeper概述&quot;&gt;&lt;a href=&quot;#Zookee</summary>
      
    
    
    
    <category term="Zookeeper" scheme="https://bangwu2001.github.io/categories/Zookeeper/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java Stream流</title>
    <link href="https://bangwu2001.github.io/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/"/>
    <id>https://bangwu2001.github.io/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/</id>
    <published>2024-06-29T04:52:00.000Z</published>
    <updated>2024-06-29T04:50:15.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Stream流"><a href="#Java-Stream流" class="headerlink" title="Java Stream流"></a>Java Stream流</h1><ul><li>创建不可变集合</li><li>Stream流</li><li>方法引用</li></ul><h2 id="创建不可变集合"><a href="#创建不可变集合" class="headerlink" title="创建不可变集合"></a>创建不可变集合</h2><p>所谓的不可变集合是指不可以被修改的集合，即长度不可修改、内容也不可修改</p><p><strong>不可变集合应用场景：</strong></p><p>不想让别人修改集合里的内容</p><ul><li>如果某个数据不能被修改，把它防御性地拷贝到不可变集合中是个很好的实践</li><li><p>当集合对象被不可信的库调用时，不可变形式是安全的</p><p>比如：</p></li><li><p>扑克牌集合，一共4*13=52张牌，不允许添加新的牌</p></li><li>出牌游戏规则</li><li>电脑里的硬件信息，这些信息电脑开机获取，开机之后不允许其他程序修改</li></ul><p><strong>如何创建不可变的集合：</strong></p><p>在<code>List、Set、Map</code> 接口中，都存在静态的<code>of</code>方法，可以获取一个不可变的集合，这个集合不能添加，不能删除，也不能修改</p><p>注意：<code>of</code>方法在<code>JDK9</code>里面才有</p><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629092648239.png" alt="image-20240629092648239"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnMutableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; stringList = List.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : stringList) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></span><br><span class="line">        <span class="comment">//stringList.remove(0);</span></span><br><span class="line">        <span class="comment">//Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></span><br><span class="line">        stringList.add(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnMutableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;32&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;56&quot;</span>);</span><br><span class="line">        lists.remove(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//原始集合拷贝为不可变集合</span></span><br><span class="line">        List&lt;String&gt; unMutateList = List.copyOf(lists);</span><br><span class="line">        System.out.println(unMutateList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629100818381.png" alt="image-20240629100818381"></p><p>如果用常规<code>for</code>循环遍历的话，代码会非常繁琐，但是用<code>stream</code>流会非常简洁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; nameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        nameList.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        nameList.add(<span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">        nameList.add(<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        nameList.add(<span class="string">&quot;张强&quot;</span>);</span><br><span class="line">        nameList.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        <span class="comment">//for循环做法</span></span><br><span class="line">        List&lt;String&gt; newNameList1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : nameList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.startsWith(<span class="string">&quot;张&quot;</span>) &amp;&amp; s.length()==<span class="number">3</span>)&#123;</span><br><span class="line">                newNameList1.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(newNameList1);</span><br><span class="line">        <span class="comment">//stream流</span></span><br><span class="line">        List&lt;String&gt; newNameList2 = nameList.stream().filter(name -&gt; name.startsWith(<span class="string">&quot;张&quot;</span>)).filter(name -&gt; name.length() == <span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(newNameList2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream流使用"><a href="#Stream流使用" class="headerlink" title="Stream流使用"></a>Stream流使用</h3><h4 id="stream流使用步骤"><a href="#stream流使用步骤" class="headerlink" title="stream流使用步骤"></a>stream流使用步骤</h4><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629102310459.png" alt="image-20240629102310459"></p><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629102549826.png" alt="image-20240629102549826"></p><h4 id="获取stream流"><a href="#获取stream流" class="headerlink" title="获取stream流"></a>获取stream流</h4><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629102618143.png" alt="image-20240629102618143"></p><p>对于双列集合(map)需要先调用<code>keySet</code>或者<code>entrySet</code>转换成单列集合，再调用<code>Stream</code>方法获取流水线</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.单列集合获取流水线</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        <span class="comment">//获取流水线，并调用终结方法打印元素</span></span><br><span class="line">        list.stream().forEach(item-&gt; System.out.println(item));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.双列集合获取流水线</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;张三&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">&quot;李四&quot;</span>,<span class="number">200</span>);</span><br><span class="line">        map.put(<span class="string">&quot;王五&quot;</span>,<span class="number">300</span>);</span><br><span class="line">        map.put(<span class="string">&quot;赵六&quot;</span>,<span class="number">400</span>);</span><br><span class="line">        <span class="comment">//方法一:通过keySet()获取流水线</span></span><br><span class="line">        map.keySet().stream().forEach(s-&gt; System.out.println(s+<span class="string">&quot;=&quot;</span>+map.get(s)));</span><br><span class="line">        <span class="comment">//方法二:通过entrySet()获取流水线</span></span><br><span class="line">        map.entrySet().stream().forEach(s-&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.数组获取流水线 Arrays.stream()</span></span><br><span class="line">        String[] hobbys = &#123;<span class="string">&quot;篮球&quot;</span>,<span class="string">&quot;足球&quot;</span>,<span class="string">&quot;乒乓球&quot;</span>,<span class="string">&quot;橄榄球&quot;</span>&#125;;</span><br><span class="line">        Arrays.stream(hobbys).forEach(s-&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.零散数据获取数据流,Stream.of(),但是要保证这些零散数据是同一数据类型</span></span><br><span class="line">        Stream.of(<span class="string">&quot;小学&quot;</span>,<span class="string">&quot;初中&quot;</span>,<span class="string">&quot;高中&quot;</span>,<span class="string">&quot;大学&quot;</span>).forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Stream流中间方法"><a href="#Stream流中间方法" class="headerlink" title="Stream流中间方法"></a>Stream流中间方法</h4><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629105106596.png" alt="image-20240629105106596"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">example</span> &#123;</span><br><span class="line">    List&lt;String&gt; nameList=<span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        nameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(nameList,<span class="string">&quot;曹操&quot;</span>,<span class="string">&quot;司马懿&quot;</span>,<span class="string">&quot;赵云&quot;</span>,<span class="string">&quot;关云长&quot;</span>,<span class="string">&quot;写宅院&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//filter过滤,过滤掉不满足条件的元素</span></span><br><span class="line">        <span class="comment">//打印长度大于等于3的人名</span></span><br><span class="line">        nameList.stream().filter(name-&gt;name.length()&gt;=<span class="number">3</span>).forEach(name-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestLimit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//limit,取流中的求几个元素</span></span><br><span class="line">        nameList.stream().limit(<span class="number">3</span>).forEach(name-&gt; System.out.println(name));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        曹操</span></span><br><span class="line"><span class="comment">        司马懿</span></span><br><span class="line"><span class="comment">        赵云</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestSkip</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//skip,跳过流中的求几个元素</span></span><br><span class="line">        nameList.stream().skip(<span class="number">3</span>).forEach(name-&gt; System.out.println(name));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        关云长</span></span><br><span class="line"><span class="comment">        写宅院</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestDistict</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//distinct流中元素去重</span></span><br><span class="line">        <span class="comment">//里面本质是借助于HashSet进行去重，所以非基础类型数据时，要关注重写hashCode和equals方法</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="number">21</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">9</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">9</span>);</span><br><span class="line">        list.stream().distinct().forEach(s-&gt; System.out.print(s+<span class="string">&quot; &quot;</span>));</span><br><span class="line">        <span class="comment">//21 23 22 9 80</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestConcat</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//concat合并两个流,这两个流里面元素的数据类型最好要一致</span></span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list1,<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="string">&quot;韩国&quot;</span>,<span class="string">&quot;朝鲜&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list2,<span class="string">&quot;英国&quot;</span>,<span class="string">&quot;法国&quot;</span>,<span class="string">&quot;德国&quot;</span>);</span><br><span class="line">        Stream.concat(list1.stream(),list2.stream()).forEach(s-&gt; System.out.print(s+<span class="string">&quot; &quot;</span>));</span><br><span class="line">        <span class="comment">//中国 日本 韩国 朝鲜 英国 法国 德国</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestMap</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//map可以对流中元素进行操作，以及数据类型转换</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">        <span class="comment">//比如对流中所有元素进行如下运算，将结果打印: i*i+10</span></span><br><span class="line">        list.stream().map(i-&gt;i*i+<span class="number">10</span>).forEach(s-&gt; System.out.print(s+<span class="string">&quot; &quot;</span>));</span><br><span class="line">        <span class="comment">//19 35 59 11 91</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Stream流中间方法-1"><a href="#Stream流中间方法-1" class="headerlink" title="Stream流中间方法"></a>Stream流中间方法</h4><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629112458751.png" alt="image-20240629112458751"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//终结方法 count，统计流中元素个数</span></span><br><span class="line">    <span class="comment">//map可以对流中元素进行操作，以及数据类型转换</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestToArray</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//toArray将流中的结果放入数组</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="string">&quot;韩国&quot;</span>,<span class="string">&quot;朝鲜&quot;</span>);</span><br><span class="line">    <span class="comment">//value为流中元素个数</span></span><br><span class="line">    String[] array = list.stream().toArray(value -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[value]);</span><br><span class="line">    System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestToList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//流转换为list</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="string">&quot;关羽-男-32&quot;</span>,<span class="string">&quot;刘备-男-38&quot;</span>,<span class="string">&quot;张飞-男-23&quot;</span>,<span class="string">&quot;貂蝉-女-12&quot;</span>,<span class="string">&quot;孙尚香-女-31&quot;</span>);</span><br><span class="line">    <span class="comment">//将list中所有男性成员姓名组装成一个list</span></span><br><span class="line">    List&lt;String&gt; nameList = list.stream()</span><br><span class="line">        .filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">        .map(s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    System.out.println(nameList);</span><br><span class="line">    <span class="comment">//[关羽, 刘备, 张飞]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestToSet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//流转换为lset</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="string">&quot;关羽-男-32&quot;</span>,<span class="string">&quot;刘备-男-38&quot;</span>,<span class="string">&quot;张飞-男-23&quot;</span>,<span class="string">&quot;貂蝉-女-12&quot;</span>,<span class="string">&quot;孙尚香-女-31&quot;</span>);</span><br><span class="line">    <span class="comment">//将list中所有男性成员姓名组装成一个list</span></span><br><span class="line">    Set&lt;String&gt; nameSet = list.stream()</span><br><span class="line">        .filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">        .map(s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        .collect(Collectors.toSet());</span><br><span class="line">    System.out.println(nameSet);</span><br><span class="line">    <span class="comment">//[关羽, 刘备, 张飞]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestToMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//转换为map</span></span><br><span class="line">    <span class="comment">//组成:key为姓名,value为年龄</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="string">&quot;关羽-男-32&quot;</span>,<span class="string">&quot;刘备-男-38&quot;</span>,<span class="string">&quot;张飞-男-23&quot;</span>,<span class="string">&quot;貂蝉-女-12&quot;</span>,<span class="string">&quot;孙尚香-女-31&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Collectors.toMap(参数1，参数2):</span></span><br><span class="line"><span class="comment">         *  参数1为map key的生成规则</span></span><br><span class="line"><span class="comment">         *  参数2为map value的生成规则</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    Map&lt;String, Integer&gt; map = list.stream().collect(Collectors.toMap(</span><br><span class="line">        s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>], s -&gt; Integer.parseInt(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>])</span><br><span class="line">    ));</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    <span class="comment">//&#123;关羽=32, 张飞=23, 刘备=38, 貂蝉=12, 孙尚香=31&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-Stream流&quot;&gt;&lt;a href=&quot;#Java-Stream流&quot; class=&quot;headerlink&quot; title=&quot;Java Stream流&quot;&gt;&lt;/a&gt;Java Stream流&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;创建不可变集合&lt;/li&gt;
&lt;li&gt;Stream流</summary>
      
    
    
    
    <category term="java杂项" scheme="https://bangwu2001.github.io/categories/java%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ssm web项目的开发流程及规范</title>
    <link href="https://bangwu2001.github.io/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/"/>
    <id>https://bangwu2001.github.io/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/</id>
    <published>2024-06-23T16:34:42.000Z</published>
    <updated>2024-06-23T16:33:50.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssm-web项目的整体开发流程"><a href="#ssm-web项目的整体开发流程" class="headerlink" title="ssm web项目的整体开发流程"></a>ssm web项目的整体开发流程</h1><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p><code>springboot</code>+<code>mybatis</code></p><p>后端api的测试：<code>knife4j</code>，<a href="https://doc.xiaominfo.com/docs/quick-start">knife4j参考资料</a></p><h2 id="整理一套开发规范"><a href="#整理一套开发规范" class="headerlink" title="整理一套开发规范"></a>整理一套开发规范</h2><p><img src="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/image-20240623222551476.png" alt="image-20240623222551476" style="zoom:50%;"></p><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p><img src="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/image-20240624000220806.png" alt="image-20240624000220806"></p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>创建一个简单数据库表<code>user</code></p><p><img src="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/image-20240623223427731.png" alt="image-20240623223427731"></p><p>执行简单的增删改查业务逻辑</p><h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><h3 id="domain层开发"><a href="#domain层开发" class="headerlink" title="domain层开发"></a>domain层开发</h3><p>定义一个<code>Java</code>实体类<code>com.example.domain.User</code>与数据库表<code>user</code>相对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dao层开发"><a href="#dao层开发" class="headerlink" title="dao层开发"></a>dao层开发</h3><p>dao层我们采用<code>mybatis</code>框架</p><h4 id="step1-在application-yml配置文件中配置mysql数据库和mybatis-mapper扫描路径"><a href="#step1-在application-yml配置文件中配置mysql数据库和mybatis-mapper扫描路径" class="headerlink" title="step1 在application.yml配置文件中配置mysql数据库和mybatis mapper扫描路径"></a>step1 在<code>application.yml</code>配置文件中配置<code>mysql</code>数据库和<code>mybatis mapper</code>扫描路径</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ssm-demo</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my-test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h4 id="step2-编写dao层接口"><a href="#step2-编写dao层接口" class="headerlink" title="step2 编写dao层接口"></a>step2 编写dao层接口</h4><p>创建<code>com.example.mapper.UserMapper</code>接口，里面定义争对数据库表<code>user</code>的<code>dao</code>层业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据id查询单个用户</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step3-编写具体SQL语句的Mybatis映射文件"><a href="#step3-编写具体SQL语句的Mybatis映射文件" class="headerlink" title="step3 编写具体SQL语句的Mybatis映射文件"></a>step3 编写具体SQL语句的Mybatis映射文件</h4><p>文件路劲<code>src/main/resources/mapper/UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;userName&#125;,password=#&#123;passWord&#125; where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user values(#&#123;id&#125;,#&#123;userName&#125;,#&#123;passWord&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="service层开发"><a href="#service层开发" class="headerlink" title="service层开发"></a>service层开发</h3><p>service往往是业务中最繁琐最终的地方，大对数代码都在这一层，这一层需要先声明一个接口，然后是一个接口实现类，又因为需要根据业务逻辑做异常处理，所以需要首先自定义异常</p><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>我们自己定义一个异常类，继承自<code>RuntimeException</code>，各种不太的业务异常我们用一个枚举类来进行描述</p><h5 id="枚举类异常类型申明"><a href="#枚举类异常类型申明" class="headerlink" title="枚举类异常类型申明"></a>枚举类异常类型申明</h5><p><code>com.example.exception.UserExceptionEnum</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块异常类型枚举类</span></span><br><span class="line"><span class="comment"> *      主要包括:</span></span><br><span class="line"><span class="comment"> *          参数类型错误异常</span></span><br><span class="line"><span class="comment"> *          无请求权限异常</span></span><br><span class="line"><span class="comment"> *          未知异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserExceptionEnum</span> &#123;</span><br><span class="line">    TYPE_NOTtMATCH_EXCEPTION(<span class="string">&quot;请求参数错误&quot;</span>),</span><br><span class="line">    PERMISSION_DENIED_EXCEPTION(<span class="string">&quot;无请求权限&quot;</span>),</span><br><span class="line">    UNKNOWN_EXCEPTION(<span class="string">&quot;未知类型错误&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    UserExceptionEnum(String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserExceptionEnum&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;&#125; &quot;</span> + <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h5><p><code>com.example.exception.UserException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserExceptionEnum userExceptionEnum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service层接口申明"><a href="#service层接口申明" class="headerlink" title="service层接口申明"></a>service层接口申明</h4><p><code>com.example.service.IUserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">deleteUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service层实现类"><a href="#service层实现类" class="headerlink" title="service层实现类"></a>service层实现类</h4><p><code>com.example.service.impl.UserServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.example.exception.UserException;</span><br><span class="line"><span class="keyword">import</span> com.example.exception.UserExceptionEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(id&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserException</span>(UserExceptionEnum.TYPE_NOTtMATCH_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> userMapper.findById(id);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserException</span>(UserExceptionEnum.UNKNOWN_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.updateUser(user)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.delete(user)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller层开发"><a href="#Controller层开发" class="headerlink" title="Controller层开发"></a>Controller层开发</h3><p><code>controller</code>层涉及到具体的与前端进行交互，所以我们需要与前端进行约定</p><ul><li>前端传递过来的参数统一格式</li><li>后端最终给前端传递参数的统一格式</li></ul><h4 id="step1-协商前端查询参数统一格式"><a href="#step1-协商前端查询参数统一格式" class="headerlink" title="step1  协商前端查询参数统一格式"></a>step1  协商前端查询参数统一格式</h4><p>我们定义类<code>com.example.req.UserReq</code>，前端按照此格式传递参数发送请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step2-协商后端传递前端结果统一格式"><a href="#step2-协商后端传递前端结果统一格式" class="headerlink" title="step2 协商后端传递前端结果统一格式"></a>step2 协商后端传递前端结果统一格式</h4><p>我们定义类<code>com.example.resp.CommonResp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.resp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给前端统一返回的数据格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResp</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">//是否成功</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> success=<span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//响应描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String message=<span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    <span class="comment">//具体响应内容</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step3-统一异常处理"><a href="#step3-统一异常处理" class="headerlink" title="step3  统一异常处理"></a>step3  统一异常处理</h4><p>注意，在项目中我们一般将异常不断向外抛，统一在<code>Controller</code>层进行异常处理</p><p>通过<code>@ControllerAdvice</code> 配合 <code>@ExceptionHandler</code> 实现全局异常处理</p><p>我们编写类<code>com.example.controller.ControllerExceptionHandler</code>来进行全局异常处理，即触发对应类型异常，返回特定类型的结果给前端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.example.req.UserReq;</span><br><span class="line"><span class="keyword">import</span> com.example.resp.CommonResp;</span><br><span class="line"><span class="keyword">import</span> com.example.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户模块相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line">    <span class="comment">//查找单个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryOne&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询单个用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求queryOne&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(userReq.getId());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryAll&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询所有用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUser</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userService.findAllUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/updateInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;更新用户信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">upDateUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/addInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">addUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/deleteInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">deleteUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.deleteUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step4-controller层具体业务逻辑"><a href="#step4-controller层具体业务逻辑" class="headerlink" title="step4 controller层具体业务逻辑"></a>step4 controller层具体业务逻辑</h4><p><code>com.example.controller.UserController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.example.req.UserReq;</span><br><span class="line"><span class="keyword">import</span> com.example.resp.CommonResp;</span><br><span class="line"><span class="keyword">import</span> com.example.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户模块相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line">    <span class="comment">//查找单个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryOne&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询单个用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求queryOne&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(userReq.getId());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryAll&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询所有用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUser</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userService.findAllUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/updateInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;更新用户信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">upDateUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/addInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">addUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/deleteInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">deleteUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.deleteUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器开发"><a href="#拦截器开发" class="headerlink" title="拦截器开发"></a>拦截器开发</h3><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><p>如果请求需要做参数或者其他权限校验，我们可以自定义拦截器类，实现<code>HandlerInterceptor</code>接口</p><p><code>com.example.interceptor.UserInterceptor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.exception.UserException;</span><br><span class="line"><span class="keyword">import</span> com.example.exception.UserExceptionEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入拦截器，开始进行权限校验&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;bang&quot;</span>.equals(token))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserException</span>(UserExceptionEnum.PERMISSION_DENIED_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;权限校验通过&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在配置类中配置拦截器，及其对应白黑名单"><a href="#在配置类中配置拦截器，及其对应白黑名单" class="headerlink" title="在配置类中配置拦截器，及其对应白黑名单"></a>在配置类中配置拦截器，及其对应白黑名单</h4><p><code>com.example.config.WebMvcConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.UserInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserInterceptor userInterceptor;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(userInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/doc.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后端接口测试"><a href="#后端接口测试" class="headerlink" title="后端接口测试"></a>后端接口测试</h3><p>对于<code>dao</code>层以及<code>service</code>层的功能开发，我们编写单元测试进行测试</p><p>对于整体接口测试，我们借助<code>knife4j</code>来进行在线接口文档测试，<a href="https://doc.xiaominfo.com/docs/action/springboot">SpringBoot整合Knife4j</a></p><h4 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">SSM-Template-Project</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;测试SSM-Template-Project&quot;</span></span><br><span class="line">    <span class="comment"># aaa&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">bang@google.com</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">bang</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://bang.world.com</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0</span></span><br><span class="line">    <span class="attr">license:</span> <span class="string">Apache</span> <span class="number">1.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">test1:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">用户模块测试</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span>  <span class="comment">#controller包名</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.example.controller</span></span><br></pre></td></tr></table></figure><h4 id="controller层代码上添加添加对应注解"><a href="#controller层代码上添加添加对应注解" class="headerlink" title="controller层代码上添加添加对应注解"></a>controller层代码上添加添加对应注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.example.req.UserReq;</span><br><span class="line"><span class="keyword">import</span> com.example.resp.CommonResp;</span><br><span class="line"><span class="keyword">import</span> com.example.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户模块相关接口&quot;)</span> <span class="comment">//测试模块名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line">    <span class="comment">//查找单个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryOne&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询单个用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求queryOne&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(userReq.getId());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryAll&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询所有用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUser</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userService.findAllUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/updateInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;更新用户信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">upDateUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/addInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加用户&quot;)</span> <span class="comment">//接口名称</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">addUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/deleteInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">deleteUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.deleteUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在线文档测试"><a href="#在线文档测试" class="headerlink" title="在线文档测试"></a>在线文档测试</h4><p>访问<code>http://localhost:8080/doc.html</code></p><p><img src="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/image-20240624003139210.png" alt="image-20240624003139210"></p><p><img src="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/image-20240624003206334.png" alt="image-20240624003206334"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ssm-web项目的整体开发流程&quot;&gt;&lt;a href=&quot;#ssm-web项目的整体开发流程&quot; class=&quot;headerlink&quot; title=&quot;ssm web项目的整体开发流程&quot;&gt;&lt;/a&gt;ssm web项目的整体开发流程&lt;/h1&gt;&lt;h2 id=&quot;技术栈&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="spring" scheme="https://bangwu2001.github.io/categories/spring/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>前端快速工程化</title>
    <link href="https://bangwu2001.github.io/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>https://bangwu2001.github.io/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/</id>
    <published>2024-06-11T16:18:42.000Z</published>
    <updated>2025-03-30T03:25:55.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端快速工程化"><a href="#前端快速工程化" class="headerlink" title="前端快速工程化"></a>前端快速工程化</h1><p>前端 vs 后端</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606103633092.png" alt="image-20240606103633092"></p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><ul><li>ECMAScript（ES） 是规范、 JavaScript 是 ES 的实现</li><li>ES6 的第一个版本 在 2015 年 6 月发布，正式名称是《ECMAScript 2015 标准》（简称 ES2015）</li><li>ES6 指是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等</li></ul><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>推荐使用<code>let</code>关键字替代 <code>var</code>关键字声明变量，因为 <code>var</code>存在诸多问题，比如：</p><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure><p>只会打印a，而b无法引用，所以a可以跨域，不安全</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606093610335.png" alt="image-20240606093610335"></p><h4 id="重复申明"><a href="#重复申明" class="headerlink" title="重复申明"></a>重复申明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 可以声明多次</span></span><br><span class="line"><span class="comment">// let 只能声明一次</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// Identifier &#x27;n&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606093849111.png" alt="image-20240606093849111"></p><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 会变量提升,变量在初始化之前即可被引用</span></span><br><span class="line"><span class="comment">// let 不存在变量提升，变量初始化之前引用会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">//ReferenceError: y is not defined</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606094050855.png" alt="image-20240606094050855"></p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明之后不允许改变</span></span><br><span class="line"><span class="comment">// 2. 一但声明必须初始化，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">3</span>; <span class="comment">//Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数组解构</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//以前我们想获取其中的值，只能通过角标。ES6 可以这样：</span></span><br><span class="line"><span class="keyword">let</span> [x, y, z] = arr;<span class="comment">// x，y，z 将与 arr 中的每个位置对应来取值</span></span><br><span class="line"><span class="comment">// 然后打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z);</span><br></pre></td></tr></table></figure><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="attr">language</span>: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解构表达式获取值，将 person 里面每一个属性和左边对应赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123;name, age, language&#125; = person;</span><br><span class="line"><span class="comment">// 等价于下面</span></span><br><span class="line"><span class="comment">// const name = person.name;</span></span><br><span class="line"><span class="comment">// const age = person.age;</span></span><br><span class="line"><span class="comment">// const language = person.language;</span></span><br><span class="line"><span class="comment">// 可以分别打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(language);</span><br><span class="line"><span class="comment">//扩展：如果想要将 name 的值赋值给其他变量，可以如下,nn 是新的变量名</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>: nn, age, language&#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nn);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(language);</span><br></pre></td></tr></table></figure><h3 id="链判断"><a href="#链判断" class="headerlink" title="链判断"></a>链判断</h3><p>如果读取对象内部的某个属性，往往需要判断一下，属性的上层对象是否存在。</p><p>比如，读取message.body.user.firstName这个属性，安全的写法是写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  message = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">const</span>  firstName = message.<span class="property">body</span>.<span class="property">user</span>.<span class="property">firstName</span> || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">const</span> firstName = (message</span><br><span class="line">                   &amp;&amp; message.<span class="property">body</span></span><br><span class="line">                   &amp;&amp; message.<span class="property">body</span>.<span class="property">user</span></span><br><span class="line">                   &amp;&amp; message.<span class="property">body</span>.<span class="property">user</span>.<span class="property">firstName</span>) || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstName)</span><br></pre></td></tr></table></figure><p>这样的层层判断非常麻烦，因此 <a href="https://github.com/tc39/proposal-optional-chaining">ES2020</a> 引入了“链判断运算符”（optional chaining operator）<strong>?.</strong>，简化上面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = message?.<span class="property">body</span>?.<span class="property">user</span>?.<span class="property">firstName</span> || <span class="string">&#x27;default&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 ES6 以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断 b 是否为空，为空就给默认值 1</span></span><br><span class="line">  b = b || <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add2</span>(<span class="params">a, b = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add2</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>类似于Java中的lambda表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以前声明一个方法</span></span><br><span class="line"><span class="comment">// var print = function (obj) &#123;</span></span><br><span class="line"><span class="comment">// console.log(obj);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 可以简写为：</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">print</span> = obj =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">// 测试调用</span></span><br><span class="line"><span class="title function_">print</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个参数的情况：</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写为：</span></span><br><span class="line"><span class="comment">//当只有一行语句，并且需要返回结果时，可以省略 &#123;&#125; , 结果会自动返回。</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">sum2</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="comment">//测试调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum2</span>(<span class="number">10</span>, <span class="number">10</span>));<span class="comment">//20</span></span><br><span class="line"><span class="comment">// 代码不止一行，可以用`&#123;&#125;`括起来</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">sum3</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    c = a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum3</span>(<span class="number">10</span>, <span class="number">20</span>));<span class="comment">//30</span></span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> info = <span class="string">&quot;你好，我的名字是：【&quot;</span>+name+<span class="string">&quot;】，年龄是：【&quot;</span>+age+<span class="string">&quot;】，邮箱是：【】&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line"></span><br><span class="line"># 模板字符串的写法</span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`你好，我的名字是：<span class="subst">$&#123;name&#125;</span>，年龄是：<span class="subst">$&#123;person.age&#125;</span>，邮箱是：<span class="subst">$&#123;person.email&#125;</span>`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>代表 <code>异步对象</code>，类似Java中的 <code>CompletableFuture</code></p><p><strong>promise</strong> 是现代 JavaScript 中异步编程的基础，是一个由异步函数返回的可以向我们指示当前操作所处的状态的对象。在 Promise 返回给调用者的时候，操作往往还没有完成，但 Promise 对象可以让我们操作最终完成时对其进行处理（无论成功还是失败）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fetch:浏览器支持从远程获取数据的一个函数，这个函数返回的就是 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> fetchPromise = <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始发送请求...&quot;</span>)</span><br><span class="line"><span class="comment">//响应成功的处理逻辑</span></span><br><span class="line">fetchPromise.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已收到响应：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    response.<span class="title function_">json</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//响应失败的处理逻辑</span></span><br><span class="line">fetchPromise.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已发送请求……&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606100712450.png" alt="image-20240606100712450"></p><h4 id="fetch-api"><a href="#fetch-api" class="headerlink" title="fetch api"></a>fetch api</h4><ul><li>fetch 是浏览器支持从远程获取数据的一个函数，这个函数返回的就是 <code>Promise 对象</code></li><li>通过 fetch() API 得到一个 Response 对象<ul><li><strong>response.status</strong>： 读取响应状态码</li><li><strong>response.json()</strong>：读取响应体json数据；（<strong>这也是个异步对象</strong>）</li></ul></li></ul><h4 id="Promise状态"><a href="#Promise状态" class="headerlink" title="Promise状态"></a>Promise状态</h4><p>Promise 有三种状态：</p><ul><li><strong>待定（pending）</strong>：初始状态，既没有被兑现，也没有被拒绝。这是调用 fetch() 返回 Promise 时的状态，此时请求还在进行中。</li><li><strong>已兑现（fulfilled）</strong>：意味着操作成功完成。当 Promise 完成时，它的 then() 处理函数被调用。</li><li><strong>已拒绝（rejected）</strong>：意味着操作失败。当一个 Promise 失败时，它的 catch() 处理函数被调用。</li></ul><h4 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h4><p>如何自定义Promise对象?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 执行异步操作</span></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(value);<span class="comment">// 调用 resolve，代表 Promise 将返回成功的结果</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error);<span class="comment">// 调用 reject，代表 Promise 会返回失败结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>自定义Promise对象示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> get = <span class="keyword">function</span> (<span class="params">url, data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: data,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params">result</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">error</span>(<span class="params">error</span>) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Async-函数"><a href="#Async-函数" class="headerlink" title="Async 函数"></a>Async 函数</h3><p><strong>async function</strong> 声明创建一个绑定到给定名称的新异步函数。函数体内允许使用 await 关键字，这使得我们可以<strong>更简洁地编写基于 promise 的异步代码</strong>，并且<strong>避免了显式地配置 promise 链</strong>的需要。</p><ul><li><code>async 函数</code>是使用<code>async关键字声明的函数</code>。async 函数是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction">AsyncFunction</a> 构造函数的实例，并且其中允许使用 await 关键字。</li><li><code>async 和 await</code> 关键字让我们可以用一种更简洁的方式写出基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> 的异步行为，而无需刻意地链式调用 promise。</li><li><code>async 函数</code> 返回的还是 <code>Promise对象</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 这是一个异步函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在异步函数中，你可以在调用一个返回 Promise 的函数之前使用 <strong>await</strong> 关键字。这使得代码在该点上等待，直到 Promise 被完成，这时 Promise 的响应被当作返回值，或者被拒绝的响应被作为错误抛出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchProducts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 在这一行之后，我们的函数将等待 `fetch()` 调用完成</span></span><br><span class="line">    <span class="comment">// 调用 `fetch()` 将返回一个“响应”或抛出一个错误</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">      <span class="string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP 请求错误：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在这一行之后，我们的函数将等待 `response.json()` 的调用完成</span></span><br><span class="line">    <span class="comment">// `response.json()` 调用将返回 JSON 对象或抛出一个错误</span></span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`无法获取产品列表：<span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchProducts</span>();</span><br></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>实际项目中，不可能将所有的js代码写在某一个单独的文件中，在实际开发中需要模块化，</p><p><strong>将 JavaScript 程序拆分为可按需导入的单独模块</strong>的机制。Node.js 已经提供这个能力很长时间了，还有很多的 JavaScript 库和框架已经开始了模块的使用</p><p>下面演示一个模块化示例，主要包含三个文件:</p><ul><li>index.html：主页面</li><li>main.js：主js文件，里面从其他js文件中引入需要的内容</li><li>user.js：申明一些变量或函数供第三方使用</li></ul><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606103318267.png" alt="image-20240606103318267"></p><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ES6规范<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    //必须申明type为模块化 module</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是ES6模块化测试使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="user-js"><a href="#user-js" class="headerlink" title="user.js"></a>user.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在user.js中定义一个对象和一个对应的函数</span></span><br><span class="line"><span class="keyword">const</span>  user = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isAdult</span> = (<span class="params">age</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (age &gt; <span class="number">18</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成年人&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未成年&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要借助export关键字，向外暴露能被其他地方引用的对象</span></span><br><span class="line"><span class="keyword">export</span> &#123;user,isAdult&#125;</span><br></pre></td></tr></table></figure><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从user.js中导入需要的对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;user,isAdult&#125; <span class="keyword">from</span> <span class="string">&quot;./lib/user.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`姓名:<span class="subst">$&#123;user.username&#125;</span>,年龄:<span class="subst">$&#123;user.age&#125;</span>`</span>);</span><br><span class="line"><span class="title function_">isAdult</span>(user.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>npm 是 nodejs 中进行 <strong>包管理</strong> 的工具</p><p>以前引入第三方js，需要手动下载导入，现在只需用npm进行依赖的安装和管理</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li><p>安装nodejs <a href="https://nodejs.org/en">nodejs下载地址</a></p></li><li><p>配置npm</p><ul><li>```shell<br>npm config set registry <a href="https://registry.npmmirror.com">https://registry.npmmirror.com</a>  #设置国内阿里云镜像源<br>npm config get registry  #查看镜像源<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 常用命令</span><br><span class="line"></span><br><span class="line">- npm init： 项目初始化</span><br><span class="line">  - npm init -y：默认一路yes，不用挨个输入信息</span><br><span class="line">- npm install 包名：安装js包到项目中（仅当前项目有效）。指定 **包名**，或者 **包名@版本号**</span><br><span class="line">  - npm install -g： 全局安装，所有项目都能用</span><br><span class="line">  - 可以去 [npm仓库](https://www.npmjs.com/) 搜索第三方库</span><br><span class="line">- npm update 包名：升级包到最新版本</span><br><span class="line">- npm uninstall 包名：卸载包</span><br><span class="line">- npm run：项目运行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 使用示例</span><br><span class="line"></span><br><span class="line">创建一个文件目录`02-npm`，在其下执行`npm init -y`会初始化一个项目</span><br><span class="line"></span><br><span class="line">![image-20240606104558876](%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606104558876.png)</span><br><span class="line"></span><br><span class="line">目录中会多出一个`package.json`文件</span><br><span class="line"></span><br><span class="line">- **package.json** 文件一般都在每个项目的根目录下面，定义了这个项目所需要的各种模块，以及项目的配置信息，包括名称、版本、许可证、依赖模块等元数据。格式是严格的JSON格式</span><br><span class="line">- 当你执行 npm install 的时候，node 会先从 package.json 文件中读取所有 dependencies 信息，然后根据 dependencies 中的信息与 node_modules 中的模块进行对比，没有的直接下载，已有的检查更新。另外，package.json 文件只记录你通过 npm install 方式安装的模块信息，而这些模块所依赖的其他子模块的信息不会记录</span><br><span class="line"></span><br><span class="line">![image-20240606104627076](%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606104627076.png)</span><br><span class="line"></span><br><span class="line">安装所需依赖，假定我们需要使用jquery，则执行`npm install jquery`</span><br><span class="line"></span><br><span class="line">![image-20240606104849023](%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606104849023.png)</span><br><span class="line"></span><br><span class="line">![image-20240606143059363](%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606143059363.png)</span><br><span class="line"></span><br><span class="line">运行，`package.json`文件中的`scripts`中的命令我们可以通过`npm run xxx`来运行</span><br><span class="line"></span><br><span class="line">![image-20240606143435515](%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606143435515.png)</span><br><span class="line"></span><br><span class="line">我们分享或者从第三下载项目时，由于项目第三方依赖包很大，所以一般会把`node_modules`排除在外，那么我们在本地运行这些项目又需要第三方依赖怎么办？直接在项目中运行`npm install`其会自动根据`package.json`中依赖的第三方库及版本进行下载</span><br><span class="line"></span><br><span class="line">### 总结：npm使用流程</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712110492836-0f787e3a-4b9c-4236-8250-3912df233a20.webp&quot; alt=&quot;image.png&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">## Vite</span><br><span class="line"></span><br><span class="line">### 概述</span><br><span class="line"></span><br><span class="line">[官网](https://cn.vitejs.dev)</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606144119659.png&quot; alt=&quot;image-20240606144119659&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">- 快速创建前端项目脚手架</span><br><span class="line">- 统一的工程化规范：目录结构、代码规范、git提交规范 等</span><br><span class="line">- 自动化构建和部署：前端脚手架可以自动进行代码打包、压缩、合并、编译等常见的构建工作，可以通过集成自动化部署脚本，自动将代码部署到测试、生产环境等；</span><br><span class="line"></span><br><span class="line">### 常用命令</span><br><span class="line"></span><br><span class="line">#### 创建项目</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">npm create vite #根据向导选择技术栈</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install #安装项目所有依赖</span><br><span class="line"></span><br><span class="line">npm install axios #安装指定依赖到当前项目</span><br><span class="line">npm install -g xxx # 全局安装</span><br></pre></td></tr></table></figure><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev #启动项目</span><br></pre></td></tr></table></figure><h4 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build #构建后 生成 dist 文件夹</span><br></pre></td></tr></table></figure><h4 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h4><ul><li>前后分离方式：需要把 dist 文件夹内容部署到如 nginx 之类的服务器上</li><li>前后不分离方式：把 dist 文件夹内容复制到 SpringBoot 项目 <code>resources</code> 下面</li></ul><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>创建项目</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606144716638.png" alt="image-20240606144716638" style="zoom:67%;"></p><p>安装依赖、启动项目</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606145017250.png" alt="image-20240606145017250" style="zoom:67%;"></p><p>访问项目</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606145119005.png" alt="image-20240606145119005" style="zoom: 50%;"></p><p>项目打包</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606145317517.png" alt="image-20240606145317517"></p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606145411584.png" alt="image-20240606145411584"></p><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p><a href="https://cn.vuejs.org/guide/essentials/application.html">Vue官方文档</a></p><p>我们可以利用Vite工具链快速创建一个Vue项目</p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>组件系统是一个抽象的概念:</p><ul><li>组件：小型、独立、可复用的单元</li><li>组合：通过组件之间的组合、包含关系构建出一个完整应用</li></ul><p>几乎任意类型的应用界面都可以抽象为一个组件树</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1708754538888-ced4be1b-71b9-4238-9398-372985b1b99a.webp" alt="img"></p><h3 id="SFC"><a href="#SFC" class="headerlink" title="SFC"></a>SFC</h3><p>Vue 的<strong>单文件组件</strong> (即 <em>.vue 文件，英文 Single-File Component，简称 <em>*SFC</em></em>) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  //编写脚本</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  //编写页面模板</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  //编写样式</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue运行原理"><a href="#Vue运行原理" class="headerlink" title="Vue运行原理"></a>Vue运行原理</h3><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712477454104-1234f405-1fdf-457c-8b84-a4cae4f4645e.webp" alt="运行原理.png"></p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606151543916.png" alt="image-20240606151543916" style="zoom:67%;"></p><h3 id="Vue基础语法"><a href="#Vue基础语法" class="headerlink" title="Vue基础语法"></a>Vue基础语法</h3><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><p>页面展示的某个内容来自于某个变量，如何将变量的值显示在页面的正确位置，需要用到插值，直接在html中需要的位置<code>&#123;&#123;变量名&#125;&#125;</code>即可引用变量值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义基本数据变量</span><br><span class="line">let name=&quot;张三&quot;;</span><br><span class="line">let age=27;</span><br><span class="line">let scores=&#123;</span><br><span class="line">  &quot;数学&quot;:129,</span><br><span class="line">  &quot;英语&quot;:136,</span><br><span class="line">  &quot;政治&quot;:89</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">      &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;数学&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;英语&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;政治&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;/thead&gt;</span><br><span class="line">      &lt;tbody&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;name&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;age&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;scores.数学&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;scores.英语&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;scores.政治&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606152744403.png" alt="image-20240606152744403"></p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p><a href="https://cn.vuejs.org/api/built-in-directives.html">vue指令官方文档</a></p><h5 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h5><p>可以为元素绑定特定的事件，比如点击按钮出发某个函数等操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//顶一个对应的函数</span><br><span class="line">function buy()&#123;</span><br><span class="line">  alert(&quot;欢迎选购！！！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button v-on:click=&quot;buy&quot;&gt;点击购买&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="条件判断v-if"><a href="#条件判断v-if" class="headerlink" title="条件判断v-if"></a>条件判断v-if</h5><p>比如根据某个条件，决定页面显示的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义变量</span><br><span class="line">let person=&#123;</span><br><span class="line">  name:&quot;章三&quot;,</span><br><span class="line">  age:27</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!--根据age大小显示不同内容--&gt;</span><br><span class="line">    &lt;span style=&quot;color: red&quot; v-if=&quot;person.age&gt;18&quot;&gt;成年人&lt;/span&gt;</span><br><span class="line">    &lt;span style=&quot;color: blue&quot; v-else&gt;未成年人&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="循环指令v-for"><a href="#循环指令v-for" class="headerlink" title="循环指令v-for"></a>循环指令v-for</h5><p>比如循环显示某个列表的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义变量</span><br><span class="line">let persons=[&quot;章三&quot;,&quot;里斯&quot;,&quot;王五&quot;,&quot;赵六&quot;]</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;li v-for=&quot;person in persons&quot;&gt;&#123;&#123;person&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606160128431.png" alt="image-20240606160128431"></p><h5 id="属性绑定v-bind"><a href="#属性绑定v-bind" class="headerlink" title="属性绑定v-bind"></a>属性绑定v-bind</h5><p>动态地绑定一个或者多个属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义变量</span><br><span class="line">let url = &quot;https://www.baidu.com&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 将a标签href属性与变量url动态绑定 --&gt;</span><br><span class="line">    &lt;a v-bind:href=&quot;url&quot;&gt;跳转&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>注意:此时如果我们想修改变量的值，属性值并不会跟着修改</p><h4 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h4><p>前面个通过指令绑定，数据地动态变化无法反馈到页面元素中</p><p>Vue通过<code>ref()</code>和<code>reactive()</code>包装数据，将会生成一个数据的代理对象。vue内部的 <strong>基于依赖追踪的响应式系统</strong> 就会<strong>追踪</strong>感知<strong>数据变化</strong>，并<strong>触发页面</strong>的重新<strong>渲染</strong></p><h5 id="响应式-ref"><a href="#响应式-ref" class="headerlink" title="响应式-ref()"></a>响应式-ref()</h5><h6 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h6><ul><li>使用 <strong>ref()</strong> 包装<strong>原始类型、对象类型数据</strong>，生成 <strong>代理对象</strong></li><li><strong>任何方法、js代码中</strong>，使用 <code>代理对象.value</code> 的形式读取和修改值</li><li><strong>页面组件中</strong>，直接使用 <code>代理对象</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义变量</span><br><span class="line">import &#123;ref&#125; from &quot;vue&quot;;</span><br><span class="line">//ref生成代理对象</span><br><span class="line">let num = ref(0);</span><br><span class="line">let incr = function ()&#123;</span><br><span class="line">  num.value++;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;&lt;button v-on:click=&quot;incr&quot;&gt;增加&lt;/button&gt;&lt;/span&gt;</span><br><span class="line">    &lt;!-- 动态显示num的值 --&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;num&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="响应式-reactive"><a href="#响应式-reactive" class="headerlink" title="响应式-reactive()"></a>响应式-reactive()</h5><h6 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h6><ul><li>使用 <strong>reactive()</strong> 包装<strong>对象类型数据</strong>，生成 <strong>代理对象</strong></li><li><strong>任何方法、js代码中</strong>，使用 <code>代理对象.属性</code>的形式读取和修改值</li><li><strong>页面组件中</strong>，直接使用 <code>代理对象.属性</code></li></ul><h5 id="ref-vs-reactive"><a href="#ref-vs-reactive" class="headerlink" title="ref() vs reactive()"></a>ref() vs reactive()</h5><p>两者差异比较：</p><ul><li><code>ref()</code>可以包装<strong>原始类型、对象类型数据</strong></li><li><p><code>reactive()</code>只能包装<strong>对象类型数据</strong></p></li><li><p><code>ref()</code>使用时，需要<code>对象.value.属性</code>，而<code>reactive()</code>可以直接<code>对象.属性</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义变量</span><br><span class="line">import &#123;reactive, ref&#125; from &quot;vue&quot;;</span><br><span class="line">//ref生成代理对象</span><br><span class="line">let car1 = ref(&#123;</span><br><span class="line">  brand:&quot;比亚迪&quot;,</span><br><span class="line">  price:10000</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let car2 = reactive(&#123;</span><br><span class="line">  brand:&quot;小米&quot;,</span><br><span class="line">  price:10000</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//ref包装对象，要使用到值，需要: 对象.value.属性</span><br><span class="line">let incr1 = function ()&#123;</span><br><span class="line">  car1.value.price+=10000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//reactive包装对象，要使用到值只需: 对象.属性</span><br><span class="line">let incr2 = function ()&#123;</span><br><span class="line">  car2.price+=1000;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;汽车:&#123;&#123;car1.brand&#125;&#125;，价格:&#123;&#123;car1.price&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车:&#123;&#123;car2.brand&#125;&#125;，价格:&#123;&#123;car2.price&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;incr1&quot;&gt;比亚迪涨价&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incr2&quot;&gt;小米涨价&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="表单绑定"><a href="#表单绑定" class="headerlink" title="表单绑定"></a>表单绑定</h4><p>前面我们使用的<code>v-bind</code>只能实现从数据到页面的单向绑定，数据变化可以在页面中体现出来，但是页面变化无法体现在数据变量中</p><p>我们可以使用<code>v-model</code>在表单输入元素或者组件上创建双向绑定，即数据改了可以传递到页面，页面改了可以传递到数据变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123;reactive&#125; from &quot;vue&quot;;</span><br><span class="line">  //将data的各个属性与表单进行绑定</span><br><span class="line">  const data=reactive(&#123;</span><br><span class="line">    name:&quot;章三&quot;,</span><br><span class="line">    agree:true,</span><br><span class="line">    hobby:[],</span><br><span class="line">    gender:&quot;男&quot;,</span><br><span class="line">    degree:&quot;&quot;,</span><br><span class="line">    course:[]</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;display: flex;&quot;&gt;</span><br><span class="line">    &lt;div style=&quot;border: 1px solid black;width: 300px&quot;&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;h1&gt;表单绑定&lt;/h1&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">          &lt;label&gt;姓名(文本框)：&lt;/label&gt;</span><br><span class="line">          &lt;input v-model=&quot;data.name&quot;/&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;&lt;label&gt;同意协议(checkbox)：&lt;/label&gt;</span><br><span class="line">          &lt;input type=&quot;checkbox&quot; v-model=&quot;data.agree&quot;/&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">          &lt;label&gt;兴趣(多选框)：&lt;/label&gt;&lt;br/&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;足球&quot; v-model=&quot;data.hobby&quot;/&gt;足球&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;篮球&quot; v-model=&quot;data.hobby&quot;/&gt;篮球&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;羽毛球&quot; v-model=&quot;data.hobby&quot;/&gt;羽毛球&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;乒乓球&quot; v-model=&quot;data.hobby&quot;/&gt;乒乓球&lt;/label&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">          &lt;label&gt;性别(单选框)：&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; v-model=&quot;data.gender&quot;&gt;男&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; v-model=&quot;data.gender&quot;&gt;女&lt;/label&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">          &lt;label&gt;学历(单选下拉列表)：&lt;/label&gt;</span><br><span class="line">          &lt;select v-model=&quot;data.degree&quot;&gt;</span><br><span class="line">            &lt;option disabled value=&quot;&quot;&gt;选择学历&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;小学&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;初中&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;高中&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;大学&lt;/option&gt;</span><br><span class="line">          &lt;/select&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">          &lt;label&gt;课程(多选下拉列表)：&lt;/label&gt;</span><br><span class="line">          &lt;br/&gt;</span><br><span class="line">          &lt;select multiple v-model=&quot;data.course&quot;&gt;</span><br><span class="line">            &lt;option disabled value=&quot;&quot;&gt;选择课程&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;语文&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;数学&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;英语&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;道法&lt;/option&gt;</span><br><span class="line">          &lt;/select&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=&quot;border: 1px solid blue;width: 200px&quot;&gt;</span><br><span class="line">      &lt;h1&gt;结果预览&lt;/h1&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;&lt;label&gt;姓名：&#123;&#123;data.name&#125;&#125;&lt;/label&gt;&lt;/p&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;&lt;label&gt;同意协议：&#123;&#123;data.agree&#125;&#125;&lt;/label&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">        &lt;label&gt;兴趣：</span><br><span class="line">          &lt;li v-for=&quot;h in data.hobby&quot;&gt;&#123;&#123;h&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">        &lt;label&gt;性别：&#123;&#123;data.gender&#125;&#125;&lt;/label&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">        &lt;label&gt;学历：&#123;&#123;data.degree&#125;&#125;&lt;/label&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">        &lt;label&gt;课程：</span><br><span class="line">          &lt;li v-for=&quot;c in data.course&quot;&gt;&#123;&#123;c&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606191540670.png" alt="image-20240606191540670" style="zoom:67%;"></p><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>根据已有的数据计算出新数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;computed, reactive&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">    const car = reactive(&#123;</span><br><span class="line">      brand:&quot;小米&quot;,</span><br><span class="line">      price:1000,</span><br><span class="line">      number:10</span><br><span class="line">    &#125;);</span><br><span class="line">    //总价由单价×数目得到</span><br><span class="line">    const totalPrice = computed(()=&gt;car.price*car.number);</span><br><span class="line"></span><br><span class="line">    //涨价函数</span><br><span class="line">    let addPrice = function()&#123;</span><br><span class="line">      car.price+=100;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;汽车品牌:&#123;&#123;car.brand&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车单价:&#123;&#123;car.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车数目:&#123;&#123;car.number&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;总价:&#123;&#123;totalPrice&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;addPrice&quot;&gt;加价&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;car.number++&quot;&gt;加数目&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606192330189.png" alt="image-20240606192330189"></p><h3 id="vue进阶使用"><a href="#vue进阶使用" class="headerlink" title="vue进阶使用"></a>vue进阶使用</h3><h4 id="监听-watch"><a href="#监听-watch" class="headerlink" title="监听 watch"></a>监听 watch</h4><p><a href="https://www.cnblogs.com/steamed-twisted-roll/p/17130597.html">vue3使用watch的注意事项</a></p><p>监听某个变量或者属性值的变化，然后执行对应的业务逻辑处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;computed, reactive, watch&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">    const car = reactive(&#123;</span><br><span class="line">      brand:&quot;小米&quot;,</span><br><span class="line">      price:1000,</span><br><span class="line">      number:1</span><br><span class="line">    &#125;);</span><br><span class="line">    //总价由单价×数目得到</span><br><span class="line">    const totalPrice = computed(()=&gt;car.price*car.number);</span><br><span class="line"></span><br><span class="line">    //涨价函数</span><br><span class="line">    let addPrice = function()&#123;</span><br><span class="line">      car.price+=100;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //监听数目的变化，如果汽车数目超过了5，则弹出限购提示</span><br><span class="line">    //对象的属性必须使用()=&gt;对象.属性这种形式</span><br><span class="line">    watch(()=&gt;car.number,()=&gt;&#123;</span><br><span class="line">      if(car.number&gt;5)&#123;</span><br><span class="line">        alert(&quot;当前购买数量超出5&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;汽车品牌:&#123;&#123;car.brand&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车单价:&#123;&#123;car.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车数目:&#123;&#123;car.number&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;总价:&#123;&#123;totalPrice&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;addPrice&quot;&gt;加价&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;car.number++&quot;&gt;加数目&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="监听-watchEffect"><a href="#监听-watchEffect" class="headerlink" title="监听 watchEffect"></a>监听 watchEffect</h4><p>watch只能监听单个ref或者reactive对象，我们可以使用watchEffective同时监听所有的ref或者reactive对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;computed, reactive, watch, watchEffect&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">    const car = reactive(&#123;</span><br><span class="line">      brand:&quot;小米&quot;,</span><br><span class="line">      price:1000,</span><br><span class="line">      number:1</span><br><span class="line">    &#125;);</span><br><span class="line">    //总价由单价×数目得到</span><br><span class="line">    const totalPrice = computed(()=&gt;car.price*car.number);</span><br><span class="line"></span><br><span class="line">    //涨价函数</span><br><span class="line">    let addPrice = function()&#123;</span><br><span class="line">      car.price+=100;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //监听数目的变化，如果汽车数目超过了5，则弹出限购提示</span><br><span class="line">    //监听价格变化，价格如果超出1500，则弹出太贵了的提示</span><br><span class="line">    //watchEffect会自动监听所有的ref或者reactive对象</span><br><span class="line">    watchEffect(()=&gt;&#123;</span><br><span class="line">      if(car.number&gt;5)&#123;</span><br><span class="line">        alert(&quot;超出限购&quot;);</span><br><span class="line">        car.number=5;</span><br><span class="line">      &#125;</span><br><span class="line">      if(car.price&gt;1500)&#123;</span><br><span class="line">        alert(&quot;太贵了&quot;);</span><br><span class="line">        car.price=1500;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;汽车品牌:&#123;&#123;car.brand&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车单价:&#123;&#123;car.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车数目:&#123;&#123;car.number&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;总价:&#123;&#123;totalPrice&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;addPrice&quot;&gt;加价&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;car.number++&quot;&gt;加数目&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h4><p><a href="https://cn.vuejs.org/api/options-lifecycle.html">官网关于生命周期的介绍</a></p><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为生命周期钩子的函数，让开发者有机会在特定阶段运行自己的代码。</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712714322676-1b2be398-47b7-4901-ab8d-f5dff873a8ab.png" alt="img" style="zoom: 33%;"></p><p>生命周期整体分为四个阶段，分别是：<code>创建、挂载、更新、销毁</code>，每个阶段都有两个钩子，一前一后。</p><p>常用的钩子:</p><ul><li>onBeforeMount：挂载之前</li><li>onMounte：挂载完成</li><li>onBeforeUpdate：更新之前</li><li>onUpdated：更新完成</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;onBeforeMount, onBeforeUpdate, onMounted, onUpdated, ref&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">  const count = ref(0);</span><br><span class="line">  // 生命周期钩子</span><br><span class="line">  //常见场景：在挂载之前，即onBeforeMount之前向后台发送请求数据</span><br><span class="line"></span><br><span class="line">  //挂载之前有值，无页面元素</span><br><span class="line">  onBeforeMount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载之前&#x27;,count.value,document.getElementById(&quot;btn01&quot;))</span><br><span class="line">  &#125;)</span><br><span class="line">  //挂载之后才有页面元素</span><br><span class="line">  onMounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载完毕&#x27;,count.value,document.getElementById(&quot;btn01&quot;))</span><br><span class="line">  &#125;)</span><br><span class="line">  //更新之前数据变了，但是页面内容未变动</span><br><span class="line">  onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新之前&#x27;,count.value,document.getElementById(&quot;btn01&quot;).innerHTML)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUpdated(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新完毕&#x27;,count.value,document.getElementById(&quot;btn01&quot;).innerHTML)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button id=&quot;btn01&quot; @click=&quot;count++&quot;&gt;点&#123;&#123;count&#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h4><p>项目中每一个vue文件都相当于一个组件， 一个大型项目由很多组件组成，这些组件之间如何进行值的传递？</p><h5 id="父传子-Prop"><a href="#父传子-Prop" class="headerlink" title="父传子-Prop"></a>父传子-Prop</h5><p>父组件给子组件传递值，单向数据流效果</p><ul><li>父组件修改值，子组件发生变化</li><li>子组件修改值，父组件发生变化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//父组件给子组件传递数据：使用属性绑定</span><br><span class="line">&lt;Son :books=&quot;data.books&quot; :money=&quot;data.money&quot;/&gt;</span><br><span class="line">  </span><br><span class="line">//子组件定义接受父组件的属性</span><br><span class="line">let props = defineProps(&#123;</span><br><span class="line">  money: &#123;</span><br><span class="line">    type: Number,</span><br><span class="line">    required: true,</span><br><span class="line">    default: 200</span><br><span class="line">  &#125;,</span><br><span class="line">  books: Array</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//在父组件里，给子组件传递数据，使用属性绑定</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Son from &quot;./Son.vue&quot;;</span><br><span class="line">let money=1000</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Father&lt;/h2&gt;</span><br><span class="line">  &lt;son :money=&quot;money&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//在子组件里，定义接收父组件数据的属性</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let props = defineProps([&quot;money&quot;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 style=&quot;color: red&quot;&gt;son&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;money:&#123;&#123;money&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="子传父-Emit"><a href="#子传父-Emit" class="headerlink" title="子传父-Emit"></a>子传父-Emit</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//子组件定义发生的事件</span><br><span class="line">let emits = defineEmits([&#x27;buy&#x27;]);</span><br><span class="line">function buy()&#123;</span><br><span class="line">  // props.money -= 5;</span><br><span class="line">  emits(&#x27;buy&#x27;,-5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//父组件感知事件和接受事件值</span><br><span class="line">  &lt;Son :books=&quot;data.books&quot; :money=&quot;data.money&quot;</span><br><span class="line">       @buy=&quot;moneyMinis&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="插槽-slots"><a href="#插槽-slots" class="headerlink" title="插槽-slots"></a>插槽-slots</h4><p>插槽也可以进行组件之间的传值（html元素）的传递</p><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">import Son from &quot;./Son.vue&quot;;</span><br><span class="line">import &#123;reactive&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const car=reactive(&#123;</span><br><span class="line">  brand:&quot;小米&quot;,</span><br><span class="line">  price:1000</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Father&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;汽车品牌:&#123;&#123;car.brand&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;汽车价格:&#123;&#123;car.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;car.price+=100&quot;&gt;涨价&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">  &lt;son :car=&quot;car&quot;&gt;</span><br><span class="line">    哈哈，我是谁??</span><br><span class="line">  &lt;/son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let props = defineProps([&quot;car&quot;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 style=&quot;color: red&quot;&gt;son&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;汽车品牌:&#123;&#123;props.car.brand&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;汽车价格:&#123;&#123;props.car.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;props.car.price-=100&quot;&gt;降价&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h4&gt;来自于父组件使用slot传递的内容:&lt;slot/&gt;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240607200626824.png" alt="image-20240607200626824" style="zoom:50%;"></p><h5 id="插槽可以带默认值"><a href="#插槽可以带默认值" class="headerlink" title="插槽可以带默认值"></a>插槽可以带默认值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">let props = defineProps([&quot;car&quot;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 style=&quot;color: red&quot;&gt;son&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;汽车品牌:&#123;&#123;props.car.brand&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;汽车价格:&#123;&#123;props.car.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;props.car.price-=100&quot;&gt;降价&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h4&gt;来自于父组件使用slot传递的内容:&lt;slot&gt;我是slot默认值&lt;/slot&gt;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240607200745242.png" alt="image-20240607200745242" style="zoom:50%;"></p><h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><p>当子组件中多个地方需要插槽，应当如何进行区分</p><p>对于子组件，给插槽取名称<code>&lt;slot name=&quot;名称&quot;&gt;&lt;/slot&gt;</code></p><p>对于父组件，使用template定义插槽’<template v-slot:名称>内容</template>‘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">import Son from &quot;./Son.vue&quot;;</span><br><span class="line">import &#123;reactive&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const car=reactive(&#123;</span><br><span class="line">  brand:&quot;小米&quot;,</span><br><span class="line">  price:1000</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Father&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;汽车品牌:&#123;&#123;car.brand&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;汽车价格:&#123;&#123;car.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;car.price+=100&quot;&gt;涨价&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">  &lt;son :car=&quot;car&quot;&gt;</span><br><span class="line">    &lt;template v-slot:slot1&gt;</span><br><span class="line">      插槽1</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">//v-slot可以用 #代替</span><br><span class="line">    &lt;template #slot2&gt;</span><br><span class="line">      &lt;span style=&quot;color: red&quot;&gt;插槽2&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let props = defineProps([&quot;car&quot;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 style=&quot;color: red&quot;&gt;son&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;汽车品牌:&#123;&#123;props.car.brand&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;汽车价格:&#123;&#123;props.car.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;props.car.price-=100&quot;&gt;降价&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h4&gt;来自于父组件使用slot传递的内容:&lt;slot&gt;我是slot默认值&lt;/slot&gt;&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">  &lt;slot name=&quot;slot1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;slot name=&quot;slot2&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240607201429542.png" alt="image-20240607201429542" style="zoom:50%;"></p><h3 id="vu3总结"><a href="#vu3总结" class="headerlink" title="vu3总结"></a>vu3总结</h3><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712737404128-2d94429f-b301-408e-ac3a-88e175b1d45f.webp" alt="未命名绘图.png"></p><p>几个简写：</p><ul><li><p><code>v-on</code>=<code>@</code></p></li><li><p><code>v-bind</code>= <code>:</code></p></li><li><code>v-slot</code>= <code>#</code></li></ul><h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h2><h3 id="路由概述"><a href="#路由概述" class="headerlink" title="路由概述"></a>路由概述</h3><p><a href="https://router.vuejs.org/zh/introduction.html">vue router官方文档</a></p><p>前端系统根据页面路径。跳转到指定的组件，展示对应的页面效果</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1709801835501-9cce06a4-3956-4095-8cb3-8a792dd15026.png" alt="img" style="zoom:67%;"></p><h3 id="路由入门示例"><a href="#路由入门示例" class="headerlink" title="路由入门示例"></a>路由入门示例</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">选择对应的项目和语言</span></span><br></pre></td></tr></table></figure><h4 id="整合vue-router"><a href="#整合vue-router" class="headerlink" title="整合vue-router"></a>整合vue-router</h4><p>参照官方文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装依赖</span></span><br><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><p><a href="https://router.vuejs.org/zh/guide/">官方入门案例</a></p><h4 id="路由配置的一般步骤"><a href="#路由配置的一般步骤" class="headerlink" title="路由配置的一般步骤"></a>路由配置的一般步骤</h4><ol><li>编写<code>router/index.js</code>文件</li><li>在<code>index.js</code>中配置路由信息</li><li>在<code>index.js</code>中创建路由器并导出</li><li>在<code>main.js</code>中使用路由</li><li>在相应的页面使用<code>router-link</code>和<code>router-view</code>完成路由功能</li></ol><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><code>router/index.js</code>内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.配置路由信息</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../views/home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dog <span class="keyword">from</span> <span class="string">&quot;../views/dog.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createMemoryHistory, createRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//定义路由规则，将路由与对应页面绑定</span></span><br><span class="line"><span class="comment">//有如下两种路由定义的写法</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>: home&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/dog&#x27;</span>,<span class="attr">component</span>: dog&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/cat&quot;</span>,<span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;../views/cat.vue&#x27;</span>)&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">        <span class="attr">history</span>: <span class="title function_">createMemoryHistory</span>(),</span><br><span class="line">        routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出路由，供main.js使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><code>main.js</code>内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router/index.js&quot;</span>;</span><br><span class="line"><span class="comment">//4.注册路由插件,使用use(xx)</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>App.vue</code>内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 使用组件 RouterLink 来创建链接 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;首页Home&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/dog&quot;&gt;dog页面&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/cat&quot;&gt;cat页面&lt;/router-link&gt;</span><br><span class="line">    &lt;!-- RouterView 组件可以使 Vue Router 知道你想要在哪里渲染当前 URL 路径对应的路由组件 --&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><p>使用 <code>:变量名</code>接受动态参数；这个成为 <em>路径参数</em>，类似与<code>Spring MVC</code>中的<code>path variable</code></p><p><code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.配置路由信息</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../views/home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dog <span class="keyword">from</span> <span class="string">&quot;../views/dog.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createMemoryHistory, createRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//定义路由规则，将路由与对应页面绑定</span></span><br><span class="line"><span class="comment">//有如下两种路由定义的写法</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>: home&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/dog&#x27;</span>,<span class="attr">component</span>: dog&#125;,</span><br><span class="line">    <span class="comment">//这样使用路由 /cat/11或者/cat/jkk或者/cat/xxx均指向的是cat.vue页面组件</span></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/cat:id&quot;</span>,<span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;../views/cat.vue&#x27;</span>)&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">        <span class="attr">history</span>: <span class="title function_">createMemoryHistory</span>(),</span><br><span class="line">        routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出路由，供main.js使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>多级路由嵌套，比如从父页面跳转到子页面，再从子页面可以到孙页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由编写规则</span></span><br><span class="line"><span class="comment">//1.配置路由信息</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../views/home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dog <span class="keyword">from</span> <span class="string">&quot;../views/dog.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createMemoryHistory, createRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&quot;../views/user.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> userEmail <span class="keyword">from</span> <span class="string">&quot;../views/userEmail.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> userDetail <span class="keyword">from</span> <span class="string">&quot;../views/userDetail.vue&quot;</span>;</span><br><span class="line"><span class="comment">//定义路由规则，将路由与对应页面绑定</span></span><br><span class="line"><span class="comment">//有如下两种路由定义的写法</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>: home&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: user,</span><br><span class="line">        <span class="attr">children</span>: [ <span class="comment">//嵌套子页面</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 当 /user/:id/email 匹配成功</span></span><br><span class="line">                <span class="comment">// userEmail 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;email&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: userEmail,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 当 /user/:id/detail 匹配成功</span></span><br><span class="line">                <span class="comment">// userDetail 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: userDetail,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">        <span class="attr">history</span>: <span class="title function_">createMemoryHistory</span>(),</span><br><span class="line">        routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出路由，供main.js使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h3><h4 id="useRoute：路由数据"><a href="#useRoute：路由数据" class="headerlink" title="useRoute：路由数据"></a>useRoute：路由数据</h4><p>路由传参跳转到指定页面后，页面需要取到传递过来的值，可以使用 <code>useRoute</code>方法，拿到当前页路由数据；可以做</p><ul><li>获取到当前路径</li><li>获取到组件名</li><li>获取到参数</li><li>获取到查询字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印query参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br><span class="line"><span class="comment">// 打印params参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">params</span>)</span><br></pre></td></tr></table></figure><h4 id="useRouter：路由器"><a href="#useRouter：路由器" class="headerlink" title="useRouter：路由器"></a>useRouter：路由器</h4><p>拿到路由器；可以控制跳转、回退等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute, useRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="comment">//push:跳到指定路由</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go(1) 相当于浏览器上的下一个页面</span></span><br><span class="line"><span class="comment">//go(-1) 相当于浏览器回滚到上一个页面</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute, useRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/users/eduardo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/eduardo&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立 url</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;eduardo&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带 hash，结果是 /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">hash</span>: <span class="string">&#x27;#team&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意： `params` 不能与 `path` 一起使用</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;) <span class="comment">//错误用法 -&gt; /user</span></span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="params-参数"><a href="#params-参数" class="headerlink" title="params 参数"></a>params 参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">        name:&#x27;xiang&#x27;, //用name跳转，params情况下，不可用path</span><br><span class="line">        params:&#123;</span><br><span class="line">          id:news.id,</span><br><span class="line">          title:news.title,</span><br><span class="line">          content:news.title</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><h4 id="query-参数"><a href="#query-参数" class="headerlink" title="query 参数"></a>query 参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;</span><br><span class="line">跳转</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    //name:&#x27;xiang&#x27;, //用name也可以跳转</span><br><span class="line">    path:&#x27;/news/detail&#x27;,</span><br><span class="line">    query:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>具体使用细节参照<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">导航守卫官方文档</a></p><p>类似于拦截器，再跳转到指定页面之前进行相应的逻辑处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createRouter, createWebHistory&#125; from &#x27;vue-router&#x27;</span><br><span class="line">import HomeView from &#x27;../views/HomeView.vue&#x27;</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    history: createWebHistory(import.meta.env.BASE_URL),</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: &#x27;/&#x27;,</span><br><span class="line">            name: &#x27;home&#x27;,</span><br><span class="line">            component: HomeView</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &#x27;/about&#x27;,</span><br><span class="line">            name: &#x27;about&#x27;,</span><br><span class="line">            // route level code-splitting</span><br><span class="line">            // this generates a separate chunk (About.[hash].js) for this route</span><br><span class="line">            // which is lazy-loaded when the route is visited.</span><br><span class="line">            component: () =&gt; import(&#x27;../views/AboutView.vue&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &#x27;/user/:name&#x27;,</span><br><span class="line">            name: &#x27;User&#x27;,</span><br><span class="line">            component: () =&gt; import(&#x27;@/views/user/UserInfo.vue&#x27;),</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: &#x27;profile&#x27;,</span><br><span class="line">                    component: () =&gt; import(&#x27;@/views/user/Profile.vue&#x27;)</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: &#x27;posts&#x27;,</span><br><span class="line">                    component: () =&gt; import(&#x27;@/views/user/Posts.vue&#x27;)</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(async (to, from) =&gt; &#123;</span><br><span class="line">    console.log(&quot;守卫：to：&quot;, to)</span><br><span class="line">    console.log(&quot;守卫：from：&quot;, from)</span><br><span class="line">    if (to.fullPath === &#x27;/about&#x27;) &#123;</span><br><span class="line">       return &quot;/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h3 id="vue-router总结"><a href="#vue-router总结" class="headerlink" title="vue-router总结"></a>vue-router总结</h3><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712842500600-cd5098c4-2c44-4932-867b-1db92c5aa2bb.webp" alt="未命名绘图001.png"></p><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><a href="https://www.axios-http.cn/docs/intro">Axios官方文档</a></p><p>Axios 是一个基于 promise 的网络请求库，可以用于浏览器和 node.js，主要用于前端向后端请求数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//安装</span><br><span class="line">npm install axios</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//基本用法</span><br><span class="line">import axios from &quot;axios&quot;</span><br><span class="line">axios.get(&#x27;/user&#x27;)</span><br><span class="line">     .then(res =&gt; console.log(resp.data))</span><br></pre></td></tr></table></figure><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向给定ID的用户发起请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理成功情况</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理错误情况</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 总是会执行</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>携带请求参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上述请求也可以按以下方式完成（可选）</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 总是会执行</span></span><br><span class="line">  &#125;);  </span><br></pre></td></tr></table></figure><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><p>默认<code>post请求体</code>中的数据将会以<code>json</code>方式提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>响应的数据结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  <span class="attr">statusText</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是服务器响应头</span></span><br><span class="line">  <span class="comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span></span><br><span class="line">  <span class="comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `config` 是 `axios` 请求的配置信息</span></span><br><span class="line">  <span class="attr">config</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `request` 是生成此响应的请求</span></span><br><span class="line">  <span class="comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span></span><br><span class="line">  <span class="comment">// 在浏览器中则是 XMLHttpRequest 实例</span></span><br><span class="line">  <span class="attr">request</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可用的配置项如下：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 它只能用于 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream</span></span><br><span class="line">  <span class="comment">// 你可以修改请求头。</span></span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">    <span class="comment">// 对发送的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 对接收的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义请求头</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个简单对象或 URLSearchParams 对象</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `paramsSerializer`是可选方法，主要用于序列化`params`</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  <span class="attr">paramsSerializer</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Qs</span>.<span class="title function_">stringify</span>(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求体被发送的数据</span></span><br><span class="line">  <span class="comment">// 仅适用 &#x27;PUT&#x27;, &#x27;POST&#x27;, &#x27;DELETE 和 &#x27;PATCH&#x27; 请求方法</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属: FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属: Stream, Buffer</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送请求体数据的可选语法</span></span><br><span class="line">  <span class="comment">// 请求方式 post</span></span><br><span class="line">  <span class="comment">// 只有 value 会被发送，key 则不会</span></span><br><span class="line">  <span class="attr">data</span>: <span class="string">&#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数。</span></span><br><span class="line">  <span class="comment">// 如果请求时间超过 `timeout` 的值，则请求会被中断</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>, <span class="comment">// 默认值是 `0` (永不超时)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，这使测试更加容易。</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span></span><br><span class="line">  <span class="attr">adapter</span>: <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `auth` HTTP Basic Auth</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;janedoe&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;s00pers3cret&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseType` 表示浏览器将要响应的数据类型</span></span><br><span class="line">  <span class="comment">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  <span class="comment">// 浏览器专属：&#x27;blob&#x27;</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span></span><br><span class="line">  <span class="comment">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">  <span class="attr">responseEncoding</span>: <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span></span><br><span class="line">  <span class="attr">xsrfCookieName</span>: <span class="string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span></span><br><span class="line">  <span class="attr">xsrfHeaderName</span>: <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  <span class="attr">onUploadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  <span class="attr">onDownloadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span></span><br><span class="line">  <span class="attr">maxContentLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span></span><br><span class="line">  <span class="attr">maxBodyLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span></span><br><span class="line">  <span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line">  <span class="comment">// 则promise 将会 resolved，否则是 rejected。</span></span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认值</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span></span><br><span class="line">  <span class="comment">// 如果设置为0，则不会进行重定向</span></span><br><span class="line">  <span class="attr">maxRedirects</span>: <span class="number">5</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span></span><br><span class="line">  <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span></span><br><span class="line">  <span class="comment">// 只能指定 `socketPath` 或 `proxy` 。</span></span><br><span class="line">  <span class="comment">// 若都指定，这使用 `socketPath` 。</span></span><br><span class="line">  <span class="attr">socketPath</span>: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span></span><br><span class="line">  <span class="comment">// and https requests, respectively, in node.js. This allows options to be added like</span></span><br><span class="line">  <span class="comment">// `keepAlive` that are not enabled by default.</span></span><br><span class="line">  <span class="attr">httpAgent</span>: <span class="keyword">new</span> http.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `proxy` 定义了代理服务器的主机名，端口和协议。</span></span><br><span class="line">  <span class="comment">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span></span><br><span class="line">  <span class="comment">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span></span><br><span class="line">  <span class="comment">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span></span><br><span class="line">  <span class="comment">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// see https://axios-http.com/zh/docs/cancellation</span></span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> (<span class="params">cancel</span>) &#123;</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `decompress` indicates whether or not the response body should be decompressed </span></span><br><span class="line">  <span class="comment">// automatically. If set to `true` will also remove the &#x27;content-encoding&#x27; header </span></span><br><span class="line">  <span class="comment">// from the responses objects of all decompressed responses</span></span><br><span class="line">  <span class="comment">// - Node only (XHR cannot turn off decompression)</span></span><br><span class="line">  <span class="attr">decompress</span>: <span class="literal">true</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="pina"><a href="#pina" class="headerlink" title="pina"></a>pina</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><a href="https://pinia.vuejs.org/zh/introduction.html">官方文档</a></p><p><strong>Pinia</strong> 是 Vue 的<strong>存储库</strong>，它允许您<strong>跨组件/页面共享状态</strong>。<br>背景：</p><p>对于一个web页面，用户登录之后，其他各个组件需要使用用户的信息，这个时候我们可以使用前面讲过的<code>vue-router</code>路由传参或者<code>vue</code>组件传值的方式来进行数据传输，但是这两个方式比较繁琐，所以需要引入pinia，来进行库组件数据共享。</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240611225430746.png" alt="image-20240611225430746" style="zoom: 33%;"></p><p>Pinia 三个核心概念：</p><ul><li>State：表示 Pinia Store 内部保存的数据（data）</li><li>Getter：可以认为是 Store 里面数据的计算属性（computed）</li><li>Actions：是暴露修改数据的几种方式。</li></ul><p><strong><em>虽然外部也可以直接读写Pinia Store 中保存的data，但是我们建议使用Actions暴露的方法操作数据更加安全</em></strong>。</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712928014360-66fb4f45-471c-443b-be5d-6ca43778f7fe.png" alt="img"></p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><h5 id="安装pinia"><a href="#安装pinia" class="headerlink" title="安装pinia"></a>安装pinia</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm</span><br></pre></td></tr></table></figure><h5 id="main-js-1"><a href="#main-js-1" class="headerlink" title="main.js"></a>main.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="comment">//创建一个 pinia 实例 (根 store) 并将其传递给应用</span></span><br><span class="line"><span class="keyword">const</span> pina = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(pina).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="定义存储单元"><a href="#定义存储单元" class="headerlink" title="定义存储单元"></a>定义存储单元</h5><p>在<code>store/money.js</code>中编写如下内容，定义存储单元</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> moneyStore = <span class="title function_">defineStore</span>(<span class="string">&quot;money&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>(&#123;<span class="string">&quot;money&quot;</span>:<span class="number">100</span>&#125;),</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="comment">//人名币</span></span><br><span class="line">        <span class="attr">rmb</span>:<span class="function">(<span class="params">state</span>)=&gt;</span>state[<span class="string">&quot;money&quot;</span>],</span><br><span class="line">        <span class="comment">//美元</span></span><br><span class="line">        <span class="attr">usb</span>:<span class="function">(<span class="params">state</span>)=&gt;</span>state[<span class="string">&quot;money&quot;</span>]*<span class="number">6</span>,</span><br><span class="line">        <span class="comment">//欧元</span></span><br><span class="line">        <span class="attr">er</span>:<span class="function">(<span class="params">state</span>)=&gt;</span>state[<span class="string">&quot;money&quot;</span>]*<span class="number">11</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">win</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="string">&quot;money&quot;</span>]+=args</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">pay</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="string">&quot;money&quot;</span>]-=args</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="组件中使用存储单元"><a href="#组件中使用存储单元" class="headerlink" title="组件中使用存储单元"></a>组件中使用存储单元</h5><p><code>showMoney.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;账户余额&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;人名币:&#123;&#123;money.rmb&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;美元:&#123;&#123;money.usb&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;欧元:&#123;&#123;money.er&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;moneyStore&#125; from &quot;../store/money.js&quot;;</span><br><span class="line"></span><br><span class="line">let money = moneyStore()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  div&#123;</span><br><span class="line">    color: #888888;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>actionMoney.vue</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;guaguale&quot;</span>&gt;</span>刮刮乐<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;shop&quot;</span>&gt;</span>购物<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123;moneyStore&#125; <span class="keyword">from</span> <span class="string">&quot;../store/money.js&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> money = <span class="title function_">moneyStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">guaguale</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    money.<span class="title function_">win</span>(<span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">shop</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    money.<span class="title function_">pay</span>(<span class="number">10</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ActionMoney</span> <span class="keyword">from</span> <span class="string">&quot;./components/actionMoney.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShoMoney</span> <span class="keyword">from</span> <span class="string">&quot;./components/shoMoney.vue&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">sho-money</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">action-money</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240611232311652.png" alt="image-20240611232311652" style="zoom:50%;"></p><h3 id="Setup-Store"><a href="#Setup-Store" class="headerlink" title="Setup Store"></a>Setup Store</h3><p>也存在另一种定义 store 的可用语法。与 Vue 组合式 API 的 <a href="https://cn.vuejs.org/api/composition-api-setup.html">setup 函数</a> 相似，我们可以传入一个函数，该函数定义了一些响应式属性和方法，并且返回一个带有我们想暴露出去的属性和方法的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;computed, ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export const moneyStore = defineStore(&quot;money&quot;,&#123;</span></span><br><span class="line"><span class="comment">//     state:()=&gt;(&#123;&quot;money&quot;:100&#125;),</span></span><br><span class="line"><span class="comment">//     getters:&#123;</span></span><br><span class="line"><span class="comment">//         //人名币</span></span><br><span class="line"><span class="comment">//         rmb:(state)=&gt;state[&quot;money&quot;],</span></span><br><span class="line"><span class="comment">//         //美元</span></span><br><span class="line"><span class="comment">//         usb:(state)=&gt;state[&quot;money&quot;]*6,</span></span><br><span class="line"><span class="comment">//         //欧元</span></span><br><span class="line"><span class="comment">//         er:(state)=&gt;state[&quot;money&quot;]*11</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     actions:&#123;</span></span><br><span class="line"><span class="comment">//         win(args)&#123;</span></span><br><span class="line"><span class="comment">//             this[&quot;money&quot;]+=args</span></span><br><span class="line"><span class="comment">//         &#125;,</span></span><br><span class="line"><span class="comment">//         pay(args)&#123;</span></span><br><span class="line"><span class="comment">//             this[&quot;money&quot;]-=args</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> moneyStore = <span class="title function_">defineStore</span>(<span class="string">&quot;money&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> money=<span class="title function_">ref</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">const</span> rmb = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>money.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">const</span> usb = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>money.<span class="property">value</span>*<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">const</span> er = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>money.<span class="property">value</span>*<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">win</span> = (<span class="params">arg</span>)=&gt;&#123;</span><br><span class="line">        money.<span class="property">value</span>+=arg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">pay</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">        money.<span class="property">value</span>-=arg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;money,rmb,usb,er,win,pay&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite  # 选择 使用 create-vue 自定义项目</span><br><span class="line">npm create vue@latest  # 直接使用create-vue 创建项目,会自动整合好vue-router和pinia、Axios等工具链，无需额外下载相关雨来</span><br><span class="line">vue-cli #已经过时</span><br></pre></td></tr></table></figure><h2 id="Ant-Design-Vue"><a href="#Ant-Design-Vue" class="headerlink" title="Ant Design Vue"></a>Ant Design Vue</h2><p><a href="https://www.antdv.com/components/overview">官方文档</a></p><p>一个第三方UI组件库，提供了许多漂亮的UI组件，可以直接引用，快速进行相关页面的开发</p><p>使用 <code>npm create vue@latest</code> 创建出项目脚手架，然后整合<code>ant design vue</code></p><h3 id="整合ant-design-vue"><a href="#整合ant-design-vue" class="headerlink" title="整合ant design vue"></a>整合ant design vue</h3><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save ant-design-vue@4.x</span><br></pre></td></tr></table></figure><p>全局注册： 编写<code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Antd</span> <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;ant-design-vue/dist/reset.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Antd</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h4><p>各个组件的详细用法，参考官方文档示例</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.yuque.com/leifengyang/sutong/knn21ltyewyv6l7o">参考资料1</a></p><p><a href="https://www.bilibili.com/video/BV14t421M7CL?p=2&amp;spm_id_from=pageDriver&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">参考资料2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端快速工程化&quot;&gt;&lt;a href=&quot;#前端快速工程化&quot; class=&quot;headerlink&quot; title=&quot;前端快速工程化&quot;&gt;&lt;/a&gt;前端快速工程化&lt;/h1&gt;&lt;p&gt;前端 vs 后端&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/06/12/%E8%AE%A1%E7</summary>
      
    
    
    
    <category term="前端" scheme="https://bangwu2001.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://bangwu2001.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Kafka的安装与快速使用</title>
    <link href="https://bangwu2001.github.io/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/"/>
    <id>https://bangwu2001.github.io/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/</id>
    <published>2024-06-01T09:07:00.000Z</published>
    <updated>2024-06-01T09:06:58.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka的安装与快速使用"><a href="#Kafka的安装与快速使用" class="headerlink" title="Kafka的安装与快速使用"></a>Kafka的安装与快速使用</h1><p><a href="https://kafka.apache.org/">Kafka官网</a></p><p>kafa是一个基于<code>zookeeper</code>的分布式消息系统，具有高吞吐率、高性能、实时以及高可靠的特点</p><h2 id="Kafka安装"><a href="#Kafka安装" class="headerlink" title="Kafka安装"></a>Kafka安装</h2><p><a href="https://kafka.apache.org/downloads">Kafka下载地址</a>   <a href="https://zookeeper.apache.org/releases.html">zookeeper下载地址</a></p><blockquote><p>环境需求：以下操作在: VMware+Centos7环境下进行</p><p>前置依赖：JDK8</p><p>安装版本：kafka_2.11-2.0.0、zookeeper-3.4.12</p></blockquote><p>下载kafka和zookeeper对应安装包，上传至虚拟机</p><p>文件上传我们可以采用第三方工具<code>WinSCP</code>，也可以文件传输的命令行工具<code>rz</code>、<code>sz</code></p><h3 id="安装lrzsz"><a href="#安装lrzsz" class="headerlink" title="安装lrzsz"></a>安装lrzsz</h3><p>rz，sz是Linux/Unix同Windows进行ZModem文件传输的命令行工具，rz 可以很方便的从客户端传文件到服务器，sz也可以很方便的从服务器传文件到客户端</p><p>yum方式安装:<code>yum install -y lrzsz</code></p><p><strong>从客户端上传文件</strong></p><p>直接在<code>ssh连接工具</code>某个路径下命令行输入<code>rz</code>，则会弹出文件选择按钮，</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524100114750.png" alt="image-20240524100114750" style="zoom:67%;"></p><p><strong>从服务器端下载文件</strong></p><p>直接在<code>ssh连接工具</code>中输入<code>sz xxx</code>，会弹出选择框，将服务器端文件<code>xxx</code>下载到客户端本地的某个位置</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524100242243.png" alt="image-20240524100242243" style="zoom:67%;"></p><h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><p>我们将下载的安装包<code>zookeeper-3.4.12.tar.gz</code>上传至服务器，然后解压至某个目录，解压直接执行<code>tar -zxvf zookeeper-3.4.12.tar.gz -C 目标目录</code></p><p><strong>修改zookeeper配置文件</strong></p><p><code>zookeeper</code>默认配置文件为<code>zoo.cfg</code>，他只提供了一个配置文件样例<code>zoo_sample.cfg</code>，所以我们需要对其进行拷贝，创建配置文件<code>zoo.cfg</code></p><p><code>cp zoo_sample.cfg zoo.cfg</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524100822946.png" alt="image-20240524100822946"></p><p>然后对<code>zoo.cfg</code>文件进行一些修改，一般只需关注于下面三个配置即可</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524101550892.png" alt="image-20240524101550892"></p><p><strong>启动 zookeeper</strong></p><p>切换至<code>bin</code>目录，执行<code>zkServer.sh start</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524101817665.png" alt="image-20240524101817665"></p><p><strong>查看状态</strong></p><p><code>zkServer.sh status</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524101937219.png" alt="image-20240524101937219"></p><p><strong>关闭服务</strong></p><p><code>zkServer.sh stop</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524102033493.png" alt="image-20240524102033493"></p><h3 id="安装kafka"><a href="#安装kafka" class="headerlink" title="安装kafka"></a>安装kafka</h3><p>我们将下载的安装包<code>kafka_2.11-2.0.0.tgz</code>上传至服务器，然后解压至某个目录，解压直接执行<code>tar -zxvf kafka_2.11-2.0.0.tgz -C 目标目录</code></p><p><strong>修改kafka配置文件</strong></p><p>主要的配置文件为<code>config/server.properties</code></p><p>几个重要的配置为：</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524102634821.png" alt="image-20240524102634821"></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524103126185.png" alt="image-20240524103126185"></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524103311380.png" alt="image-20240524103311380"></p><h2 id="Kafka简单使用"><a href="#Kafka简单使用" class="headerlink" title="Kafka简单使用"></a>Kafka简单使用</h2><h3 id="Kafka基本概念"><a href="#Kafka基本概念" class="headerlink" title="Kafka基本概念"></a>Kafka基本概念</h3><p><strong>Topic</strong></p><p>虚拟的概念，消息存放的地方，由1到多个Partitions组成</p><p><strong>Partition</strong></p><p>实际消息存储单位</p><p><strong>Producer</strong></p><p>消息生产者</p><p><strong>Consumer</strong></p><p>消息消费者</p><h3 id="Kafka常用命令"><a href="#Kafka常用命令" class="headerlink" title="Kafka常用命令"></a>Kafka常用命令</h3><p>在操作<code>kafka</code>之前需要首先启动<code>zookeeper</code></p><h4 id="启动Kafka"><a href="#启动Kafka" class="headerlink" title="启动Kafka"></a><strong>启动Kafka</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure><h4 id="停止Kafka"><a href="#停止Kafka" class="headerlink" title="停止Kafka"></a>停止Kafka</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure><h4 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建Topic</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic bang-topic</span><br></pre></td></tr></table></figure><h4 id="查看已经创建的Topic信息"><a href="#查看已经创建的Topic信息" class="headerlink" title="查看已经创建的Topic信息"></a>查看已经创建的Topic信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list 192.168.59.128:9092 --topic bang-topic</span><br></pre></td></tr></table></figure><h4 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server 192.168.59.128:9092 --topic bang-topic --from-beginning</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kafka的安装与快速使用&quot;&gt;&lt;a href=&quot;#Kafka的安装与快速使用&quot; class=&quot;headerlink&quot; title=&quot;Kafka的安装与快速使用&quot;&gt;&lt;/a&gt;Kafka的安装与快速使用&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://kafka.apa</summary>
      
    
    
    
    <category term="Kafka" scheme="https://bangwu2001.github.io/categories/Kafka/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>pycharm快捷键</title>
    <link href="https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/01%20pycharm%E5%BF%AB%E6%8D%B7/"/>
    <id>https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/01%20pycharm%E5%BF%AB%E6%8D%B7/</id>
    <published>2024-05-21T14:57:42.000Z</published>
    <updated>2024-05-21T14:57:01.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pycharm快捷键"><a href="#pycharm快捷键" class="headerlink" title="pycharm快捷键"></a>pycharm快捷键</h1><p>可以通过安装插件形式，使用其他软件快捷键，比如Eclipse或者VSCode快捷键</p><p>下面介绍的是安装Eclipse快捷键形式</p><p>Alt+鼠标：可以查看指定函数的源码</p><p>Alt+右键：切换到下一步代码位置</p><p>Alt+左键：切换到上一步代码位置</p><p>Alt+上建：当前行代码与其上一行代码位置互换</p><p>Alt+下键：当前代码与其下一行代码位置互换</p><p>Ctrl+d：删除当前行代码</p><p>ctrl+f：全局搜索</p><p>ctrl+h：所有当前项目所有文件目录包括第三方库</p><p>home：光标跳到当前行行首</p><p>end：光标跳到当前行行尾</p><p>ctrl+o：查看当前文件里有哪些方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pycharm快捷键&quot;&gt;&lt;a href=&quot;#pycharm快捷键&quot; class=&quot;headerlink&quot; title=&quot;pycharm快捷键&quot;&gt;&lt;/a&gt;pycharm快捷键&lt;/h1&gt;&lt;p&gt;可以通过安装插件形式，使用其他软件快捷键，比如Eclipse或者VSCode</summary>
      
    
    
    
    <category term="pycharam" scheme="https://bangwu2001.github.io/categories/pycharam/"/>
    
    
    <category term="python" scheme="https://bangwu2001.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>爬虫概述</title>
    <link href="https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/"/>
    <id>https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/</id>
    <published>2024-05-21T14:57:42.000Z</published>
    <updated>2024-05-21T14:57:19.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫概述"><a href="#爬虫概述" class="headerlink" title="爬虫概述"></a>爬虫概述</h1><h2 id="爬虫的作用"><a href="#爬虫的作用" class="headerlink" title="爬虫的作用"></a>爬虫的作用</h2><ul><li>采集网络数据</li><li>自动化测试</li><li>实现一些脱离手动的操作，比如帮人投票、12306抢票、微信聊天助手</li><li>灰产，比如薅羊毛、网络攻击、做水军、刷单等</li></ul><h2 id="为什么要爬取数据-数据能做什么"><a href="#为什么要爬取数据-数据能做什么" class="headerlink" title="为什么要爬取数据(数据能做什么?)"></a>为什么要爬取数据(数据能做什么?)</h2><ul><li>聚合产品，比如新闻网站或者今日头条</li><li>搜索引擎，比如谷歌、百度</li><li>数据分析、人工智能的源数据</li><li>特定领域的数据服务，比如二手车估价、天气预报、去哪儿网等</li></ul><h2 id="爬虫的前置知识"><a href="#爬虫的前置知识" class="headerlink" title="爬虫的前置知识"></a>爬虫的前置知识</h2><ul><li>计算机网络协议，比如http/https协议、tcp/ip协议、socket编程</li><li>一定的前端基础，不用太深入</li><li>正则表达式，主要是用来进行数据分析的</li><li>数据存储技术，比如分布式存储</li><li>并发处理技术，多线程、多进程、线程池等技术</li><li>图像识别（解决验证码反爬），机器学习算法（验证码、数据分析等后续操作）</li></ul><h2 id="爬虫中的难点问题"><a href="#爬虫中的难点问题" class="headerlink" title="爬虫中的难点问题"></a>爬虫中的难点问题</h2><ul><li>爬虫的采集以及更新策略</li><li>解决反爬</li><li>数据解析</li><li>海量数据存储</li><li>模拟登录（验证码识别）</li><li>爬虫的监控和部署</li><li>数据的去重，比如url去重、内容去重</li></ul><h2 id="爬虫中需要的网络知识"><a href="#爬虫中需要的网络知识" class="headerlink" title="爬虫中需要的网络知识"></a>爬虫中需要的网络知识</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240514221103540.png" alt="image-20240514221103540" style="zoom:33%;"></p><p>问题一：为什么服务器不会随便封禁ip或者ip段</p><p>原因主要有以下两点：</p><ul><li>DHCP，动态ip，我们日常的ip地址基本都是动态ip(静态ip需要花钱去买)，同一台及其可能每天的ip都不一样</li><li>局域网，整个局域网可能对外只会存在一个公网ip，如果封禁，会导致整个局域网内所有用户均无法访问</li></ul><p>url协议</p><p>其他概念比较熟悉，了解锚点的概念，可以定位到同一页面的某个位置</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240514222633684.png" alt="image-20240514222633684" style="zoom:50%;"></p><p>Socket编程</p><p>了解即可</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240514224618291.png" alt="image-20240514224618291" style="zoom:33%;"></p><p>注意：recv、accept等方法都是阻塞式方式</p><h2 id="前端知识"><a href="#前端知识" class="headerlink" title="前端知识"></a>前端知识</h2><p>html（网页基础骨架）+css（网页装饰）+js（网页交互）</p><p>浏览器加载过程：</p><p>​                                                         <img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515095945789.png" alt="image-20240515095945789" style="zoom:50%;"> </p><p>dom树:</p><p>可以根据dom树定位特定元素节点，javaScript操控html本质就是通过dom树来实现的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515100145565.png" alt="image-20240515100145565" style="zoom:50%;"></p><p> 了解标签选择器、id选择器和class选择器的概念，很多动态网页都是依靠js来动态生成的html</p><p>AJAX &amp; json &amp; xml</p><p>AJAX = 异步JavaScript+XML</p><p>AJAX是一种无需重新加载整个页面的情况下，能够更新部分网页的技术</p><p>json和xml的产生背景：</p><ul><li>跨语言的数据格式 （不同语言编写服务之间的数据传输问题） </li><li>可以通过响应头 content-type字段指明数据为json格式</li></ul><p>jquery等框架都提供了对应API去构造AJAX请求</p><p>动态网页 vs 静态网页</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515103310799.png" alt="image-20240515103310799" style="zoom:50%;"></p><p>GET VS POST请求</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515104424712.png" alt="image-20240515104424712" style="zoom:50%;"></p><p>  数据传输格式 content-type</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515104549040.png" alt="image-20240515104549040" style="zoom:50%;"></p><pre><code>                          &lt;img src=&quot;02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515104635902.png&quot; alt=&quot;image-20240515104635902&quot; style=&quot;zoom:50%;&quot; /&gt;</code></pre><p>前端数据提交方式：</p><ul><li>form表单的submit</li><li>js监听事件的方式</li><li>button按钮点击事件的方式</li><li>js发送AJAX请求的方式</li></ul><h2 id="爬虫数据采集分类"><a href="#爬虫数据采集分类" class="headerlink" title="爬虫数据采集分类"></a>爬虫数据采集分类</h2><p>按照采集对象分类：</p><ul><li>全网采集：一般只有搜索引擎浏览器才会这么做</li><li>全站采集：对某个网站所以数据采集，一般需求也不多</li><li>具体网站指定数据采集：这种需求最多，一般应用只会对网站的某个具体数据感兴趣</li></ul><p>按照采集方案分类：</p><ul><li>利用http协议采集—页面分析</li><li>利用api接口采集—app数据采集</li><li>利用目标网站的api采集—微博、github、twitter、facebook等，这些大型网站用于一般有开放的api平台，可以供第三方开发者扩展使用</li></ul><p>对于99%以上的网站都不会对外提供api，所以绝大多数情况只能利用http请求，对网页进行分析</p><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><p><a href="https://requests.readthedocs.io/projects/cn/zh-cn/latest/user/quickstart.html">requests库的官方文档</a></p><p>知道如何构造请求、伪造请求头、获取请求、解析请求，详细教程参考官方文档即可</p><h2 id="数据解析手段"><a href="#数据解析手段" class="headerlink" title="数据解析手段"></a>数据解析手段</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式语法参照<a href="https://www.runoob.com/regexp/regexp-syntax.html">菜鸟教程 正则表达式 - 教程</a></p><p>python提供了<code>re</code>来进行正则化操作，具体用法参照<a href="https://www.runoob.com/python/python-reg-expressions.html">菜鸟教程-Python 正则表达式</a>，可以实现替换、搜索、提取数据的功能</p><h3 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a>beautifulsoup</h3><p>python中用于解析html的库</p><p><a href="https://beautifulsoup.cn/">beautifulsoup中文文档</a></p><h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><p>*XPath 是一门在 XML 文档中查找信息的语言。，<a href="https://www.runoob.com/xpath/xpath-intro.html">Xpath详细概念介绍</a></p><p><a href="https://www.bilibili.com/video/BV1MZ421H74V/?p=13&amp;spm_id_from=pageDriver&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">视频教程</a>，讲的比较好</p><p>python中支持xPath的库：</p><ul><li>lxml：文档不友好，不推荐</li><li>scrapy selector：是对lxml的再次封装<ul><li><a href="https://scrapy-chs.readthedocs.io/zh-cn/0.24/topics/selectors.html">scrapy官方文档</a></li></ul></li></ul><p>浏览器可以为我们自动生成想要的xpath表达式，流程如下图所示：</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515171015141.png" alt="image-20240515171015141" style="zoom:67%;"></p><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><p><a href="https://www.runoob.com/cssref/css-selectors.html">CSS选择器 菜鸟教程</a></p><p>在python中推荐使用scrapy中的Selector<a href="https://blog.csdn.net/dangsh_/article/details/78617178">,参考博客</a></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515194946491.png" alt="image-20240515194946491" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515195029759.png" alt="image-20240515195029759" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515195135282.png" alt="image-20240515195135282" style="zoom:50%;"></p><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬虫概述&quot;&gt;&lt;a href=&quot;#爬虫概述&quot; class=&quot;headerlink&quot; title=&quot;爬虫概述&quot;&gt;&lt;/a&gt;爬虫概述&lt;/h1&gt;&lt;h2 id=&quot;爬虫的作用&quot;&gt;&lt;a href=&quot;#爬虫的作用&quot; class=&quot;headerlink&quot; title=&quot;爬虫的作用&quot;&gt;</summary>
      
    
    
    
    <category term="爬虫" scheme="https://bangwu2001.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="https://bangwu2001.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>爬虫进阶</title>
    <link href="https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/"/>
    <id>https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/</id>
    <published>2024-05-21T14:57:42.000Z</published>
    <updated>2024-06-04T14:57:16.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫进阶"><a href="#爬虫进阶" class="headerlink" title="爬虫进阶"></a>爬虫进阶</h1><p>爬虫一定要找最新的教程，因为网站更新速度很快，老版教程很可能会过时，一些案例基本无法复现</p><h2 id="爬虫概述"><a href="#爬虫概述" class="headerlink" title="爬虫概述"></a>爬虫概述</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240515215806526.png" alt="image-20240515215806526" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240515220426489.png" alt="image-20240515220426489" style="zoom: 50%;"></p><p>​                                    <img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240515220603409.png" alt="image-20240515220603409" style="zoom: 50%;"></p><h2 id="静态页面抓取："><a href="#静态页面抓取：" class="headerlink" title="静态页面抓取："></a>静态页面抓取：</h2><ol><li>获取构造需要抓取的所有url列表</li><li>遍历这个列表，使用request等抓取页面数据</li><li>使用xpath+Scrapy Selector或者Xpath+lxml的方式对抓取的页面内容进行解析<ol><li>xpath的编写可以借助浏览器来完成，选中对应元素右键点击copy as xpath</li></ol></li></ol><h2 id="request构造请求："><a href="#request构造请求：" class="headerlink" title="request构造请求："></a>request构造请求：</h2><ul><li>get请求：<ul><li>方式一：url+参数拼接方式</li><li>方式二：url+params形参的方式</li></ul></li><li>post请求<ul><li>许多登陆页面，需要通过构造post请求，提交信息，破除限制 </li><li>可以通过form-data或者json的形式提交数据</li></ul></li></ul><h2 id="模拟登陆场景："><a href="#模拟登陆场景：" class="headerlink" title="模拟登陆场景："></a>模拟登陆场景：</h2><p>许多网站必须登陆之后才能访问里面其他的页面</p><ol><li>通过抓包，找到登陆接口</li><li>编写代码请求登陆接口，传入正确的账号、密码等信息</li></ol><p>即使登陆之后，仍然可以访问其他页面吗？不一定，这时我们要关注后台的鉴权方式</p><p>后台的鉴权方式一般有两种：</p><ul><li>基于cookie+session的鉴权机制</li><li>基于Token的鉴权机制<ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516004458958.png" alt="image-20240516004458958" style="zoom:50%;"></li></ul></li></ul><p>如何初步判断是采用的哪种鉴权？</p><ul><li>form-data大概率是cookie+session</li><li>网站首页地址与登陆请求地址不一致，大概率是token鉴权</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516005245589.png" alt="image-20240516005245589" style="zoom:67%;"></p><h3 id="模拟登录中华网"><a href="#模拟登录中华网" class="headerlink" title="模拟登录中华网"></a>模拟登录中华网</h3><p>模拟登录、访问需要登录之后才能够访问的页面</p><ul><li>1发送登录请求</li><li>保存cookie信息</li><li>下次请求需要登录页面直接携带cookie信息</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">中华网账号 https://passport.china.com/</span><br><span class="line">username:17775990925</span><br><span class="line">password:a546245426</span><br></pre></td></tr></table></figure><p>通过抓包找到登录接口地址，注意这里用错误的账号或者密码，如果是正确的则会自动跳转，无法找出登录接口</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516102343020.png" alt="image-20240516102343020" style="zoom:80%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516102405228.png" alt="image-20240516102405228"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516102418641.png" alt="image-20240516102418641"></p><p>利用python构造请求模拟登录实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#url</span></span><br><span class="line">url = <span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://passport.china.com/logon&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#请求参数</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;17775990925&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;a546245426&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#模拟登录请求</span></span><br><span class="line"><span class="comment"># login_response = requests.post(url,data=params,headers=headers)</span></span><br><span class="line"><span class="comment"># print(login_response.content.decode(&quot;utf8&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(login_response.cookies)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">如何提取请求的cookie信息:</span></span><br><span class="line"><span class="string">    response.cookies</span></span><br><span class="line"><span class="string">如何解决利用cookie进行校验的访问请求:</span></span><br><span class="line"><span class="string">    方式一: </span></span><br><span class="line"><span class="string">        request.get(cookies=cookies)，利用参数让请求携带cookie信息,cookie字典格式</span></span><br><span class="line"><span class="string">    方式二:</span></span><br><span class="line"><span class="string">        请求头中携带,cookie以字符串格式</span></span><br><span class="line"><span class="string">        headers=&#123;</span></span><br><span class="line"><span class="string">            &quot;Cookie&quot;:cookie值</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    方式三：requests.session</span></span><br><span class="line"><span class="string">    利用:</span></span><br><span class="line"><span class="string">        requests.session()对象去发送请求，其会自动记住状态信息</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问其他页面,不携带cookie信息的话会自动跳转到登录页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式一：以字典的形式传递</span></span><br><span class="line"><span class="comment"># url = &quot;https://passport.china.com&quot;</span></span><br><span class="line"><span class="comment"># response = requests.get(url,headers=headers,cookies=login_response.cookies)</span></span><br><span class="line"><span class="comment"># print(response.content.decode())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：以字符串的形式传递</span></span><br><span class="line"><span class="comment">#这种cookie来源:直接从浏览器复制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># headers[&quot;Cookie&quot;]=&#x27;area_name=%E6%B9%96%E5%8C%97%E7%9C%81%E6%AD%A6%E6%B1%89%E5%B8%82; SESSION_COOKIE=46; Hm_lvt_cbec92dec763e6774898d6d85460f707=1715822413,1715828314; Hm_lpvt_cbec92dec763e6774898d6d85460f707=1715828314; nickname=china_2823hxfg16791058; lastlogindate=2024-05-16; lastlogintime=&quot;10:58:48&quot;; lastloginip=211.161.157.200; bindMobile=&quot;1@177*****925&quot;; CHINACOMID=218ab446-115d-4fbe-93fe-a5fd744593825; CP_USER=FKBo6w-aaDELXK1EnoT3DPk1faoTCuWOzIpsuaQNIsJWqiRz6o9drrZQMJZRRbngi7eJikd0sv41eZDrzksZGmumfJyC7TEP5dMN41%2F1QIHag0K39t%2FVBxzGqQTN85yGmV%2FbilYB7ulfPMYVXbF6aMqwUoU1rfChWCxyzGnnrK%2FgdpLc0L1F5tS7hOqvGEkrBP23Gu2Sd0E76gm7%2FHCqgRxwGcN7FXOpmlLJ6WjemIAiC44IuLq2ow%3D%3D; CP_USERINFO=4Gkk4uas%2FGU6V4cAn8Kr14YtZHaRsQ3bb0iKxhYvuaLYLT-rPEFbvbaQzjvqSKm2v8Fd1lQ14weg0PM1aAxGqjzFStaNWwdXEhS3Zzs0jusNqPIZSkWIUHBpa7NyrsBUv2O8QVvh3O4yqW9wAjnfpw%3D%3D; china_variable=jpEe7N32pYz8SAjCjL8fnh2eLZiI1D/EC6dYmS6/lLUOPrHJGj-IxLIHbACvhNcaC9z3Z8pi2hy0JtYoQGGXmsutg32di8lhAZaSKKJ8BFBt-lJZl7B3R-LY1hWhKpza; lastlogindate=2024-05-16; lastlogintime=&quot;10:58:48&quot;; lastloginip=211.161.157.200&#x27;</span></span><br><span class="line"><span class="comment"># response = requests.get(url,headers=headers)</span></span><br><span class="line"><span class="comment"># print(response.content.decode())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三: requests.session</span></span><br><span class="line">login_url = <span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line">main_url = <span class="string">&quot;https://passport.china.com&quot;</span></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">session.post(login_url,data=params,headers=headers)</span><br><span class="line"><span class="comment">#访问其他页面,整个过程处于同一会话</span></span><br><span class="line">response = session.get(main_url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode())</span><br></pre></td></tr></table></figure><h2 id="Ajax异步数据"><a href="#Ajax异步数据" class="headerlink" title="Ajax异步数据"></a>Ajax异步数据</h2><p>背景：大对数网站采用前后端分离方式构建应用，数据都是通过Ajax请求异步加载获取的，直接请求目标网站的话，返回的内容中压根就没有任何数据</p><p>比如对于东方财富：<a href="https://quote.eastmoney.com/center">https://quote.eastmoney.com/center</a></p><p>浏览器抓包分析，发现页面数据根本不在请求返回的html文件中，他的数据都是通过异步请求得到的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516111515843.png" alt="image-20240516111515843"></p><p>对于这类型的网站，抓取数据的地址根本不是页面上的地址,因为html中压根就没有数据，我们要去分析其发送的AJAX请求，获取对应的URL，然后去抓取对应的数据</p><h3 id="异步数据抓取案例"><a href="#异步数据抓取案例" class="headerlink" title="异步数据抓取案例"></a>异步数据抓取案例</h3><p>我们选取<a href="https://careers.tencent.com/home.html">腾讯招聘</a>网站作为爬取目标，我们可以发现它的网站职位数据就是异步加载的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516144559312.png" alt="image-20240516144559312"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">url:https://careers.tencent.com/tencentcareer/api/post/Query</span></span><br><span class="line"><span class="string">请求参数:</span></span><br><span class="line"><span class="string">    timestamp: 1715841296996</span></span><br><span class="line"><span class="string">    countryId:</span></span><br><span class="line"><span class="string">    cityId:</span></span><br><span class="line"><span class="string">    bgIds:</span></span><br><span class="line"><span class="string">    productId:</span></span><br><span class="line"><span class="string">    categoryId:</span></span><br><span class="line"><span class="string">    parentCategoryId:</span></span><br><span class="line"><span class="string">    attrId:</span></span><br><span class="line"><span class="string">    keyword:</span></span><br><span class="line"><span class="string">    pageIndex: 1</span></span><br><span class="line"><span class="string">    pageSize: 10</span></span><br><span class="line"><span class="string">    language: zh-cn</span></span><br><span class="line"><span class="string">    area: cn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">base_url = <span class="string">&quot;https://careers.tencent.com/tencentcareer/api/post/Query&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>: <span class="number">1715841296996</span>,</span><br><span class="line">    <span class="string">&quot;countryId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cityId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bgIds&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;categoryId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parentCategoryId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attrId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;keyword&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageIndex&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;zh-cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area&quot;</span>: <span class="string">&quot;cn&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#分页抓取:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可变的参数:</span></span><br><span class="line"><span class="string"> pageIndex以及timestamp</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> pageIndex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    params[<span class="string">&quot;timestamp&quot;</span>] = <span class="built_in">int</span>(time.time()*<span class="number">1000</span>)</span><br><span class="line">    params[<span class="string">&quot;pageIndex&quot;</span>] = pageIndex</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">10</span>,<span class="string">&quot;current pageInde:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(pageIndex),<span class="string">&quot;=&quot;</span>*<span class="number">10</span>)</span><br><span class="line">    response = requests.get(url=base_url,params=params)</span><br><span class="line">    <span class="comment">#转换为json格式</span></span><br><span class="line">    result_data = response.json()</span><br><span class="line">    job_count = result_data[<span class="string">&quot;Data&quot;</span>][<span class="string">&quot;Count&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> job_count==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    job_list = result_data[<span class="string">&quot;Data&quot;</span>][<span class="string">&quot;Posts&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> job <span class="keyword">in</span> job_list:</span><br><span class="line">        <span class="built_in">print</span>(job[<span class="string">&quot;RecruitPostName&quot;</span>])</span><br><span class="line"><span class="comment">#数据后续可以根据具体业务需求，保存在本地文件或者数据库中   </span></span><br></pre></td></tr></table></figure><h2 id="数据格式转换问题"><a href="#数据格式转换问题" class="headerlink" title="数据格式转换问题"></a>数据格式转换问题</h2><p>有些网站，我们抓取时，响应返回的数据形式比较复杂，我们如何从中快速提取想要的数据</p><p>对于非结构化数据：HTML</p><ul><li>用正则表达式、xpath等手段处理</li></ul><p>对于结构化数据：json、xml等</p><ul><li>直接转换为python类型</li></ul><h3 id="json模块"><a href="#json模块" class="headerlink" title="json模块"></a>json模块</h3><p>json.loads</p><ul><li>把json格式字符串解码转换成python对象，json数组对应列表、json对象对应字典</li><li>python中的None，在json中用null表示</li></ul><p>json.dumps</p><ul><li>实现把python类型转换为json字符串，返回一个str对象，是把python对象编码成json字符串</li><li>其序列化默认采用ascii编码</li><li>添加参数 ensure_ascii=False禁用ascii编码，按utf-8编码</li></ul><p><a href="https://blog.csdn.net/qq_37806690/article/details/137988296">python json转换参考资料</a></p><h3 id="jsonPath"><a href="#jsonPath" class="headerlink" title="jsonPath"></a>jsonPath</h3><p>正如XPath之于XML文档一样，JsonPath为Json文档提供了解析能力，通过使用JsonPath，你可以方便的查找节点、获取想要的数据，JsonPath是Json版的XPath</p><p>其用法基本跟xpath一致</p><p><a href="https://www.cnblogs.com/youring2/p/10942728.html">参考资料</a></p><p><a href="https://www.jianshu.com/p/3f5b9cc88bde">python jsonpath教程</a></p><h3 id="案例：jsonpath进行数据提取"><a href="#案例：jsonpath进行数据提取" class="headerlink" title="案例：jsonpath进行数据提取"></a>案例：jsonpath进行数据提取</h3><p>目标网站<a href="https://www.xfz.cn/">小饭桌</a>，我们提取各个咨询的标题、发布作者、发布事件信息</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516153253078.png" alt="image-20240516153253078"></p><p>其响应数据格式如下图所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">10918</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;智愈医疗完成超6000万元Pre-A++轮融资&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;photo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://static-image.xfz.cn/1715658195_783.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;photo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://static-image.xfz.cn/1552965456_492.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;authors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;author_id&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;饭桌君&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;is_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;article_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;融资消息&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;intro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;由辰德资本领投，联想之星跟投，老股东顺为资本、礼来亚洲基金、众海投资持续加注。凡卓资本担任本轮融资独家财务顾问。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-05-14 11:43:15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;智愈医疗&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们需要从中解析出我们想要的数据</p><p>我们首先抓包，分析其数据异步加载的接口以及对应的请求参数，分析不同分页url和请求参数的规律</p><p>其请求的数据</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516153515923.png" alt="image-20240516153515923"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516153529052.png" alt="image-20240516153529052"></p><p><strong>python代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;uid&quot;: 10874,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;与微软合作，这家独角兽让GPT对中国企业开放了&quot;,</span></span><br><span class="line"><span class="string">    &quot;photo&quot;: &quot;https://static-image.xfz.cn/1708917564_964.jpg&quot;,</span></span><br><span class="line"><span class="string">    &quot;author&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;photo&quot;: &quot;https://static-image.xfz.cn/1693983197_842.jpg&quot;,</span></span><br><span class="line"><span class="string">        &quot;authors&quot;: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;author_id&quot;: 2295,</span></span><br><span class="line"><span class="string">                &quot;name&quot;: &quot;黄泽正&quot;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;is_original&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;article_type&quot;: &quot;热点&quot;,</span></span><br><span class="line"><span class="string">    &quot;intro&quot;: &quot;中国企业合法合规使用GPT的时代，终于来了。&quot;,</span></span><br><span class="line"><span class="string">    &quot;source&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">    &quot;time&quot;: &quot;2024-02-26 11:19:24&quot;,</span></span><br><span class="line"><span class="string">    &quot;keywords&quot;: [</span></span><br><span class="line"><span class="string">        &quot;GPT&quot;,</span></span><br><span class="line"><span class="string">        &quot;易点云&quot;,</span></span><br><span class="line"><span class="string">        &quot;IT综合解決方案供应商&quot;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&quot;https://www.xfz.cn/api/website/articles/&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;p&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;n&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    params[<span class="string">&quot;p&quot;</span>]=p</span><br><span class="line">    response = requests.get(url=base_url,params=params)</span><br><span class="line">    response_json = response.json()</span><br><span class="line">    <span class="comment">#提取感兴趣信息</span></span><br><span class="line">    <span class="comment">#文章标题</span></span><br><span class="line">    title_list = jsonpath.jsonpath(response_json,<span class="string">&quot;$..title&quot;</span>)</span><br><span class="line">    <span class="comment">#文章作者</span></span><br><span class="line">    author_list = jsonpath.jsonpath(response_json,<span class="string">&quot;$..author..name&quot;</span>)</span><br><span class="line">    <span class="comment">#发布时间</span></span><br><span class="line">    time_list = jsonpath.jsonpath(response_json,<span class="string">&quot;$..time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> title,author,time <span class="keyword">in</span> <span class="built_in">zip</span>(title_list,author_list,time_list):</span><br><span class="line">        <span class="built_in">print</span>(title,<span class="string">&quot;\t&quot;</span>,author,<span class="string">&quot;\t&quot;</span>,time)</span><br></pre></td></tr></table></figure><h2 id="视频抓取"><a href="#视频抓取" class="headerlink" title="视频抓取"></a>视频抓取</h2><h3 id="B站视频抓取"><a href="#B站视频抓取" class="headerlink" title="B站视频抓取"></a>B站视频抓取</h3><h4 id="资源抓取"><a href="#资源抓取" class="headerlink" title="资源抓取"></a>资源抓取</h4><p>B站视频的画面和音频是通过不同的url来异步请求获取，所以我们抓包分析得到画面和音频的请求链接，然后分别抓取画面和音频，最后在本地将两者合成视频文件</p><p>抓包分析，最开始的两个请求即为画面和音频资源请求</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516182906785.png" alt="image-20240516182906785"></p><h4 id="视频合成"><a href="#视频合成" class="headerlink" title="视频合成"></a>视频合成</h4><p>MoviePy是一个用于视频编辑的Python模块，它可以用于一些基本操作，比如剪切、拼接、插入标题、视频合成、视频处理和创建高级特效</p><p><a href="https://moviepy-cn.readthedocs.io/zh/latest/">官网教程</a></p><p><a href="https://zhuanlan.zhihu.com/p/680555324">参考博客</a></p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line"><span class="string">    对于B站而言，其视频和音频内容是分开请求的，最终的视频是由两者一起合成的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">注意:经过验证，如果不携带User-Agent和Referer这两个请求头，会直接返回403 forbidden</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>:<span class="string">&quot;https://www.bilibili.com/video/BV1Mp421m7Ck/?spm_id_from=333.1007.tianma.1-1-1.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url1=<span class="string">&quot;https://cn-hbwh-fx-01-13.bilivideo.com/upgcxcode/03/12/1475871203/1475871203-1-100026.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1715855097&amp;gen=playurlv2&amp;os=bcache&amp;oi=1939666239&amp;trid=00002988359d2ffb4c87ad295bbe92858e17u&amp;mid=503787920&amp;platform=pc&amp;upsig=9252145cbb94964367b3213d88a75b0f&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,mid,platform&amp;cdnid=3881&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;buvid=FEF21EE4-4208-C79B-80F6-27AC2A9BBD3459139infoc&amp;build=0&amp;f=u_0_0&amp;agrr=1&amp;bw=173938&amp;np=151388311&amp;logo=80000000&quot;</span></span><br><span class="line">url2=<span class="string">&quot;https://cn-hbwh-fx-01-12.bilivideo.com/upgcxcode/03/12/1475871203/1475871203-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1715855097&amp;gen=playurlv2&amp;os=bcache&amp;oi=1939666239&amp;trid=00002988359d2ffb4c87ad295bbe92858e17u&amp;mid=503787920&amp;platform=pc&amp;upsig=1d8cc071b206465e33d41d8e298308d9&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,mid,platform&amp;cdnid=1237&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;buvid=FEF21EE4-4208-C79B-80F6-27AC2A9BBD3459139infoc&amp;build=0&amp;f=u_0_0&amp;agrr=1&amp;bw=20005&amp;np=151388311&amp;logo=80000000&quot;</span></span><br><span class="line"></span><br><span class="line">response1 = requests.get(url1,headers=headers)</span><br><span class="line">response2 = requests.get(url2,headers=headers)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;b站1.mp4&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response1.content)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;b站2.mp4&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response2.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#合成视频:画面+音频</span></span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> ffmpeg_tools</span><br><span class="line">ffmpeg_tools.ffmpeg_merge_video_audio(<span class="string">&quot;b站1.mp4&quot;</span>,<span class="string">&quot;b站2.mp4&quot;</span>,<span class="string">&quot;b站.mp4&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="抖音视频抓取"><a href="#抖音视频抓取" class="headerlink" title="抖音视频抓取"></a>抖音视频抓取</h3><p>我们抓包分析，抖音各个视频的链接都是杂乱无规则的，所以无法用requests批量抓取，如果要批量抓取，只能模拟人来不断点击获取，这个就必须要用到自动化工具selenium了</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516184053032.png" alt="image-20240516184053032"></p><p>对于单个视频的下载比较简单，无任何其他的限制，直接发送请求即可获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;https://v3-weba.douyinvod.com/02263c98b4f10164f58047cc60b11827/6645f1ed/video/tos/cn/tos-cn-ve-15/osB7nDAWI4MQuoB8ECDoeGezOhEs4BbeV2AqM1/?a=6383&amp;ch=5&amp;cr=3&amp;dr=0&amp;lr=all&amp;cd=0%7C0%7C0%7C3&amp;cv=1&amp;br=1199&amp;bt=1199&amp;cs=0&amp;ds=3&amp;ft=kmz2Nvx2llUpoDtWsRdusEBOG4kbZ0Fl~z7avjZmpmPt188HKw9gHlcApW9w6x&amp;mime_type=video_mp4&amp;qs=0&amp;rc=aDk6Omc7ZjY7OTszN2c7Z0BpM3hnNGQ6Zmd4czMzNGkzM0BiLmBiXjZgX14xX2I0NTQ1YSMvYm1ycjRfMy5gLS1kLTBzcw%3D%3D&amp;btag=c0000e00030000&amp;cquery=101s_100B_100x_100z_100a&amp;dy_q=1715855997&amp;feature_id=f0150a16a324336cda5d6dd0b69ed299&amp;l=20240516183955A37ACE947DDB97002DEE&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;抖音.mp4&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure><p>单个视频url无任何规律，所以无法通过代码去批量构造，批量爬取的核心就在于如何批量获取视频的url列表</p><h2 id="selenium的使用"><a href="#selenium的使用" class="headerlink" title="selenium的使用"></a>selenium的使用</h2><p><a href="https://www.selenium.dev/zh-cn/documentation/webdriver/getting_started/">selenium</a>是一个Web的自动化测试工具，最初是为了网站自动化测试而开发的，其可以按照指定的指令自动操作，其可以直接运行在浏览器之上，它支持所有主流的浏览器，模拟人去手动操作浏览器</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们以<a href="https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81">领导留言板</a>这个网站为例，抓取里面的内容，通过抓包获取url，请求参数以及请求等信息，但还是会被拦截</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://liuyan.people.com.cn/v1/threads/list/df&quot;</span></span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">  <span class="string">&quot;appCode&quot;</span>: <span class="string">&quot;PC42ce3bfa4980a9&quot;</span>,</span><br><span class="line">  <span class="string">&quot;token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;signature&quot;</span>: <span class="string">&quot;315b4bdafbf17b3dbb6a48a244b67dff&quot;</span>,</span><br><span class="line">  <span class="string">&quot;param&quot;</span>: <span class="string">&quot;&#123;\&quot;fid\&quot;:\&quot;571\&quot;,\&quot;showUnAnswer\&quot;:1,\&quot;typeId\&quot;:5,\&quot;lastItem\&quot;:\&quot;\&quot;,\&quot;position\&quot;:\&quot;0\&quot;,\&quot;rows\&quot;:10,\&quot;orderType\&quot;:2&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;&quot;&quot;https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81&quot;&quot;&quot;</span></span><br><span class="line">            ,<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;__jsluid_s=4b575e53f2419a15d98413b3c2ade788; Hm_lvt_40ee6cb2aa47857d8ece9594220140f1=1715856547; language=zh-CN; deviceId=52e3892d-030a-4de8-8d77-c62c7c0a1a87; Hm_lpvt_40ee6cb2aa47857d8ece9594220140f1=1715856654&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers,data=params)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode())</span><br></pre></td></tr></table></figure><p>响应内容:</p><p>其网站内部设置了防护和反扒机制，单纯靠requests是无法处理的，所以这是我们就需要借助于Selenium，模拟人类登录网站的行为，来进行数据的抓取</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="keyword">\environment</span><span class="keyword">\anaconda</span>3<span class="keyword">\envs</span><span class="keyword">\scrap</span><span class="keyword">\python</span>.exe &quot;C:<span class="keyword">\bang</span><span class="keyword">\MyOwn</span><span class="keyword">\Java</span>重要知识点学习<span class="keyword">\BaiduSyncdisk</span><span class="keyword">\0</span>7 python网络爬虫<span class="keyword">\my</span><span class="built_in">_</span>code<span class="keyword">\ch</span>04-selenium<span class="keyword">\领</span>导留言板.py&quot; </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body&#123; background:<span class="params">#</span>eff1f0; font-family: microsoft yahei; color:<span class="params">#9</span>69696; font-size:12px;&#125;</span><br><span class="line">.online-desc-con &#123; text-align:center; &#125;</span><br><span class="line">.r-tip01 &#123; color: <span class="params">#9</span>69696; font-size: 16px; display: block; text-align: center; width: 600px; padding: 0 10px; overflow: hidden; text-overflow: ellipsis; margin: 0 auto 15px; &#125;</span><br><span class="line">.r-tip02 &#123; color: <span class="params">#</span>b1b0b0; font-size: 12px; display: block; margin-top: 20px; margin-bottom: 20px; &#125;</span><br><span class="line">.r-tip02 a:visited &#123; text-decoration: underline; color: <span class="params">#0</span>088CC; &#125;</span><br><span class="line">.r-tip02 a:link &#123; text-decoration: underline; color: <span class="params">#0</span>088CC; &#125;</span><br><span class="line">img &#123; border: 0; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;online-desc-con&quot; style=&quot;width:650px;padding-top:15px;margin:34px auto;&quot;&gt;</span><br><span class="line">    &lt;a id=&quot;official<span class="built_in">_</span>site&quot; href=&quot;http://www.365cyd.com&quot; target=&quot;<span class="built_in">_</span>blank&quot;&gt;</span><br><span class="line">        &lt;img id=&quot;wafblock&quot; alt=&quot;&quot; style=&quot;margin: 0 auto 17px auto;&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;span class=&quot;r-tip01&quot; id=&quot;error<span class="built_in">_</span>403&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;r-tip01&quot; id=&quot;error<span class="built_in">_</span>403<span class="built_in">_</span>en&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;r-tip02&quot;&gt;如果您是网站管理员&lt;a href=&quot;http://help.365cyd.com/cyd-error-help.html?code=403&quot; target=&quot;<span class="built_in">_</span>blank&quot;&gt;点击这里&lt;/a&gt;查看详情&lt;/span&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;center&gt;client: &lt;span id=&quot;client<span class="built_in">_</span>ip&quot;&gt;&lt;/span&gt;, server: e85ed68, time: &lt;span id=&quot;time<span class="built_in">_</span>error&quot;&gt;&lt;/span&gt;&lt;span id=&quot;rule<span class="built_in">_</span>id&quot;&gt;&lt;/span&gt;&lt;/center&gt;</span><br><span class="line">    &lt;img alt=&quot;&quot; src=&quot;/cdn-cgi/image/logo.png&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    void(function fuckie6()&#123;if(location.hash <span class="built_in">&amp;</span><span class="built_in">&amp;</span> /MSIE 6/.test(navigator.userAgent) <span class="built_in">&amp;</span><span class="built_in">&amp;</span> !/jsl<span class="built_in">_</span>sec/.test(location.href))&#123;location.href = location.href.split(&#x27;<span class="params">#</span>&#x27;)[0] + &#x27;<span class="built_in">&amp;</span>jsl<span class="built_in">_</span>sec&#x27; + location.hash&#125;&#125;)();</span><br><span class="line">    var data = &#123;&quot;error<span class="built_in">_</span>403<span class="built_in">_</span>type&quot;:&quot;cli<span class="built_in">_</span>ip&quot;,&quot;error<span class="built_in">_</span>403&quot;:&quot;您的IP( 218.106.117.241 )最近有可疑的攻击行为，请稍后重试.&quot;,&quot;client<span class="built_in">_</span>ip&quot;:&quot;218.106.117.241&quot;,&quot;time<span class="built_in">_</span>error&quot;:&quot;16<span class="keyword">\/</span>May<span class="keyword">\/</span>2024:19:01:37 +0800&quot;,&quot;error<span class="built_in">_</span>403<span class="built_in">_</span>en&quot;:&quot;&quot;&#125;;</span><br><span class="line">    var rule<span class="built_in">_</span>id = parseInt(data[&#x27;rule<span class="built_in">_</span>id&#x27;]) || &#x27;&#x27;;</span><br><span class="line">    if (rule<span class="built_in">_</span>id != &#x27;&#x27;) &#123;</span><br><span class="line">        rule<span class="built_in">_</span>id = &#x27;[&#x27; + rule<span class="built_in">_</span>id + &#x27;]&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    document.getElementById(&quot;wafblock&quot;).src = &#x27;/cdn-cgi/image/&#x27; + (data[&#x27;error<span class="built_in">_</span>403<span class="built_in">_</span>type&#x27;] || &#x27;hacker&#x27;) + &#x27;.png&#x27;;</span><br><span class="line">    document.getElementById(&#x27;error<span class="built_in">_</span>403&#x27;).innerText = data[&#x27;error<span class="built_in">_</span>403&#x27;] || &#x27;当前访问疑似黑客攻击，已被创宇盾拦截。&#x27;;</span><br><span class="line">    document.getElementById(&#x27;error<span class="built_in">_</span>403<span class="built_in">_</span>en&#x27;).innerText = data[&#x27;error<span class="built_in">_</span>403<span class="built_in">_</span>en&#x27;];</span><br><span class="line">    document.getElementById(&#x27;client<span class="built_in">_</span>ip&#x27;).innerText = data[&#x27;client<span class="built_in">_</span>ip&#x27;];</span><br><span class="line">    document.getElementById(&#x27;time<span class="built_in">_</span>error&#x27;).innerText = data[&#x27;time<span class="built_in">_</span>error&#x27;];</span><br><span class="line">    document.getElementById(&#x27;rule<span class="built_in">_</span>id&#x27;).innerText = rule<span class="built_in">_</span>id;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用Selenium的一般流程"><a href="#使用Selenium的一般流程" class="headerlink" title="使用Selenium的一般流程"></a>使用Selenium的一般流程</h3><ol><li>selenium打开浏览器</li><li>访问要爬取的页面，如果有需要可以设置对页面进行一些操作</li><li>获取想要爬取的页面数据</li></ol><h3 id="selenium环境安装"><a href="#selenium环境安装" class="headerlink" title="selenium环境安装"></a>selenium环境安装</h3><p><strong>selenium安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p><strong>浏览器对应的驱动chromedriver的下载</strong></p><p><a href="https://zhuanlan.zhihu.com/p/664339667">chromeDriver下载参考资料</a></p><p><a href="https://blog.csdn.net/linglong_L/article/details/136283810?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-136283810-blog-138708545.235^v43^pc_blog_bottom_relevance_base6&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=2">chromeDriver参考资料</a></p><p><a href="https://www.cnblogs.com/aiyablog/articles/17948703">ChromeDriver下载地址列表</a></p><p>安装之后可以在代码中指定charomeDriver的地址或者我们可以直接将chromeDriver放在python的安装文件夹中，更推荐后者</p><p>测试是否安装成功:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#请求</span></span><br><span class="line">driver.get(url)</span><br><span class="line"><span class="comment">#短暂延时</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#获取页面内容</span></span><br><span class="line">html = driver.page_source</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会自动弹出百度首页</p><h3 id="selenium基本用法"><a href="#selenium基本用法" class="headerlink" title="selenium基本用法"></a>selenium基本用法</h3><p><a href="https://selenium-python-zh.readthedocs.io/en/latest/installation.html">Python selenium库官方文档</a></p><p><strong>启动浏览器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure><p><strong>访问页面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get(url)</span><br></pre></td></tr></table></figure><p><strong>窗口最大化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.maximize_window()</span><br></pre></td></tr></table></figure><p><strong>刷新页面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.refresh()</span><br></pre></td></tr></table></figure><p><strong>获取页面源码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html = driver.page_source</span><br></pre></td></tr></table></figure><p><strong>页面截图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.save_screenshot(<span class="string">&quot;xxx.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>关闭浏览器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>使用Selenium时，如果关闭的时候没有使用driver.quit退出，会导致系统中会启动多个chromeDriver程序，可以在命令行中通过如下命令批量删除chromedriver进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /F /im chromedriver.exe</span><br></pre></td></tr></table></figure><h3 id="Selenium-driver对象的相关属性"><a href="#Selenium-driver对象的相关属性" class="headerlink" title="Selenium driver对象的相关属性"></a>Selenium driver对象的相关属性</h3><ul><li>current_url：当前url地址</li><li>title：页面标题</li><li>page_source：页面html源码，注意这个页面源码与requests获取的源码是不一样的，其是所有js执行之后的完整的源码</li><li>window_handler:获取浏览器上所有窗口句柄，窗口句柄即各个窗口id</li><li>curren_window_handler：获取当前窗口的句柄</li></ul><h3 id="selenium元素定位和等待"><a href="#selenium元素定位和等待" class="headerlink" title="selenium元素定位和等待"></a>selenium元素定位和等待</h3><h4 id="元素定位的方法："><a href="#元素定位的方法：" class="headerlink" title="元素定位的方法："></a>元素定位的方法：</h4><p><a href="https://selenium-python-zh.readthedocs.io/en/latest/locating-elements.html">selenium查找元素官网教程</a></p><p>一般我们知道如何通过xpath来定位元素就够了</p><p><strong>案例：打开百度首页，在输入框中输入值进行搜索</strong></p><p>首先打开百度首页，定位带搜索输入框元素，向输入框中输入值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment">#打开浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#url</span></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment">#定位到搜索框</span></span><br><span class="line">element = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#输入内容，发送请求</span></span><br><span class="line">element.send_keys(<span class="string">&quot;三国演义&quot;</span>)</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516202419933.png" alt="image-20240516202419933" style="zoom:67%;"></p><h4 id="元素的属性和操作"><a href="#元素的属性和操作" class="headerlink" title="元素的属性和操作"></a>元素的属性和操作</h4><h5 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h5><ul><li>tagname：获取标签名</li><li>text：获取标签文本</li><li>parent：获取父级标签</li><li>get_attribute()：获取属性</li><li>s_displayed()：判断元素是否可见</li></ul><h5 id="元素的操作"><a href="#元素的操作" class="headerlink" title="元素的操作"></a>元素的操作</h5><ul><li>click()，点击元素</li><li>send_keys()：输入内容</li><li>clear()：清空表单</li></ul><h3 id="selenium模拟登录案例"><a href="#selenium模拟登录案例" class="headerlink" title="selenium模拟登录案例"></a>selenium模拟登录案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">需求分析:</span></span><br><span class="line"><span class="string">    selenium模拟登录中华网:https://passport.china.com/logon</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;17775990925&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;a546245426&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#打开浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">url = <span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位登录的表单元素</span></span><br><span class="line"><span class="comment">#用户名元素</span></span><br><span class="line">userNameElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;userInput&quot;]/input[@name=&quot;userName&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#密码元素</span></span><br><span class="line">passWordElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;55&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#登录按钮</span></span><br><span class="line">loginButtonElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;index_logonid&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#填入信息</span></span><br><span class="line">userNameElement.send_keys(params[<span class="string">&quot;userName&quot;</span>])</span><br><span class="line">passWordElement.send_keys(params[<span class="string">&quot;password&quot;</span>])</span><br><span class="line"><span class="comment">#点击登录按钮</span></span><br><span class="line">loginButtonElement.click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="selenium爬取数据案例"><a href="#selenium爬取数据案例" class="headerlink" title="selenium爬取数据案例"></a>selenium爬取数据案例</h3><p><strong>需求分析</strong></p><p>利用selenium爬取领导留言板数据</p><p>主要抓取各个留言的：</p><ul><li>标题</li><li>正文内容</li><li>时间</li><li>留言ID</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516205322272.png" alt="image-20240516205322272" style="zoom:67%;"></p><p><strong>代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">selenium访问指定页面，并对页面解析，获取对应数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> selector</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#访问页面</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment">#等待</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#利用selenium定位元素</span></span><br><span class="line">titleElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//h1&#x27;</span>)</span><br><span class="line">textElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//p/span&#x27;</span>)</span><br><span class="line">timeElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//div[@class=&quot;headMainS fl&quot;]/p&#x27;</span>)</span><br><span class="line">IdElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//span[contains(text(),&quot;留言ID&quot;)]&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> titleElement,timeElement,IdElement,textElemen <span class="keyword">in</span> <span class="built_in">zip</span>(titleElementList,timeElementList,IdElementList,textElementList):</span><br><span class="line">    <span class="built_in">print</span>(timeElement.text,<span class="string">&quot;\t&quot;</span>,titleElement.text,<span class="string">&quot;\t&quot;</span>,IdElement.text)</span><br><span class="line">    <span class="built_in">print</span>(textElemen.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line"><span class="comment">#获取页面加载后的源码</span></span><br><span class="line"><span class="comment"># html = driver.page_source</span></span><br><span class="line"><span class="comment"># print(html)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">页面元素分析，如何利用xpath进行解析:</span></span><br><span class="line"><span class="string">标题: //h1/text()</span></span><br><span class="line"><span class="string">正文: //p/span/text()</span></span><br><span class="line"><span class="string">时间: //div[@class=&quot;headMainS fl&quot;]/p/text()</span></span><br><span class="line"><span class="string">留言ID://span[contains(text(),&quot;留言ID&quot;)]/text()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#解析</span></span><br><span class="line"><span class="comment"># title_list = selector.Selector(text=html).xpath(&quot;//h1/text()&quot;).extract()</span></span><br><span class="line"><span class="comment"># time_list = selector.Selector(text=html).xpath(&#x27;//div[@class=&quot;headMainS fl&quot;]/p/text()&#x27;).extract()</span></span><br><span class="line"><span class="comment"># ID_list = selector.Selector(text=html).xpath(&#x27;//span[contains(text(),&quot;留言ID&quot;)]/text()&#x27;).extract()</span></span><br><span class="line"><span class="comment"># for title,time,ID in zip(title_list,time_list,ID_list):</span></span><br><span class="line"><span class="comment">#     print(title+&quot;\t&quot;+time+&quot;\t&quot;+ID)</span></span><br></pre></td></tr></table></figure><p><strong>目前存在的问题</strong></p><ul><li><p>正文内容抓取不全，如下图所示，每一条帖子需要点击<strong>查看全文</strong>才能显示完全</p><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516212857275.png" alt="image-20240516212857275"></li></ul></li><li><p>内容抓取不全，目前只能抓取第一页数据，需要手动点击<strong>查看更多</strong>才能获取下一页记录</p><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516212942046.png" alt="image-20240516212942046"></li></ul></li></ul><h2 id="selenium进阶使用"><a href="#selenium进阶使用" class="headerlink" title="selenium进阶使用"></a>selenium进阶使用</h2><h3 id="等待机制"><a href="#等待机制" class="headerlink" title="等待机制"></a>等待机制</h3><p><a href="https://selenium-python-zh.readthedocs.io/en/latest/waits.html">官网 等待页面加载完成文档</a></p><h4 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a><strong>背景</strong></h4><p>现在大多数网页都是动态加载的，如果页面内容发生变更，就需要时间来进行渲染，代码是自动执行的，有可能在执行的时候页面新的元素还没有加载出来，就查不到，报 no such element的错误，如果报这个错误，则有可能是定位表达式不正确，或者也可能是页面元素已经发生了变化</p><p>我们爬虫的过程中，如果打开新的页面、页面跳转等情况都要添加合适的等待，否则有的情况下会导致程序错误，无法进行下去</p><h4 id="等待的三种方式"><a href="#等待的三种方式" class="headerlink" title="等待的三种方式"></a><strong>等待的三种方式</strong></h4><ul><li>强制等待<ul><li><code>time.sleep(n)</code></li></ul></li><li>隐式等待<ul><li><code>driver.implicitly_wait(n)</code></li></ul></li><li>显示等待（需要等待条件满足）<ul><li>隐式等待某些情况找不到，就要用显示等待</li></ul></li></ul><h4 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a>强制等待</h4><p><code>time.sleep()</code></p><p>不管网页有没有加载完成，都会等待指定时间</p><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><p><code>driver.implicitly_wait(n)</code></p><p>如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素。 默认等待时间是0秒</p><p>在n秒内如果还是找不到，则会抛出异常，在指定时间内，每隔一段时间就去看一下，如果成功找到，则程序会继续往下执行，如果没找到则继续等，直到最大等待时间</p><h4 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h4><p>可以设置等待条件，比如等待到某个元素可见、某个元素可点击</p><p>这种情况比较复杂，我们重点关注这种情况下如何使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一步:创建等待对象</span></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">10</span>)  <span class="comment">#WebDriverWait 三个参数，第一个为driver对象，第二个为最大时间，第三个为间隔时间，比如:WebDriverWait(driver,30,0.2)，即在30s内每个0.2s去找一次</span></span><br><span class="line"><span class="comment">#第二步：定义元素查找对象</span></span><br><span class="line">located = (By.XPATH,<span class="string">&quot;//input[@id=&#x27;u&#x27;&quot;</span>)</span><br><span class="line"><span class="comment">#第三步：定位的等待条件,比如指定元素可见为等待条件</span></span><br><span class="line">conditions = EC.visibility_of_element_located(located)</span><br><span class="line"><span class="comment">#第四步:通过等待计时器对象去查找</span></span><br><span class="line">wait.until(conditions)</span><br><span class="line"></span><br><span class="line"><span class="comment">#一行代码表示</span></span><br><span class="line">WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">            .until(EC.visibility_of_element_located((By.XPATH,<span class="string">&quot;//input[@id=&#x27;u&#x27;&quot;</span>)))</span><br></pre></td></tr></table></figure><h5 id="常用显示等待条件"><a href="#常用显示等待条件" class="headerlink" title="常用显示等待条件"></a><strong>常用显示等待条件</strong></h5><ul><li><code>visibility_of_element_located</code>：元素可见</li><li><code>element_to_be_clickable</code>：元素可点击</li></ul><h5 id="等待条件"><a href="#等待条件" class="headerlink" title="等待条件"></a>等待条件</h5><ul><li><code>presence_of_element_located</code>：元素存在</li><li><code>visibility_of_element_located</code>：元素可见</li><li><code>element_to_be_clickable</code>：元素可点击</li><li><code>title_contains</code>：标题包含某内容</li><li><code>new_window_is_opened</code>：等待新窗口出现</li><li><code>frame_to_be_available_and_switch_to_it</code>：加载并切换到iframe中</li><li><code>alert_is_present</code>：出现Alert弹框</li></ul><h3 id="iframe切换"><a href="#iframe切换" class="headerlink" title="iframe切换"></a>iframe切换</h3><h4 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h4><p>对于<a href="https://wx.mail.qq.com/">QQ邮箱登录页面</a>，其内部是一个网页嵌套另一个网页构成的，如果直接查找或者点击里面的某些元素是找不到的，必须要进行iframe切换</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517091621440.png" alt="image-20240517091621440"></p><h4 id="selenium控制iframe切换"><a href="#selenium控制iframe切换" class="headerlink" title="selenium控制iframe切换"></a>selenium控制iframe切换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式一：切换iframe，通过iframe的名字(name属性)进行切换</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;frame_name&#x27;</span>) </span><br><span class="line"><span class="comment">#方式二:通过element元素去切换</span></span><br><span class="line">iframeElement = driver.find_element_by_xpath(<span class="string">&#x27;//iframe[@id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(iframeElement)</span><br><span class="line"><span class="comment">#方式三：通过索引切换</span></span><br><span class="line">driver.switch_to.frame(<span class="number">1</span>) <span class="comment">#根据第几个iframe切换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切换回默认的html页面</span></span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到父级的iframe中</span></span><br><span class="line">driver.switch_to.parent_frame()</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>模拟QQ邮箱登录页面点击密码登录，然后输入账号密码模拟登陆</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517092226636.png" alt="image-20240517092226636"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#url</span></span><br><span class="line">url = <span class="string">&quot;https://wx.mail.qq.com/&quot;</span></span><br><span class="line">driver.get(url=url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换进入第一个iframe</span></span><br><span class="line">driver.switch_to.frame(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#切换进入第二个iframe</span></span><br><span class="line">iframeElement = driver.find_element(By.XPATH,<span class="string">&#x27;//iframe[@id=&quot;ptlogin_iframe&quot;]&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(iframeElement)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找密码登录按钮，并点击</span></span><br><span class="line">passwordLoginButton = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;switcher_plogin&quot;]&#x27;</span>)</span><br><span class="line">passwordLoginButton.click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到账号和密码输入框，模拟登录</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;u&quot;]&#x27;</span>).send_keys(<span class="string">&quot;wujjjj&quot;</span>)</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;p&quot;]&#x27;</span>).send_keys(<span class="string">&quot;99899&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#登录按钮</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;login_button&quot;]&#x27;</span>).click()</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><p>最终还会弹出</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517094617205.png" alt="image-20240517094617205"></p><h3 id="窗口滚动"><a href="#窗口滚动" class="headerlink" title="窗口滚动"></a>窗口滚动</h3><h4 id="背景-3"><a href="#背景-3" class="headerlink" title="背景"></a>背景</h4><p>有的时候，元素虽然被加载出来了，但是如果看不到，是无法进行操作的，这时就需要滚动页面才会显示新的内容</p><p>比如对于我们之前爬取的<a href="https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81">领导留言板</a>网站，就需要手动滚动页面到最底部，然后点击查看更多，才能分页查看下一页数据</p><p>所以要想抓取数据完全，需要不断查找查看更多按钮，然后点击进行翻页</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517111858981.png" alt="image-20240517111858981"></p><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=1179&amp;formName=%E5%AE%9C%E6%98%8C%E5%B8%82%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%86%8A%E5%BE%81%E5%AE%87&amp;position=0&amp;province=28&amp;city=230&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81&amp;pForumNames=%E5%AE%9C%E6%98%8C%E5%B8%82&quot;</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#隐式等待</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment">#循环迭代 找到查看更多，并翻页,无法确定有多少也，只能死循环，找不到即触发异常结束</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 找到 查看更多按钮</span></span><br><span class="line">        element = driver.find_element(By.XPATH, <span class="string">&#x27;//*[@class=&quot;mordList&quot;]&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(element)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        element.location_once_scrolled_into_view  <span class="comment"># 页面滚动到 查看更多按钮可见的位置</span></span><br><span class="line">        <span class="comment"># 点击查看更多按钮</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        element.click()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#整体页面解析</span></span><br><span class="line"><span class="comment">#利用selenium定位元素</span></span><br><span class="line">titleElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//h1&#x27;</span>)</span><br><span class="line">textElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//p/span&#x27;</span>)</span><br><span class="line">timeElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//div[@class=&quot;headMainS fl&quot;]/p&#x27;</span>)</span><br><span class="line">IdElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//span[contains(text(),&quot;留言ID&quot;)]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> titleElement,timeElement,IdElement,textElemen <span class="keyword">in</span> <span class="built_in">zip</span>(titleElementList,timeElementList,IdElementList,textElementList):</span><br><span class="line">    <span class="built_in">print</span>(timeElement.text,<span class="string">&quot;\t&quot;</span>,titleElement.text,<span class="string">&quot;\t&quot;</span>,IdElement.text)</span><br><span class="line">    <span class="built_in">print</span>(textElemen.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总条数:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(titleElementList)))</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="JS模拟滚动页面"><a href="#JS模拟滚动页面" class="headerlink" title="JS模拟滚动页面"></a>JS模拟滚动页面</h3><p><strong>js滚动窗口到指定坐标位置</strong></p><ul><li><p><code>scrollTo()</code>：可把内容滚动到指定的坐标</p><ul><li>```js<br>scrollTo(x,y)<h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1>x ：必须，要在窗口文档显示区左上角显示的文档的x坐标<br>y : 必须，要在窗口文档显示区左上角显示的文档的y坐标<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**selenium如何执行js代码**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">#移动Y坐标到500的位置</span><br><span class="line">js = &quot;window.scrollTo(0,500)&quot;</span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">#滚动到窗口底板</span><br><span class="line">js = &quot;window.scrollTo(0,document.body.scrollHeight)&quot;</span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">#相对滚动</span><br><span class="line">#scrollBy(x1,x2)表示相对当前位置(x,y)，页面下一步滚动到 x+x1,y+y1</span><br><span class="line">#有的时候，突然滚动到底部，可能会被反爬机制识别，这是用相对滑动，模拟人的操作</span><br><span class="line">js = &quot;window.scrollBy(0,100)&quot;</span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h3><p>比如：有的页面需要模拟鼠标操作，对页面元素进行拖拽操作，比如滑块验证码之类的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br></pre></td></tr></table></figure><p>ActionChains：鼠标操作类</p><ul><li>click：鼠标点击</li><li>double_click：鼠标双击</li><li>context_click：鼠标右击</li><li>move_to_element：鼠标移动到某个节点</li><li>click_and_hold：鼠标左键按下鼠标</li><li>move_by_offse：鼠标相对当前位置进行移动</li><li>drag_and_drop()：在一个位置按下鼠标，到另一个位置进行释放</li><li>release：释放鼠标</li><li>perform：执行动作</li></ul><p><a href="https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable">鼠标操作练习网站</a></p><p><strong>实例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ActionChains：鼠标操作类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- click：鼠标点击</span></span><br><span class="line"><span class="string">- double_click：鼠标双击</span></span><br><span class="line"><span class="string">- context_click：鼠标右击</span></span><br><span class="line"><span class="string">- move_to_element：鼠标移动到某个节点</span></span><br><span class="line"><span class="string">- click_and_hold：鼠标左键按下鼠标</span></span><br><span class="line"><span class="string">- move_by_offse：鼠标相对当前位置进行移动</span></span><br><span class="line"><span class="string">- drag_and_drop()：在一个位置按下鼠标，到另一个位置进行释放</span></span><br><span class="line"><span class="string">- release：释放鼠标</span></span><br><span class="line"><span class="string">- perform：执行动作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到子iframe</span></span><br><span class="line">driver.switch_to.frame(driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;iframeResult&quot;]&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到拖拽块元素</span></span><br><span class="line">dragElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;draggable&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化 ActionChains对象</span></span><br><span class="line">ac = ActionChains(driver)</span><br><span class="line"><span class="comment">#将鼠标移动到该元素上</span></span><br><span class="line">ac.move_to_element(dragElement)</span><br><span class="line"><span class="comment">#按住鼠标不放</span></span><br><span class="line">ac.click_and_hold()</span><br><span class="line"><span class="comment">#将鼠标移动到另一个元素</span></span><br><span class="line">ac.move_to_element(driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;droppable&quot;]&#x27;</span>))</span><br><span class="line"><span class="comment">#执行鼠标动作</span></span><br><span class="line">ac.perform()</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517184401515.png" alt="image-20240517184401515"></p><h3 id="selenium携带cookie登录"><a href="#selenium携带cookie登录" class="headerlink" title="selenium携带cookie登录"></a>selenium携带cookie登录</h3><p>很多网站需要登录才能访问其他页面，这种情况我们需要首先需要利用selenium模拟登录获取网站的cookie信息，然后在访问其他网站的时候模拟</p><p><a href="https://blog.csdn.net/weixin_43821172/article/details/105199481">参考资料</a></p><h2 id="selenium特征检测"><a href="#selenium特征检测" class="headerlink" title="selenium特征检测"></a>selenium特征检测</h2><p><a href="https://zhuanlan.zhihu.com/p/321928394">参考资料 js文件下载地址</a></p><h3 id="selenium启动的浏览器可能具有以下特殊的特征"><a href="#selenium启动的浏览器可能具有以下特殊的特征" class="headerlink" title="selenium启动的浏览器可能具有以下特殊的特征"></a>selenium启动的浏览器可能具有以下特殊的特征</h3><ul><li>User-Agent字符串<ul><li>Selenium启动的浏览器通常具有特定的User-Agent字符串，可以通过检查User-Agent来判断是否为Selenium启动的浏览器</li></ul></li><li>自动化工具标识<ul><li>Selenium启动的浏览器可能会在请求头中包含一些自动化工具的标识，例如<code>Requested-With</code>、<code>DNT</code>等</li></ul></li><li>WebDriver相关属性<ul><li>Selenium启动的浏览器可能会在全局<code>window</code>对象中注入一些特殊的属性，例如<code>webdriver</code>、<code>navigator.webdriver</code>等</li></ul></li><li>页面加载行为<ul><li>Selenium启动的浏览器通常会以自动化的方式加载页面，可能会出现一些快速点击、输入文本等行为</li></ul></li><li>元素检测<ul><li>Selenium启动浏览器的时候会在DOM中插入一些特定的元素或者属性，用于控制浏览器行为，可以通过检测这些特定的元素或属性来判断是否为Selenium启动的浏览器</li></ul></li></ul><h3 id="如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征"><a href="#如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征" class="headerlink" title="如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征"></a>如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征</h3><ul><li><code>--disable-infobars</code>：禁止显示Chrome浏览器正在受到自动测试软件控制的通知栏</li><li><code>excludeSwitches</code>、<code>enable-automation</code>：排除启动自动化扩展程序的开关，可以防止被网站检测到使用了自动化测试工具，减少被反爬虫封锁的可能</li><li><code>useAutomationExtension:False</code>：禁用自动化扩展程序，同样为了避免被网站检测到使用了自动化工具</li><li>通过<code>Page.addScriptToEvaluateOnNewDocument</code>方法，可以在每次页面加载时执行指定的JavaScript代码，我们每次打开新页面之前，执行<code>hide.js</code>来隐藏selenium启动浏览器生成的属性，从而防止被检测出来时爬虫</li></ul><h3 id="绕过特征检测案例"><a href="#绕过特征检测案例" class="headerlink" title="绕过特征检测案例"></a>绕过特征检测案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">目标网站: https://www.aqistudy.cn/ 对selenium做了反爬</span></span><br><span class="line"><span class="string">如果用selenium打开，是不会有数据显示的</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置浏览器配置,隐藏selenium一些特性</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">#添加防检测的参数</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-infobars&quot;</span>)</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;excludeSwitches&quot;</span>,[<span class="string">&quot;enable-automation&quot;</span>])</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;useAutomationExtension&quot;</span>,<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#添加浏览器头</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#每次打开新的页面之前，执行该脚本，去除selenium打开浏览器生成的相关属性特征</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../stealth.min.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    js = f.read()</span><br><span class="line">driver.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>,&#123;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: js</span><br><span class="line">&#125;)</span><br><span class="line">url = <span class="string">&#x27;https://www.aqistudy.cn/&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="JS逆向分析"><a href="#JS逆向分析" class="headerlink" title="JS逆向分析"></a>JS逆向分析</h2><h3 id="js参数加密案例"><a href="#js参数加密案例" class="headerlink" title="js参数加密案例"></a>js参数加密案例</h3><p>许多网站的请求参数都是加密传递的，要模拟发送请求，就得直到参数是怎么加密的，然后用代码实现加密的过程</p><p>比如对于一些网站的登录页面，其账号、密码传输时是通过某种加密算法加密后再发送请求的</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>对于 <a href="https://www.94mxd.com.cn/signin">网站</a>的登录界面，</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517194933379.png" alt="image-20240517194933379"></p><p>我们输入账号、密码模拟登录，抓包分析，发现其密码是加密后的数据</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517195033515.png" alt="image-20240517195033515"></p><p>找到调用的js文件</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517202540845.png" alt="image-20240517202540845"></p><p>我们班通过打断点分析，定位带其js代码中加密的函数,实际上是一个 盐值拼接，然后采用md5加密得到</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517202750673.png" alt="image-20240517202750673"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517202817522.png" alt="image-20240517202817522"></p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment">#md5加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hashPwd</span>(<span class="params">password</span>):</span><br><span class="line">    <span class="comment">#盐值</span></span><br><span class="line">    saltValue = <span class="string">&quot;Hq44cyp4mT9Fh5eNrZ67bjifidFhW%fb0ICjx#6gE59@P@Hr8%!WuYBa1yvytq$qh1FEM18qA8Hp9m3VLux9luIYpeYzA2l2W3Z&quot;</span></span><br><span class="line">    <span class="comment">#加密</span></span><br><span class="line">    strVal = password+saltValue</span><br><span class="line"></span><br><span class="line">    hashObj = hashlib.md5()</span><br><span class="line">    hashObj.update(strVal.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    md5StrVal = hashObj.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> md5StrVal</span><br></pre></td></tr></table></figure><p>当然，如果我们采用selenium模拟登录，无需直到其加密算法，直接在输入框中输入明文，即可模拟登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.94mxd.com.cn/signin&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;1985439923@qq.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wu123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#模拟登录</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位元素输入值</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;email&quot;]&#x27;</span>).send_keys(params[<span class="string">&quot;email&quot;</span>])</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;password&quot;]&#x27;</span>).send_keys(params[<span class="string">&quot;password&quot;</span>])</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#点击登录按钮</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;container&quot;]/div/div/div[2]/div[2]//button&#x27;</span>).click()</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="调用js加密代码"><a href="#调用js加密代码" class="headerlink" title="调用js加密代码"></a>调用js加密代码</h3><p>在逆向分析时，有时候会发现某个js加密算法会比较繁琐，用python还原同样的算法会比较费劲，此时，我们可以不必使用python去还原，而是利用python去直接调用JavaScript中定义的功能，通过调式分析加密算法所在的位置和源码，然后直接在代码中调用该js代码</p><p>python调用js，需要借助于第三方库<code>pyexcejs</code>，这个库底层调用<code>node.js</code>，所以还需要安装<code>node.js</code></p><p><strong>代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">python调用js用第三方库:</span></span><br><span class="line"><span class="string">    需要安装python第三方库:pyexecjs</span></span><br><span class="line"><span class="string">    需要安装: node.js</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line">jsCode=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function add(a,b)&#123;</span></span><br><span class="line"><span class="string">    return a+b</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function say()&#123;</span></span><br><span class="line"><span class="string">    return &quot;say,hello!!!&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#第一步：编译代码</span></span><br><span class="line">JS = execjs.<span class="built_in">compile</span>(jsCode)</span><br><span class="line"><span class="comment">#第二部调用</span></span><br><span class="line">result = JS.call(<span class="string">&quot;add&quot;</span>,<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line">message = JS.call(<span class="string">&quot;say&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><h2 id="验证码破解"><a href="#验证码破解" class="headerlink" title="验证码破解"></a>验证码破解</h2><h3 id="图像验证码破解"><a href="#图像验证码破解" class="headerlink" title="图像验证码破解"></a>图像验证码破解</h3><p>许多网站，在登陆的时候，除了输入账号、密码之外，还会显示一个图像验证码，那么这类网站应该如何破解？</p><p>对于 <a href="https://www.chaojiying.com/user/login/">超级鹰</a>：网站登陆页面，如下图所示：其会显示一个图像验证码，要想破解这类网站，就需要能够识别图像验证码中的字符</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518200110879.png" alt="image-20240518200110879" style="zoom: 33%;"></p><p>抓包分析，一打开登陆界面，其会自动向后台发送一个请求，获取一个图像验证码，且该同一链接地址多次请求，返回的结果均是不同的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518200524218.png" alt="image-20240518200524218" style="zoom:33%;"></p><p>对于其点击登陆按钮发送的登陆请求，抓包如下图所示：</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518200840384.png" alt="image-20240518200840384" style="zoom:50%;"></p><p>综上所述，该问题的难点就在于验证码的识别问题</p><p><strong>破解步骤：</strong></p><ul><li><p>发送请求获取验证码</p><ul><li>这个问题比较棘手，因为发现，同一个图片地址，每次请求时，其返回的图片都是不一样的</li><li>那么他是如何将验证码与登陆关联起来的呢？通过同一会话session关联起来的</li></ul></li><li><p>识别验证码内容</p><ul><li><p>```python<br>“””<br>图像验证码: 需要获取验证码图片，然后识别图片里面的文本内容，这个就需要用到ocr技术</p><p>python中ocr识别库: ddddocr<br>该库是免费的，但是精度不是很高，有的时候会识别错误</p><p>如果精度要求比较高，可以找一些第三方收费服务：百度直接搜：打码平台 一般会支持各种类型的验证码识别<br>“””<br>import ddddocr</p><h1 id="创建ocr对象"><a href="#创建ocr对象" class="headerlink" title="创建ocr对象"></a>创建ocr对象</h1><p>ocr = ddddocr.DdddOcr()</p><h1 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h1><p>with open(“1.png”,”rb”) as f:</p><pre><code>image = f.read()</code></pre><h1 id="识别图片内容"><a href="#识别图片内容" class="headerlink" title="识别图片内容"></a>识别图片内容</h1><p>code = ocr.classification(image)<br>print(“识别结果:”,code)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 发送登陆请求</span><br><span class="line"></span><br><span class="line">**破解超级鹰网站登陆页面代码示例**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import requests</span><br><span class="line">import ddddocr</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">流程：</span><br><span class="line">    ①请求网站，获取图像验证码图片</span><br><span class="line">    ②调用第三方库识别图像验证码文本</span><br><span class="line">    ③构造请求，发送登陆请求</span><br><span class="line">    </span><br><span class="line">    注意：这整个过程需在同一会话session中进行</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">#获取图形验证码</span><br><span class="line">codeUrl = &quot;https://www.chaojiying.com/include/code/code.php?u=1&quot;</span><br><span class="line">codeImage = session.get(url=codeUrl).content</span><br><span class="line">with open(&quot;code.png&quot;,&quot;wb&quot;) as f:</span><br><span class="line">    f.write(codeImage)</span><br><span class="line">#调用第三方库识别图像验证码</span><br><span class="line">ocr = ddddocr.DdddOcr()</span><br><span class="line">code = ocr.classification(codeImage)</span><br><span class="line">print(&quot;验证码：&quot;,code)</span><br><span class="line">#构造登陆请求</span><br><span class="line">loginUrl = &quot;https://www.chaojiying.com/user/login/&quot;</span><br><span class="line">params=&#123;</span><br><span class="line">    &quot;user&quot;: &quot;HustRich&quot;,</span><br><span class="line">    &quot;pass&quot;: &quot;wu123456&quot;,</span><br><span class="line">    &quot;imgtxt&quot;: code,</span><br><span class="line">    &quot;act&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line">headers=&#123;</span><br><span class="line">    &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span><br><span class="line">    # ,&quot;Cookie&quot;:&quot;PHPSESSID=c2s08og1j8244us3qc4ub9d217; __51cke__=; __tins__16851773=%7B%22sid%22%3A%201716036582790%2C%20%22vd%22%3A%203%2C%20%22expires%22%3A%201716039030500%7D; __51laig__=4&quot;</span><br><span class="line">&#125;</span><br><span class="line">response = session.post(url=loginUrl,data=params,headers=headers)</span><br><span class="line">print(response.content)</span><br><span class="line"></span><br><span class="line">with open(&quot;res.html&quot;,&quot;wb&quot;) as f:</span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="js逆向：滑动验证码的轨迹破解"><a href="#js逆向：滑动验证码的轨迹破解" class="headerlink" title="js逆向：滑动验证码的轨迹破解"></a>js逆向：滑动验证码的轨迹破解</h3><p>案例网站：<a href="https://user.qunar.com/passport/login.jsp">去哪儿</a></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100404382.png" alt="image-20240518100404382" style="zoom: 33%;"></p><p><strong>需求分析</strong></p><p>我们输入手机号，然后点击获取验证码，会弹出一个滑动验证码窗口，经过验证之后才会收到验证码，然后点击登陆注册，此过程向后端的请求包括：</p><ul><li>滑动验证码的请求</li><li>获取手机验证码的请求</li><li>登陆接口的请求</li></ul><p><strong>滑动验证码请求</strong></p><p>只有将滑动验证码拖动到最右端才能成功发送该请求</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100928636.png" alt="image-20240518100928636"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100848451.png" alt="image-20240518100848451" style="zoom:50%;"></p><p>观察滑动验证码请求参数，发现其中有一个未知的参数 data</p><p><strong>手机验证码请求</strong></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100959013.png" alt="image-20240518100959013" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518101033801.png" alt="image-20240518101033801"></p><p><strong>登陆接口请求</strong></p><p>验证码破解相关知识等后续有需求再了解</p><h2 id="异步爬虫"><a href="#异步爬虫" class="headerlink" title="异步爬虫"></a>异步爬虫</h2><p>当我们有大量数据需要抓取时，总的抓取时间会比较长，这个时候，如果需要提高数据的抓取效率，需要用到多线程异步并发爬取</p><p>该方法缺陷，并发会导致短时间对目标网站服务器大量请求，使得目标网站压力过大，如果被检测，可能触发一系列的反爬机制</p><p>该方法一般需要配合代理IP去使用，每次请求从不同ip发出，这样即使访问很频繁，由于请求来自于不同ip，被检测概率会比较低</p><h3 id="抓取需求"><a href="#抓取需求" class="headerlink" title="抓取需求"></a>抓取需求</h3><p>目标网站：<a href="https://www.myfreemp3.com.cn/">https://www.myfreemp3.com.cn/</a></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518104553106.png" alt="image-20240518104553106" style="zoom: 33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518105026649.png" alt="image-20240518105026649" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518105052266.png" alt="image-20240518105052266" style="zoom:33%;"></p><p>我们的目标是抓取该网站上周杰伦所有歌曲</p><ul><li><p>要求：下载每一首歌曲的封面图、mp3文件，歌词，然后保存在本地，要求保存的格式如下：</p><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518105221295.png" alt="image-20240518105221295" style="zoom:33%;"></li></ul></li><li><p>子目录名为各个歌曲名，里面包含mp3文件、封面图png，歌词文本txt文件</p></li></ul><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ul><li>先抓取搜索歌手所有的歌曲，提取歌曲名、歌手、封面图、歌词信息</li><li>然后再去下载歌曲、封面、歌词保存为文件</li></ul><h4 id="获取歌曲列表接口"><a href="#获取歌曲列表接口" class="headerlink" title="获取歌曲列表接口"></a>获取歌曲列表接口</h4><p>抓包分析：</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110007948.png" alt="image-20240518110007948" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110055152.png" alt="image-20240518110055152" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110125909.png" alt="image-20240518110125909" style="zoom:33%;"></p><p><img src="03 爬虫进阶//image-20240518110235118.png" alt="image-20240518110235118" style="zoom:33%;"></p><p>歌曲列表接口：</p><blockquote><p>url地址：</p><ul><li><a href="https://www.myfreemp3.com.cn/">https://www.myfreemp3.com.cn/</a></li></ul><p>请求方法：</p><ul><li>POST</li></ul><p>参数：</p><ul><li>input: 歌手名</li><li>filter: name</li><li>page: 页码</li><li>type: netease</li></ul><p>返回响应:</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110437045.png" alt="image-20240518110437045" style="zoom:50%;"></p></blockquote><h4 id="单线程下载"><a href="#单线程下载" class="headerlink" title="单线程下载"></a>单线程下载</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析:</span></span><br><span class="line"><span class="string">    抓取网站:https://www.myfreemp3.com.cn/ 中指定歌手的歌曲:</span></span><br><span class="line"><span class="string">        下载数据包括: 歌曲封面图片、歌曲歌词文本文件，歌曲mp3资源文件</span></span><br><span class="line"><span class="string">        文件存储格式:</span></span><br><span class="line"><span class="string">            歌手名:</span></span><br><span class="line"><span class="string">                歌曲名:</span></span><br><span class="line"><span class="string">                    歌曲名_作者.png</span></span><br><span class="line"><span class="string">                    歌曲名_作者.txt</span></span><br><span class="line"><span class="string">                    歌曲名_作者.mp3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrawMusic</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,baseDir</span>):</span><br><span class="line">        self.url = <span class="string">&quot;https://www.myfreemp3.com.cn&quot;</span></span><br><span class="line">        self.headers=&#123;</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">                ,<span class="string">&quot;X-Requested-With&quot;</span>:<span class="string">&quot;XMLHttpRequest&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        self.params=&#123;</span><br><span class="line">            <span class="string">&quot;input&quot;</span>: <span class="string">&quot;周杰伦&quot;</span>,</span><br><span class="line">            <span class="string">&quot;filter&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">            <span class="string">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;netease&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.baseDir = baseDir</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendRequest</span>(<span class="params">self,name,pageIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 歌手姓名</span></span><br><span class="line"><span class="string">        :param pageIndex: 当前页码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.params[<span class="string">&quot;name&quot;</span>]=name</span><br><span class="line">        self.params[<span class="string">&quot;page&quot;</span>]=pageIndex</span><br><span class="line">        response = requests.post(url=self.url, data=self.params, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        data = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;list&quot;</span>]</span><br><span class="line">        curSaveDir = os.path.join(self.baseDir,name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curSaveDir):</span><br><span class="line">            os.makedirs(curSaveDir)</span><br><span class="line">            self.parseData(curSaveDir,data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parseData</span>(<span class="params">self,curSaveDir,data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param curSaveDir: 该歌手数据存储根目录</span></span><br><span class="line"><span class="string">        :param data: 需要被解析的数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            <span class="comment"># 歌词标题</span></span><br><span class="line">            title = item[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">            <span class="comment"># 作者</span></span><br><span class="line">            author = item[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">            <span class="comment"># 封面图片链接</span></span><br><span class="line">            pic = item[<span class="string">&quot;pic&quot;</span>]</span><br><span class="line">            <span class="comment"># 歌词文本</span></span><br><span class="line">            tex = item[<span class="string">&quot;lrc&quot;</span>]</span><br><span class="line">            <span class="comment"># 歌词下载链接</span></span><br><span class="line">            mp3Link = item[<span class="string">&quot;url&quot;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment">#当前歌曲数据存储路径</span></span><br><span class="line">            curMusicSaveDir = os.path.join(curSaveDir, title)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curMusicSaveDir):</span><br><span class="line">                os.mkdir(curMusicSaveDir)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;benign dowmload &#123;&#125;&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">                <span class="comment"># 图片</span></span><br><span class="line">                curPicSavePath = os.path.join(curMusicSaveDir, title + <span class="string">&quot;.png&quot;</span>)</span><br><span class="line">                self.downloadFile(pic, curPicSavePath)</span><br><span class="line">                <span class="comment"># 歌词</span></span><br><span class="line">                curTexSavePath = os.path.join(curMusicSaveDir, title + <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(curTexSavePath, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(tex)</span><br><span class="line">                <span class="comment"># MP3</span></span><br><span class="line">                curMp3SavePath = os.path.join(curMusicSaveDir, title + <span class="string">&quot;.mp3&quot;</span>)</span><br><span class="line">                self.downloadFile(mp3Link, curMp3SavePath)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;歌曲&#123;&#125;已被下载，无需重复下载&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">downloadFile</span>(<span class="params">self,url, path</span>):</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(url+<span class="string">&quot; 下载失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    crawDownload = CrawMusic(<span class="string">r&quot;E:\tempData\musics&quot;</span>)</span><br><span class="line">    crawDownload.sendRequest(<span class="string">&quot;周杰伦&quot;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="异步下载"><a href="#异步下载" class="headerlink" title="异步下载"></a>异步下载</h4><p>上面代码是单线程下载，而且只是下载单页数据，当需要下载大量数据时，就必须采用多线程异步下载</p><p>整个爬虫其实主要分为以下三个模块：</p><ul><li>发送请求获取响应</li><li>数据解析</li><li>数据存储</li><li>如下图所示，对于这三个模块我们可以进行异步处理，模块一线程请求后的数据进入一个管道，模块二线程从管道中拿取数据进行解析，然后解析后的结果放入另一个管道，模块三线程从管道二中拿取解析后的数据进行存储，这个过程，三个模块相互独立，如果哪个部分耗时较多，可以采用多线程进行处理</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518182355861.png" alt="image-20240518182355861" style="zoom:50%;"></p><p><strong>多线程代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析:</span></span><br><span class="line"><span class="string">    抓取网站:https://www.myfreemp3.com.cn/ 中指定歌手的歌曲:</span></span><br><span class="line"><span class="string">        下载数据包括: 歌曲封面图片、歌曲歌词文本文件，歌曲mp3资源文件</span></span><br><span class="line"><span class="string">        文件存储格式:</span></span><br><span class="line"><span class="string">            歌手名:</span></span><br><span class="line"><span class="string">                歌曲名:</span></span><br><span class="line"><span class="string">                    歌曲名_作者.png</span></span><br><span class="line"><span class="string">                    歌曲名_作者.txt</span></span><br><span class="line"><span class="string">                    歌曲名_作者.mp3</span></span><br><span class="line"><span class="string">    并发下载:</span></span><br><span class="line"><span class="string">        请求、数据解析、数据存储三个部分用多个不同线程处理</span></span><br><span class="line"><span class="string">        各个线程之间用 queue.Queue来进行数据传递，该对象是线程安全的</span></span><br><span class="line"><span class="string">        queue的用法参考:https://blog.csdn.net/songpeiying/article/details/131761990</span></span><br><span class="line"><span class="string">        queue = queue.Queue()</span></span><br><span class="line"><span class="string">        queue.put() 添加数据  使用put()方法将元素放入队列。如果队列已满，put()方法会阻塞直到有空余空间</span></span><br><span class="line"><span class="string">        queue.get() 获取数据  使用get()方法从队列中取出元素。如果队列为空，get()方法会阻塞直到有元素可用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        queue.get(timeout=xx) 等待xx秒如果还未获取数据则会报错，如果不添加timeout参数则会一直阻塞</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrawMusic</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,baseDir</span>):</span><br><span class="line">        self.url = <span class="string">&quot;https://www.myfreemp3.com.cn&quot;</span></span><br><span class="line">        self.headers=&#123;</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">                ,<span class="string">&quot;X-Requested-With&quot;</span>:<span class="string">&quot;XMLHttpRequest&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        self.params=&#123;</span><br><span class="line">            <span class="string">&quot;input&quot;</span>: <span class="string">&quot;周杰伦&quot;</span>,</span><br><span class="line">            <span class="string">&quot;filter&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">            <span class="string">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;netease&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.baseDir = baseDir</span><br><span class="line">        <span class="comment">#响应数据类管道</span></span><br><span class="line">        self.responseDataQueue = queue.Queue()</span><br><span class="line">        <span class="comment">#解析数据管道</span></span><br><span class="line">        self.parseDataQueue = queue.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendRequest</span>(<span class="params">self,name,pageIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 歌手姓名</span></span><br><span class="line"><span class="string">        :param pageIndex: 当前页码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.params[<span class="string">&quot;input&quot;</span>]=name</span><br><span class="line">        self.params[<span class="string">&quot;page&quot;</span>]=pageIndex</span><br><span class="line">        response = requests.post(url=self.url, data=self.params, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        data = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;list&quot;</span>]</span><br><span class="line">        curSaveDir = os.path.join(self.baseDir,name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curSaveDir):</span><br><span class="line">            os.makedirs(curSaveDir)</span><br><span class="line">        self.responseDataQueue.put((curSaveDir,data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parseData</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param curSaveDir: 该歌手数据存储根目录</span></span><br><span class="line"><span class="string">        :param data: 需要被解析的数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                curSaveDir, data = self.responseDataQueue.get(timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span> queue.Empty:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">                <span class="comment"># 歌词标题</span></span><br><span class="line">                title = item[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">                <span class="comment"># 作者</span></span><br><span class="line">                author = item[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">                <span class="comment"># 封面图片链接</span></span><br><span class="line">                pic = item[<span class="string">&quot;pic&quot;</span>]</span><br><span class="line">                <span class="comment"># 歌词文本</span></span><br><span class="line">                tex = item[<span class="string">&quot;lrc&quot;</span>]</span><br><span class="line">                <span class="comment"># 歌词下载链接</span></span><br><span class="line">                mp3Link = item[<span class="string">&quot;url&quot;</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment">#当前歌曲数据存储路径</span></span><br><span class="line">                curMusicSaveDir = os.path.join(curSaveDir, title)</span><br><span class="line">                self.parseDataQueue.put((curMusicSaveDir,title,author,pic,tex,mp3Link))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">saveData</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                curMusicSaveDir, title, author,pic, tex, mp3Link = self.parseDataQueue.get(timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span> queue.Empty:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curMusicSaveDir):</span><br><span class="line">                os.mkdir(curMusicSaveDir)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;benign dowmload &#123;&#125;&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">                <span class="comment"># 图片</span></span><br><span class="line">                curPicSavePath = os.path.join(curMusicSaveDir, title +<span class="string">&quot;_&quot;</span>+author+ <span class="string">&quot;.png&quot;</span>)</span><br><span class="line">                self.downloadFile(pic, curPicSavePath)</span><br><span class="line">                <span class="comment"># 歌词</span></span><br><span class="line">                curTexSavePath = os.path.join(curMusicSaveDir, title +<span class="string">&quot;_&quot;</span>+author+ <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(curTexSavePath, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(tex)</span><br><span class="line">                <span class="comment"># MP3</span></span><br><span class="line">                curMp3SavePath = os.path.join(curMusicSaveDir, title +<span class="string">&quot;_&quot;</span>+author+ <span class="string">&quot;.mp3&quot;</span>)</span><br><span class="line">                self.downloadFile(mp3Link, curMp3SavePath)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;歌曲&#123;&#125;已被下载，无需重复下载&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">downloadFile</span>(<span class="params">self,url, path</span>):</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(url+<span class="string">&quot; 下载失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    crawDownload = CrawMusic(<span class="string">r&quot;E:\tempData\musics&quot;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    多线程，我们采用线程池来进行处理</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        pool.submit(crawDownload.sendRequest,<span class="string">&quot;蔡依林&quot;</span>,<span class="number">1</span>)</span><br><span class="line">        pool.submit(crawDownload.parseData)</span><br><span class="line">        <span class="comment">#save data比较耗时，采用三个线程</span></span><br><span class="line">        pool.submit(crawDownload.saveData)</span><br><span class="line">        pool.submit(crawDownload.saveData)</span><br><span class="line">        pool.submit(crawDownload.saveData)</span><br></pre></td></tr></table></figure><h2 id="Cookie池和IP代理"><a href="#Cookie池和IP代理" class="headerlink" title="Cookie池和IP代理"></a>Cookie池和IP代理</h2><p>多线程并发存在问题：同一时间向目标服务器发送请求过多，且请求来自于同一客户端，容易被对方察觉，触发反爬机制导致失败</p><h3 id="代理IP的使用"><a href="#代理IP的使用" class="headerlink" title="代理IP的使用"></a>代理IP的使用</h3><h4 id="代理IP的基本概念"><a href="#代理IP的基本概念" class="headerlink" title="代理IP的基本概念"></a>代理IP的基本概念</h4><h5 id="背景：为什么要使用代理"><a href="#背景：为什么要使用代理" class="headerlink" title="背景：为什么要使用代理"></a>背景：为什么要使用代理</h5><ul><li>一段时间内，检测IP访问频率，访问太频繁会被识别成爬虫被对方屏蔽</li><li>使用代理IP可以让服务器以为不是同一客户端在请求</li><li>防止我们真实的IP地址被泄露，被追究</li></ul><h5 id="使用代理的请求过程"><a href="#使用代理的请求过程" class="headerlink" title="使用代理的请求过程"></a>使用代理的请求过程</h5><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518190455761.png" alt="image-20240518190455761" style="zoom:50%;"></p><h4 id="代理IP的获取"><a href="#代理IP的获取" class="headerlink" title="代理IP的获取"></a>代理IP的获取</h4><p>目前有许多平台会提供代理IP的服务，且一般注册之后都会赠送一些免费使用的额度</p><h4 id="代理IP平台"><a href="#代理IP平台" class="headerlink" title="代理IP平台"></a><strong>代理IP平台</strong></h4><ul><li>天启  <a href="https://www.tianqiip.com/getIp">https://www.tianqiip.com/getIp</a><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518191323650.png" alt="image-20240518191323650" style="zoom: 33%;"></li></ul></li></ul><h4 id="在python代码中如何配置代理"><a href="#在python代码中如何配置代理" class="headerlink" title="在python代码中如何配置代理"></a>在python代码中如何配置代理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ip =<span class="string">&quot;122.239.153.110&quot;</span></span><br><span class="line">port =<span class="number">40020</span></span><br><span class="line">proxies=&#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">f&quot;htpp://<span class="subst">&#123;ip&#125;</span>.<span class="subst">&#123;port&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#通过参数 proxies配置代理</span></span><br><span class="line">response = requests.get(url=url,headers=headers,proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(proxies)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure><h4 id="动态ip池"><a href="#动态ip池" class="headerlink" title="动态ip池"></a>动态ip池</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">天启平台有教程，更具生成的api链接发送get请求可以获取代理Ip列表</span></span><br><span class="line"><span class="string">每次在爬虫时，随机从列表中选择一个代理ip</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpiderCraw</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.proxyGetUrl = <span class="string">&quot;http://api.tianqiip.com/getip?secret=ka9cjsm0egycakir&amp;num=10&amp;type=json&amp;port=1&amp;time=5&amp;mr=1&amp;sign=d50e433630f39d20c428a0d5c6c033e7&quot;</span></span><br><span class="line">        self.ipList = requests.get(self.proxyGetUrl).json()[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getProxyIp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> random.choice(self.ipList)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSendRequest</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#每次发送请求，从ip池中随机选择一个代理ip</span></span><br><span class="line">        proxyIp = self.getProxyIp()</span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(proxyIp[<span class="string">&quot;ip&quot;</span>],proxyIp[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">        requests.get(url=url,proxies=proxies)</span><br><span class="line">url =</span><br><span class="line">ipPool = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(ipPool.json()[<span class="string">&quot;data&quot;</span>])</span><br></pre></td></tr></table></figure><h3 id="Cookie池的搭建"><a href="#Cookie池的搭建" class="headerlink" title="Cookie池的搭建"></a>Cookie池的搭建</h3><h4 id="爬虫中使用cookie的利弊"><a href="#爬虫中使用cookie的利弊" class="headerlink" title="爬虫中使用cookie的利弊"></a>爬虫中使用cookie的利弊</h4><h5 id="带上cookie好处"><a href="#带上cookie好处" class="headerlink" title="带上cookie好处"></a>带上cookie好处</h5><ul><li>能够访问登陆后的页面</li><li>能够实现部分反爬</li></ul><h4 id="带上cookie的坏处"><a href="#带上cookie的坏处" class="headerlink" title="带上cookie的坏处"></a>带上cookie的坏处</h4><ul><li>一套cookie往往对应一个用户的信息，请求太频繁容易被对方识别为爬虫</li><li>上面问题如何解决？使用多个账号，每次请求的cookie不一样即可</li></ul><h4 id="cookie池的搭建"><a href="#cookie池的搭建" class="headerlink" title="cookie池的搭建"></a>cookie池的搭建</h4><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><ul><li>主备多个账号，越多越好</li><li>爬取数据之前对这些账号进行批量登录，并将cookie保存在本地cookie池中<ul><li>需要登陆账号的可以这么做</li><li>不需要登陆账号的，可以启动多个浏览器，手动登陆，然后将cookie值复制存储在本地</li></ul></li><li>爬虫执行之后，每次从cookie池中随机选择一个cookie</li></ul><p><strong>示例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CookieManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.cookieList=[]</span><br><span class="line">        <span class="comment">#实现准备一组账号密码</span></span><br><span class="line">        self.userInfoList=[</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123321&quot;</span>,<span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx1&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123322&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx2&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123323&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx3&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123324&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx4&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123325&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx5&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> userInfo <span class="keyword">in</span> self.userInfoList:</span><br><span class="line">            self.loginGetCookie(userInfo)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.cookieList:</span><br><span class="line">            <span class="built_in">print</span>(item)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loginGetCookie</span>(<span class="params">self,userInfo</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        登陆函数，并从响应中获取cookie，然后保存在cookie池中</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        url=<span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line">        response = requests.post(url,data=userInfo)</span><br><span class="line">        self.cookieList.append(response.cookies)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getCookie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        供外部使用，随机从cookie池中选择一个cookie</span></span><br><span class="line"><span class="string">        外部使用时:直接在requests中以cookies参数进行传递</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> random.choice(self.cookieList)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cookieManager = CookieManager()</span><br><span class="line">    <span class="built_in">print</span>(cookieManager.getCookie())</span><br></pre></td></tr></table></figure><h3 id="Cookie池-IP池"><a href="#Cookie池-IP池" class="headerlink" title="Cookie池+IP池"></a>Cookie池+IP池</h3><p>同一个IP使用不同的Cookie，还是会出现同一个IP频繁请求，如果每个Cookie都绑定一组代理IP，这个时候就很难会被检测出来</p><p>基本思路：用不同ip去登陆不同账号，得到不同cookie，这样每一个代理Ipd都会对应多个cookie，在爬虫启动时，每次从ip_cookei池中选择一个ip，cookie对</p><h2 id="综合项目实战案例"><a href="#综合项目实战案例" class="headerlink" title="综合项目实战案例"></a>综合项目实战案例</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p>某原创音乐网站数据抓取</p><p>需求：抓取某原创音乐平台整站数据</p><p>地址：<a href="https://5sing.kugou.com/">https://5sing.kugou.com/</a></p><p>分页抓取该网站所有的原创音乐数据，一共50页</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518222840513.png" alt="image-20240518222840513" style="zoom: 33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518222855995.png" alt="image-20240518222855995" style="zoom:33%;"></p><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a><strong>抓包分析</strong></h3><p>通过抓包分析，我们发现该网站数据不是Ajax请求，直接抓取请求页面即可获取对应数据</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518223255287.png" alt="image-20240518223255287" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518223819051.png" alt="image-20240518223819051" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518224023061.png" alt="image-20240518224023061"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518230616148.png" alt="image-20240518230616148"></p><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>获取歌曲列表、提取歌曲的歌名、歌曲首页地址<ol><li>发送请求，获取页面的HTML</li><li>解析HTML，提取歌名和歌曲ID、首页地址</li></ol></li><li>获取每首歌的下载地址<ol><li>发送请求获取歌曲的下载地址</li></ol></li><li>下载歌曲，保存在本地<ol><li>下载歌曲，保存本地</li></ol></li></ol><p>数据量分析：一共50页，每页20条数据，要完整的下载一首歌的话，需要通过两次请求，第一次请求页面，获取歌曲id，第二次针对该歌曲地址，将其下载到本地</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><h4 id="爬取所有歌曲的名称和id数据"><a href="#爬取所有歌曲的名称和id数据" class="headerlink" title="爬取所有歌曲的名称和id数据"></a>爬取所有歌曲的名称和id数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://5sing.kugou.com/yc/list&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#参数，经过分析，前三个参数应该是固定的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&quot;t&quot;</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;l&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;p&quot;</span>:page  <span class="comment">#页码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url=url,headers=headers,params=params).content.decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#解析htm，获取歌曲名称、链接地址</span></span><br><span class="line">    html = etree.HTML(response)</span><br><span class="line">    dlList = html.xpath(<span class="string">&#x27;//div[@class=&quot;lists&quot;]/dl&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> dlItem <span class="keyword">in</span> dlList:</span><br><span class="line">        title = dlItem.xpath(<span class="string">&#x27;.//h3/a/text()&#x27;</span>)[<span class="number">0</span>] <span class="comment">#名称</span></span><br><span class="line">        url = <span class="string">&#x27;https://5sing.kugou.com&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(dlItem.xpath(<span class="string">&#x27;.//h3/a/@href&#x27;</span>)[<span class="number">0</span>]) <span class="comment">#首页地址</span></span><br><span class="line">        <span class="built_in">id</span> = dlItem.xpath(<span class="string">&#x27;./dd[@class=&quot;l_action&quot;]/a[@class=&quot;m_date_shou&quot;]/@argid&#x27;</span>)[<span class="number">0</span>]<span class="comment">#id</span></span><br><span class="line">        <span class="built_in">print</span>(title,url,<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><h4 id="获取各个歌曲源文件的下载地址"><a href="#获取各个歌曲源文件的下载地址" class="headerlink" title="获取各个歌曲源文件的下载地址"></a>获取各个歌曲源文件的下载地址</h4><p>&gt;<br>&gt;</p><blockquote><p>抓包分析</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519000844468.png" alt="image-20240519000844468" style="zoom: 33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519001011699.png" alt="image-20240519001011699" style="zoom:33%;"></p><p>两个不同歌曲请求的参数对比：</p><p>我们发现只有songid和signature这两个参数不一样，songid即为我们前面抓取的歌曲id，而难点就在于signature不知从何而来</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519001105427.png" alt="image-20240519001105427"></p></blockquote><p>难点：参数signature不知从何而来，这个可能可能设计到js加密</p><p>如何分析网站生成signature的js代码？</p><p>在所有源代码中搜索signature</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519002901327.png" alt="image-20240519002901327"></p><p> 定位到该位置</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519003003459.png" alt="image-20240519003003459" style="zoom: 80%;"></p><p>我们在控制台执行，发现n的值为</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519003149366.png" alt="image-20240519003149366"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n的结构：</span><br><span class="line">字符串: o = &quot;5uytoxQewcvIc1gn1PlNF0T2jbbOzRl&quot;</span><br><span class="line">与请求参数的子字符串事项首位拼接得到拼接得到</span><br><span class="line"></span><br><span class="line">即 n = o + params +o</span><br><span class="line">我们经过多次实验发现字符串o为定值，不同请求、不同浏览器该值都是一致的</span><br></pre></td></tr></table></figure><p>这个js代码比较复杂，我们无法用python代码等价复现，只能将js代码拷贝至本地，由python调用执行</p><h2 id="其他补充知识"><a href="#其他补充知识" class="headerlink" title="其他补充知识"></a>其他补充知识</h2><h3 id="免费邮箱资源"><a href="#免费邮箱资源" class="headerlink" title="免费邮箱资源"></a>免费邮箱资源</h3><p>针对账户限制，注册账号需要大量邮箱进行注册新的账号</p><p><a href="https://blog.csdn.net/julius_lee/article/details/106802027">需要很多邮箱怎么办？分享几个不错的办法可无限安全生成多个邮箱</a></p><h3 id="免费代理IP资源"><a href="#免费代理IP资源" class="headerlink" title="免费代理IP资源"></a>免费代理IP资源</h3><p>设置自己本地的梯子IP地址：</p><p>打开clash软件，查看代理端口为7890，在代码首部添加如下代码，即可使用本地代理转发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置代理</span></span><br><span class="line">os.environ[<span class="string">&quot;http_proxy&quot;</span>] = <span class="string">&quot;http://localhost:7890&quot;</span></span><br><span class="line">os.environ[<span class="string">&quot;https_proxy&quot;</span>] = <span class="string">&quot;http://localhost:7890&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240604093135783.png" alt="image-20240604093135783"></p><p><a href="https://www.bytezonex.com/archives/8ZwHxBGP.html">参考资料一</a></p><h3 id="网站指纹反爬"><a href="#网站指纹反爬" class="headerlink" title="网站指纹反爬"></a>网站指纹反爬</h3><h4 id="背景-4"><a href="#背景-4" class="headerlink" title="背景"></a>背景</h4><p>我们使用<code>requests</code>库访问网站<a href="https://www.digikey.cn时，无论怎么设置头部信息，均是返回403页面，但是用浏览器或者PostMan访问时，均可得到正常的页面结果，这种情况大概率就是遇到了**原生模拟浏览器">https://www.digikey.cn时，无论怎么设置头部信息，均是返回403页面，但是用浏览器或者PostMan访问时，均可得到正常的页面结果，这种情况大概率就是遇到了**原生模拟浏览器</a> TLS/JA3 指纹的验证**，览器和<a href="https://so.csdn.net/so/search?q=postman&amp;spm=1001.2101.3001.7020">postman</a>都有自带指纹验证，而唯独requests库没有。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用第三方库<code>curl_cffi</code>访问，即可解决这个问题，其可以模仿对浏览器指纹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> curl_cffi <span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.digikey.cn&quot;</span>, impersonate=<span class="string">&quot;chrome110&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.content.decode(<span class="string">&quot;utf8&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://blog.csdn.net/lipachong/article/details/131213288">某网站指纹反爬处理</a></p><p><a href="https://www.bilibili.com/video/BV1nz421X7r8/?spm_id_from=333.337.search-card.all.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">JS逆向_浏览器JA3指纹信息</a></p><p><a href="https://pypi.org/project/curl-cffi/#description">curl-cffif官方文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬虫进阶&quot;&gt;&lt;a href=&quot;#爬虫进阶&quot; class=&quot;headerlink&quot; title=&quot;爬虫进阶&quot;&gt;&lt;/a&gt;爬虫进阶&lt;/h1&gt;&lt;p&gt;爬虫一定要找最新的教程，因为网站更新速度很快，老版教程很可能会过时，一些案例基本无法复现&lt;/p&gt;
&lt;h2 id=&quot;爬虫概述&quot;</summary>
      
    
    
    
    <category term="爬虫" scheme="https://bangwu2001.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="https://bangwu2001.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Ollama的使用</title>
    <link href="https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/"/>
    <id>https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/</id>
    <published>2024-05-07T14:55:42.000Z</published>
    <updated>2024-05-07T14:55:19.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ollama"><a href="#Ollama" class="headerlink" title="Ollama"></a>Ollama</h1><h2 id="Ollama简介"><a href="#Ollama简介" class="headerlink" title="Ollama简介"></a>Ollama简介</h2><p>随着各个公司发布开源大模型，大模型管理工具越来越重要。Ollama就是一款优秀的开源大模型管理工具。利用Ollma开发者们可以自由的创建，训练模型，并且搭建本地化chatbot。同时Ollama还支持OpenAI同样形式的REST API以提升开发者效率。本质上讲Ollama是一个集成的本地大模型运行框架，它的出现极大地简化了AI模型的开发和使用过程。它支持Linux、Mac、Windows等系统，其内部不仅提供了丰富的AI模型库，而且提供了强大的API接口，可以方便将AI功能整合到用户自己具体的应用中。</p><p>Ollama的特点：</p><ul><li>一键式安装，无需繁琐的环境配置，简单易用</li><li>性能强大，可以充分利用本地的计算资源，可以仅仅利用CPU或者充分调用本地GPU来运行模型</li><li>功能丰富，提供了丰富的模型库，支持多种大语言模型并且支持多模态模型</li><li>提供了丰富的API接口，便于开发者结合自身需求灵活进行功能扩展和开发</li></ul><p>相关资料：<a href="https://ollama.com/">Ollama官网</a>  <a href="https://github.com/ollama/ollama">GitHub</a> <a href="https://ollama.com/library">支持的模型列表</a></p><h2 id="Ollama在Windows系统上的使用"><a href="#Ollama在Windows系统上的使用" class="headerlink" title="Ollama在Windows系统上的使用"></a>Ollama在Windows系统上的使用</h2><h3 id="Ollama安装"><a href="#Ollama安装" class="headerlink" title="Ollama安装"></a>Ollama安装</h3><p>直接在<a href="https://ollama.com/download/windows">官网</a>下载Windows平台的安装包</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507145152909.png" alt="image-20240507145152909"></p><p>安装完成之后就可以在菜单栏看到Ollama图标，此时就可以在Windows上使用Ollama了</p><h3 id="Ollama使用"><a href="#Ollama使用" class="headerlink" title="Ollama使用"></a>Ollama使用</h3><p>安装成功之后，我们在电脑任何位置打开命令行窗口，可以直接启动Ollama</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507150145854.png" alt="image-20240507150145854"></p><p>我们执行以下命令，可以自动pull对应的模型，并对模型进行加载，我们可以通过<a href="https://ollama.com/library">官网</a>查看支持模型列表和具体的模型细节</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run [modelname]</span><br></pre></td></tr></table></figure><p>首次执行上述命令会下载模型到本地，如果本地存在该模型，则不会被重复下载</p><p>我们以阿里巴巴通义千问4B模型使用为例展示如何本地使用大语言模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run qwen:4b</span><br></pre></td></tr></table></figure><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152309824.png" alt="image-20240507152309824"></p><p>Ollama使用方式有两种，命令行的放方式和API的方式</p><h4 id="命令行方式使用"><a href="#命令行方式使用" class="headerlink" title="命令行方式使用"></a>命令行方式使用</h4><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152416981.png" alt="image-20240507152416981"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run [modelname] *prompt* #可以不进入命令行方式调用</span><br></pre></td></tr></table></figure><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152709759.png" alt="image-20240507152709759"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run [modelname] *prompt* --verbose  #添加--verbose可以查看模型推理的具体开销细节</span><br></pre></td></tr></table></figure><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507153558820.png" alt="image-20240507153558820"></p><p>退出命令行</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152452012.png" alt="image-20240507152452012"></p><h4 id="API方式使用"><a href="#API方式使用" class="headerlink" title="API方式使用"></a>API方式使用</h4><p><a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl用法指南</a>  <a href="https://github.com/ollama/ollama/blob/main/docs/api.md">Ollama API官方文档</a></p><p>Ollama API默认的地址和端口是<code>http:localhost:11434</code>，可以在安装启动Ollama的系统中直接调用访问</p><p>下面我们利用<code>postman</code>构造HTTP请求，访问Ollama服务:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507155607340.png" alt="image-20240507155607340"></p><p>响应</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507155704762.png" alt="image-20240507155704762"></p><p>如何修改默认端口号？</p><p>要更改地址和端口，可以添加以下环境变量：</p><ul><li>变量名：<code>OLLAMA_HOST</code></li><li>变量值（端口）：<code>:8000</code></li></ul><p>这样Ollama服务访问地址就可以变为<code>http://localhost:8000</code></p><h3 id="SpringAI整合Ollama"><a href="#SpringAI整合Ollama" class="headerlink" title="SpringAI整合Ollama"></a>SpringAI整合Ollama</h3><p><a href="https://docs.spring.io/spring-ai/reference/api/clients/ollama-chat.html">官方文档</a></p><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-ollama-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本地ollama服务地址</span></span><br><span class="line"><span class="attr">spring.ai.ollama.base-url</span>=<span class="string">http://localhost:11434</span></span><br><span class="line"><span class="comment">#启动allama客户端</span></span><br><span class="line"><span class="attr">spring.ai.ollama.chat.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#指定使用的模型</span></span><br><span class="line"><span class="attr">spring.ai.ollama.chat.options.model</span>=<span class="string">qwen:4b</span></span><br></pre></td></tr></table></figure><h3 id="编写简单controller代码"><a href="#编写简单controller代码" class="headerlink" title="编写简单controller代码"></a>编写简单controller代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OllamaChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatController</span><span class="params">(OllamaChatClient chatClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">generate</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;generation&quot;</span>, chatClient.call(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generateStream&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;ChatResponse&gt; <span class="title function_">generateStream</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="type">Prompt</span> <span class="variable">prompt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(<span class="keyword">new</span> <span class="title class_">UserMessage</span>(message));</span><br><span class="line">        <span class="keyword">return</span> chatClient.stream(prompt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>构造请求<code>http://localhost:8080/ai/generate?message=武汉景区</code></p><p>响应结果:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507211513747.png" alt="image-20240507211513747"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.youtube.com/watch?v=POf4qbohP9k">Ollama 使用指南 </a></p><p><a href="https://ollama.com/">Ollama官网</a></p><p><a href="https://github.com/ollama/ollama">Ollama GitHub</a></p><p><a href="https://www.sysgeek.cn/ollama-on-windows/">Ollama on Windows：本地运行大型语言模型（LLM）的新利器</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ollama&quot;&gt;&lt;a href=&quot;#Ollama&quot; class=&quot;headerlink&quot; title=&quot;Ollama&quot;&gt;&lt;/a&gt;Ollama&lt;/h1&gt;&lt;h2 id=&quot;Ollama简介&quot;&gt;&lt;a href=&quot;#Ollama简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/categories/AI/"/>
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Baidu Comate</title>
    <link href="https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/"/>
    <id>https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/</id>
    <published>2024-05-07T14:55:42.000Z</published>
    <updated>2024-05-07T14:55:39.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Baidu-Comate"><a href="#Baidu-Comate" class="headerlink" title="Baidu Comate"></a>Baidu Comate</h1><p><a href="https://comate.baidu.com/zh/download">Baidu Comate</a>基于文心大模型，结合百度积累多年的编程现场大数据和外部优秀开源数据，为你生成更符合实际研发场景的优质代码，提升编码效率</p><p>可以在VS Code或者IDEA中以插件的形式集成使用</p><h2 id="Idea中集成"><a href="#Idea中集成" class="headerlink" title="Idea中集成"></a>Idea中集成</h2><p>点击【Plugins】，进入 Marketplace 选项卡，搜索框输入【Comate】，找到 Baidu Comate 后点击安装</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507204012558.png" alt="image-20240507204012558" style="zoom:67%;"></p><p>重启 IntelliJ IDE，重启成功后登录百度账号，即可使用</p><p>点击代码旁边按钮，可以使用对应的功能，比如代码检查，代码调优等</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507204447566.png" alt="image-20240507204447566"></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507204417398.png" alt="image-20240507204417398" style="zoom:67%;"></p><h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>比如我们需要编写一个功能的前端代码，其会自动给我们生成html代码、ccs代码和javascript代码</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507221638012.png" alt="image-20240507221638012"></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507221724449.png" alt="image-20240507221724449"></p><p>我们直接运行其给出的代码，展示的页面如下图所示：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507222017558.png" alt="image-20240507222017558" style="zoom:50%;"></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507222133854.png" alt="image-20240507222133854" style="zoom:50%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Baidu-Comate&quot;&gt;&lt;a href=&quot;#Baidu-Comate&quot; class=&quot;headerlink&quot; title=&quot;Baidu Comate&quot;&gt;&lt;/a&gt;Baidu Comate&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://comate.baidu.</summary>
      
    
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/categories/AI/"/>
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>SPring AI</title>
    <link href="https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/"/>
    <id>https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/</id>
    <published>2024-05-07T14:55:42.000Z</published>
    <updated>2024-05-07T15:07:30.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-AI"><a href="#Spring-AI" class="headerlink" title="Spring AI"></a>Spring AI</h1><h2 id="Spring-AI简介"><a href="#Spring-AI简介" class="headerlink" title="Spring AI简介"></a>Spring AI简介</h2><p><a href="https://spring.io/projects/spring-ai">Spring AI官方文档</a></p><p>Spring AI 是一个面向人工智能工程的应用框架，它类似于一个客户端，可以实现向不同厂商对应的AI模型服务发送请求获取响应</p><p>SpringAI目前能够支持的AI模型</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/model.png" alt="img" style="zoom:80%;"></p><h2 id="Spring-AI实践"><a href="#Spring-AI实践" class="headerlink" title="Spring AI实践"></a>Spring AI实践</h2><p><a href="https://api.xty.app/">Open ai Api Key第三方平台</a></p><p>在该平台上注册可以免费获取一定的使用额度</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507203148267.png" alt="image-20240507203148267"></p><p>参考<a href="https://docs.spring.io/spring-ai/reference/api/clients/openai-chat.html#_sample_controller_auto_configuration">SpringAI openAI官方文档</a>，快速搭建一个应用</p><h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependency&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-openai-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="进行相关配置"><a href="#进行相关配置" class="headerlink" title="进行相关配置"></a>进行相关配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务地址</span></span><br><span class="line"><span class="attr">spring.ai.openai.base-url</span>=<span class="string">https://api.xty.app</span></span><br><span class="line"><span class="comment">#openai key</span></span><br><span class="line"><span class="attr">spring.ai.openai.api-key</span>=<span class="string">sk-yJ86bNiRwQJVyczO122aF307B7554905A0F53eF6B3B27132</span></span><br><span class="line"><span class="comment">#使用模型名称</span></span><br><span class="line"><span class="attr">spring.ai.openai.chat.options.model</span>=<span class="string">gpt-3.5-turbo</span></span><br><span class="line"><span class="comment">#随机性</span></span><br><span class="line"><span class="attr">spring.ai.openai.chat.options.temperature</span>=<span class="string">0.7</span></span><br></pre></td></tr></table></figure><h3 id="编写一个简单controller"><a href="#编写一个简单controller" class="headerlink" title="编写一个简单controller"></a>编写一个简单controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OpenAiChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatController</span><span class="params">(OpenAiChatClient chatClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//整体响应</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">generate</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;generation&quot;</span>, chatClient.call(message));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//流式响应</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generateStream&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;ChatResponse&gt; <span class="title function_">generateStream</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="type">Prompt</span> <span class="variable">prompt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(<span class="keyword">new</span> <span class="title class_">UserMessage</span>(message));</span><br><span class="line">        <span class="keyword">return</span> chatClient.stream(prompt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>构造请求:<code>http://localhost:8080/ai/generate?message=%E5%AD%A6%E4%B9%A0Java%E8%B7%AF%E7%BA%BF</code></p><p>得到的响应:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507210454691.png" alt="image-20240507210454691"></p><h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><h3 id="调用openAI相关模型生成图片"><a href="#调用openAI相关模型生成图片" class="headerlink" title="调用openAI相关模型生成图片"></a>调用openAI相关模型生成图片</h3><p><a href="https://docs.spring.io/spring-ai/reference/api/clients/image/openai-image.html">官方文档参考</a></p><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启生图模式</span></span><br><span class="line"><span class="attr">spring.ai.openai.image.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#指定生图模型,默认为dall-e-3</span></span><br><span class="line"><span class="attr">spring.ai.openai.image.options.model</span>=<span class="string">dall-e-3</span></span><br></pre></td></tr></table></figure><h4 id="controller代码"><a href="#controller代码" class="headerlink" title="controller代码"></a>controller代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入openAiImageClien</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">OpenAiImageClient openAiImageClient;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/ai/image&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">generateImage</span><span class="params">(String prompt)</span>&#123;</span><br><span class="line">    <span class="type">ImageResponse</span> <span class="variable">response</span> <span class="operator">=</span> openAiImageClient.call(<span class="keyword">new</span> <span class="title class_">ImagePrompt</span>(prompt));</span><br><span class="line">    <span class="comment">//可以两种形式返回生成的图片</span></span><br><span class="line">    <span class="comment">//图片的url:response.getResult().getOutput().getUrl()</span></span><br><span class="line">    <span class="comment">//图片的base64编码:response.getResult().getOutput().getB64Json()</span></span><br><span class="line">    <span class="keyword">return</span> response.getResult().getOutput().getUrl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>构造请求:<code>http://localhost:8080/ai/image?prompt=一个女孩坐在苹果树下</code></p><p>响应结果:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507214047146.png" alt="image-20240507214047146"></p><p>在浏览器直接输入上述url即可显示下图</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507214027753.png" alt="image-20240507214027753" style="zoom:50%;"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><a href="https://zhuanlan.zhihu.com/p/671853034">AnythingLLM：基于RAG方案构专属私有知识库（开源｜高效｜可定制）</a></p><p>我们可以使用AnythingLLM 配合 Ollama 构建自己的知识库，可以通过给本地模型喂入一些文本文档，使其具有一些特殊领域的知识</p><p>比如：我们选择本地Ollama模型，直接提问得到的结果如下</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220505442.png" alt="image-20240507220505442" style="zoom:80%;"></p><p>我们给其上传一个文本txt文件，文本内容如下:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">吴棒，男，毕业于华中科技大学，人张的贼帅</span><br></pre></td></tr></table></figure><p>然后上传该文本文件，喂入模型</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220714606.png" alt="image-20240507220714606" style="zoom:80%;"></p><p>再次提问：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220803128.png" alt="image-20240507220803128"></p><p>也可以直接给一个网页链接，其可以自动爬取网页内容训练模型</p><p>比如我们给其输入网页:<code>https://eic.hust.edu.cn/info/1195/7541.htm</code></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507221034200.png" alt="image-20240507221034200"></p><p>喂入数据模型之前提问结果：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220938907.png" alt="image-20240507220938907"></p><p>喂入数据之后模型提问结果：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507221151449.png" alt="image-20240507221151449"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-AI&quot;&gt;&lt;a href=&quot;#Spring-AI&quot; class=&quot;headerlink&quot; title=&quot;Spring AI&quot;&gt;&lt;/a&gt;Spring AI&lt;/h1&gt;&lt;h2 id=&quot;Spring-AI简介&quot;&gt;&lt;a href=&quot;#Spring-AI简介&quot; c</summary>
      
    
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/categories/AI/"/>
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/tags/AI/"/>
    
  </entry>
  
</feed>
