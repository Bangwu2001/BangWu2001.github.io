<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bang&#39;s Blog</title>
  
  
  <link href="https://bangwu2001.github.io/atom.xml" rel="self"/>
  
  <link href="https://bangwu2001.github.io/"/>
  <updated>2023-12-13T14:57:09.254Z</updated>
  <id>https://bangwu2001.github.io/</id>
  
  <author>
    <name>Bang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>六、会员基础功能实现</title>
    <link href="https://bangwu2001.github.io/2023/12/13/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/06%2012306%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%91%98%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://bangwu2001.github.io/2023/12/13/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/06%2012306%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%91%98%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-12-13T14:58:00.000Z</published>
    <updated>2023-12-13T14:57:09.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12306会员基础功能实现"><a href="#12306会员基础功能实现" class="headerlink" title="12306会员基础功能实现"></a>12306会员基础功能实现</h1><p>主要目的：完成前后端，单表增删改查功能的开发</p><h2 id="乘车人-数据库表的设计"><a href="#乘车人-数据库表的设计" class="headerlink" title="乘车人 数据库表的设计"></a>乘车人 数据库表的设计</h2><h3 id="乘客表的设计"><a href="#乘客表的设计" class="headerlink" title="乘客表的设计"></a>乘客表的设计</h3><p><code>member</code>表代表系统登录用户的信息，对于乘车系统，同一个用户不仅可以为自己，也可以为其他人购买车票</p><p>所以设计一张新表<code>passenger</code>表示对应乘客信息，与车票对应</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `passenger` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `member_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;会员id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `id_card` <span class="type">varchar</span>(<span class="number">18</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;身份证&#x27;</span>,</span><br><span class="line">  `type` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;旅客类型|枚举[PassengerTypeEnum]&#x27;</span>,</span><br><span class="line">  `create_time` datetime(<span class="number">3</span>) comment <span class="string">&#x27;新增时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime(<span class="number">3</span>) comment <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (`id`),</span><br><span class="line">  index `member_id_index` (`member_id`)</span><br><span class="line">) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;乘车人&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="利用Mybatis生成器生成乘车人表对应持久层代码"><a href="#利用Mybatis生成器生成乘车人表对应持久层代码" class="headerlink" title="利用Mybatis生成器生成乘车人表对应持久层代码"></a>利用Mybatis生成器生成乘车人表对应持久层代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;Mysql&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--覆盖生成XML文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的实体类添加toString()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不生成注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据源，需要根据自己的项目修改 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/train_member?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;train_member&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;wu123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- domain类的位置 targetProject是相对pom.xml的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.domain&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper xml的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/resources&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper类的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;table tableName=&quot;member&quot; domainObjectName=&quot;Member&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;passenger&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Passenger&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;table tableName=&quot;ticket&quot; domainObjectName=&quot;Ticket&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="乘客类型枚举类的设计"><a href="#乘客类型枚举类的设计" class="headerlink" title="乘客类型枚举类的设计"></a>乘客类型枚举类的设计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PassengerTypeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    ADULT(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;成人&quot;</span>),</span><br><span class="line">    CHILD(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;儿童&quot;</span>),</span><br><span class="line">    STUDENT(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;学生&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    PassengerTypeEnum(String code, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;HashMap&lt;String,String&gt;&gt; <span class="title function_">getEnumList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;HashMap&lt;String, String&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (PassengerTypeEnum anEnum : EnumSet.allOf(PassengerTypeEnum.class)) &#123;</span><br><span class="line">            HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>,anEnum.code);</span><br><span class="line">            map.put(<span class="string">&quot;desc&quot;</span>,anEnum.desc);</span><br><span class="line">            list.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增乘车人接口设计"><a href="#新增乘车人接口设计" class="headerlink" title="新增乘车人接口设计"></a>新增乘车人接口设计</h2><h3 id="设计接口请求类"><a href="#设计接口请求类" class="headerlink" title="设计接口请求类"></a>设计接口请求类</h3><p>请求实体类与数据库对应的Po实体类一致，并利用Validation进行参数校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增乘车人接口对应请求实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerSaveReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//@NotBlank不能用来修饰long类型数据</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;【会员ID】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【乘客姓名】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【乘客身份证号】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【乘客类型】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务层代码"><a href="#服务层代码" class="headerlink" title="服务层代码"></a>服务层代码</h3><p>新增<code>IPassengerService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPassengerService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增<code>PassengerServiceImpl</code>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IPassengerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PassengerMapper passengerMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span> &#123;</span><br><span class="line">        <span class="comment">//1.将请求类转换为po对象</span></span><br><span class="line">        <span class="type">Passenger</span> <span class="variable">savePassenger</span> <span class="operator">=</span> BeanUtil.copyProperties(passenger, Passenger.class);</span><br><span class="line">        <span class="comment">//2.设置相关字段</span></span><br><span class="line">        <span class="comment">//乘车人ID，以及记录创建时间和更新时间,ID利用雪花算法生成</span></span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line">        savePassenger.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">        savePassenger.setCreateTime(now);</span><br><span class="line">        savePassenger.setUpdateTime(now);</span><br><span class="line">        <span class="comment">//3.存入数据库</span></span><br><span class="line">        passengerMapper.insert(savePassenger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层代码"><a href="#控制层代码" class="headerlink" title="控制层代码"></a>控制层代码</h3><p>新增<code>PassengerController</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/passenger&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IPassengerService passengerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> PassengerSaveReq req)</span>&#123;</span><br><span class="line">        passengerService.save(req);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpClient测试"><a href="#HttpClient测试" class="headerlink" title="HttpClient测试"></a>HttpClient测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">###新增乘车人</span><br><span class="line">POST http://localhost:8001/member/passenger/save</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;memberId&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;张飞&quot;,</span><br><span class="line">  &quot;idCard&quot;: &quot;33456789&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用HttpClient保存登录用户信息"><a href="#使用HttpClient保存登录用户信息" class="headerlink" title="使用HttpClient保存登录用户信息"></a>使用HttpClient保存登录用户信息</h2><p>在进行网关<code>gateway</code>请求时，由于有<code>JWT</code>登录校验过滤器，所以其他接口测试时，若请求头不带上<code>token</code>字段，则会被拦截</p><p>可以在HttpClient中，登录请求之后，为整个文件中所有其他请求的请求头加上<code>token</code>字段</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">###登录</span><br><span class="line">POST http://localhost:8000/member/member/login</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;mobile&quot;:&quot;12345678908&quot;,</span><br><span class="line">  &quot;code&quot;:&quot;8888&quot;</span><br><span class="line">&#125;</span><br><span class="line">//以下语句将token数据进行全局缓存</span><br><span class="line">&gt; &#123;%</span><br><span class="line">  client.log(JSON.stringify(response.body));</span><br><span class="line">  client.log(JSON.stringify(response.body.content.token));</span><br><span class="line">  client.global.set(&quot;token&quot;,response.body.content.token)</span><br><span class="line">%&#125;</span><br></pre></td></tr></table></figure><p>在其他http请求中可以直接通过<code>&#123;&#123;token&#125;&#125;</code>引用缓存中的token`值</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">###其他测试</span><br><span class="line">GET http://localhost:8000/member/member/count</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br><span class="line"></span><br><span class="line">###新增乘车人</span><br><span class="line">POST http://localhost:8000/member/passenger/save</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;memberId&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;张飞&quot;,</span><br><span class="line">  &quot;idCard&quot;: &quot;33456789&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用线程本地变量存储会员信息"><a href="#使用线程本地变量存储会员信息" class="headerlink" title="使用线程本地变量存储会员信息"></a>使用线程本地变量存储会员信息</h2><p><strong>背景:</strong>新增乘车人记录时，实体类里面有个属性是当前登录的会员ID，如何将当前登录用户的信息保存在本地？</p><p><strong>方案</strong>：在接口入口处获取会员信息，并放在线程本地变量，则在controller、service中都可以直接从线程本地变量获取会员信息</p><p><strong>考点</strong>：此处可能面试会涉及到<code>ThreadLocal</code>线程本地变量的概念和理解</p><h3 id="ThreadLocal存储登录会员信息"><a href="#ThreadLocal存储登录会员信息" class="headerlink" title="ThreadLocal存储登录会员信息"></a>ThreadLocal存储登录会员信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginMemberContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LoginMemberContext.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;MemberLoginResp&gt; member = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MemberLoginResp <span class="title function_">getMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> member.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setMember</span><span class="params">(MemberLoginResp member)</span> &#123;</span><br><span class="line">        LoginMemberContext.member.set(member);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//memberId频繁使用，单独抽象成一个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> member.get().getId();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;获取登录会员信息异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC过滤器将会员信息存入线程本地变量"><a href="#SpringMVC过滤器将会员信息存入线程本地变量" class="headerlink" title="SpringMVC过滤器将会员信息存入线程本地变量"></a>SpringMVC过滤器将会员信息存入线程本地变量</h3><p>请求通过网关过滤器之后，经过网关路由，进入其他微服务时，其他微服务内部应该将JWT解析得到payloads，获取当前登录会员信息，并存储到对应的线程本地变量中，以便后续代码逻辑使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器：Spring框架特有的，常用于登录校验，权限校验，请求日志打印</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(MemberInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;MemberInterceptor开始&quot;</span>);</span><br><span class="line">        <span class="comment">//获取header的token参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(token)) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;获取会员登录token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">loginMember</span> <span class="operator">=</span> JwtUtil.getJSONObject(token);</span><br><span class="line">            LOG.info(<span class="string">&quot;当前登录会员：&#123;&#125;&quot;</span>, loginMember);</span><br><span class="line">            <span class="type">MemberLoginResp</span> <span class="variable">member</span> <span class="operator">=</span> JSONUtil.toBean(loginMember, MemberLoginResp.class);</span><br><span class="line">            <span class="comment">//会员信息存储在线程本地变量</span></span><br><span class="line">            LoginMemberContext.setMember(member);</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">&quot;MemberInterceptor结束&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC注册对应过滤器"><a href="#SpringMVC注册对应过滤器" class="headerlink" title="SpringMVC注册对应过滤器"></a>SpringMVC注册对应过滤器</h3><p>在<code>member</code>模块下编写<code>SpringMVC</code>的配置类，配置登录拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Resource</span></span><br><span class="line">   MemberInterceptor memberInterceptor;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 路径不要包含context-path,添加白名单</span></span><br><span class="line">       registry.addInterceptor(memberInterceptor)</span><br><span class="line">               .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">               .excludePathPatterns(</span><br><span class="line">                       <span class="string">&quot;/hello&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/member/send-code&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/member/login&quot;</span></span><br><span class="line">               );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改新增乘客服务层方法"><a href="#修改新增乘客服务层方法" class="headerlink" title="修改新增乘客服务层方法"></a>修改新增乘客服务层方法</h3><p><code>memeberID</code>此时无需从前端传入，直接从线程本地变量读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span> &#123;</span><br><span class="line">    <span class="comment">//1.将请求类转换为po对象</span></span><br><span class="line">    <span class="type">Passenger</span> <span class="variable">savePassenger</span> <span class="operator">=</span> BeanUtil.copyProperties(passenger, Passenger.class);</span><br><span class="line">    <span class="comment">//2.会员ID通过线程本地变量获取</span></span><br><span class="line">    savePassenger.setMemberId(LoginMemberContext.getId());</span><br><span class="line">    <span class="comment">//3.设置相关字段</span></span><br><span class="line">    <span class="comment">//乘车人ID，以及记录创建时间和更新时间,ID利用雪花算法生成</span></span><br><span class="line">    <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line">    savePassenger.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">    savePassenger.setCreateTime(now);</span><br><span class="line">    savePassenger.setUpdateTime(now);</span><br><span class="line">    <span class="comment">//4.存入数据库</span></span><br><span class="line">    passengerMapper.insert(savePassenger);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘车人列表查询后端接口"><a href="#乘车人列表查询后端接口" class="headerlink" title="乘车人列表查询后端接口"></a>乘车人列表查询后端接口</h2><h3 id="新增查询请求参数对应实体类"><a href="#新增查询请求参数对应实体类" class="headerlink" title="新增查询请求参数对应实体类"></a>新增查询请求参数对应实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定会员对应的乘车人列表请求实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增响应结果对应实体类"><a href="#新增响应结果对应实体类" class="headerlink" title="新增响应结果对应实体类"></a>新增响应结果对应实体类</h3><p>对于规范而言，domain中的po对象一般最好只在持久层使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryResp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询乘车人列表服务层开发"><a href="#查询乘车人列表服务层开发" class="headerlink" title="查询乘车人列表服务层开发"></a>查询乘车人列表服务层开发</h3><p><code>IPassengerService</code>中新增抽象方法<code>queryList</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span>;</span><br></pre></td></tr></table></figure><p><code>PassengerServiceImpl</code>中新增抽象方法重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//1.条件查询</span></span><br><span class="line">    <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">    PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">        criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">    <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充说明：</strong></p><p>这个位置之所以写的比较复杂，是为了让服务层代码能够更加通用，对于用户界面而言，是查询当前登录用户对应的所有乘车人列表；但是，对于控台管理系统管理员而言，其需要查询所有的乘车人列表</p><h3 id="控制层开发"><a href="#控制层开发" class="headerlink" title="控制层开发"></a>控制层开发</h3><p>前端无需传入任何参数，会员ID通过线程本地变量获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;List&lt;PassengerQueryResp&gt;&gt; <span class="title function_">queryList</span><span class="params">(<span class="meta">@Valid</span> PassengerQueryReq req)</span>&#123;</span><br><span class="line">        req.setMemberId(LoginMemberContext.getId());</span><br><span class="line">        List&lt;PassengerQueryResp&gt; passengerQueryRespList = passengerService.queryList(req);</span><br><span class="line">        CommonResp&lt;List&lt;PassengerQueryResp&gt;&gt; commonResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commonResp.setContent(passengerQueryRespList);</span><br><span class="line">        <span class="keyword">return</span> commonResp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="http测试"><a href="#http测试" class="headerlink" title="http测试"></a>http测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###乘车人列表查询</span><br><span class="line">GET http://localhost:8000/member/passenger/query-list</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis分页插件PageHelper的使用"><a href="#Mybatis分页插件PageHelper的使用" class="headerlink" title="Mybatis分页插件PageHelper的使用"></a>Mybatis分页插件PageHelper的使用</h2><h3 id="引入PageHelper依赖"><a href="#引入PageHelper依赖" class="headerlink" title="引入PageHelper依赖"></a>引入PageHelper依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PageHelper的用法"><a href="#PageHelper的用法" class="headerlink" title="PageHelper的用法"></a>PageHelper的用法</h3><p>在SQL查询语句之前的上一行加上如下语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PageHelper分页</span></span><br><span class="line">PageHelper.startPage(页码,分页大小);</span><br></pre></td></tr></table></figure><h3 id="PassengerService代码变化"><a href="#PassengerService代码变化" class="headerlink" title="PassengerService代码变化"></a>PassengerService代码变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//1.条件查询</span></span><br><span class="line">    <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">    PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">        criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// PageHelper分页</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">    <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集成PageHelper实现后端分页"><a href="#集成PageHelper实现后端分页" class="headerlink" title="集成PageHelper实现后端分页"></a>集成PageHelper实现后端分页</h2><h3 id="分页查询请求实体类的创建"><a href="#分页查询请求实体类的创建" class="headerlink" title="分页查询请求实体类的创建"></a>分页查询请求实体类的创建</h3><p>整个项目中，可能后续会有很多地方会用到分页查询，为了方便扩展，我们将分页参数单独抽象成一个实体类，让其他有分页查询需求的请求对应实体类继承自分页实体类，实现其他查询的分页功能</p><p>在<code>common</code>模块下的<code>com.bang.train.common.req</code>下新建<code>PageReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageReq</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;【页码】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;【每页条数】不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 100, message = &quot;【每页条数】不能超过100&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乘客请求实体类继承自分页实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定会员对应的乘车人列表请求实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryReq</span> <span class="keyword">extends</span> <span class="title class_">PageReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改PassengerServiceImpl"><a href="#修改PassengerServiceImpl" class="headerlink" title="修改PassengerServiceImpl"></a>修改PassengerServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//1.条件查询</span></span><br><span class="line">    <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">    PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">        criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// PageHelper分页</span></span><br><span class="line">    PageHelper.startPage(req.getPage(),req.getSize());</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">    <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写分页查询结果实体类"><a href="#编写分页查询结果实体类" class="headerlink" title="编写分页查询结果实体类"></a>编写分页查询结果实体类</h3><p>实体类应该包含总条数以及当前页数据列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResp</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页的列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PassengerServiceImpl修改"><a href="#PassengerServiceImpl修改" class="headerlink" title="PassengerServiceImpl修改"></a>PassengerServiceImpl修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResp&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">        <span class="comment">//1.条件查询</span></span><br><span class="line">        <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">        PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">            criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.PageHelper分页</span></span><br><span class="line">        PageHelper.startPage(req.getPage(),req.getSize());</span><br><span class="line">        <span class="comment">//3.查询</span></span><br><span class="line">        List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">        <span class="comment">//4.获取总页数和总条数</span></span><br><span class="line">        PageInfo&lt;Passenger&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(passengerList);</span><br><span class="line">        LOG.info(<span class="string">&quot;总行数:&#123;&#125;&quot;</span>,pageInfo.getTotal());</span><br><span class="line">        LOG.info(<span class="string">&quot;总页数:&#123;&#125;&quot;</span>,pageInfo.getPages());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">        List&lt;PassengerQueryResp&gt; passengerQueryRespList = BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">        <span class="comment">//4.封装成分页查询结果</span></span><br><span class="line">        PageResp&lt;PassengerQueryResp&gt; pageResp = <span class="keyword">new</span> <span class="title class_">PageResp</span>&lt;&gt;();</span><br><span class="line">        pageResp.setTotal(pageInfo.getTotal());</span><br><span class="line">        pageResp.setList(passengerQueryRespList);</span><br><span class="line">        <span class="keyword">return</span> pageResp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="PassengerController修改"><a href="#PassengerController修改" class="headerlink" title="PassengerController修改"></a>PassengerController修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query-list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;PageResp&lt;PassengerQueryResp&gt;&gt; <span class="title function_">queryList</span><span class="params">(<span class="meta">@Valid</span> PassengerQueryReq req)</span>&#123;</span><br><span class="line">    req.setMemberId(LoginMemberContext.getId());</span><br><span class="line">    PageResp&lt;PassengerQueryResp&gt; pageResp = passengerService.queryList(req);</span><br><span class="line">    CommonResp&lt;PageResp&lt;PassengerQueryResp&gt;&gt; commonResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commonResp.setContent(pageResp);</span><br><span class="line">    <span class="keyword">return</span> commonResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http测试-1"><a href="#http测试-1" class="headerlink" title="http测试"></a>http测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###乘车人列表查询</span><br><span class="line">GET http://localhost:8000/member/passenger/query-list?page=1&amp;size=50</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="解决Long精度丢失的问题"><a href="#解决Long精度丢失的问题" class="headerlink" title="解决Long精度丢失的问题"></a>解决Long精度丢失的问题</h2><p>不同的语言，虽然都有int long等类型，但他们的精度不太一样，在数据传递时需要特别注意精度丢失。</p><p>在本项目中乘车查询数据返回给前端时，乘客id和membertId字段的数据精度会丢失</p><p>解决方法：将long传成string</p><p>在相关的返回结果实体类的对应字段上加上如下注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize(using= ToStringSerializer.class)</span></span><br></pre></td></tr></table></figure><p><strong>乘客数据查询结果返回实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryResp</span> &#123;</span><br><span class="line">    <span class="comment">//对应字段转换为字符串</span></span><br><span class="line">    <span class="meta">@JsonSerialize(using= ToStringSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@JsonSerialize(using= ToStringSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">//日期格式转换</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘车人编辑接口开发"><a href="#乘车人编辑接口开发" class="headerlink" title="乘车人编辑接口开发"></a>乘车人编辑接口开发</h2><p>乘车人编辑和乘车人新增可以向后端同一个接口进行访问，后端可以共用同一套代码，只是对于乘车人新增而言，前端的请求数据中ID为空，对于编辑而言，前端的请求数据中ID不为空，在服务层可以依据此区别做不同的处理</p><p><code>PassengerServiceImpl</code>中代码的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span> &#123;</span><br><span class="line">    <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.将请求类转换为po对象</span></span><br><span class="line">    <span class="type">Passenger</span> <span class="variable">savePassenger</span> <span class="operator">=</span> BeanUtil.copyProperties(passenger, Passenger.class);</span><br><span class="line">    <span class="comment">//2.会员ID通过线程本地变量获取</span></span><br><span class="line">    savePassenger.setMemberId(LoginMemberContext.getId());</span><br><span class="line">    <span class="comment">//3.设置相关字段</span></span><br><span class="line">    <span class="comment">//4.依据请求参数中ID是否为空，判断时乘车人新增业务还是乘车人编辑业务</span></span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(savePassenger.getId()))&#123;<span class="comment">//新增业务</span></span><br><span class="line">        <span class="comment">//乘车人ID，以及记录创建时间和更新时间,ID利用雪花算法生成</span></span><br><span class="line">        savePassenger.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">        savePassenger.setCreateTime(now);</span><br><span class="line">        savePassenger.setUpdateTime(now);</span><br><span class="line">        <span class="comment">//存入数据库</span></span><br><span class="line">        passengerMapper.insert(savePassenger);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">//编辑业务</span></span><br><span class="line">        <span class="comment">//更新乘车人数据,依据主键进行更新</span></span><br><span class="line">        savePassenger.setUpdateTime(now);</span><br><span class="line">        passengerMapper.updateByPrimaryKey(savePassenger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘车人删除接口开发"><a href="#乘车人删除接口开发" class="headerlink" title="乘车人删除接口开发"></a>乘车人删除接口开发</h2><h3 id="服务层代码-1"><a href="#服务层代码-1" class="headerlink" title="服务层代码"></a>服务层代码</h3><p><strong>IPassengerService</strong>j接口新增抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p><strong>PassengerServiceImpl</strong>实现了实现对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    passengerMapper.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层代码-1"><a href="#控制层代码-1" class="headerlink" title="控制层代码"></a>控制层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    passengerService.deleteById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http测试-2"><a href="#http测试-2" class="headerlink" title="http测试"></a>http测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###乘车人删除</span><br><span class="line">DELETE http://localhost:8000/member/passenger/delete/1734597882838913024</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;12306会员基础功能实现&quot;&gt;&lt;a href=&quot;#12306会员基础功能实现&quot; class=&quot;headerlink&quot; title=&quot;12306会员基础功能实现&quot;&gt;&lt;/a&gt;12306会员基础功能实现&lt;/h1&gt;&lt;p&gt;主要目的：完成前后端，单表增删改查功能的开发&lt;/p&gt;</summary>
      
    
    
    
    <category term="12306买票系统" scheme="https://bangwu2001.github.io/categories/12306%E4%B9%B0%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>五、实现JWT单点登录功能</title>
    <link href="https://bangwu2001.github.io/2023/12/10/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/05%20%E5%AE%9E%E7%8E%B0JWT%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <id>https://bangwu2001.github.io/2023/12/10/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/05%20%E5%AE%9E%E7%8E%B0JWT%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</id>
    <published>2023-12-09T16:25:00.000Z</published>
    <updated>2023-12-09T16:24:44.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现JWT单点登录功能"><a href="#实现JWT单点登录功能" class="headerlink" title="实现JWT单点登录功能"></a>实现JWT单点登录功能</h1><p>单点登录：直观意义就是对于一个系统，只需登录一次就可以处处访问</p><h2 id="两种单点登录的设计方案"><a href="#两种单点登录的设计方案" class="headerlink" title="两种单点登录的设计方案"></a>两种单点登录的设计方案</h2><h3 id="方案一：redis-token"><a href="#方案一：redis-token" class="headerlink" title="方案一：redis+token"></a>方案一：redis+token</h3><p><strong>登录阶段</strong></p><p><code>登录开始</code>-&gt;<code>校验用户名和密码</code>-&gt;<code>生成随机的token，每次都不一样</code>-&gt;<code>将token放入redis</code>-&gt;<code>结束</code></p><p><strong>校验阶段</strong></p><p><code>从header中获取token</code>-&gt;<code>根据token到redis获取数据</code>-&gt;<code>是否有数据</code>-&gt;<code>有数据登录校验成功，反之校验失败</code></p><h3 id="方案二：JWT"><a href="#方案二：JWT" class="headerlink" title="方案二：JWT"></a>方案二：JWT</h3><p><strong>登录阶段</strong></p><p><code>登陆开始</code>-&gt;<code>校验用户名和密码</code>-&gt;<code>生成JWT Token,每次都不一样</code>-&gt;<code>结束</code></p><p><strong>校验阶段</strong></p><p><code>校验开始</code>-&gt;<code>从header获取token</code>-&gt;<code>使用工具包校验token</code>-&gt;<code>校验是否成功</code></p><h2 id="JWT原理"><a href="#JWT原理" class="headerlink" title="JWT原理"></a>JWT原理</h2><p><a href="https://hutool.cn/docs/#/jwt/%E6%A6%82%E8%BF%B0?id=%e7%94%b1%e6%9d%a5">JWT原理及其用法</a></p><h3 id="JWT存在的问题"><a href="#JWT存在的问题" class="headerlink" title="JWT存在的问题"></a>JWT存在的问题</h3><p><strong>问题一：token被解密破解</strong></p><p>给密钥加盐值，每个项目盐值不一样，减小被破解风险</p><p><strong>问题二：token被第三方使用</strong></p><p>背景：自己的产品，被第三方包装成一个界面，做成他们自己的收费产品</p><p>此类问题无好的解决办法，可以通过限流进行一定程度缓解，如果某个相同的token有大量请求，则可能被第三方利用</p><h2 id="生成JWT单点登录token"><a href="#生成JWT单点登录token" class="headerlink" title="生成JWT单点登录token"></a>生成JWT单点登录token</h2><p>本项目中，我们利用Hutool工具包提供的JWT模块进行单点登录的开发</p><h3 id="将JWT-token生成和校验功能封装为一个工具类"><a href="#将JWT-token生成和校验功能封装为一个工具类" class="headerlink" title="将JWT  token生成和校验功能封装为一个工具类"></a>将JWT  token生成和校验功能封装为一个工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateField;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateTime;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.crypto.GlobalBouncyCastleProvider;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.jwt.JWTPayload;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.jwt.JWTUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(JwtUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 盐值很重要，不能泄漏，且每个项目都应该不一样，可以放到配置文件中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;train-12306&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">(Long id, String mobile)</span> &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;开始生成JWT token，id：&#123;&#125;，mobile：&#123;&#125;&quot;</span>, id, mobile);</span><br><span class="line">        GlobalBouncyCastleProvider.setUseBouncyCastle(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">expTime</span> <span class="operator">=</span> now.offsetNew(DateField.HOUR, <span class="number">24</span>);</span><br><span class="line">        Map&lt;String, Object&gt; payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 签发时间</span></span><br><span class="line">        payload.put(JWTPayload.ISSUED_AT, now);</span><br><span class="line">        <span class="comment">// 过期时间</span></span><br><span class="line">        payload.put(JWTPayload.EXPIRES_AT, expTime);</span><br><span class="line">        <span class="comment">// 生效时间</span></span><br><span class="line">        payload.put(JWTPayload.NOT_BEFORE, now);</span><br><span class="line">        <span class="comment">// 内容</span></span><br><span class="line">        payload.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">        payload.put(<span class="string">&quot;mobile&quot;</span>, mobile);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtil.createToken(payload, key.getBytes());</span><br><span class="line">        LOG.info(<span class="string">&quot;生成JWT token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;开始JWT token校验，token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        GlobalBouncyCastleProvider.setUseBouncyCastle(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">JWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWTUtil.parseToken(token).setKey(key.getBytes());</span><br><span class="line">        <span class="comment">// validate包含了verify</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validate</span> <span class="operator">=</span> jwt.validate(<span class="number">0</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;JWT token校验结果：&#123;&#125;&quot;</span>, validate);</span><br><span class="line">        <span class="keyword">return</span> validate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">getJSONObject</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        GlobalBouncyCastleProvider.setUseBouncyCastle(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">JWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWTUtil.parseToken(token).setKey(key.getBytes());</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">payloads</span> <span class="operator">=</span> jwt.getPayloads();</span><br><span class="line">        payloads.remove(JWTPayload.ISSUED_AT);</span><br><span class="line">        payloads.remove(JWTPayload.EXPIRES_AT);</span><br><span class="line">        payloads.remove(JWTPayload.NOT_BEFORE);</span><br><span class="line">        LOG.info(<span class="string">&quot;根据token获取原始内容：&#123;&#125;&quot;</span>, payloads);</span><br><span class="line">        <span class="keyword">return</span> payloads;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> createToken(<span class="number">1L</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String token = &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYmYiOjE2NzY4OTk4MjcsIm1vYmlsZSI6IjEyMyIsImlkIjoxLCJleHAiOjE2NzY4OTk4MzcsImlhdCI6MTY3Njg5OTgyN30.JbFfdeNHhxKhAeag63kifw9pgYhnNXISJM5bL6hM8eU&quot;;</span></span><br><span class="line">        validate(token);</span><br><span class="line"></span><br><span class="line">        getJSONObject(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改登录功能service层代码"><a href="#修改登录功能service层代码" class="headerlink" title="修改登录功能service层代码"></a>修改登录功能service层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证码登录接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> MemberLoginResp <span class="title function_">login</span><span class="params">(MemberLoginReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> req.getCode();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> getMembersByMobile(mobile);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(member))&#123;<span class="comment">//2.手机号为空，提示用户需要先获取验证码</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.验证校验，实际应查询验证码短信记录数据库，这里为了测试简便，直接写死</span></span><br><span class="line">    <span class="comment">//实际可能包含验证码正确性、时效性、业务类型匹配等多种校验</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="string">&quot;8888&quot;</span>.equals(code))&#123; <span class="comment">//验证码错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_CODE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.校验通过，返回用户对象</span></span><br><span class="line">    <span class="comment">//对于系统而言，用户只需登录一次，登录对象中可能包含用户昵称、头像等数据信息，所以应该直接返回整个用户对象</span></span><br><span class="line">    <span class="comment">//但是又不能直接将后台数据完整返回前端，所以需要创建一个响应实体类，并将后台数据转换为响应类</span></span><br><span class="line">    <span class="type">MemberLoginResp</span> <span class="variable">memberLoginResp</span> <span class="operator">=</span> BeanUtil.copyProperties(member,MemberLoginResp.class);</span><br><span class="line">    <span class="comment">//5.生成对应的JWT token，并返回给前端</span></span><br><span class="line">    <span class="comment">//JWT Token包含信息: header,payload,signature</span></span><br><span class="line">    <span class="comment">//生成token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createToken(memberLoginResp.getId(),memberLoginResp.getMobile());</span><br><span class="line">    memberLoginResp.setToken(token);</span><br><span class="line">    <span class="keyword">return</span> memberLoginResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用vuex保存登录信息"><a href="#使用vuex保存登录信息" class="headerlink" title="使用vuex保存登录信息"></a>使用vuex保存登录信息</h2><p><strong>在store index.js中定义登录信息对应的全局变量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; <span class="comment">//定义全局变量member</span></span><br><span class="line">    <span class="attr">member</span>:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">setMember</span>(<span class="params">state,_member</span>)&#123;</span><br><span class="line">      state.<span class="property">member</span> = _member;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>修改login.vue</strong></p><p>登录成功之后，将后端数据存储至全部变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const login = () =&gt; &#123;</span><br><span class="line">      axios.post(&quot;/member/login&quot;, loginForm).then((response) =&gt; &#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        if (data.success) &#123;</span><br><span class="line">          notification.success(&#123; description: &#x27;登录成功！&#x27; &#125;);</span><br><span class="line">          // 登录成功，跳到控台主页</span><br><span class="line">          router.push(&quot;/&quot;);</span><br><span class="line">          //使用vuex保存会员登录信息,里面包含JWT TOKEN</span><br><span class="line">          store.commit(&quot;setMember&quot;, data.content);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          notification.error(&#123; description: data.message &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h2 id="vuex配置后的session解决浏览器刷新问题"><a href="#vuex配置后的session解决浏览器刷新问题" class="headerlink" title="vuex配置后的session解决浏览器刷新问题"></a>vuex配置后的session解决浏览器刷新问题</h2><h2 id="gateway拦截器的简单使用使用"><a href="#gateway拦截器的简单使用使用" class="headerlink" title="gateway拦截器的简单使用使用"></a>gateway拦截器的简单使用使用</h2><ul><li>自定义过滤器<ul><li>继承接口<code>GlobalFilter</code>，实现<code>filter</code>方法</li></ul></li><li>多个过滤器存在时，如何确定执行的先后顺序<ul><li>继承<code>Ordered</code>接口，实现<code>getOrder</code>方法，按照返回数值由小到大执行</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在网关增加登录校验过滤器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(AuthGlobalFilter.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;网关登录校验拦截器:&#123;&#125;&quot;</span>,<span class="string">&quot;AuthGlobalFilter&quot;</span>);</span><br><span class="line">        <span class="comment">//网关校验链，进入下一个校验器</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当存在多个过滤器时，按照getOrder的顺序从小到大去执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写会员登录校验拦截器"><a href="#编写会员登录校验拦截器" class="headerlink" title="编写会员登录校验拦截器"></a>编写会员登录校验拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.train.gateway.util.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GateWay登录校验</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginMemberFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LoginMemberFilter.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequest().getURI().getPath();</span><br><span class="line">        <span class="comment">//2.排除不需要拦截的请求</span></span><br><span class="line">        <span class="keyword">if</span> (path.contains(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">                || path.contains(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line">                || path.contains(<span class="string">&quot;/member/login&quot;</span>)</span><br><span class="line">                || path.contains(<span class="string">&quot;/member/send-code&quot;</span>)) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;不需要登录验证：&#123;&#125;&quot;</span>, path);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;需要登录验证：&#123;&#125;&quot;</span>, path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.获取header的token参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;会员登录验证开始，token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || token.isEmpty()) &#123;</span><br><span class="line">            LOG.info( <span class="string">&quot;token为空，请求被拦截&quot;</span> );</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.校验token是否有效，包括token是否被改过，是否过期</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validate</span> <span class="operator">=</span> JwtUtil.validate(token);</span><br><span class="line">        <span class="keyword">if</span> (validate) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;token有效，放行该请求&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.warn( <span class="string">&quot;token无效，请求被拦截&quot;</span> );</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为axios请求增加统一拦截器"><a href="#为axios请求增加统一拦截器" class="headerlink" title="为axios请求增加统一拦截器"></a>为axios请求增加统一拦截器</h2><p>在<code>main.js</code>中修改拦截器代码，为所有的axios请求头加上token参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截请求</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求参数：&#x27;</span>, config);</span><br><span class="line">    <span class="comment">//为所有的axios请求加上token</span></span><br><span class="line">    <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">member</span>.<span class="property">token</span>;</span><br><span class="line">    <span class="keyword">if</span>(token)&#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">token</span> = token;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;为请求header增加token:&quot;</span>,token);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了增加用户请求，在token失效之后(后端返货401)时，应该让页面自动跳转到登录页面，并提示用户登录超时</p><p>修改<code>main.js</code>中响应拦截器代码，对401做出特定动作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截响应</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回结果：&#x27;</span>, response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回错误：&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">const</span> response = error.<span class="property">response</span>;</span><br><span class="line">    <span class="keyword">const</span> status = response.<span class="property">status</span>;</span><br><span class="line">    <span class="keyword">if</span>(status === <span class="number">401</span>)&#123;</span><br><span class="line">        <span class="comment">//提示用户登录超时，并跳转至登陆页面</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未登录或者登录超时，跳转至登录页面&quot;</span>);</span><br><span class="line">        <span class="comment">//清空缓存中用户登录历史数据</span></span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&quot;setMember&quot;</span>,&#123;&#125;);</span><br><span class="line">        <span class="comment">//异常提醒窗口</span></span><br><span class="line">        notification.<span class="title function_">error</span>(&#123;<span class="attr">description</span>: <span class="string">&quot;未登录或登录超时&quot;</span>&#125;);</span><br><span class="line">        <span class="comment">//跳转登录页面</span></span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="为路由页面添加拦截器"><a href="#为路由页面添加拦截器" class="headerlink" title="为路由页面添加拦截器"></a>为路由页面添加拦截器</h2><p><strong>背景</strong></p><p>通过axios发送请求，可以通过后端jwt校验验证用户权限，未登录或者登录超时会直接跳转至登录页面</p><p>但是系统中可能存在一些其他静态页面，比如帮助文档等页面，这类页面不用于后端进行交互，无法根据后端响应进行拦截,所以需要增加<strong>路由跳转拦截器</strong></p><p>在<code>router/index.js</code>中增加拦截器代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;notification&#125; <span class="keyword">from</span> <span class="string">&quot;ant-design-vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/LoginView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/main.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">loginRequire</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由登录拦截</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 要不要对meta.loginRequire属性做监控拦截</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">matched</span>.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item, <span class="string">&quot;是否需要登录校验：&quot;</span>, item.<span class="property">meta</span>.<span class="property">loginRequire</span> || <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">meta</span>.<span class="property">loginRequire</span>;</span><br><span class="line">  &#125;)) &#123;</span><br><span class="line">    <span class="keyword">const</span> _member = store.<span class="property">state</span>.<span class="property">member</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;页面登录校验开始：&quot;</span>, _member);</span><br><span class="line">    <span class="keyword">if</span> (!_member.<span class="property">token</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户未登录或登录超时！&quot;</span>);</span><br><span class="line">      notification.<span class="title function_">error</span>(&#123; <span class="attr">description</span>: <span class="string">&quot;未登录或登录超时&quot;</span> &#125;);</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现JWT单点登录功能&quot;&gt;&lt;a href=&quot;#实现JWT单点登录功能&quot; class=&quot;headerlink&quot; title=&quot;实现JWT单点登录功能&quot;&gt;&lt;/a&gt;实现JWT单点登录功能&lt;/h1&gt;&lt;p&gt;单点登录：直观意义就是对于一个系统，只需登录一次就可以处处访问&lt;/p</summary>
      
    
    
    
    <category term="12306买票系统" scheme="https://bangwu2001.github.io/categories/12306%E4%B9%B0%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>四、前端系统搭建简介</title>
    <link href="https://bangwu2001.github.io/2023/12/10/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://bangwu2001.github.io/2023/12/10/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2023-12-09T16:25:00.000Z</published>
    <updated>2023-12-09T16:24:27.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统前端模块的搭建"><a href="#系统前端模块的搭建" class="headerlink" title="系统前端模块的搭建"></a>系统前端模块的搭建</h1><p>本系统使用<code>Vue3</code>+<code>Vue CLI</code>实现系统前端模块的搭建</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><a href="https://cli.vuejs.org/zh/guide/">Vue CLI官方文档</a></p><p>安装<code>node</code>得到<code>npm</code>，使用<code>npm</code>安装<code>vue cli</code>(脚手架)，使用<code>vue cli</code>创建项目</p><p>npm可设置淘宝镜像，<a href="https://blog.csdn.net/zz00008888/article/details/134241558?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-134241558-blog-126960754.235%5Ev39%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-134241558-blog-126960754.235%5Ev39%5Epc_relevant_default_base&amp;utm_relevant_index=3">淘宝镜像的域名换了</a>，加快组件下载速度<code>npm config set registry https://registry.npmmirror.com</code></p><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>依据官方文档，创建项目<code>web-train</code></p><p><a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">vue cli创建项目官方文档</a></p><p><strong>创建的项目目录</strong></p><p><a href="https://blog.csdn.net/weixin_49827467/article/details/129046119?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-129046119-blog-107966840.235%5Ev39%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-129046119-blog-107966840.235%5Ev39%5Epc_relevant_default_base&amp;utm_relevant_index=1">项目目录各个文件介绍 参考资料</a></p><p><img src="/2023/12/10/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/image-20231206231748676.png" alt="image-20231206231748676"></p><p>进入项目目录，执行<code>npm run serve</code>即可启动前端项目</p><p><a href="https://blog.csdn.net/qq_45594237/article/details/115302876">vue项目启动端口号的修改方法</a>，默认采用8080端口，如果8080被占用，则自动加1</p><h2 id="前端模块集成Ant-Design-Vue"><a href="#前端模块集成Ant-Design-Vue" class="headerlink" title="前端模块集成Ant Design Vue"></a>前端模块集成Ant Design Vue</h2><p>UI组件有很多选择，一种是基于CSS的Bootstrap，适用于各种前端框架；另一种是基于Vue的UI组件，只能用于Vue框架</p><p><a href="https://3x.antdv.com/docs/vue/getting-started-cn">Ant Design Vue官方文档教程</a></p><h3 id="Ant-Design-Vue使用流程"><a href="#Ant-Design-Vue使用流程" class="headerlink" title="Ant Design Vue使用流程"></a><strong>Ant Design Vue</strong>使用流程</h3><ul><li>下载资源，安装依赖</li><li>全局注册或者部分注册</li><li>在vue中即可直接使用相关组件</li></ul><h3 id="小插曲：关于Ant-Design-Vue图标组件的使用"><a href="#小插曲：关于Ant-Design-Vue图标组件的使用" class="headerlink" title="小插曲：关于Ant Design Vue图标组件的使用"></a><strong>小插曲：关于Ant Design Vue图标组件的使用</strong></h3><p><a href="https://3x.antdv.com/components/icon-cn">icon组件官方文档</a></p><ul><li><p>需要手动再次下载依赖</p><ul><li><code>npm install --save @ant-design/icons-vue</code></li></ul></li><li><p>在<code>main.js</code>中全局注册(官方文档只讲解了局部注册)</p><ul><li><p>全局注册方法</p><ul><li><p>```javascript<br>import { createApp } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’<br>import Antd from ‘ant-design-vue’<br>import ‘ant-design-vue/dist/reset.css’<br>import * as Icons from ‘@ant-design/icons-vue’</p><p>const app = createApp(App)<br>app.use(store).use(router).use(Antd).mount(‘#app’);</p><p>//全局使用图标<br>const icons = Icons;<br>for(const i in icons){</p><pre><code>app.component(i,icons[i]);</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 短信验证码登录流程</span><br><span class="line"></span><br><span class="line">使用手机号+验证码的方式进行用户的登录注册</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;04 系统前端模块的搭建/image-20231207001544054.png&quot; alt=&quot;image-20231207001544054&quot; style=&quot;zoom:33%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">登录和注册共用同一个页面，如果手机号存在直接登录，否则后台自动进行注册</span><br><span class="line"></span><br><span class="line">流程：用户输入手机号-&gt;点击获取验证码按钮-&gt;输入用户码-&gt;点击登录</span><br><span class="line"></span><br><span class="line">**补充说明：**</span><br><span class="line"></span><br><span class="line">该登录注册流程容易受到黑客攻击</span><br><span class="line"></span><br><span class="line">- 同一手机号重复请求验证码</span><br><span class="line">  - 后台可以将对应手机号加入黑名单或者单个手机号当天验证码请求次数设置上限</span><br><span class="line">- 大量不同手机号请求验证码</span><br><span class="line">  - 设置图像验证码，增大被攻击难度</span><br><span class="line">    - &lt;img src=&quot;04 系统前端模块的搭建/image-20231207002409475.png&quot; alt=&quot;image-20231207002409475&quot; style=&quot;zoom:33%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不带图像验证码的登录注册流程</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;04 系统前端模块的搭建/640bfc3c0994a1fb07522184-1701880296038-2.jpg&quot; alt=&quot;640bfc3c0994a1fb07522184&quot; style=&quot;zoom: 25%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">带图像验证码的登录注册流程</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;04 系统前端模块的搭建/640bfc7609fdf6fb12562184.jpg&quot; alt=&quot;640bfc7609fdf6fb12562184&quot; style=&quot;zoom: 25%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">## 登陆注册二合一界面开发</span><br><span class="line"></span><br><span class="line">新增登录注册页面，同时在`web-train/src/router/index.js`中添加对应的路由(router)配置</span><br><span class="line"></span><br><span class="line">```tex</span><br><span class="line">对于router配置，大型项目，页面多，80%页面不常用，可以用懒加载的方式，减少编译后文件的大小，提高初始访问速度；小型目，页面少，可以用静态导入的方式，对编译后的文件大小影响不大</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><strong>Vue页面的编写</strong></p><p>一个vue页面，由三个部分组件，都不是必须的</p><ul><li>template，相当于html</li><li>script，JS脚本</li><li>style，CSS样式</li></ul><h2 id="发送短信验证码端口开发"><a href="#发送短信验证码端口开发" class="headerlink" title="发送短信验证码端口开发"></a>发送短信验证码端口开发</h2><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p><code>mapper</code>直接使用以前<code>mybatis generator</code>生成的代码</p><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><p><strong>新建发送验证码对应请求的实体类</strong><code>com.bang.train.member.req.MemberSendCodeReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberSendCodeReq</span> &#123;</span><br><span class="line">    <span class="comment">//@NotBlank:该参数不能为空，为空返回message，不能进入对应请求</span></span><br><span class="line">    <span class="comment">//@Pattern:校验手机号格式，用正则表达式，第一位是1，后十位是数字</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【手机号】不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1\\d&#123;10&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在服务层接口中定义新的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">sendCode</span><span class="params">(MemberSendCodeReq req)</span>;</span><br></pre></td></tr></table></figure><p><strong>服务层实现类中编写新增方法的具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送验证码接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sendCode</span><span class="params">(MemberSendCodeReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> getMembersByMobile(mobile);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(member))&#123;<span class="comment">//2.手机号为空，将用户数据插入数据库</span></span><br><span class="line">        <span class="type">Member</span> <span class="variable">newMember</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">        <span class="comment">//采用雪花算法生成注册用户在数据库中对应的ID</span></span><br><span class="line">        newMember.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">        newMember.setMobile(mobile);</span><br><span class="line">        memberMapper.insert(newMember);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.生成验证码，随机4为字符串</span></span><br><span class="line">    <span class="comment">//        String code = RandomUtil.randomString(4);</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;8888&quot;</span>;</span><br><span class="line">    <span class="comment">//4.将验证码保存短信记录，用于后续用户输入的验证码进行验证</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        一般可以建立一个专门数据库，该数据库包含字段:</span></span><br><span class="line"><span class="comment">            手机号</span></span><br><span class="line"><span class="comment">            短信验证码</span></span><br><span class="line"><span class="comment">            有效期</span></span><br><span class="line"><span class="comment">            是否已使用：避免单个验证码重复使用</span></span><br><span class="line"><span class="comment">            业务类型：可能多个业务需要验证码，比如找回密码，避免用户用验证码攻击其他业务</span></span><br><span class="line"><span class="comment">            发送时间：便于分析，比如统计一段时间内某个手机号请求的次数</span></span><br><span class="line"><span class="comment">            使用时间：</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">//5.对接第三方短信通道(比如阿里云等)，将验证码发送用户</span></span><br><span class="line">    <span class="comment">//6.返回生成的验证码</span></span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四要素:</span><br><span class="line">请求地址url: localhost:8080/member/send-code</span><br><span class="line">请求方法: post</span><br><span class="line">请求参数: MemberSendCodeReq req</span><br><span class="line">响应结果: CommonResp&lt;String&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/send-code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;String&gt; <span class="title function_">sendCode</span><span class="params">(<span class="meta">@Valid</span> MemberSendCodeReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;String&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.sendCode(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="短信验证码登录接口开发"><a href="#短信验证码登录接口开发" class="headerlink" title="短信验证码登录接口开发"></a>短信验证码登录接口开发</h2><h3 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h3><p><code>mapper</code>直接使用以前<code>mybatis generator</code>生成的代码</p><h3 id="业务层-1"><a href="#业务层-1" class="headerlink" title="业务层"></a>业务层</h3><p><strong>新建登录对应请求的实体类</strong><code>com.bang.train.member.req.MemberLoginReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberLoginReq</span> &#123;</span><br><span class="line">    <span class="comment">//@NotBlank:该参数不能为空，为空返回message，不能进入对应请求</span></span><br><span class="line">    <span class="comment">//@Pattern:校验手机号格式，用正则表达式，第一位是1，后十位是数字</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【手机号】不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1\\d&#123;10&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    String mobile; <span class="comment">//手机号</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【短信验证码】不能为空&quot;)</span></span><br><span class="line">    String code; <span class="comment">//短信验证码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在服务层接口中定义新的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MemberLoginResp <span class="title function_">login</span><span class="params">(MemberLoginReq req)</span>;</span><br></pre></td></tr></table></figure><p><strong>服务层实现类中编写新增方法的具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证码登录接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> MemberLoginResp <span class="title function_">login</span><span class="params">(MemberLoginReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> req.getCode();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> getMembersByMobile(mobile);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(member))&#123;<span class="comment">//2.手机号为空，提示用户需要先获取验证码</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.验证校验，实际应查询验证码短信记录数据库，这里为了测试简便，直接写死</span></span><br><span class="line">    <span class="comment">//实际可能包含验证码正确性、时效性、业务类型匹配等多种校验</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="string">&quot;8888&quot;</span>.equals(code))&#123; <span class="comment">//验证码错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_CODE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.校验通过，返回用户对象</span></span><br><span class="line">    <span class="comment">//对于系统而言，用户只需登录一次，登录对象中可能包含用户昵称、头像等数据信息，所以应该直接返回整个用户对象</span></span><br><span class="line">    <span class="comment">//但是又不能直接将后台数据完整返回前端，所以需要创建一个响应实体类，并将后台数据转换为响应类</span></span><br><span class="line">    <span class="type">MemberLoginResp</span> <span class="variable">memberLoginResp</span> <span class="operator">=</span> BeanUtil.copyProperties(member,MemberLoginResp.class);</span><br><span class="line">    <span class="keyword">return</span> memberLoginResp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层-1"><a href="#控制层-1" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四要素:</span><br><span class="line">请求地址url: localhost:8080/member/login</span><br><span class="line">请求方法: post</span><br><span class="line">请求参数: MemberLoginReq req</span><br><span class="line">响应结果: CommonResp&lt;MemberLoginResp&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;MemberLoginResp&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> MemberLoginReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;MemberLoginResp&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.login(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集成Axios完成登录功能"><a href="#集成Axios完成登录功能" class="headerlink" title="集成Axios完成登录功能"></a>集成Axios完成登录功能</h2><p>下载第三方依赖：</p><ul><li>进入web前端工程目录</li><li><code>npm install axios</code>安装依赖</li></ul><p>使用流程</p><ol><li><p>在对应Vue文件中引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>编写点击发送验证码事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const sendCode = () =&gt; &#123;</span><br><span class="line">      axios.post(&quot;http://localhost:8000/member/send-code&quot;, &#123;</span><br><span class="line">        mobile: loginForm.mobile</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        if (data.success) &#123;</span><br><span class="line">          notification.success(&#123; description: &#x27;发送验证码成功！&#x27; &#125;);</span><br><span class="line">          loginForm.code = &quot;8888&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          notification.error(&#123; description: data.message &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li><li><p>编写点击登录事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const login = () =&gt; &#123;</span><br><span class="line">      axios.post(&quot;http://localhost:8000/member/login&quot;, loginForm).then((response) =&gt; &#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        if (data.success) &#123;</span><br><span class="line">          notification.success(&#123; description: &#x27;登录成功！&#x27; &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          notification.error(&#123; description: data.message &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li><li><p>问题一：解决前后端跨域问题：</p><ul><li><p>问题描述：前后端不在同一个域。IP一样，端口不一样，也算跨域。跨域是前后端分离不可避免的问题</p></li><li><p>问题解决：在后端网关模块<code>applicatio.yaml</code>文件中进行配置，允许跨域访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      globalcors:</span><br><span class="line">        corsConfigurations:</span><br><span class="line">          &#x27;[/**]&#x27;:</span><br><span class="line">            # 允许携带认证信息</span><br><span class="line">            allow-credentials: true</span><br><span class="line">            # 允许跨域的源(网站域名/ip)，设置*为全部</span><br><span class="line">            allowedOriginPatterns: &quot;*&quot;</span><br><span class="line">            # 允许跨域的method， 默认为GET和OPTIONS，设置*为全部</span><br><span class="line">            allowedMethods: &quot;*&quot;</span><br><span class="line">            # 允许跨域请求里的head字段，设置*为全部</span><br><span class="line">            allowedHeaders: &quot;*&quot;</span><br><span class="line">            #跨域检测有效期</span><br><span class="line">            maxAge: 3600</span><br></pre></td></tr></table></figure></li></ul></li><li><p>问题二：解决前后端参数传递问题</p><ul><li><p>前端参数传递是以<code>json</code>形式传递的，后端目前只支持以表单的形式访问，在后端请求参数前加上<code>@RequestBody</code>注解即可改为支持<code>json</code>方式的请求数据，此时就不再支持以表单形式提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/send-code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;String&gt; <span class="title function_">sendCode</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> MemberSendCodeReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;String&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.sendCode(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;MemberLoginResp&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> MemberLoginReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;MemberLoginResp&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.login(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对应的请求格式</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">### 验证码获取</span><br><span class="line">POST http://localhost:8000/member/send-code</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;mobile&quot;: &quot;12345678908&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">###登录</span><br><span class="line">POST http://localhost:8000/member/login</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;mobile&quot;:&quot;12345678908&quot;,</span><br><span class="line">  &quot;code&quot;:&quot;8888&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="增加Axios拦截器配置"><a href="#增加Axios拦截器配置" class="headerlink" title="增加Axios拦截器配置"></a>增加Axios拦截器配置</h2><p><code>axios</code>发送请求获取响应结果，应该能够打印对应日志信息，便于前后端联调</p><p>在<code>main.js</code>中进行<code>axios</code>拦截器配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * axios拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截请求</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求参数：&#x27;</span>, config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//拦截响应</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回结果：&#x27;</span>, response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回错误：&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在浏览器的控制台能够看到每次请求的日志信息</p><p><img src="/2023/12/10/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/image-20231209111736666.png" alt="image-20231209111736666" style="zoom:80%;"></p><h2 id="Vue-CLI多环境配置"><a href="#Vue-CLI多环境配置" class="headerlink" title="Vue CLI多环境配置"></a>Vue CLI多环境配置</h2><p>现在前端请求后端接口的<code>url</code>是写死的，但在实际开发过程中，应该让后端接口的域名能够动态配置(开发环境、测试环境、部署环境的接口地址都不一样)</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在前端根目录下增加文件 .env.xxx，xxx表是不同的环境</span><br><span class="line">启动命令里增加 --mode xxx，就启动xxx环境的配置</span><br><span class="line"></span><br><span class="line">.env.xx文件编写:</span><br><span class="line">增加多环境变量：</span><br><span class="line">NODE<span class="built_in">_</span>ENV是内置变量</span><br><span class="line">自定义变量用“VUE<span class="built_in">_</span>APP<span class="built_in">_</span>”开头</span><br><span class="line">使用变量：</span><br><span class="line">process.env. xxx </span><br></pre></td></tr></table></figure><p><strong>编写多个env文件</strong></p><p><code>.env.dev</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE<span class="built_in">_</span>ENV=development</span><br><span class="line">VUE<span class="built_in">_</span>APP<span class="built_in">_</span>SERVER=http://localhost:8000</span><br></pre></td></tr></table></figure><p><code>.env.prod</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE<span class="built_in">_</span>ENV=production</span><br><span class="line">VUE<span class="built_in">_</span>APP<span class="built_in">_</span>SERVER=http://train-server.bang.com</span><br></pre></td></tr></table></figure><p><strong>在main.js中引用对应变量，让其生效</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_SERVER</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;环境：&#x27;</span>, process.<span class="property">env</span>.<span class="property">NODE_ENV</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务端：&#x27;</span>, process.<span class="property">env</span>.<span class="property">VUE_APP_SERVER</span>);</span><br></pre></td></tr></table></figure><p><strong>在各个Vue页面中，可以省略请求前缀URL编写</strong></p><p><img src="/2023/12/10/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/image-20231209114124939.png" alt="image-20231209114124939" style="zoom:80%;"></p><p><strong>启动命令中指定对应环境</strong></p><p><code>npm run serve --port 80 --mode xxx</code></p><p>其中<code>xxx</code>为<code>.env</code>文件名后缀</p><h2 id="新增web控台主页面"><a href="#新增web控台主页面" class="headerlink" title="新增web控台主页面"></a>新增web控台主页面</h2><p>可以选择<code>Ant Design Vue</code>中的<a href="https://www.antdv.com/components/layout-cn"><code>Layout</code>布局</a>作为基础进行修改</p><ul><li>新增控台主页面<code>main.vue</code></li><li>在<code>index.js</code>中新增对应路由</li><li>实现跳转，由登录页面登陆成功跳转至主页面</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;系统前端模块的搭建&quot;&gt;&lt;a href=&quot;#系统前端模块的搭建&quot; class=&quot;headerlink&quot; title=&quot;系统前端模块的搭建&quot;&gt;&lt;/a&gt;系统前端模块的搭建&lt;/h1&gt;&lt;p&gt;本系统使用&lt;code&gt;Vue3&lt;/code&gt;+&lt;code&gt;Vue CLI&lt;/code</summary>
      
    
    
    
    <category term="12306买票系统" scheme="https://bangwu2001.github.io/categories/12306%E4%B9%B0%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第十四章：垃圾回收概述</title>
    <link href="https://bangwu2001.github.io/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/"/>
    <id>https://bangwu2001.github.io/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/</id>
    <published>2023-12-09T01:56:00.000Z</published>
    <updated>2023-12-09T01:55:34.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="垃圾回收概述"><a href="#垃圾回收概述" class="headerlink" title="垃圾回收概述"></a>垃圾回收概述</h1><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130094117977.png" alt="image-20231130094117977"></p><h2 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130095050581.png" alt="image-20231130095050581"></p><h2 id="为什么需要GC"><a href="#为什么需要GC" class="headerlink" title="为什么需要GC"></a>为什么需要GC</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130095918432.png" alt="image-20231130095918432"></p><h2 id="早期的垃圾回收"><a href="#早期的垃圾回收" class="headerlink" title="早期的垃圾回收"></a>早期的垃圾回收</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130100531006.png" alt="image-20231130100531006" style="zoom:80%;"></p><p> <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130100813819.png" alt="image-20231130100813819" style="zoom:80%;"></p><h2 id="Java的垃圾回收机制"><a href="#Java的垃圾回收机制" class="headerlink" title="Java的垃圾回收机制"></a>Java的垃圾回收机制</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101130119.png" alt="image-20231130101130119"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101316294.png" alt="image-20231130101316294" style="zoom:80%;"></p><h2 id="垃圾回收的重点区域"><a href="#垃圾回收的重点区域" class="headerlink" title="垃圾回收的重点区域"></a>垃圾回收的重点区域</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101637771.png" alt="image-20231130101637771"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101722357.png" alt="image-20231130101722357"></p><h2 id="经典大厂面试题"><a href="#经典大厂面试题" class="headerlink" title="经典大厂面试题"></a>经典大厂面试题</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130094709671.png" alt="image-20231130094709671" style="zoom: 80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130094809137.png" alt="image-20231130094809137" style="zoom: 80%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;垃圾回收概述&quot;&gt;&lt;a href=&quot;#垃圾回收概述&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收概述&quot;&gt;&lt;/a&gt;垃圾回收概述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第十五章：垃圾回收相关算法</title>
    <link href="https://bangwu2001.github.io/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"/>
    <id>https://bangwu2001.github.io/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</id>
    <published>2023-12-09T01:56:00.000Z</published>
    <updated>2023-12-09T01:55:57.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="垃圾回收相关算法"><a href="#垃圾回收相关算法" class="headerlink" title="垃圾回收相关算法"></a>垃圾回收相关算法</h1><p>基本思路：</p><ul><li>确定内存中什么是垃圾？</li><li>对这些垃圾如何处理进行回收？</li></ul><h2 id="垃圾标记阶段：对象存活判断"><a href="#垃圾标记阶段：对象存活判断" class="headerlink" title="垃圾标记阶段：对象存活判断"></a>垃圾标记阶段：对象存活判断</h2><p><strong><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130103042521.png" alt="image-20231130103042521"></strong></p><h3 id="垃圾标记阶段算法之引用计数算法"><a href="#垃圾标记阶段算法之引用计数算法" class="headerlink" title="垃圾标记阶段算法之引用计数算法"></a>垃圾标记阶段算法之引用计数算法</h3><h4 id="引用计数算法概述"><a href="#引用计数算法概述" class="headerlink" title="引用计数算法概述"></a>引用计数算法概述</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130103610017.png" alt="image-20231130103610017"></p><h4 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h4><p>如下图所示，为循环引用实例，实际程序中可能变量<code>p</code>不再使用时，其所指向的内存区域也不会再使用，但由于循环引用问题，导致执行的内存区域引用计数器的值非0，从而无法被垃圾回收，即出现内存泄漏问题</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130103938439.png" alt="image-20231130103938439"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130104701315.png" alt="image-20231130104701315"></p><h3 id="垃圾标记阶段算法之可达性分析算法"><a href="#垃圾标记阶段算法之可达性分析算法" class="headerlink" title="垃圾标记阶段算法之可达性分析算法"></a>垃圾标记阶段算法之可达性分析算法</h3><h4 id="可达性分析算法概述"><a href="#可达性分析算法概述" class="headerlink" title="可达性分析算法概述"></a>可达性分析算法概述</h4><p><strong>可达性分析</strong>，又称之为<strong>根搜索算法</strong>或者<strong>追踪性垃圾收集</strong></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130105121100.png" alt="image-20231130105121100"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130105431861.png" alt="image-20231130105431861"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130105740157.png" alt="image-20231130105740157"></p><h4 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130110122576.png" alt="image-20231130110122576" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130110740489.png" alt="image-20231130110740489" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130110922587.png" alt="image-20231130110922587" style="zoom:80%;"></p><h2 id="对象的finalization机制"><a href="#对象的finalization机制" class="headerlink" title="对象的finalization机制"></a>对象的finalization机制</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130143106038.png" alt="image-20231130143106038"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130143500029.png" alt="image-20231130143500029"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130143819557.png" alt="image-20231130143819557"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130144120914.png" alt="image-20231130144120914"></p><p><strong>finalize方法使得对象存活实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象的Finalization机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalizeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FinalizeTest obj; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;重写finalize方法，企图自救&quot;</span>);</span><br><span class="line">        obj = <span class="built_in">this</span>; <span class="comment">//当前对象与GC roots中的obj(类静态属性)建立联系</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        obj = <span class="keyword">new</span> <span class="title class_">FinalizeTest</span>();</span><br><span class="line"></span><br><span class="line">        obj=<span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行第一次gc&quot;</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">//演示2S，因为finalize线程优先级比较低，主线程阻塞等待finalize线程执行</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象已经死亡&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象仍然存活&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        obj=<span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行第二次gc&quot;</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象已经死亡&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象仍然存活&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130145824079.png" alt="image-20231130145824079"></p><h2 id="MAT与JProfiler的GC-Roots朔源"><a href="#MAT与JProfiler的GC-Roots朔源" class="headerlink" title="MAT与JProfiler的GC Roots朔源"></a>MAT与JProfiler的GC Roots朔源</h2><h3 id="MAT-Memory-Analyzer"><a href="#MAT-Memory-Analyzer" class="headerlink" title="MAT(Memory Analyzer)"></a>MAT(Memory Analyzer)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130150719600.png" alt="image-20231130150719600"></p><h3 id="dump文件"><a href="#dump文件" class="headerlink" title="dump文件"></a>dump文件</h3><h4 id="什么是dump文件"><a href="#什么是dump文件" class="headerlink" title="什么是dump文件"></a>什么是dump文件</h4><ul><li>dump文件是一个进程或者系统在某一个给定的时间的快照</li><li>dump文件是用来给驱动程序编写人员调试驱动程序用的，这种文件必须用专用工具软件打开。</li><li>dump文件中包含了程序运行的模块信息、线程信息、堆栈调用信息、异常信息等数据。</li><li>在服务器运行我们的Java程序时，是无法跟踪代码的，所以当发生线上事故时，dump文件就成了一个很关键的分析点。</li></ul><h4 id="获取dump文件"><a href="#获取dump文件" class="headerlink" title="获取dump文件"></a>获取dump文件</h4><h5 id="方式1：命令行使用jmap"><a href="#方式1：命令行使用jmap" class="headerlink" title="方式1：命令行使用jmap"></a>方式1：命令行使用jmap</h5><ul><li>首先通过<code>jps</code>获取对应java进程的pid</li><li>使用jmap命令生成对应的dump文件</li></ul><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130151606843.png" alt="image-20231130151606843"></p><h5 id="方式2：使用JVisualVM导出"><a href="#方式2：使用JVisualVM导出" class="headerlink" title="方式2：使用JVisualVM导出"></a>方式2：使用<code>JVisualVM</code>导出</h5><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130153102063.png" alt="image-20231130153102063"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130153914788.png" alt="image-20231130153914788"></p><h5 id="方式3：被动生成"><a href="#方式3：被动生成" class="headerlink" title="方式3：被动生成"></a>方式3：被动生成</h5><p>很多时候需要对程序<code>OOM</code>进行分析，但是不知道程序什么时候会发生<code>OOM</code>，所以需要在程序发生<code>OOM</code>时能够自动生成<code>dump</code>文件</p><p>通过添加<code>VM Options</code>参数，即可实现上述功能</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:<span class="keyword">\tmp</span></span><br></pre></td></tr></table></figure><p>其中HeapDumpPath表示生成dump文件保存的目录</p><h3 id="MAT查看GC-Roots"><a href="#MAT查看GC-Roots" class="headerlink" title="MAT查看GC Roots"></a>MAT查看GC Roots</h3><p>使用MAT打开dump文件，可以查看GC Roots列表</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130155435272.png" alt="image-20231130155435272" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130155520639.png" alt="image-20231130155520639" style="zoom:80%;"></p><h3 id="JProfiler的GC-Roots朔源"><a href="#JProfiler的GC-Roots朔源" class="headerlink" title="JProfiler的GC Roots朔源"></a>JProfiler的GC Roots朔源</h3><p><code>IDEA</code>安装<code>JProfiler</code>插件，可以对当前程序利用<code>JProfiler</code>进行分析</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160245711.png" alt="image-20231130160245711"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160416543.png" alt="image-20231130160416543" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160651932.png" alt="image-20231130160651932" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160740840.png" alt="image-20231130160740840" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160839853.png" alt="image-20231130160839853" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160907272.png" alt="image-20231130160907272" style="zoom:80%;"></p><h3 id="JProfiler分析OOM"><a href="#JProfiler分析OOM" class="headerlink" title="JProfiler分析OOM"></a>JProfiler分析OOM</h3><p><strong>OOM程序示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对空间OMM情况分析</span></span><br><span class="line"><span class="comment"> * -Xms8m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapOOM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        List&lt;HeapOOM&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">HeapOOM</span>());</span><br><span class="line">                count+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;count=&quot;</span>+count);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130162336328.png" alt="image-20231130162336328"></p><p>利用<code>JProfiler</code>打开其自动生成的<code>dump</code>文件</p><p>查看内存中的超大对象，发现<code>ArrayList</code>对象占据了整个内存的<code>89%</code></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130162720129.png" alt="image-20231130162720129"></p><p>查看进程dump，可以发现<code>main</code>线程中存在异常，且异常位于24行</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130162823405.png" alt="image-20231130162823405"></p><h2 id="垃圾清除阶段"><a href="#垃圾清除阶段" class="headerlink" title="垃圾清除阶段"></a>垃圾清除阶段</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201093119873.png" alt="image-20231201093119873"></p><h3 id="垃圾清除阶段之标记-清除-Mark-Sweep-算法"><a href="#垃圾清除阶段之标记-清除-Mark-Sweep-算法" class="headerlink" title="垃圾清除阶段之标记-清除(Mark-Sweep)算法"></a>垃圾清除阶段之标记-清除(Mark-Sweep)算法</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201093524180.png" alt="image-20231201093524180" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201093943267.png" alt="image-20231201093943267" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201094514124.png" alt="image-20231201094514124" style="zoom:80%;"></p><h3 id="垃圾清除阶段之复制算法"><a href="#垃圾清除阶段之复制算法" class="headerlink" title="垃圾清除阶段之复制算法"></a>垃圾清除阶段之复制算法</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201095207972.png" alt="image-20231201095207972" style="zoom:67%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201101020057.png" alt="image-20231201101020057" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201102111776.png" alt="image-20231201102111776" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201103312797.png" alt="image-20231201103312797" style="zoom:80%;"></p><h3 id="垃圾清除阶段之标记-压缩-整理-算法"><a href="#垃圾清除阶段之标记-压缩-整理-算法" class="headerlink" title="垃圾清除阶段之标记-压缩(整理)算法"></a>垃圾清除阶段之标记-压缩(整理)算法</h3><p>标记-压缩(或标记-整理、Mark-Compact)算法</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201103734129.png" alt="image-20231201103734129" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201104011304.png" alt="image-20231201104011304" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201104545349.png" alt="image-20231201104545349" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201104930808.png" alt="image-20231201104930808" style="zoom:80%;"></p><h3 id="垃圾清除阶段总结"><a href="#垃圾清除阶段总结" class="headerlink" title="垃圾清除阶段总结"></a>垃圾清除阶段总结</h3><p>垃圾清除阶段三种算法对比</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201105234751.png" alt="image-20231201105234751" style="zoom:80%;"></p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201111203833.png" alt="image-20231201111203833" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201111627792.png" alt="image-20231201111627792" style="zoom:80%;"></p><p> <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201112244353.png" alt="image-20231201112244353" style="zoom:80%;"></p><h2 id="增量收集算法、分区算法"><a href="#增量收集算法、分区算法" class="headerlink" title="增量收集算法、分区算法"></a>增量收集算法、分区算法</h2><h3 id="增量收集算法"><a href="#增量收集算法" class="headerlink" title="增量收集算法"></a>增量收集算法</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201112505753.png" alt="image-20231201112505753" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201143437543.png" alt="image-20231201143437543" style="zoom:80%;"></p><h3 id="分区算法"><a href="#分区算法" class="headerlink" title="分区算法"></a>分区算法</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201144454338.png" alt="image-20231201144454338" style="zoom:80%;"></p><p> 根据停顿时间要求，合理规划需要垃圾回收区域的数目和范围</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201144846213.png" alt="image-20231201144846213" style="zoom:80%;"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述内容只是常见垃圾标记和回收算法的基本思路，实际GC过程远远要比其复杂，目前前沿主流的GC算法大多都是复合算法，并且要同时考虑并发和并行的要求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;垃圾回收相关算法&quot;&gt;&lt;a href=&quot;#垃圾回收相关算法&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收相关算法&quot;&gt;&lt;/a&gt;垃圾回收相关算法&lt;/h1&gt;&lt;p&gt;基本思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定内存中什么是垃圾？&lt;/li&gt;
&lt;li&gt;对这些垃圾如</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第十七章：垃圾回收器</title>
    <link href="https://bangwu2001.github.io/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
    <id>https://bangwu2001.github.io/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</id>
    <published>2023-12-09T01:56:00.000Z</published>
    <updated>2023-12-09T01:56:36.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h1><h2 id="GC分类与性能指标"><a href="#GC分类与性能指标" class="headerlink" title="GC分类与性能指标"></a>GC分类与性能指标</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206143956293.png" alt="image-20231206143956293" style="zoom:80%;"></p><h3 id="垃圾回收器分类-了解即可"><a href="#垃圾回收器分类-了解即可" class="headerlink" title="垃圾回收器分类(了解即可)"></a>垃圾回收器分类(了解即可)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206144635564.png" alt="image-20231206144635564" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206144809673.png" alt="image-20231206144809673" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206144958334.png" alt="image-20231206144958334" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206145120480.png" alt="image-20231206145120480" style="zoom:80%;"></p><h3 id="评估GC的性能指标"><a href="#评估GC的性能指标" class="headerlink" title="评估GC的性能指标"></a>评估GC的性能指标</h3><p>其中最重要的三个指标：<strong>吞吐量</strong>、<strong>暂停时间</strong>、<strong>内存占用</strong></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206145351204.png" alt="image-20231206145351204" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206150148183.png" alt="image-20231206150148183" style="zoom:80%;"></p><h4 id="吞吐量-throughput"><a href="#吞吐量-throughput" class="headerlink" title="吞吐量(throughput)"></a>吞吐量(throughput)</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206150606217.png" alt="image-20231206150606217" style="zoom:80%;"></p><h4 id="暂停时间-pause-time"><a href="#暂停时间-pause-time" class="headerlink" title="暂停时间(pause time)"></a>暂停时间(pause time)</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206151018571.png" alt="image-20231206151018571" style="zoom:80%;"></p><h4 id="吞吐量-VS-暂停时间"><a href="#吞吐量-VS-暂停时间" class="headerlink" title="吞吐量 VS 暂停时间"></a>吞吐量 VS 暂停时间</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206151342489.png" alt="image-20231206151342489" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206151700030.png" alt="image-20231206151700030" style="zoom:80%;"></p><h2 id="不同垃圾回收器概述-了解即可"><a href="#不同垃圾回收器概述-了解即可" class="headerlink" title="不同垃圾回收器概述(了解即可)"></a>不同垃圾回收器概述(了解即可)</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206152215044.png" alt="image-20231206152215044" style="zoom:80%;"></p><h3 id="七款经典的垃圾回收器"><a href="#七款经典的垃圾回收器" class="headerlink" title="七款经典的垃圾回收器"></a>七款经典的垃圾回收器</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206153005242.png" alt="image-20231206153005242" style="zoom:80%;"></p><h3 id="经典垃圾回收器与垃圾分代之间的关系"><a href="#经典垃圾回收器与垃圾分代之间的关系" class="headerlink" title="经典垃圾回收器与垃圾分代之间的关系"></a>经典垃圾回收器与垃圾分代之间的关系</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206153728847.png" alt="image-20231206153728847" style="zoom:80%;"></p><h3 id="不同垃圾回收器之间的组合关系"><a href="#不同垃圾回收器之间的组合关系" class="headerlink" title="不同垃圾回收器之间的组合关系"></a>不同垃圾回收器之间的组合关系</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206154143439.png" alt="image-20231206154143439" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206154726132.png" alt="image-20231206154726132" style="zoom:80%;"></p><h3 id="不同垃圾回收器概述"><a href="#不同垃圾回收器概述" class="headerlink" title="不同垃圾回收器概述"></a>不同垃圾回收器概述</h3><p>没有最好的，只有最合适的</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206155031988.png" alt="image-20231206155031988" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206155517505.png" alt="image-20231206155517505" style="zoom:80%;"></p><h2 id="Serial回收器：串行回收"><a href="#Serial回收器：串行回收" class="headerlink" title="Serial回收器：串行回收"></a>Serial回收器：串行回收</h2><h3 id="Serial原理"><a href="#Serial原理" class="headerlink" title="Serial原理"></a>Serial原理</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207091551949.png" alt="image-20231207091551949" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207092318930.png" alt="image-20231207092318930" style="zoom:80%;"></p><h3 id="Serial优劣与参数设置"><a href="#Serial优劣与参数设置" class="headerlink" title="Serial优劣与参数设置"></a>Serial优劣与参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207092519220.png" alt="image-20231207092519220" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207092726561.png" alt="image-20231207092726561" style="zoom:80%;"></p><h2 id="ParNew回收器：并行回收"><a href="#ParNew回收器：并行回收" class="headerlink" title="ParNew回收器：并行回收"></a>ParNew回收器：并行回收</h2><h3 id="ParNew原理"><a href="#ParNew原理" class="headerlink" title="ParNew原理"></a>ParNew原理</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207093151404.png" alt="image-20231207093151404" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207093319098.png" alt="image-20231207093319098" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207093551349.png" alt="image-20231207093551349" style="zoom:80%;"></p><h3 id="ParNew参数设置"><a href="#ParNew参数设置" class="headerlink" title="ParNew参数设置"></a>ParNew参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207094226776.png" alt="image-20231207094226776" style="zoom:80%;"></p><h2 id="Parallel回收器：吞吐量优先"><a href="#Parallel回收器：吞吐量优先" class="headerlink" title="Parallel回收器：吞吐量优先"></a>Parallel回收器：吞吐量优先</h2><h3 id="Parallel原理"><a href="#Parallel原理" class="headerlink" title="Parallel原理"></a>Parallel原理</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095130138.png" alt="image-20231207095130138" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095508215.png" alt="image-20231207095508215" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095847753.png" alt="image-20231207095847753" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095911456.png" alt="image-20231207095911456" style="zoom:80%;"></p><h3 id="Parrallel的参数设置"><a href="#Parrallel的参数设置" class="headerlink" title="Parrallel的参数设置"></a>Parrallel的参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207100050770.png" alt="image-20231207100050770" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207102259638.png" alt="image-20231207102259638" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207102709054.png" alt="image-20231207102709054" style="zoom:80%;"></p><h2 id="CMS回收器：低延迟"><a href="#CMS回收器：低延迟" class="headerlink" title="CMS回收器：低延迟"></a>CMS回收器：低延迟</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103202999.png" alt="image-20231207103202999" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103617966.png" alt="image-20231207103617966" style="zoom:80%;"></p><p>CMS与Parallel的底层框架不一致，所以导致二者不兼容</p><h3 id="CMS工作原理"><a href="#CMS工作原理" class="headerlink" title="CMS工作原理"></a><strong>CMS工作原理</strong></h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103822401.png" alt="image-20231207103822401" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103939319.png" alt="image-20231207103939319" style="zoom:80%;"></p><h3 id="CMS的特点与弊端分析"><a href="#CMS的特点与弊端分析" class="headerlink" title="CMS的特点与弊端分析"></a>CMS的特点与弊端分析</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207104703680.png" alt="image-20231207104703680" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207105000297.png" alt="image-20231207105000297" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207105131765.png" alt="image-20231207105131765" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207105343956.png" alt="image-20231207105343956" style="zoom:80%;"></p><h3 id="CMS参数设置"><a href="#CMS参数设置" class="headerlink" title="CMS参数设置"></a>CMS参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207163418544.png" alt="image-20231207163418544" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207162458421.png" alt="image-20231207162458421" style="zoom:80%;"></p><h3 id="CSM总结"><a href="#CSM总结" class="headerlink" title="CSM总结"></a>CSM总结</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207164013003.png" alt="image-20231207164013003" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207164117998.png" alt="image-20231207164117998" style="zoom:80%;"></p><h2 id="G1回收器：区域化分代式"><a href="#G1回收器：区域化分代式" class="headerlink" title="G1回收器：区域化分代式"></a>G1回收器：区域化分代式</h2><h3 id="G1回收器概述"><a href="#G1回收器概述" class="headerlink" title="G1回收器概述"></a>G1回收器概述</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208093158963.png" alt="image-20231208093158963" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208093731562.png" alt="image-20231208093731562" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094125569.png" alt="image-20231208094125569" style="zoom:80%;"></p><h3 id="G1回收器特点"><a href="#G1回收器特点" class="headerlink" title="G1回收器特点"></a>G1回收器特点</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094407616.png" alt="image-20231208094407616" style="zoom:80%;"></p><p><strong>G1分区示意图</strong></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094816879.png" alt="image-20231208094816879" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094918626.png" alt="image-20231208094918626" style="zoom:80%;"></p><p>  <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208095219293.png" alt="image-20231208095219293" style="zoom:80%;"></p><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208095815959.png" alt="image-20231208095815959" style="zoom:80%;"></p><h3 id="G1回收器的参数设置"><a href="#G1回收器的参数设置" class="headerlink" title="G1回收器的参数设置"></a>G1回收器的参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208100128411.png" alt="image-20231208100128411" style="zoom:80%;"></p><h3 id="G1回收器的常见操作步骤"><a href="#G1回收器的常见操作步骤" class="headerlink" title="G1回收器的常见操作步骤"></a>G1回收器的常见操作步骤</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208100931854.png" alt="image-20231208100931854" style="zoom:80%;"></p><h3 id="G1回收器的适用场景"><a href="#G1回收器的适用场景" class="headerlink" title="G1回收器的适用场景"></a>G1回收器的适用场景</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101103639.png" alt="image-20231208101103639" style="zoom:80%;"></p><h3 id="分区Region：化整为零"><a href="#分区Region：化整为零" class="headerlink" title="分区Region：化整为零"></a>分区Region：化整为零</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101448056.png" alt="image-20231208101448056" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101656902.png" alt="image-20231208101656902" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101954513.png" alt="image-20231208101954513" style="zoom:80%;"></p><h3 id="G1回收器垃圾回收过程"><a href="#G1回收器垃圾回收过程" class="headerlink" title="G1回收器垃圾回收过程"></a>G1回收器垃圾回收过程</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208102458335.png" alt="image-20231208102458335" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208103133680.png" alt="image-20231208103133680" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208103258626.png" alt="image-20231208103258626" style="zoom:80%;"></p><h4 id="记忆集-Remembered-Set"><a href="#记忆集-Remembered-Set" class="headerlink" title="记忆集(Remembered Set)"></a>记忆集(Remembered Set)</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208103745705.png" alt="image-20231208103745705" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208104145557.png" alt="image-20231208104145557" style="zoom:80%;"></p><h4 id="G1回收过程一：年轻代GC"><a href="#G1回收过程一：年轻代GC" class="headerlink" title="G1回收过程一：年轻代GC"></a>G1回收过程一：年轻代GC</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208105148788.png" alt="image-20231208105148788" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208110952401.png" alt="image-20231208110952401" style="zoom: 67%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208111017024.png" alt="image-20231208111017024" style="zoom:80%;"></p><h4 id="G1回收过程二：并发标记过程"><a href="#G1回收过程二：并发标记过程" class="headerlink" title="G1回收过程二：并发标记过程"></a>G1回收过程二：并发标记过程</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208111725531.png" alt="image-20231208111725531" style="zoom:80%;"></p><h4 id="G1回收过程三：混合回收"><a href="#G1回收过程三：混合回收" class="headerlink" title="G1回收过程三：混合回收"></a>G1回收过程三：混合回收</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208112026842.png" alt="image-20231208112026842" style="zoom:80%;"></p><h4 id="G1回收过程：补充"><a href="#G1回收过程：补充" class="headerlink" title="G1回收过程：补充"></a>G1回收过程：补充</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208142412341.png" alt="image-20231208142412341" style="zoom:80%;"></p><h3 id="G1回收器优化建议"><a href="#G1回收器优化建议" class="headerlink" title="G1回收器优化建议"></a>G1回收器优化建议</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208142728237.png" alt="image-20231208142728237" style="zoom:80%;"></p><h2 id="垃圾回收器总结"><a href="#垃圾回收器总结" class="headerlink" title="垃圾回收器总结"></a>垃圾回收器总结</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208144344748.png" alt="image-20231208144344748" style="zoom:80%;"></p><h3 id="如何选择合适的垃圾回收器"><a href="#如何选择合适的垃圾回收器" class="headerlink" title="如何选择合适的垃圾回收器"></a>如何选择合适的垃圾回收器</h3><ul><li>没有最好的收集器，更没有万能的收集器</li><li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li></ul><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208145652771.png" alt="image-20231208145652771" style="zoom:80%;"></p><h3 id="面试相关"><a href="#面试相关" class="headerlink" title="面试相关"></a>面试相关</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150040649.png" alt="image-20231208150040649" style="zoom:80%;"></p><h2 id="GC日志分析"><a href="#GC日志分析" class="headerlink" title="GC日志分析"></a>GC日志分析</h2><h3 id="相关参数设置"><a href="#相关参数设置" class="headerlink" title="相关参数设置"></a>相关参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150246883.png" alt="image-20231208150246883" style="zoom:80%;"></p><h3 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150643372.png" alt="image-20231208150643372" style="zoom:67%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150714092.png" alt="image-20231208150714092" style="zoom:67%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150736336.png" alt="image-20231208150736336" style="zoom:67%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150747770.png" alt="image-20231208150747770" style="zoom:67%;"></p><h3 id="GC日志中垃圾回收数据的分析"><a href="#GC日志中垃圾回收数据的分析" class="headerlink" title="GC日志中垃圾回收数据的分析"></a>GC日志中垃圾回收数据的分析</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208151523258.png" alt="image-20231208151523258" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208152000413.png" alt="image-20231208152000413" style="zoom: 80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208152334594.png" alt="image-20231208152334594" style="zoom:80%;"></p><h4 id="Minor-GC日志分析"><a href="#Minor-GC日志分析" class="headerlink" title="Minor GC日志分析"></a>Minor GC日志分析</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208152536904.png" alt="image-20231208152536904" style="zoom:80%;"></p><h4 id="Full-GC日志分析"><a href="#Full-GC日志分析" class="headerlink" title="Full GC日志分析"></a>Full GC日志分析</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208153026721.png" alt="image-20231208153026721" style="zoom:80%;"></p><h4 id="日志分析工具的使用"><a href="#日志分析工具的使用" class="headerlink" title="日志分析工具的使用"></a>日志分析工具的使用</h4><p>参数:<code>-Xloggc:./logs/gc.log</code>，将GC日志存储到对应的文件</p><p>可以使用一些工具去分析这些gc日志，常用的日志分析工具有：<code>GCViewer</code>、<code>GCEasy</code>、<code>GCHisto</code>、<code>GCLogViewer</code>、<code>Hpjmeter</code>、<code>garbagecat</code>等</p><p>建议GCEasy，在线，可视化更好</p><h2 id="垃圾回收器新发展-了解即可"><a href="#垃圾回收器新发展-了解即可" class="headerlink" title="垃圾回收器新发展(了解即可)"></a>垃圾回收器新发展(了解即可)</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208162923493.png" alt="image-20231208162923493" style="zoom:80%;"></p><h3 id="Shenandoah-GC"><a href="#Shenandoah-GC" class="headerlink" title="Shenandoah GC"></a>Shenandoah GC</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163147442.png" alt="image-20231208163147442" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163239693.png" alt="image-20231208163239693" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163430280.png" alt="image-20231208163430280" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163553376.png" alt="image-20231208163553376" style="zoom:80%;"></p><h3 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163653887.png" alt="image-20231208163653887" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163739444.png" alt="image-20231208163739444" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163913062.png" alt="image-20231208163913062" style="zoom:80%;"></p><h3 id="其他垃圾回收器"><a href="#其他垃圾回收器" class="headerlink" title="其他垃圾回收器"></a>其他垃圾回收器</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163943545.png" alt="image-20231208163943545" style="zoom:80%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;垃圾回收器&quot;&gt;&lt;a href=&quot;#垃圾回收器&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收器&quot;&gt;&lt;/a&gt;垃圾回收器&lt;/h1&gt;&lt;h2 id=&quot;GC分类与性能指标&quot;&gt;&lt;a href=&quot;#GC分类与性能指标&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第十六章：垃圾回收相关概念</title>
    <link href="https://bangwu2001.github.io/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <id>https://bangwu2001.github.io/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</id>
    <published>2023-12-09T01:56:00.000Z</published>
    <updated>2023-12-09T01:56:19.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="垃圾回收相关概念"><a href="#垃圾回收相关概念" class="headerlink" title="垃圾回收相关概念"></a>垃圾回收相关概念</h1><h2 id="System-gc-的理解"><a href="#System-gc-的理解" class="headerlink" title="System.gc()的理解"></a>System.gc()的理解</h2><p> <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204093200425.png" alt="image-20231204093200425" style="zoom:80%;"></p><p><strong>实例一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TTest</span>(); <span class="comment">//没有引用的对象</span></span><br><span class="line">            <span class="comment">//垃圾回收,只是显示地提醒系统进行垃圾回收，但是无法保证垃圾回收会百分百进行;</span></span><br><span class="line">            <span class="comment">//其底层是直接调用：Runtime.getRuntime().gc();</span></span><br><span class="line">            System.gc(); </span><br><span class="line">            <span class="comment">//此方法强制调用失去引用对象地finalize方法</span></span><br><span class="line">            System.runFinalization();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TTest 重写了 finalize()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        System.gc(); <span class="comment">//无法进行回收,buffer变量会指向byte数组的引用</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;10728K(76288K)] 15493K-&gt;10960K(251392K), 0.0344941 secs] [Times: user=0.11 sys=0.06, real=0.05 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 10728K-&gt;0K(76288K)] [ParOldGen: 232K-&gt;10889K(175104K)] 10960K-&gt;10889K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0066511 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        buffer=<span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//数组失去引用，可以被垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;888K(76288K)] 15493K-&gt;896K(251392K), 0.0010141 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 888K-&gt;0K(76288K)] [ParOldGen: 8K-&gt;649K(175104K)] 896K-&gt;649K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0039533 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func3</span><span class="params">()</span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分析：代码块中定义变量，在代码块外buffer变量失效，理论上可以进行垃圾回收</span></span><br><span class="line"><span class="comment">            但是分析字节码可知，局部变量表中最少有两个插槽(slot),this占用一个，此时buffer占用另一个，所以无法回收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;10728K(76288K)] 15493K-&gt;10984K(251392K), 0.0058958 secs] [Times: user=0.14 sys=0.05, real=0.01 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 10728K-&gt;0K(76288K)] [ParOldGen: 256K-&gt;10889K(175104K)] 10984K-&gt;10889K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0055648 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func4</span><span class="params">()</span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> value=<span class="number">2</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分析：</span></span><br><span class="line"><span class="comment">            局部变量表中有两个插槽(slot),this占用一个，value占用另一个，数组失去引用，所以可以回收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;904K(76288K)] 15493K-&gt;912K(251392K), 0.0009706 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 904K-&gt;0K(76288K)] [ParOldGen: 8K-&gt;649K(175104K)] 912K-&gt;649K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0037296 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func5</span><span class="params">()</span>&#123;</span><br><span class="line">        func1();</span><br><span class="line">        <span class="comment">//函数调用结束，栈帧弹出，变量销毁，数组失去引用，可以回收</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;10728K(76288K)] 15493K-&gt;10972K(251392K), 0.0055075 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 10728K-&gt;0K(76288K)] [ParOldGen: 244K-&gt;10889K(175104K)] 10972K-&gt;10889K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0064298 secs] [Times: user=0.06 sys=0.14, real=0.01 secs] </span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 0K-&gt;0K(76288K)] 10889K-&gt;10889K(251392K), 0.0003798 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 0K-&gt;0K(76288K)] [ParOldGen: 10889K-&gt;649K(175104K)] 10889K-&gt;649K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0025422 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TTest</span> <span class="variable">tTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TTest</span>();</span><br><span class="line">        tTest.func5();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存溢出与内存泄露"><a href="#内存溢出与内存泄露" class="headerlink" title="内存溢出与内存泄露"></a>内存溢出与内存泄露</h2><h3 id="内存溢出-OOM"><a href="#内存溢出-OOM" class="headerlink" title="内存溢出(OOM)"></a>内存溢出(OOM)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204100603722.png" alt="image-20231204100603722" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204101253072.png" alt="image-20231204101253072" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204101617960.png" alt="image-20231204101617960" style="zoom:80%;"></p><h3 id="内存泄漏-Memory-Leak"><a href="#内存泄漏-Memory-Leak" class="headerlink" title="内存泄漏(Memory Leak)"></a>内存泄漏(Memory Leak)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204101815297.png" alt="image-20231204101815297" style="zoom:80%;"></p><p>宽泛意义上的内存泄漏的例子</p><ul><li>大量类的静态变量<ul><li>静态变量随着类的加载而加载，类的消亡而消亡</li></ul></li><li>web应用中，将大量数据设置成会话(session)或者应用(ApplicationContext)级别，会导致这些数据生成周期变得很长</li></ul><p><strong>内存泄漏示意图</strong></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204103147788.png" alt="image-20231204103147788" style="zoom:80%;"></p><p><strong>内存泄漏举例</strong></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204103357680.png" alt="image-20231204103357680" style="zoom:80%;"></p><h2 id="Stop-The-World"><a href="#Stop-The-World" class="headerlink" title="Stop The World"></a>Stop The World</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204103659921.png" alt="image-20231204103659921" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204104119879.png" alt="image-20231204104119879" style="zoom:80%;"></p><p><strong>STW直观感受的例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">STWTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GCThread</span> <span class="variable">gcThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GCThread</span>();</span><br><span class="line">        <span class="type">PrintThread</span> <span class="variable">printThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintThread</span>();</span><br><span class="line">        printThread.start();</span><br><span class="line">        gcThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GCThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            list.clear();</span><br><span class="line">            System.gc(); <span class="comment">//显示调用gc</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此线程作用:每个1s打印一次时间</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrintThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">t</span> <span class="operator">=</span> System.currentTimeMillis()-startTime;</span><br><span class="line">                System.out.println(t/<span class="number">1000</span>+<span class="string">&quot;.&quot;</span>+t%<span class="number">1000</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垃圾回收的并发与并行"><a href="#垃圾回收的并发与并行" class="headerlink" title="垃圾回收的并发与并行"></a>垃圾回收的并发与并行</h2><h3 id="操作系统中的并发与并行"><a href="#操作系统中的并发与并行" class="headerlink" title="操作系统中的并发与并行"></a>操作系统中的并发与并行</h3><h4 id="并发-concurrent"><a href="#并发-concurrent" class="headerlink" title="并发(concurrent)"></a>并发(concurrent)</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204105303662.png" alt="image-20231204105303662" style="zoom:80%;"></p><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204105623973.png" alt="image-20231204105623973" style="zoom:80%;"></p><h4 id="并发-vs-并行"><a href="#并发-vs-并行" class="headerlink" title="并发 vs 并行"></a>并发 vs 并行</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204105801589.png" alt="image-20231204105801589" style="zoom:80%;"></p><h3 id="垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）"><a href="#垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）" class="headerlink" title="垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）"></a>垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204110005980.png" alt="image-20231204110005980" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204142924507.png" alt="image-20231204142924507" style="zoom:80%;"></p><h2 id="安全点与安全区域"><a href="#安全点与安全区域" class="headerlink" title="安全点与安全区域"></a>安全点与安全区域</h2><h3 id="安全点-safepoint"><a href="#安全点-safepoint" class="headerlink" title="安全点(safepoint)"></a>安全点(safepoint)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204144329268.png" alt="image-20231204144329268" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204144751710.png" alt="image-20231204144751710" style="zoom:80%;"></p><h3 id="安全区域-safe-Region"><a href="#安全区域-safe-Region" class="headerlink" title="安全区域(safe Region)"></a>安全区域(safe Region)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204145215230.png" alt="image-20231204145215230" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204145605854.png" alt="image-20231204145605854" style="zoom:80%;"></p><h2 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204150004345.png" alt="image-20231204150004345" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204150453101.png" alt="image-20231204150453101" style="zoom:80%;"></p><h3 id="再谈引用：强引用"><a href="#再谈引用：强引用" class="headerlink" title="再谈引用：强引用"></a>再谈引用：强引用</h3><p> <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204152905636.png" alt="image-20231204152905636" style="zoom:80%;"></p><p> <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204191125058.png" alt="image-20231204191125058" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204191200081.png" alt="image-20231204191200081" style="zoom:80%;"></p><h3 id="再谈引用：软引用"><a href="#再谈引用：软引用" class="headerlink" title="再谈引用：软引用"></a>再谈引用：软引用</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204191305349.png" alt="image-20231204191305349" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204192056968.png" alt="image-20231204192056968" style="zoom:80%;"></p><p><strong>软引用实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoftReferenceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建软引用</span></span><br><span class="line">        SoftReference&lt;User&gt; user = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;李白&quot;</span>));</span><br><span class="line">        System.out.println(user.get());</span><br><span class="line">        <span class="comment">//垃圾回收，空间充足情况下，不会回收软引用可达对象</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;After GC&quot;</span>);</span><br><span class="line">        <span class="comment">//获取软引用对应对象</span></span><br><span class="line">        System.out.println(user.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内存不足情况下，在OOM之前，会回收所有的软引用的可达对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//7M</span></span><br><span class="line">            <span class="comment">//对空间设置为: -Xms10m -Xmx10m,则新生代：老年代=1:2，两者均不足7m</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">7</span>];</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(user.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line">        User(Integer age,String name)&#123;</span><br><span class="line">            <span class="built_in">this</span>.name=name;</span><br><span class="line">            <span class="built_in">this</span>.age=age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204193451956.png" alt="image-20231204193451956" style="zoom:80%;"></p><h3 id="再谈引用：弱引用"><a href="#再谈引用：弱引用" class="headerlink" title="再谈引用：弱引用"></a>再谈引用：弱引用</h3><p>发现即回收</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204194011334.png" alt="image-20231204194011334" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204194620085.png" alt="image-20231204194620085" style="zoom:80%;"></p><p><strong>弱引用实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoftReferenceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建软引用</span></span><br><span class="line">        WeakReference&lt;User&gt; user = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;李白&quot;</span>));</span><br><span class="line">        System.out.println(user.get());</span><br><span class="line">        <span class="comment">//垃圾回收,直接会将弱引用的可达对象进行回收，不管当前空间是否充足</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;After GC&quot;</span>);</span><br><span class="line">        <span class="comment">//获取弱引用对应对象</span></span><br><span class="line">        System.out.println(user.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line">        User(Integer age,String name)&#123;</span><br><span class="line">            <span class="built_in">this</span>.name=name;</span><br><span class="line">            <span class="built_in">this</span>.age=age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再谈引用：虚引用"><a href="#再谈引用：虚引用" class="headerlink" title="再谈引用：虚引用"></a>再谈引用：虚引用</h3><p>对象回收跟踪</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204195048645.png" alt="image-20231204195048645" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204195315204.png" alt="image-20231204195315204" style="zoom:80%;"></p><h3 id="再谈引用：终结器引用"><a href="#再谈引用：终结器引用" class="headerlink" title="再谈引用：终结器引用"></a>再谈引用：终结器引用</h3><p>了解即可</p><p>  <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204200057416.png" alt="image-20231204200057416" style="zoom:80%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;垃圾回收相关概念&quot;&gt;&lt;a href=&quot;#垃圾回收相关概念&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收相关概念&quot;&gt;&lt;/a&gt;垃圾回收相关概念&lt;/h1&gt;&lt;h2 id=&quot;System-gc-的理解&quot;&gt;&lt;a href=&quot;#System-gc-的理解&quot; c</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>三、项目前置配置</title>
    <link href="https://bangwu2001.github.io/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/"/>
    <id>https://bangwu2001.github.io/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/</id>
    <published>2023-12-05T15:57:00.000Z</published>
    <updated>2023-12-05T15:57:01.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目前置配置"><a href="#项目前置配置" class="headerlink" title="项目前置配置"></a>项目前置配置</h1><h2 id="IDEA设置热部署"><a href="#IDEA设置热部署" class="headerlink" title="IDEA设置热部署"></a>IDEA设置热部署</h2><p><a href="https://blog.csdn.net/qq_19007335/article/details/124069635">2022版本IDEA配置参考博客</a></p><p><strong>step1:</strong> <code>setting-&gt;Compiler</code></p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127231931248.png" alt="image-20231127231931248" style="zoom:67%;"></p><p><strong>step2:</strong><code>setting-Advance Settings</code></p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127232101600.png" alt="image-20231127232101600" style="zoom:67%;"></p><h2 id="实现代码关联远程git仓库"><a href="#实现代码关联远程git仓库" class="headerlink" title="实现代码关联远程git仓库"></a>实现代码关联远程git仓库</h2><p>实际场景中，完成一个小功能应当及时提交远程仓库</p><p><code>vcs-&gt;enable Version Control</code>:相当于<code>git init</code></p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127233059818.png" alt="image-20231127233059818"></p><p>IDEA右上角出现<code>git</code>相关的功能按钮</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127233400586.png" alt="image-20231127233400586"></p><p>左下角<code>git</code>可以查看对应的信息，比如日志、未提交的文件等</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127233536503.png" alt="image-20231127233536503" style="zoom:67%;"></p><p>在<code>Terminal</code>下关联自己的github`执行以下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关联自己的github(以前设置后无需重复设置,ssh key免登录)</span></span><br><span class="line">git config --global user.name xxx</span><br><span class="line">git config --global user.email xxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将其与远程仓库关联起来,其中origin是别名</span></span><br><span class="line">git remote add origin 远程github地址(注意是ssh形式地址)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提交至远程仓库</span></span><br><span class="line">git push -u  origin 分支名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除关联远程仓库</span></span><br><span class="line">git remote remove origin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看关联远程仓库列表</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h2 id="新建子模块"><a href="#新建子模块" class="headerlink" title="新建子模块"></a>新建子模块</h2><p>整个<code>project</code>由不同的子<code>Module</code>组成，<code>project</code>下的<code>pom.xml</code>只做模块管理</p><p>整个项目目录如下：</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231128225726688.png" alt="image-20231128225726688"></p><h2 id="日志的相关配置"><a href="#日志的相关配置" class="headerlink" title="日志的相关配置"></a>日志的相关配置</h2><h3 id="项目启动信息配置"><a href="#项目启动信息配置" class="headerlink" title="项目启动信息配置"></a><strong>项目启动信息配置</strong></h3><p>改写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberApplication</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(MemberApplication.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        SpringApplication.run(MemberApplication.class, args);</span></span><br><span class="line">        <span class="comment">//获取项目启动环境</span></span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(MemberApplication.class);</span><br><span class="line">        <span class="type">Environment</span> <span class="variable">env</span> <span class="operator">=</span> app.run(args).getEnvironment();</span><br><span class="line">        LOG.info(<span class="string">&quot;启动成功&quot;</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;地址:\thttp://127.0.0.1:&#123;&#125;&quot;</span>,env.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231128230602153.png" alt="image-20231128230602153"></p><p><a href="https://www.bootschool.net/ascii-art/search">banner.txt在线生成工具</a></p><h3 id="项目运行日志"><a href="#项目运行日志" class="headerlink" title="项目运行日志"></a>项目运行日志</h3><p>在<code>resource</code>目录下新建日志配置文件<code>loggback-spring.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log日志文件存储路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;./log/memeber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;Pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight(%-5level) %blue(%-50logger&#123;50&#125;:%-4line) %thread %green(%-18X&#123;LOG_ID&#125;) %msg%n&lt;/Pattern&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;hh:mm:ss.SSS&#125; %highlight(%-5level) %blue(%-30logger&#123;30&#125;:%-4line) %thread %green(%-18X&#123;LOG_ID&#125;) %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;TRACE_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;PATH&#125;/trace.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;PATH&#125;/trace.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %-50logger&#123;50&#125;:%-4line %green(%-18X&#123;LOG_ID&#125;) %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;PATH&#125;/error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;PATH&#125;/error.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %-50logger&#123;50&#125;:%-4line %green(%-18X&#123;LOG_ID&#125;) %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;TRACE&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;TRACE_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用Http-Client完成测试接口"><a href="#使用Http-Client完成测试接口" class="headerlink" title="使用Http Client完成测试接口"></a>使用Http Client完成测试接口</h2><p><code>IDEA</code>自带<code>Http Clinet</code>插件，只要新建<code>.http</code>文件，即可发起<code>http</code>请求</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129000739903.png" alt="image-20231129000739903"></p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129000858213.png" alt="image-20231129000858213"></p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129000956969.png" alt="image-20231129000956969" style="zoom:67%;"></p><h2 id="增加AOP打印请求参数和返回结果"><a href="#增加AOP打印请求参数和返回结果" class="headerlink" title="增加AOP打印请求参数和返回结果"></a>增加AOP打印请求参数和返回结果</h2><p><code>AOP</code>和<code>Interceptor</code>都可以实现此功能，但是<code>Interceptor</code>只能处理<code>Controller</code>层的处理结果，</p><p>在<code>memeber</code>模块下新建<code>AOP</code>打印日志类<code>aspect.LogAspect</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.PropertyPreFilters;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogAspect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Common LogAspect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切点:作用于package com.bang下的所有类名中带有Controller的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.bang..*Controller.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">controllerPointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;controllerPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始打印请求日志</span></span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印请求信息</span></span><br><span class="line">        LOG.info(<span class="string">&quot;------------- 开始 -------------&quot;</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;请求地址: &#123;&#125; &#123;&#125;&quot;</span>, request.getRequestURL().toString(), request.getMethod());</span><br><span class="line">        LOG.info(<span class="string">&quot;类名方法: &#123;&#125;.&#123;&#125;&quot;</span>, signature.getDeclaringTypeName(), name);</span><br><span class="line">        LOG.info(<span class="string">&quot;远程地址: &#123;&#125;&quot;</span>, request.getRemoteAddr());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印请求参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="comment">// LOG.info(&quot;请求参数: &#123;&#125;&quot;, JSONObject.toJSONString(args));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排除特殊类型的参数，如文件类型</span></span><br><span class="line">        Object[] arguments = <span class="keyword">new</span> <span class="title class_">Object</span>[args.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> ServletRequest</span><br><span class="line">                    || args[i] <span class="keyword">instanceof</span> ServletResponse</span><br><span class="line">                    || args[i] <span class="keyword">instanceof</span> MultipartFile) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arguments[i] = args[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排除字段，敏感字段或太长的字段不显示：身份证、手机号、邮箱、密码等</span></span><br><span class="line">        String[] excludeProperties = &#123;&#125;;</span><br><span class="line">        <span class="type">PropertyPreFilters</span> <span class="variable">filters</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyPreFilters</span>();</span><br><span class="line">        PropertyPreFilters.<span class="type">MySimplePropertyPreFilter</span> <span class="variable">excludefilter</span> <span class="operator">=</span> filters.addFilter();</span><br><span class="line">        excludefilter.addExcludes(excludeProperties);</span><br><span class="line">        LOG.info(<span class="string">&quot;请求参数: &#123;&#125;&quot;</span>, JSONObject.toJSONString(arguments, excludefilter));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;controllerPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        <span class="comment">// 排除字段，敏感字段或太长的字段不显示：身份证、手机号、邮箱、密码等</span></span><br><span class="line">        String[] excludeProperties = &#123;&#125;;</span><br><span class="line">        <span class="type">PropertyPreFilters</span> <span class="variable">filters</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyPreFilters</span>();</span><br><span class="line">        PropertyPreFilters.<span class="type">MySimplePropertyPreFilter</span> <span class="variable">excludefilter</span> <span class="operator">=</span> filters.addFilter();</span><br><span class="line">        excludefilter.addExcludes(excludeProperties);</span><br><span class="line">        LOG.info(<span class="string">&quot;返回结果: &#123;&#125;&quot;</span>, JSONObject.toJSONString(result, excludefilter));</span><br><span class="line">        LOG.info(<span class="string">&quot;------------- 结束 耗时：&#123;&#125; ms -------------&quot;</span>, System.currentTimeMillis() - startTime);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129233256857.png" alt="image-20231129233256857" style="zoom:67%;"></p><h2 id="新建公共子模块common"><a href="#新建公共子模块common" class="headerlink" title="新建公共子模块common"></a>新建公共子模块common</h2><p>微服务项目一般存在多个模块，每个模块对应一个服务，负责某一项功能，各个模块可能存在许多公共的代码和相同的依赖，此时为了减小代码冗余和代码管理和修改，我们在项目下新建一个子模块<code>common</code></p><ul><li>将公共代码放在此模块下<ul><li>比如：工具类、拦截器、AOP、常量、枚举类、公共配置等</li></ul></li><li>将公共的依赖包放在此模块下的<code>pom</code>文件中<ul><li>根目录下的<code>pom</code>文件负责依赖包的版本管理</li><li>公共模块下的<code>pom</code>文件负责管理需要导入的包</li></ul></li></ul><p>比如：上述AOP实现打印请求和返回结果的日志代码就可以移除到该模块下，但要注意，此时应该修改<code>memeber</code>模块下启动类的扫描范围，即<code>@ComponentScan(&quot;com.bang.train.*&quot;)</code></p><p>增加公共模块后的项目目录</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129235041656.png" alt="image-20231129235041656"></p><h2 id="新建网关模块"><a href="#新建网关模块" class="headerlink" title="新建网关模块"></a>新建网关模块</h2><p>网关模块主要用于：路由转发、请求校验</p><p>网关模块的配置文件<code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">memeber</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8001</span> <span class="comment">#目前项目中未使用注册中心Nacos,所以只能使用ip地址＋端口号的形式表明需要转发的地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/member/**</span></span><br></pre></td></tr></table></figure><h2 id="本地数据库的构建"><a href="#本地数据库的构建" class="headerlink" title="本地数据库的构建"></a>本地数据库的构建</h2><p>对于各个项目而言，最好能够做到配置<strong>专库专用</strong>，对于一个项目，新建对应数据库的同时，创建一个专门的用户，将该用户的权限局限于对本项目对应数据库的增删改查，避免影响服务器中其他数据库里的数据。</p><h2 id="集成Mybatis持久层框架"><a href="#集成Mybatis持久层框架" class="headerlink" title="集成Mybatis持久层框架"></a>集成Mybatis持久层框架</h2><p>引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 集成mysql连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据库连接</p><p>在<code>application.yaml</code>配置文件中进行设置</p><h2 id="集成Mybatis官方生成器"><a href="#集成Mybatis官方生成器" class="headerlink" title="集成Mybatis官方生成器"></a>集成Mybatis官方生成器</h2><p>利用<code>mybatis</code>框架，需要：<code>编写持久层接口</code>-&gt;<code>编写对应的mapper.xml</code>文件(需要手动编写对应的SQL语句)</p><p>以上过程需要耗费较多经历，为简化开发可以使用以下两种替代方案</p><ul><li><code>Mybatis-Plus</code>第三方框架</li><li><code>Mybatis</code>＋官方生成器</li></ul><p>这里我们采用第二种方案<code>Mybatis</code>+官方生成器</p><p>使用<code>Mybatis</code>官方生成器步骤</p><ol><li><p>新建一个新的<code>maven</code>项目<code>generator</code></p></li><li><p>在<code>generator</code>项目的<code>pom</code>文件中引入<code>mybatis generator</code>自动生成代码插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置文件申明，为什么数据库、什么表生成代码，都需要在该配置文件中定义--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;configurationFile&gt;src/main/resources/generator-config-member.xml&lt;/configurationFile&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generator-config-business.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;configurationFile&gt;src/main/resources/generator-config-batch.xml&lt;/configurationFile&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写对应的配置文件<code>src/main/resources/generator-config-member.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;Mysql&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--覆盖生成XML文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的实体类添加toString()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不生成注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据源，需要根据自己的项目修改 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/train_member?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;train_member&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;wu123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- domain类的位置 targetProject是相对pom.xml的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.domain&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper xml的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/resources&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper类的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;member&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Member&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;table tableName=&quot;passenger&quot; domainObjectName=&quot;Passenger&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;table tableName=&quot;ticket&quot; domainObjectName=&quot;Ticket&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>点击<code>mybatis generator</code>对应maven插件，会生成对应的代码文件</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231203231111219.png" alt="image-20231203231111219" style="zoom:80%;"></p></li><li><p>生成的代码文件</p><ul><li><code>com.bang.train.member.domain.Member</code>：数据库<code>train_member</code>的<code>member</code>表对应的<code>java实体类</code>（PO）</li><li><code>com.bang.train.member.domain.MemberExample</code>:组装SQL语句中<code>where</code>后面的条件对应的实体类;条件构建器，用于构建SQL语句中的各种条件</li><li><code>com.bang.train.member.mapper.MemberMapper</code>:持久层对应的接口</li><li><code>src/main/resources/mapper/memberMapper.xml</code>:对应的<code>mapper.xml</code>文件，里面含有各种<code>SQL</code>语句</li></ul><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231203231302379.png" alt="image-20231203231302379"></p></li><li><p>注意：</p><p>以上四个文件一定不要去动，每次重新店家genartor maven插件，这四个文件都会被覆盖重写；如果官方生成器对应插件无法满足项目需求，自定义的代码应编写在新的文件里，千万不要直接在这四个文件后面追加。</p></li></ol><h2 id="会员注册接口开发"><a href="#会员注册接口开发" class="headerlink" title="会员注册接口开发"></a>会员注册接口开发</h2><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><p>在<code>com.bang.train.member.IMemberService</code>接口下新建抽象方法<code>register</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile 用户提供的手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">register</span><span class="params">(String mobile)</span>;</span><br></pre></td></tr></table></figure><p>在<code>com.bang.train.member.MemberServiceImpl</code>类下实现对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(String mobile)</span> &#123;</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">MemberExample</span> <span class="variable">memberExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberExample</span>();</span><br><span class="line">    memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">    List&lt;Member&gt; memberList = memberMapper.selectByExample(memberExample);</span><br><span class="line">    <span class="keyword">if</span>(!CollUtil.isEmpty(memberList))&#123;<span class="comment">//非空，说明手机号已被注册</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;手机号已被注册&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">    member.setId(System.currentTimeMillis());</span><br><span class="line">    member.setMobile(mobile);</span><br><span class="line">    memberMapper.insert(member);</span><br><span class="line">    <span class="keyword">return</span> member.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(String mobile)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> memberService.register(mobile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写http文件利用Http-Client进行测试"><a href="#编写http文件利用Http-Client进行测试" class="headerlink" title="编写http文件利用Http Client进行测试"></a>编写http文件利用Http Client进行测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8001/member/register</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">mobile=15823209537</span><br></pre></td></tr></table></figure><h2 id="封装请求参数和结果-此模块的代码个人认为没有电脑商城项目好"><a href="#封装请求参数和结果-此模块的代码个人认为没有电脑商城项目好" class="headerlink" title="封装请求参数和结果(此模块的代码个人认为没有电脑商城项目好))"></a>封装请求参数和结果(此模块的代码个人认为没有电脑商城项目好))</h2><h3 id="封装请求参数"><a href="#封装请求参数" class="headerlink" title="封装请求参数"></a>封装请求参数</h3><p>对于每个功能模块，将对应的请求参数封装成一个实体类，注意实体类的属性名与请求参数名要一致，这样前端请求会自动映射到实体类对应属性值</p><p>新建<code>member</code>模块下用户注册对应的请求参数实体类<code>com.bang.train.member.req.MemberRegReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberRegReq</span> &#123;</span><br><span class="line">    String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装响应结果"><a href="#封装响应结果" class="headerlink" title="封装响应结果"></a>封装响应结果</h3><p>响应结果包含三大基本信息：响应状态、响应状态描述信息、响应数据</p><p>在<code>common</code>模块新建公共响应实体类<code>com.bang.train.common.resp.CommonResp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应公共实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 响应数据类类型，这里用泛型表示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResp</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">//响应状态，true表示成功，false表示失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> success=<span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//响应状态描述信息</span></span><br><span class="line">    <span class="keyword">public</span> String message;</span><br><span class="line">    <span class="comment">//响应数据</span></span><br><span class="line">    <span class="keyword">public</span> T content;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResp</span><span class="params">(T content)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content=content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对应控制层代码修改"><a href="#对应控制层代码修改" class="headerlink" title="对应控制层代码修改"></a>对应控制层代码修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Long&gt; <span class="title function_">register</span><span class="params">(MemberRegReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;Long&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.register(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一异常处理（此模块的代码个人认为没有电脑商城项目好"><a href="#统一异常处理（此模块的代码个人认为没有电脑商城项目好" class="headerlink" title="统一异常处理（此模块的代码个人认为没有电脑商城项目好)"></a>统一异常处理（此模块的代码个人认为没有电脑商城项目好)</h2><p>业务层根据业务逻辑和执行结果，会向上层抛出各种类型异常，控制层需要对异常进行处理，直接将异常抛给前端不友好，需要针对异常，转换成统一的响应结果数据格式，所以需要构建统一异常处理类，借助于<code>Spring</code>的<code>@ExceptionHandler</code>注解来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">controller层统一的异常处理拦截</span></span><br><span class="line"><span class="comment">@ControllerAdvice使得该类对所有的Controller均有效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(ControllerExceptionHandler.class);</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        commResp.setMessage(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> commResp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>根据业务层的业务逻辑，自定义对应的异常类，可以考虑利用枚举类进行异常的管理</p><p><strong>定义枚举类，统一管理自定义异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">BusinessExceptionEnum</span> &#123;</span><br><span class="line">    MEMBER_EXIST_ERROR(<span class="string">&quot;手机号已注册&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    BusinessExceptionEnum(String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BusinessExceptionEnum&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义业务异常类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> BusinessExceptionEnum E;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(BusinessExceptionEnum E)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.E = E;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改统一的异常处理模块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.train.common.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.bang.train.common.resp.CommonResp;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">controller层统一的异常处理拦截</span></span><br><span class="line"><span class="comment">@ControllerAdvice使得该类对所有的Controller均有效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(ControllerExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//未知类型异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException1</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        commResp.setMessage(<span class="string">&quot;未知类型异常,请联系管理员&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> commResp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//业务类型异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException2</span><span class="params">(BusinessException e)</span>&#123;</span><br><span class="line">        CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        commResp.setMessage(e.getE().getDesc());</span><br><span class="line">        <span class="keyword">return</span> commResp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集成校验框架Validation"><a href="#集成校验框架Validation" class="headerlink" title="集成校验框架Validation"></a>集成校验框架Validation</h2><p>在实际生产环境中，大多数情况下需要对用户的输入参数进行校验，比如校验输入是否有特殊字符、手机号位数是否正确等；当然，输入的校验也可在前端进行</p><p>校验框架<code>Validation</code>的使用步骤</p><p><strong>引入对应的pom依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Validation校验框架 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过注解方式进行参数校验</strong></p><p>在<code>member</code>模块中注册功能对应的请求参数实体类进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberRegReq</span> &#123;</span><br><span class="line">    <span class="comment">//@NotBlank:该参数不能为空，为空返回message，不能进入对应请求</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【手机号】不能为空&quot;)</span></span><br><span class="line">    String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在注册功能对应<code>controller</code>类的请求处理方法上加上注解<code>@Valid</code>让校验功能起效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Long&gt; <span class="title function_">register</span><span class="params">(<span class="meta">@Valid</span> MemberRegReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;Long&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.register(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增校验异常处理代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException1</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">    CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span>(e <span class="keyword">instanceof</span> BindException)&#123;</span><br><span class="line">        <span class="type">BindException</span> <span class="variable">be</span> <span class="operator">=</span> (BindException) e;</span><br><span class="line">        <span class="comment">//获取异常提示信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> be.getBindingResult().getAllErrors().get(<span class="number">0</span>).getDefaultMessage();</span><br><span class="line">        commResp.setMessage(message);</span><br><span class="line">        LOG.error(<span class="string">&quot;校验异常:&#123;&#125;&quot;</span>,message);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        commResp.setMessage(<span class="string">&quot;未知类型异常,请联系管理员&quot;</span>);</span><br><span class="line">        LOG.error(<span class="string">&quot;未知类型异常，请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h2><p><code>member</code>模块注册功能业务层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(MemberRegReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">MemberExample</span> <span class="variable">memberExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberExample</span>();</span><br><span class="line">    memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">    List&lt;Member&gt; memberList = memberMapper.selectByExample(memberExample);</span><br><span class="line">    <span class="keyword">if</span>(!CollUtil.isEmpty(memberList))&#123;<span class="comment">//非空，说明手机号已被注册</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_EXIST_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">    member.setId(System.currentTimeMillis());</span><br><span class="line">    member.setMobile(mobile);</span><br><span class="line">    memberMapper.insert(member);</span><br><span class="line">    <span class="keyword">return</span> member.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前，新注册用户的<code>ID</code>是用当前时间戳来表示，在高并发场景下存在非唯一性问题，因为同一时刻存在大量请求</p><p>目前的可采取的其他方法及其对应的问题</p><ul><li><p>采用时间戳+随机数问题：并发数大的情况下，仍然无法保证唯一性</p></li><li><p>ID自增：自增ID不适用于分布式数据库，分表分库场景，只适用于小型项目</p></li><li><p>UUID</p><ul><li>UUID会影响索引效率，因为UUID是无序的，用一堆无序的ID来构建一个有序的索引目录，性能上肯定有问题</li></ul></li><li><p>雪花算法：全局唯一、有序增长、生成效率高</p><ul><li><p>hutool工具内部集成了雪花算法</p><ul><li>```java<br>//参数1为终端ID<br>//参数2为数据中心ID<br>//参数1和参数2保证了每台机器生成ID的唯一性<br>Snowflake snowflake = IdUtil.createSnowflake(1, 1);<br>long id = snowflake.nextId();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - [hutool工具参考链接](https://www.bookstack.cn/read/hutool/bfd2d43bcada297e.md)</span><br><span class="line"></span><br><span class="line">### 雪花算法原理</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;03 项目配置前置工作/image-20231205232621491.png&quot; alt=&quot;image-20231205232621491&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">### 雪花算法使用过程的注意点</span><br><span class="line"></span><br><span class="line">- 数据中心以及机器ID怎么设置？</span><br><span class="line">  - 方法1：利用redis自增序列，这样每台机器启动时，从redis获取一个ID，不重复</span><br><span class="line">  - 方法2：利用数据库，为每台机器分配ID，保存ip和workID的关系</span><br><span class="line">- 时钟回拨</span><br><span class="line">  - [时钟回拨解决方法参考](https://blog.csdn.net/qq_34687559/article/details/115910152)</span><br><span class="line"></span><br><span class="line">### `member`模块`service`层代码变更</span><br><span class="line"></span><br><span class="line">将雪花算法获取ID代码进行封装</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class SnowUtil &#123;</span><br><span class="line">    //workerId和datacenterId两个属性值，在项目启动时，可以通过redis或者数据库读取，读取之后，该值就会固定不变</span><br><span class="line">    private static int workerId = 1;</span><br><span class="line">    private static int datacenterId = 1;</span><br><span class="line">    public static long getSnowflakeId()&#123;</span><br><span class="line">        return IdUtil.getSnowflake(workerId,datacenterId).nextId();</span><br><span class="line">    &#125;</span><br><span class="line">    public static String getSnowflakeStr()&#123;</span><br><span class="line">        return IdUtil.getSnowflake(workerId,datacenterId).nextIdStr();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>更改<code>service</code>层注册功能代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(MemberRegReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">MemberExample</span> <span class="variable">memberExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberExample</span>();</span><br><span class="line">    memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">    List&lt;Member&gt; memberList = memberMapper.selectByExample(memberExample);</span><br><span class="line">    <span class="keyword">if</span>(!CollUtil.isEmpty(memberList))&#123;<span class="comment">//非空，说明手机号已被注册</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_EXIST_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">    <span class="comment">//采用雪花算法生成注册用户在数据库中对应的ID</span></span><br><span class="line">    member.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">    member.setMobile(mobile);</span><br><span class="line">    memberMapper.insert(member);</span><br><span class="line">    <span class="keyword">return</span> member.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目前置配置&quot;&gt;&lt;a href=&quot;#项目前置配置&quot; class=&quot;headerlink&quot; title=&quot;项目前置配置&quot;&gt;&lt;/a&gt;项目前置配置&lt;/h1&gt;&lt;h2 id=&quot;IDEA设置热部署&quot;&gt;&lt;a href=&quot;#IDEA设置热部署&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="12306买票系统" scheme="https://bangwu2001.github.io/categories/12306%E4%B9%B0%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第十二章：执行引擎</title>
    <link href="https://bangwu2001.github.io/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
    <id>https://bangwu2001.github.io/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</id>
    <published>2023-12-03T06:29:00.000Z</published>
    <updated>2023-12-03T06:28:50.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h1><h2 id="执行引擎的作用及工作过程概述"><a href="#执行引擎的作用及工作过程概述" class="headerlink" title="执行引擎的作用及工作过程概述"></a>执行引擎的作用及工作过程概述</h2><h3 id="执行引擎概述"><a href="#执行引擎概述" class="headerlink" title="执行引擎概述"></a>执行引擎概述</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127094459845.png" alt="image-20231127094459845"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127095144384.png" alt="image-20231127095144384"></p><h3 id="执行引擎的工作过程"><a href="#执行引擎的工作过程" class="headerlink" title="执行引擎的工作过程"></a>执行引擎的工作过程</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127095630093.png" alt="image-20231127095630093"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127100153350.png" alt="image-20231127100153350"></p><h2 id="Java代码编译和执行的过程"><a href="#Java代码编译和执行的过程" class="headerlink" title="Java代码编译和执行的过程"></a>Java代码编译和执行的过程</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127100342897.png" alt="image-20231127100342897"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101115701.png" alt="image-20231127101115701"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101157223.png" alt="image-20231127101157223"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101253276.png" alt="image-20231127101253276"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101724143.png" alt="image-20231127101724143"></p><h2 id="机器码、指令、汇编语言"><a href="#机器码、指令、汇编语言" class="headerlink" title="机器码、指令、汇编语言"></a>机器码、指令、汇编语言</h2><h3 id="机器码"><a href="#机器码" class="headerlink" title="机器码"></a>机器码</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102308898.png" alt="image-20231127102308898"></p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102505973.png" alt="image-20231127102505973"></p><h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102648186.png" alt="image-20231127102648186"></p><h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102756988.png" alt="image-20231127102756988"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102953222.png" alt="image-20231127102953222"></p><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127103123575.png" alt="image-20231127103123575"></p><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127103522274.png" alt="image-20231127103522274"></p><h3 id="解释器的工作机制-工作任务"><a href="#解释器的工作机制-工作任务" class="headerlink" title="解释器的工作机制(工作任务)"></a>解释器的工作机制(工作任务)</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104215822.png" alt="image-20231127104215822"></p><h3 id="解释器分类"><a href="#解释器分类" class="headerlink" title="解释器分类"></a>解释器分类</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104308534.png" alt="image-20231127104308534"></p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104504559.png" alt="image-20231127104504559"></p><h2 id="JIT编译器"><a href="#JIT编译器" class="headerlink" title="JIT编译器"></a>JIT编译器</h2><h3 id="Java代码的执行分类"><a href="#Java代码的执行分类" class="headerlink" title="Java代码的执行分类"></a>Java代码的执行分类</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104906668.png" alt="image-20231127104906668"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104951399.png" alt="image-20231127104951399"></p><h3 id="为什么需要解释器和编译器并存"><a href="#为什么需要解释器和编译器并存" class="headerlink" title="为什么需要解释器和编译器并存"></a>为什么需要解释器和编译器并存</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127105434082.png" alt="image-20231127105434082"></p><h3 id="HotSpot-JVM的执行方式"><a href="#HotSpot-JVM的执行方式" class="headerlink" title="HotSpot JVM的执行方式"></a>HotSpot JVM的执行方式</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127105629966.png" alt="image-20231127105629966"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127110222170.png" alt="image-20231127110222170"></p><h3 id="JIT编译器概述"><a href="#JIT编译器概述" class="headerlink" title="JIT编译器概述"></a>JIT编译器概述</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127111440086.png" alt="image-20231127111440086"></p><h3 id="啥时候选择JIT-热点代码及探测方式"><a href="#啥时候选择JIT-热点代码及探测方式" class="headerlink" title="啥时候选择JIT(热点代码及探测方式)"></a>啥时候选择JIT(热点代码及探测方式)</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127111952987.png" alt="image-20231127111952987"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127143119261.png" alt="image-20231127143119261"></p><h4 id="方法调用计数器"><a href="#方法调用计数器" class="headerlink" title="方法调用计数器"></a>方法调用计数器</h4><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127143628745.png" alt="image-20231127143628745"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127144131258.png" alt="image-20231127144131258" style="zoom: 80%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127144331908.png" alt="image-20231127144331908"></p><h4 id="回边计数器"><a href="#回边计数器" class="headerlink" title="回边计数器"></a>回边计数器</h4><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127145407140.png" alt="image-20231127145407140"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127145552778.png" alt="image-20231127145552778"></p><h2 id="HotSpot-VM设置模式"><a href="#HotSpot-VM设置模式" class="headerlink" title="HotSpot VM设置模式"></a>HotSpot VM设置模式</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127145732658.png" alt="image-20231127145732658"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127150608208.png" alt="image-20231127150608208"></p><h2 id="HotSpot-VM中JIT分类"><a href="#HotSpot-VM中JIT分类" class="headerlink" title="HotSpot VM中JIT分类"></a>HotSpot VM中JIT分类</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127151358422.png" alt="image-20231127151358422"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152002002.png" alt="image-20231127152002002"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152025530.png" alt="image-20231127152025530"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152421873.png" alt="image-20231127152421873"></p><h2 id="最近的发展-了解即可"><a href="#最近的发展-了解即可" class="headerlink" title="最近的发展(了解即可)"></a>最近的发展(了解即可)</h2><h3 id="Graal编译器"><a href="#Graal编译器" class="headerlink" title="Graal编译器"></a>Graal编译器</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152528812.png" alt="image-20231127152528812"></p><h3 id="AOT"><a href="#AOT" class="headerlink" title="AOT"></a>AOT</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152616643.png" alt="image-20231127152616643"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152830130.png" alt="image-20231127152830130"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;执行引擎&quot;&gt;&lt;a href=&quot;#执行引擎&quot; class=&quot;headerlink&quot; title=&quot;执行引擎&quot;&gt;&lt;/a&gt;执行引擎&lt;/h1&gt;&lt;h2 id=&quot;执行引擎的作用及工作过程概述&quot;&gt;&lt;a href=&quot;#执行引擎的作用及工作过程概述&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第十三章：String Table</title>
    <link href="https://bangwu2001.github.io/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/"/>
    <id>https://bangwu2001.github.io/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/</id>
    <published>2023-12-03T06:29:00.000Z</published>
    <updated>2023-12-03T06:29:10.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String-Table"><a href="#String-Table" class="headerlink" title="String Table"></a>String Table</h1><h2 id="String的基本特性"><a href="#String的基本特性" class="headerlink" title="String的基本特性"></a>String的基本特性</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128094301344.png" alt="image-20231128094301344" style="zoom:67%;"></p><h3 id="String存储结构变更"><a href="#String存储结构变更" class="headerlink" title="String存储结构变更"></a>String存储结构变更</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128094641545.png" alt="image-20231128094641545" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128094736318.png" alt="image-20231128094736318" style="zoom:67%;"></p><h3 id="String-不可变性"><a href="#String-不可变性" class="headerlink" title="String 不可变性"></a>String 不可变性</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128095746523.png" alt="image-20231128095746523" style="zoom:67%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(a==b); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(c==d); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经典面试题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span>[] c = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DemoTest</span> <span class="variable">demoTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DemoTest</span>();</span><br><span class="line">        demoTest.change(demoTest.s, demoTest.c);</span><br><span class="line">        System.out.println(demoTest.s);<span class="comment">// hello</span></span><br><span class="line">        System.out.println(demoTest.c); <span class="comment">//bold</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str,<span class="type">char</span>[] b)</span>&#123;</span><br><span class="line">        str = <span class="string">&quot;we are ok!&quot;</span>;</span><br><span class="line">        b[<span class="number">0</span>]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//string不可变数据类型，传参时，形参与实参之间引用同意内存地址，对形参的改变会导致其指向一个新的内存区域，而实参不会发生改变</span></span><br></pre></td></tr></table></figure><h3 id="字符串常量池特性"><a href="#字符串常量池特性" class="headerlink" title="字符串常量池特性"></a>字符串常量池特性</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128101250198.png" alt="image-20231128101250198" style="zoom:67%;"></p><h2 id="String的内存分配"><a href="#String的内存分配" class="headerlink" title="String的内存分配"></a>String的内存分配</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128102616031.png" alt="image-20231128102616031" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128102713976.png" alt="image-20231128102713976" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128103131148.png" alt="image-20231128103131148" style="zoom:67%;"></p><h2 id="字符串的拼接操作"><a href="#字符串的拼接操作" class="headerlink" title="字符串的拼接操作"></a>字符串的拼接操作</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128105057865.png" alt="image-20231128105057865"></p><h3 id="典型面试题"><a href="#典型面试题" class="headerlink" title="典型面试题"></a><strong>典型面试题</strong></h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128105620269.png" alt="image-20231128105620269" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128110112601.png" alt="image-20231128110112601" style="zoom:67%;"></p><h3 id="字符串拼接底层原理"><a href="#字符串拼接底层原理" class="headerlink" title="字符串拼接底层原理"></a>字符串拼接底层原理</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128111309977.png" alt="image-20231128111309977" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128111523694.png" alt="image-20231128111523694" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128111801056.png" alt="image-20231128111801056"></p><p>字符串的拼接操作不一定使用的是<code>StringBuilder</code>，如果拼接符号左右两边都是字符串常量或常量引用，则仍然使用的是编译器优化</p><h3 id="字符串拼接与append的效率比对"><a href="#字符串拼接与append的效率比对" class="headerlink" title="字符串拼接与append的效率比对"></a>字符串拼接与append的效率比对</h3><p>通过<code>StringBuilder</code>得<code>append</code>方式添加字符串效率远高于字符串拼接方式</p><ul><li><p><code>String</code>拼接操作每次拼接都会创建一个新的<code>StringBuilder</code>和<code>String</code>对象，内存占用也会更大，如果进行<code>GC</code>，需要花费额外的时间</p></li><li><p>而<code>StringBuilder</code>自始至终只会存在唯一一个<code>StringBuilder</code>对象</p><ul><li>改进空间：如果基本确定字符串长度不高于某个限定值，建议使用构造器指定大小方式创建StringBuilder对象<ul><li><code>StringBuilder sb=new StringBuilder(capacity)</code></li></ul></li></ul></li></ul><h2 id="intern-的使用"><a href="#intern-的使用" class="headerlink" title="intern()的使用"></a>intern()的使用</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128160833583.png" alt="image-20231128160833583"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128161149023.png" alt="image-20231128161149023"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128161326620.png" alt="image-20231128161326620"></p><h3 id="典型例题"><a href="#典型例题" class="headerlink" title="典型例题"></a>典型例题</h3><ul><li><code>new String(&quot;ab&quot;)</code>会创建几个对象？<ul><li>如下图字节码所示，两个对象<ul><li>一个对象是: new 关键字在堆空间创建的</li><li>另一个对象是：字符串常量池中的对象</li></ul></li></ul></li></ul><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128162224977.png" alt="image-20231128162224977"></p><ul><li><code>new String(&quot;a&quot;)+new String(&quot;b&quot;)</code>会创建几个对象？<ul><li>六个对象<ul><li><code>StringBuilder</code></li><li><code>new String(&quot;a&quot;)</code></li><li><code>常量池中的a</code></li><li><code>new String(&quot;b&quot;)</code></li><li><code>常量池中的b</code></li><li><code>StringBuilder的toString方法</code></li></ul></li><li>但是常量池中最终不会生成ab</li></ul></li></ul><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128162734386.png" alt="image-20231128162734386"></p><ul><li>例题3</li></ul><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128161441921.png" alt="image-20231128161441921" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129104643177.png" alt="image-20231129104643177" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129104158052.png" alt="image-20231129104158052" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129105020368.png" alt="image-20231129105020368" style="zoom:67%;"></p><h3 id="intern的使用总结"><a href="#intern的使用总结" class="headerlink" title="intern的使用总结"></a>intern的使用总结</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129105059173.png" alt="image-20231129105059173"></p><ul><li>对于程序中大量存在的字符串，尤其其中存在大量重复字符串时，使用intern可以节省内存空间</li><li><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129112401083.png" alt="image-20231129112401083"></p></li><li><p>注意的问题：Q:使用intern的好处？为什么使用inrtern可以大大节省内存空间？</p></li></ul><h2 id="String-Table的垃圾回收"><a href="#String-Table的垃圾回收" class="headerlink" title="String Table的垃圾回收"></a>String Table的垃圾回收</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129113022254.png" alt="image-20231129113022254"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129141941425.png" alt="image-20231129141941425" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129142115097.png" alt="image-20231129142115097" style="zoom:67%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;String-Table&quot;&gt;&lt;a href=&quot;#String-Table&quot; class=&quot;headerlink&quot; title=&quot;String Table&quot;&gt;&lt;/a&gt;String Table&lt;/h1&gt;&lt;h2 id=&quot;String的基本特性&quot;&gt;&lt;a href=&quot;#St</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二、新版本JDK和SpringBoot特性介绍</title>
    <link href="https://bangwu2001.github.io/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/"/>
    <id>https://bangwu2001.github.io/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/</id>
    <published>2023-11-20T15:55:00.000Z</published>
    <updated>2023-11-20T15:55:25.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新版本JDK和SpringBoot特性"><a href="#新版本JDK和SpringBoot特性" class="headerlink" title="新版本JDK和SpringBoot特性"></a>新版本JDK和SpringBoot特性</h1><p>本项目采用<code>JDK17</code>和<code>SpringBoot3</code>，在进行项目开发之前，先要了解<code>JDK9-JDK17</code>的新特性和<code>SpringBoot3</code>的新特性</p><h2 id="JDK9新特性"><a href="#JDK9新特性" class="headerlink" title="JDK9新特性"></a>JDK9新特性</h2><h3 id="jshell交互式工具"><a href="#jshell交互式工具" class="headerlink" title="jshell交互式工具"></a>jshell交互式工具</h3><p><code>JDK9</code>中引入了命令行交互工具<code>jshell</code>，直接可以运行对应<code>Java</code>代码</p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231119233027637.png" alt="image-20231119233027637"></p><h3 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h3><p><code>JDK8</code>及以前将<code>package</code>作为顶级组件，<code>JDK9</code>将模块作为顶级组件</p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231119234445748.png" alt="image-20231119234445748"></p><p>不同模块之间的相互引用问题，可以通过<code>Maven</code>加入依赖的方式引用</p><p>在<code>JDK9</code>之后，可以通过模块化方式引用</p><ol><li>使用<code>module-info.java</code>来申明一个模块，一个模块只能有一个该文件，且该文件在顶层包同目录</li><li>使用<code>exports</code>来申明可以被外部引用的包，可以有多个<code>exports</code>语句<ul><li>一个<code>module</code>中能够被外部调用的包都需要在<code>module-info.java</code>中用<code>exports</code>语句申明<ul><li><code>exports 包名</code></li></ul></li></ul></li><li>使用<code>requires</code>来申明依赖的外部模块，可以有多个<code>requires</code>语句<ul><li>一个<code>module</code>中需要调用外部模块都需要在<code>module-info.java</code>中用<code>requires</code>语句申明<ul><li><code>requires 模块名</code></li></ul></li></ul></li></ol><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231119235341393.png" alt="image-20231119235341393"></p><h2 id="JDK10新特性"><a href="#JDK10新特性" class="headerlink" title="JDK10新特性"></a>JDK10新特性</h2><h3 id="var局部变量推导"><a href="#var局部变量推导" class="headerlink" title="var局部变量推导"></a>var局部变量推导</h3><p>使用var基本要求</p><ul><li>必须能够推导出实际类型</li><li>只能用于局部变量</li></ul><p>该特性一般不推荐使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test1</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        <span class="type">var</span> <span class="variable">test11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        <span class="type">Test2</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK11新特性"><a href="#JDK11新特性" class="headerlink" title="JDK11新特性"></a>JDK11新特性</h2><h3 id="单文件程序"><a href="#单文件程序" class="headerlink" title="单文件程序"></a>单文件程序</h3><p>以前运行<code>.java</code>文件需要：</p><ul><li><code>javac xxx.java</code>编译得到对应的字节码文件<code>xxx.class</code></li><li><code>java xxx.class</code>运行对应java程序</li></ul><p>新特性只需：<code>java xxx.java</code>即可运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JDK11 new property,Single File Program&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120000851511.png" alt="image-20231120000851511"></p><h3 id="shebang脚本"><a href="#shebang脚本" class="headerlink" title="shebang脚本"></a>shebang脚本</h3><ul><li><code>#!</code>符号叫做<code>shebang</code>，音译为<strong>释伴</strong>，即解释伴随行</li><li><code>#!/bin/bash</code>，以此开头的文件，在执行时会实际调用<code>/bin/bash</code>程序来执行</li></ul><p>编写一个非Java文件，文件首行添加shebang语句，在<code>git bash</code>中可以直接执行</p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120001817144.png" alt="image-20231120001817144"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!D:\ProgramTools\java_tools\JDK17\bin\java --source <span class="number">11</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JDK11 new property,Single File Program&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120001952472.png" alt="image-20231120001952472"></p><p>该功能应用场景：用Java语言编写脚本</p><h2 id="JDK14新特性"><a href="#JDK14新特性" class="headerlink" title="JDK14新特性"></a>JDK14新特性</h2><h3 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h3><p>多行字符串：比如<code>json</code>、<code>html</code>、<code>sql</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String json1=<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;name\&quot;:\&quot;张飞\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;age\&quot;:27\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;&quot;</span>;</span><br><span class="line">        <span class="comment">//JDK14新特性：文本块，使得多行字符串定义更美观和可读性</span></span><br><span class="line">        String json2= <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    &quot;name&quot;:&quot;张飞&quot;,</span></span><br><span class="line"><span class="string">                    &quot;age&quot;:27</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(json1);</span><br><span class="line">        System.out.println(json2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="instanceof增强"><a href="#instanceof增强" class="headerlink" title="instanceof增强"></a>instanceof增强</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;we are&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(str1 <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            String str2=(String) str1;</span><br><span class="line">            System.out.println(str2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//JDK14 instanceof写法增强，将判断和赋值写在了一条语句</span></span><br><span class="line">        <span class="keyword">if</span>(str1 <span class="keyword">instanceof</span> String str2)&#123;</span><br><span class="line">            System.out.println(str2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空指针提示"><a href="#空指针提示" class="headerlink" title="空指针提示"></a>空指针提示</h3><p>可以提示空指针异常具体产生的位置和原因</p><p>下面代码在两个不同<code>JDK</code>版本运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">12</span>;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(a+b+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JDK8版本</strong></p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120003842812.png" alt="image-20231120003842812"></p><p><strong>JDK14版本</strong></p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120003753190.png" alt="image-20231120003753190"></p><h2 id="JDK16新特性"><a href="#JDK16新特性" class="headerlink" title="JDK16新特性"></a>JDK16新特性</h2><h3 id="record类"><a href="#record类" class="headerlink" title="record类"></a>record类</h3><ul><li>record是一个final类，初始化后就不能修改属性值</li><li>自动生成toString, hashCode, equals方法</li><li>一般应用场景：数据类，比如<code>MVC</code>机构中的<code>DTO</code>、<code>VO</code>、<code>PO</code>等</li></ul><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120004349675.png" alt="image-20231120004349675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">UserDto</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120004534276.png" alt="image-20231120004534276"></p><h2 id="JDK17新特性"><a href="#JDK17新特性" class="headerlink" title="JDK17新特性"></a>JDK17新特性</h2><h3 id="sealed类"><a href="#sealed类" class="headerlink" title="sealed类"></a>sealed类</h3><p><strong>背景：</strong>类的继承很难管理，使用<code>sealed</code>可以显示管理</p><ul><li>父类如果是<code>sealed</code>类，则其必须至少有一个子类</li><li><code>sealed</code>类的子类，必须是<code>final</code>、<code>sealed</code>、<code>non-sealed</code>之一</li></ul><p>其实实际上没多大用处，只是在如果一个类需要继承其他类，或者一个类需要被其他子类继承，需要强制申明一些关键字，在一定程度上可以避免继承的泛滥</p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120231224546.png" alt="image-20231120231224546"></p><h3 id="Switch增强"><a href="#Switch增强" class="headerlink" title="Switch增强"></a>Switch增强</h3><p>其实没啥用</p><p>下面举个例子简单介绍一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Switch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="number">23F</span>;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> String b)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Sting类型,b=&quot;</span>+b);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Integer b)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Integer类型,b=&quot;</span>+b);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Float b)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Float类型,b=&quot;</span>+b);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;其他类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//switch增强版写法</span></span><br><span class="line">        <span class="keyword">switch</span>(o)&#123;</span><br><span class="line">            <span class="keyword">case</span> String b -&gt; System.out.println(<span class="string">&quot;Sting类型,b=&quot;</span>+b);</span><br><span class="line">            <span class="keyword">case</span> Integer b -&gt; System.out.println(<span class="string">&quot;Integer类型,b=&quot;</span>+b);</span><br><span class="line">            <span class="keyword">case</span> Float b -&gt; System.out.println(<span class="string">&quot;Float类型,b=&quot;</span>+b);</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;其他类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot3新特性"><a href="#SpringBoot3新特性" class="headerlink" title="SpringBoot3新特性"></a>SpringBoot3新特性</h2><h3 id="AOT与JIT介绍"><a href="#AOT与JIT介绍" class="headerlink" title="AOT与JIT介绍"></a>AOT与JIT介绍</h3><p><code>JIT(Just-in-Time，实时编译)</code></p><p><code>AOT（Ahead-of-Time，预编译或提前编译）</code></p><p><strong>AOT的优势</strong></p><ul><li>启动和运行速度快<ul><li>传统<code>SpringBoot</code>空项目启动时间大概是2秒，<code>AOT</code>的启动时间大概是100毫秒</li></ul></li><li>打包体积小</li></ul><p><strong>AOT的缺点</strong></p><ul><li>编译后的程序不支持跨平台</li><li>不支持动态功能，比如AOP</li></ul><p>AOP在正常项目一般用不到，其主要特点是可以将项目打包成exe的模式，在单机应用中可以直接运行，而无需另外的JDK环境</p><h3 id="JIT在高并发场景中的生产问题"><a href="#JIT在高并发场景中的生产问题" class="headerlink" title="JIT在高并发场景中的生产问题"></a>JIT在高并发场景中的生产问题</h3><p>生产问题现象：热点应用重启后，出现业务超时，几分钟后恢复正常，所谓的热点应用只有在并发量超过一定阈值之后才会出现</p><p><strong>原因：</strong><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120233923088.png" alt="image-20231120233923088"></p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120233202709.png" alt="image-20231120233202709" style="zoom: 67%;"></p><p><strong>解决办法</strong>：</p><ul><li><p>预热：初始让程序自动运行热点代码几百次</p></li><li><p>流量控制：启动时小流量，运行几分钟后再放到正常流量</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;新版本JDK和SpringBoot特性&quot;&gt;&lt;a href=&quot;#新版本JDK和SpringBoot特性&quot; class=&quot;headerlink&quot; title=&quot;新版本JDK和SpringBoot特性&quot;&gt;&lt;/a&gt;新版本JDK和SpringBoot特性&lt;/h1&gt;&lt;p&gt;本项</summary>
      
    
    
    
    <category term="12306买票系统" scheme="https://bangwu2001.github.io/categories/12306%E4%B9%B0%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第九章：方法区</title>
    <link href="https://bangwu2001.github.io/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/"/>
    <id>https://bangwu2001.github.io/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/</id>
    <published>2023-11-19T15:17:00.000Z</published>
    <updated>2023-11-19T15:16:08.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><h2 id="栈、堆、方法区的交互关系"><a href="#栈、堆、方法区的交互关系" class="headerlink" title="栈、堆、方法区的交互关系"></a>栈、堆、方法区的交互关系</h2><h3 id="运行时数据区结构图"><a href="#运行时数据区结构图" class="headerlink" title="运行时数据区结构图"></a>运行时数据区结构图</h3><p><strong>从线程共享与否的角度来看</strong></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028093341818.png" alt="image-20231028093341818"></p><h3 id="栈、堆、方法区的交互关系-1"><a href="#栈、堆、方法区的交互关系-1" class="headerlink" title="栈、堆、方法区的交互关系"></a>栈、堆、方法区的交互关系</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028093630090.png" alt="image-20231028093630090"></p><h2 id="方法区的理解"><a href="#方法区的理解" class="headerlink" title="方法区的理解"></a>方法区的理解</h2><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028094033233.png" alt="image-20231028094033233"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028094459160.png" alt="image-20231028094459160"></p><p> <img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028094726523.png" alt="image-20231028094726523"></p><p>定义太多类会导致方法区溢出</p><ul><li>加载大量第三方的jar包</li><li>Tomcat部署工程项目过多</li><li>大量动态生成反射类</li></ul><h3 id="HotSpot中方法区的演进"><a href="#HotSpot中方法区的演进" class="headerlink" title="HotSpot中方法区的演进"></a>HotSpot中方法区的演进</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028095648853.png" alt="image-20231028095648853"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028100036153.png" alt="image-20231028100036153"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028100146185.png" alt="image-20231028100146185"></p><h2 id="设置方法区的大小和OOM"><a href="#设置方法区的大小和OOM" class="headerlink" title="设置方法区的大小和OOM"></a>设置方法区的大小和OOM</h2><h3 id="设置方法区大小"><a href="#设置方法区大小" class="headerlink" title="设置方法区大小"></a>设置方法区大小</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028100524310.png" alt="image-20231028100524310"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028101217453.png" alt="image-20231028101217453"></p><h3 id="如何解决OOM"><a href="#如何解决OOM" class="headerlink" title="如何解决OOM"></a>如何解决OOM</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028101959841.png" alt="image-20231028101959841"></p><h2 id="方法区的内部结构"><a href="#方法区的内部结构" class="headerlink" title="方法区的内部结构"></a>方法区的内部结构</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028102414892.png" alt="image-20231028102414892"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028102616983.png" alt="image-20231028102616983"></p><p>随着JDK版本的更新，方法区内存结构可能会发生变化，上图只代表经典版本</p><h3 id="内部组成信息"><a href="#内部组成信息" class="headerlink" title="内部组成信息"></a>内部组成信息</h3><h4 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h4><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028103150691.png" alt="image-20231028103150691"></p><h4 id="域-Field-信息"><a href="#域-Field-信息" class="headerlink" title="域(Field)信息"></a>域(Field)信息</h4><p>类的成员变量</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028103916522.png" alt="image-20231028103916522"></p><h4 id="方法-Method-信息"><a href="#方法-Method-信息" class="headerlink" title="方法(Method)信息"></a>方法(Method)信息</h4><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028104125782.png" alt="image-20231028104125782"></p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028110729771.png" alt="image-20231028110729771"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111042907.png" alt="image-20231028111042907"></p><h5 id="为什么需要常量池"><a href="#为什么需要常量池" class="headerlink" title="为什么需要常量池"></a>为什么需要常量池</h5><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111153115.png" alt="image-20231028111153115"></p><h5 id="常量池中的信息"><a href="#常量池中的信息" class="headerlink" title="常量池中的信息"></a>常量池中的信息</h5><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111731911.png" alt="image-20231028111731911"></p><h5 id="常量池总结"><a href="#常量池总结" class="headerlink" title="常量池总结"></a>常量池总结</h5><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111837482.png" alt="image-20231028111837482"></p><h5 id="运行时常量池-1"><a href="#运行时常量池-1" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028112002834.png" alt="image-20231028112002834"></p><h3 id="查看-class文件，可以反应方法区结构"><a href="#查看-class文件，可以反应方法区结构" class="headerlink" title="查看.class文件，可以反应方法区结构"></a>查看.class文件，可以反应方法区结构</h3><p><code>javap -v -p xxx.class</code></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="non-final的类变量"><a href="#non-final的类变量" class="headerlink" title="non-final的类变量"></a>non-final的类变量</h4><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028105346681.png" alt="image-20231028105346681"></p><h4 id="final类变量"><a href="#final类变量" class="headerlink" title="final类变量"></a>final类变量</h4><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028105558985.png" alt="image-20231028105558985"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028110557151.png" alt="image-20231028110557151"></p><h2 id="方法区使用举例"><a href="#方法区使用举例" class="headerlink" title="方法区使用举例"></a>方法区使用举例</h2><h2 id="方法区的演进细节"><a href="#方法区的演进细节" class="headerlink" title="方法区的演进细节"></a>方法区的演进细节</h2><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231030124050896.png" alt="image-20231030124050896"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119091844329.png" alt="image-20231119091844329"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119091907686.png" alt="image-20231119091907686"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119091947146.png" alt="image-20231119091947146"></p><h3 id="Q-为什么永久代要被元空间替换？"><a href="#Q-为什么永久代要被元空间替换？" class="headerlink" title="Q:为什么永久代要被元空间替换？"></a>Q:为什么永久代要被元空间替换？</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119092444204.png" alt="image-20231119092444204"></p><h3 id="Q：字符串常量池-StringTable-为什么要调整？"><a href="#Q：字符串常量池-StringTable-为什么要调整？" class="headerlink" title="Q：字符串常量池(StringTable)为什么要调整？"></a>Q：字符串常量池(StringTable)为什么要调整？</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119093345062.png" alt="image-20231119093345062"></p><h3 id="Q：静态变量的存放位置？"><a href="#Q：静态变量的存放位置？" class="headerlink" title="Q：静态变量的存放位置？"></a>Q：静态变量的存放位置？</h3><p>JDK7及其以后的版本的HotSPot虚拟机选择把静态变量与类型在Java语言一端的映射Class对象存放在一起，存储在Java堆中</p><h2 id="方法区的垃圾回收"><a href="#方法区的垃圾回收" class="headerlink" title="方法区的垃圾回收"></a>方法区的垃圾回收</h2><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119094813081.png" alt="image-20231119094813081"></p><h3 id="常量的回收"><a href="#常量的回收" class="headerlink" title="常量的回收"></a>常量的回收</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119095217118.png" alt="image-20231119095217118"></p><h3 id="未使用类的收回"><a href="#未使用类的收回" class="headerlink" title="未使用类的收回"></a>未使用类的收回</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119095416249.png" alt="image-20231119095416249"></p><h2 id="方法去总结"><a href="#方法去总结" class="headerlink" title="方法去总结"></a>方法去总结</h2><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119100152015.png" alt="image-20231119100152015"></p><h2 id="方法区常见面试题"><a href="#方法区常见面试题" class="headerlink" title="方法区常见面试题"></a>方法区常见面试题</h2><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119100523344.png" alt="image-20231119100523344"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119100602356.png" alt="image-20231119100602356"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;方法区&quot;&gt;&lt;a href=&quot;#方法区&quot; class=&quot;headerlink&quot; title=&quot;方法区&quot;&gt;&lt;/a&gt;方法区&lt;/h1&gt;&lt;h2 id=&quot;栈、堆、方法区的交互关系&quot;&gt;&lt;a href=&quot;#栈、堆、方法区的交互关系&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第十一章：直接内存</title>
    <link href="https://bangwu2001.github.io/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/"/>
    <id>https://bangwu2001.github.io/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</id>
    <published>2023-11-19T15:17:00.000Z</published>
    <updated>2023-11-19T15:16:54.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h1><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119144311374.png" alt="image-20231119144311374"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//分配1G内存</span></span><br><span class="line">        System.out.println(<span class="string">&quot;直接分配内存完毕&quot;</span>);</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocateDirect(capacity);</span><br><span class="line">        scanner.next();</span><br><span class="line">        <span class="comment">//释放内存</span></span><br><span class="line">        buffer=<span class="literal">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;释放内存完毕&quot;</span>);</span><br><span class="line">        scanner.next();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放前后占用内存情况：</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119151301334.png" alt="image-20231119151301334"></p><p>IO方式读取过程效率低</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119151646287.png" alt="image-20231119151646287"></p><p>NIO方式读取过程效率更高</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119151744968.png" alt="image-20231119151744968"></p><p>关于IO与NIO的具体细节，后续详细了解</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119152435871.png" alt="image-20231119152435871"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;ByteBuffer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buff</span> <span class="operator">=</span> ByteBuffer.allocateDirect(capacity);</span><br><span class="line">            list.add(buff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119152839490.png" alt="image-20231119152839490"></p><p>总结</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119153508203.png" alt="image-20231119153508203"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;直接内存&quot;&gt;&lt;a href=&quot;#直接内存&quot; class=&quot;headerlink&quot; title=&quot;直接内存&quot;&gt;&lt;/a&gt;直接内存&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第十章：对象的实例化、内存布局与访问定位</title>
    <link href="https://bangwu2001.github.io/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/"/>
    <id>https://bangwu2001.github.io/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</id>
    <published>2023-11-19T15:17:00.000Z</published>
    <updated>2023-11-19T15:16:31.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象的实例化、内存布局与访问定位"><a href="#对象的实例化、内存布局与访问定位" class="headerlink" title="对象的实例化、内存布局与访问定位"></a>对象的实例化、内存布局与访问定位</h1><h2 id="对象的实例化"><a href="#对象的实例化" class="headerlink" title="对象的实例化"></a>对象的实例化</h2><h3 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119101141798.png" alt="image-20231119101141798"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119101518158.png" alt="image-20231119101518158"></p><h3 id="对象创建的方式"><a href="#对象创建的方式" class="headerlink" title="对象创建的方式"></a>对象创建的方式</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119102103099.png" alt="image-20231119102103099"></p><h3 id="对象创建的步骤"><a href="#对象创建的步骤" class="headerlink" title="对象创建的步骤"></a>对象创建的步骤</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103101386.png" alt="image-20231119103101386"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103117152.png" alt="image-20231119103117152"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103325996.png" alt="image-20231119103325996"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103454016.png" alt="image-20231119103454016"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103741536.png" alt="image-20231119103741536"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119104135836.png" alt="image-20231119104135836"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119104255156.png" alt="image-20231119104255156"></p><p>init方法包含了对象属性的显示赋值、代码块赋值和构造器赋值</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119105425026.png" alt="image-20231119105425026"></p><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119105950211.png" alt="image-20231119105950211"></p><h3 id="内存布局示例"><a href="#内存布局示例" class="headerlink" title="内存布局示例"></a>内存布局示例</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110425270.png" alt="image-20231119110425270"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110347569.png" alt="image-20231119110347569"></p><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>Q：JVM是如何通过栈帧中的对象引用访问到其内部的对象实例的呢？</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110820562.png" alt="image-20231119110820562"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110930494.png" alt="image-20231119110930494"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119111019580.png" alt="image-20231119111019580"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119111418366.png" alt="image-20231119111418366"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119111234611.png" alt="image-20231119111234611"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对象的实例化、内存布局与访问定位&quot;&gt;&lt;a href=&quot;#对象的实例化、内存布局与访问定位&quot; class=&quot;headerlink&quot; title=&quot;对象的实例化、内存布局与访问定位&quot;&gt;&lt;/a&gt;对象的实例化、内存布局与访问定位&lt;/h1&gt;&lt;h2 id=&quot;对象的实例化&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>一、项目背景和概述</title>
    <link href="https://bangwu2001.github.io/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
    <id>https://bangwu2001.github.io/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-11-16T15:41:00.000Z</published>
    <updated>2023-11-16T15:41:07.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h1><h2 id="高并发秒杀场景中常见的问题"><a href="#高并发秒杀场景中常见的问题" class="headerlink" title="高并发秒杀场景中常见的问题"></a>高并发秒杀场景中常见的问题</h2><ul><li>秒杀还没开始，页面就崩了</li><li>秒杀刚开始，服务器就崩了</li><li>秒杀结束后，库存崩了(比如商品超卖问题)</li><li>秒杀过程没有问题，但服务器响应很慢</li></ul><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>采用前后端分离架构，前端采用<code>vue</code>，后端采用<code>SpringBoot</code></p><ul><li>千万级流量的大型分布式系统架构设计</li><li>高并发、高性能、高可用场景的解决方案</li></ul><h2 id="项目进度安排"><a href="#项目进度安排" class="headerlink" title="项目进度安排"></a>项目进度安排</h2><ul><li>架构搭建，使用前后端分离架构<ul><li>如何利用<code>SpringBoot</code>和<code>VUE-CLI</code>快速搭建前后端分离项目</li></ul></li><li>业务功能开发，实现基本的选座排队购票功能</li><li>引入高并发技术，实现高性能抢票</li></ul><h2 id="设计到的主要框架及其版本"><a href="#设计到的主要框架及其版本" class="headerlink" title="设计到的主要框架及其版本"></a>设计到的主要框架及其版本</h2><ul><li><p>JDK17</p></li><li><p>SpringBoot 3.0.0</p><ul><li>Spring 3.0.0版本只支持JDK 17及以上</li></ul></li><li><p>SpringCloud Alibaba 2022.0.0.0</p></li><li><p>第三方依赖为适应JDK17，也会做相应版本升级</p></li><li><p>常用的高并发技术解决方案</p><p><img src="/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/image-20231113233116600.png" alt="image-20231113233116600" style="zoom:67%;"></p></li></ul><h1 id="12306系统架构"><a href="#12306系统架构" class="headerlink" title="12306系统架构"></a>12306系统架构</h1><h2 id="生活中常见的高并发场景"><a href="#生活中常见的高并发场景" class="headerlink" title="生活中常见的高并发场景"></a>生活中常见的高并发场景</h2><ul><li>商品秒杀，比如淘宝双11</li><li>微信支付宝等第三方支付平台</li><li>微博突发热点</li><li>用户操作日志</li><li>12306购票平台</li></ul><h2 id="12306系统的特点"><a href="#12306系统的特点" class="headerlink" title="12306系统的特点"></a>12306系统的特点</h2><h3 id="业务复杂度高"><a href="#业务复杂度高" class="headerlink" title="业务复杂度高"></a>业务复杂度高</h3><h4 id="动态库存"><a href="#动态库存" class="headerlink" title="动态库存"></a>动态库存</h4><p>车票途径多站，可能一张座位会对应多张票，你如<code>上海-&gt;南京-&gt;武汉</code>，如果分开卖的话<code>上海-&gt;南京</code>和<code>南京-&gt;武汉</code>两张票</p><h4 id="选座功能"><a href="#选座功能" class="headerlink" title="选座功能"></a>选座功能</h4><p>用户购买的票可以对应不同类型的座位</p><h4 id="线上线下"><a href="#线上线下" class="headerlink" title="线上线下"></a>线上线下</h4><p>票既可以线下购买，也可以线上购买</p><h3 id="高并发设计要求更高"><a href="#高并发设计要求更高" class="headerlink" title="高并发设计要求更高"></a>高并发设计要求更高</h3><h4 id="不停刷票"><a href="#不停刷票" class="headerlink" title="不停刷票"></a>不停刷票</h4><h4 id="绝对不能超卖"><a href="#绝对不能超卖" class="headerlink" title="绝对不能超卖"></a>绝对不能超卖</h4><p>绝不容许一个座位同时卖给多个人，商品系统不用100%保证不超卖，因为可以临时补充库存补救</p><h3 id="如何解决高并发的问题"><a href="#如何解决高并发的问题" class="headerlink" title="如何解决高并发的问题"></a>如何解决高并发的问题</h3><h4 id="提高处理能力：QPS和TPS"><a href="#提高处理能力：QPS和TPS" class="headerlink" title="提高处理能力：QPS和TPS"></a>提高处理能力：QPS和TPS</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">补充：QPS和TPS的介绍</span><br><span class="line">QPS：Queries Per Second</span><br><span class="line">意思是每秒查询率，是一台服务器每秒能够响应的查询次数（数据库中的每秒执行查询sql的次数），显然，这个不够全面，不能描述增删改</span><br><span class="line">QPS = 并发量 / 平均响应时间</span><br><span class="line">并发量 = QPS * 平均响应时间</span><br><span class="line">===============================================================================================================</span><br><span class="line">TPS：Transactions Per Second</span><br><span class="line">即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问</span><br><span class="line">TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</span><br><span class="line">一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。</span><br><span class="line">例如：天猫双十一，一秒完成多少订单</span><br><span class="line">=============================================================================================================</span><br><span class="line">qps每秒接收了多少（流量进来多少）</span><br><span class="line">tps每秒接收后实际能处理多少（我服务端响应了多少）</span><br></pre></td></tr></table></figure><ul><li>堆积硬件</li><li>借用第三方软件，比如Gemfire</li><li>算法：模型、逻辑</li></ul><h4 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h4><ul><li>业务上：验证码、分时段、排队<ul><li>验证码：每个用户破解验证码所用时间不同，从而可以将同一时刻的请求分散开</li><li>分时段：票在一天不同时段放出</li><li>排队：购票等待时间</li></ul></li><li>技术上：限流、异步<ul><li>限流：超过指定数目流量直接快速反馈结果，不会执行后续业务</li><li>异步：请求进来，不会立即处理，会进入队列等待</li></ul></li></ul><h3 id="补充：持续秒杀高并发技术解决方案"><a href="#补充：持续秒杀高并发技术解决方案" class="headerlink" title="补充：持续秒杀高并发技术解决方案"></a>补充：持续秒杀高并发技术解决方案</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul><li>针对静态资源做CDN</li><li>页面静态化</li><li>倒计时&amp;Loading</li><li>使用验证码削峰</li></ul><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><ul><li>微服务-服务拆分</li><li>负载均衡</li><li>限流降级</li><li>缓存</li><li>令牌</li><li>异步处理</li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li>分库：业务分库、读写分离</li><li>分表：横向分表、纵向分表</li><li>冗余设计，反范式，空间换时间</li><li>分布式数据库</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>分时段秒杀</li><li>弹性扩容</li><li>候补+排队</li></ul><h3 id="模型设计和逻辑设计上的优化"><a href="#模型设计和逻辑设计上的优化" class="headerlink" title="模型设计和逻辑设计上的优化"></a>模型设计和逻辑设计上的优化</h3><h4 id="余票查询"><a href="#余票查询" class="headerlink" title="余票查询"></a>余票查询</h4><p>按照车站区间，记录站站余票，提高查询效率</p><p>具体例子如下图所示</p><p><img src="/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/image-20231116225841695.png" alt="image-20231116225841695"></p><h4 id="座位购买"><a href="#座位购买" class="headerlink" title="座位购买"></a>座位购买</h4><p>记录各个座位在对应车站区间的销售详情</p><p>可以借助二进制数据表示，提高效率</p><p>比如：<code>A-E</code>五个车站，共4段区间<code>A-B</code>、<code>B-C</code>、<code>C-D</code>、<code>D-E</code>，即可用4位二进制记录销售详情，比如:<code>1000</code>即代表该座位区间<code>A-B</code>的票已经卖出</p><h3 id="系统功能介绍"><a href="#系统功能介绍" class="headerlink" title="系统功能介绍"></a>系统功能介绍</h3><p> <img src="/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/系统功能.jpg" alt="系统功能" style="zoom:50%;"></p><h3 id="系统微服务模块划分"><a href="#系统微服务模块划分" class="headerlink" title="系统微服务模块划分"></a>系统微服务模块划分</h3><ul><li>gateway 网关模块：路由转发、登录校验</li><li>member 会员模块：会员、乘客、已购买的车票</li><li>business 业务模块：所有的车次数据、余票信息</li><li>batch 跑批模块：所有的定时任务，可通过界面启停</li><li>web 模块：会员相关界面</li><li>admin 模块：管理员相关界面</li></ul><h3 id="系统架构设计"><a href="#系统架构设计" class="headerlink" title="系统架构设计"></a>系统架构设计</h3><p><img src="/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/系统架构.jpg" alt="系统架构" style="zoom:67%;"></p><h3 id="数据库表的设计"><a href="#数据库表的设计" class="headerlink" title="数据库表的设计"></a>数据库表的设计</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目概述&quot;&gt;&lt;a href=&quot;#项目概述&quot; class=&quot;headerlink&quot; title=&quot;项目概述&quot;&gt;&lt;/a&gt;项目概述&lt;/h1&gt;&lt;h2 id=&quot;高并发秒杀场景中常见的问题&quot;&gt;&lt;a href=&quot;#高并发秒杀场景中常见的问题&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="12306买票系统" scheme="https://bangwu2001.github.io/categories/12306%E4%B9%B0%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://bangwu2001.github.io/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/"/>
    <id>https://bangwu2001.github.io/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/</id>
    <published>2023-10-23T14:54:42.000Z</published>
    <updated>2023-11-12T10:57:40.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>快速构建、运行、管理应用的工具</p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="Linux环境安装"><a href="#Linux环境安装" class="headerlink" title="Linux环境安装"></a>Linux环境安装</h3><ul><li>利用<code>VMWare</code>搭建<code>CentOS7</code>虚拟机</li><li>修改网络配置，使用固定<code>IP</code>地址</li><li>利用<code>VMWare</code>镜像和克隆，创建多个虚拟机</li><li><code>windows</code>系统使用<code>xshell</code>工具进行远程连接虚拟机</li><li><code>windows</code>系统使用<code>WinScp</code>工具与虚拟机进行文件传输</li></ul><p>虚拟机搭建和网络配置修改参考之前所写的博客:<a href="https://bangwu2001.github.io/2023/09/07/Linux%E5%9F%BA%E7%A1%80/">Linux安装与网络配置</a></p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>虚拟化容器技术。Docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行 环境，容器之间互相隔离</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018193923036.png" alt="image-20231018193923036"></p><p><a href="https://docs.docker.com/engine/install/centos/">官方文档—安装指南</a></p><h4 id="卸载系统旧版本的docker"><a href="#卸载系统旧版本的docker" class="headerlink" title="卸载系统旧版本的docker"></a>卸载系统旧版本的docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="安装docker-1"><a href="#安装docker-1" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker  </span><br></pre></td></tr></table></figure><h4 id="验证docker是否安装成功"><a href="#验证docker是否安装成功" class="headerlink" title="验证docker是否安装成功"></a>验证docker是否安装成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h4 id="设置docker开机自启动"><a href="#设置docker开机自启动" class="headerlink" title="设置docker开机自启动"></a>设置docker开机自启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h4 id="配置docker镜像加速"><a href="#配置docker镜像加速" class="headerlink" title="配置docker镜像加速"></a>配置docker镜像加速</h4><p>阿里云，容器镜像加速服务</p><ol><li><p>登录阿里云，进入控制台</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194502910.png" alt="image-20231018194502910"></p></li><li><p>进入产品与服务列表</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194551471.png" alt="image-20231018194551471"></p></li><li><p>选择<strong>容器镜像服务</strong></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194644155.png" alt="image-20231018194644155"></p></li><li><p>选择镜像加速器</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194719463.png" alt="image-20231018194719463"></p></li><li><p>选择<code>centos</code>，可以查看对应的加速配置命令</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194823560.png" alt="image-20231018194823560"></p></li><li><p>配置命令</p><p>修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://bfswxim9.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><h3 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h3><p><a href="https://hub.docker.com/">docker hub地址</a></p><p>安装<code>mysql 5.7</code></p><h4 id="下载mysql镜像"><a href="#下载mysql镜像" class="headerlink" title="下载mysql镜像"></a>下载mysql镜像</h4><p><code>sudo docker pull mysql:版本号</code></p><p>比如下载<code>mysql 5.7</code>版本</p><p><code>sudo docker pull mysql:5.7</code></p><p>查看<code>docker</code>内部所有镜像</p><p><code>sudo docker images</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018200105123.png" alt="image-20231018200105123"></p><h4 id="创建实例并启动"><a href="#创建实例并启动" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数说明:</span></span><br><span class="line">--name: 给容器命名</span><br><span class="line">-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql/：将数据文件夹挂载到主机</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root：初始化 root 用户的密码</span><br><span class="line">-d 让容器在后台运行</span><br><span class="line">mysql:5.7:镜像名</span><br></pre></td></tr></table></figure><p><strong>镜像命名规范</strong></p><ul><li><p>镜像名称一般分两部分组成：[repository]:[tag]</p><ul><li>其中repository就是镜像名</li><li>tag是镜像的版本</li></ul></li><li><p>在没有指定tag时，默认是latest，代表最新版本的镜像</p></li></ul><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023194311421.png" alt="image-20231023194311421"></p><p><code>docker ps</code>查看运行的容器实例信息</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018201140545.png" alt="image-20231018201140545"></p><h5 id="补充：docker容器文件挂载与端口映射"><a href="#补充：docker容器文件挂载与端口映射" class="headerlink" title="补充：docker容器文件挂载与端口映射"></a>补充：docker容器文件挂载与端口映射</h5><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018201529294.png" alt="image-20231018201529294"></p><ul><li><p><code>docker run</code>会启动一个对应的容器，每个容器都是一个完整的运行环境(对应一个完整的Linux环境)</p></li><li><p><code>docker exec -it 容器名 对应文件或者命令</code>：进入对应容器，与对应容器进行交互</p></li></ul><p>如下图所示：mysql:5.7 的 <code>/bin/bash</code>下的目录结构可以看出其相当于是一个完整的<code>Linux</code>环境</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018201844533.png" alt="image-20231018201844533"></p><ul><li><code>exit</code>可以直接退出对应容器</li><li>文件挂载<ul><li>类似与快捷方式，讲<code>Linux</code>系统中的文件与<code>容器</code>中的文件关联起来，这样可以直接在<code>Linux</code>系统上可以看到<code>mysql</code>的配置文件、数据文件和日志文件</li><li><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018202741744.png" alt="image-20231018202741744"></li></ul></li></ul><h4 id="修改mysql配置文件"><a href="#修改mysql配置文件" class="headerlink" title="修改mysql配置文件"></a>修改mysql配置文件</h4><p><code>vi /mydata/mysql/conf/my.cnf</code></p><p>写入如下内容</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init<span class="built_in">_</span>connect=&#x27;SET collation<span class="built_in">_</span>connection = utf8<span class="built_in">_</span>unicode<span class="built_in">_</span>ci&#x27; </span><br><span class="line">init<span class="built_in">_</span>connect=&#x27;SET NAMES utf8&#x27; </span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8<span class="built_in">_</span>unicode<span class="built_in">_</span>ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><p>写入之后保存，重启mysql容器</p><p><code>docker restart 容器名</code>：重启对应容器</p><h4 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h4><h5 id="方法一：通过容器命令行连接"><a href="#方法一：通过容器命令行连接" class="headerlink" title="方法一：通过容器命令行连接"></a>方法一：通过容器命令行连接</h5><p><code>docker exec -it mysql mysql -uroot -proot</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018205320588.png" alt="image-20231018205320588"></p><h5 id="方法二：远程访问"><a href="#方法二：远程访问" class="headerlink" title="方法二：远程访问"></a>方法二：远程访问</h5><p>如果失败，需要先设置远程用户访问权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option;</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure><p><code>windows</code>远程访问</p><p><code>mysql -h ip地址 -P 端口号 -u 用户名 -p 密码</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018205700141.png" alt="image-20231018205700141"></p><h5 id="方法三：利用可视化工具Navicat连接测试"><a href="#方法三：利用可视化工具Navicat连接测试" class="headerlink" title="方法三：利用可视化工具Navicat连接测试"></a>方法三：利用可视化工具<code>Navicat</code>连接测试</h5><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212807013.png" alt="image-20231018212807013" style="zoom:80%;"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212819188.png" alt="image-20231018212819188" style="zoom:80%;"></p><h3 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h3><p>安装<code>redis 6.2.13</code></p><p>新版本redis默认自动持久化</p><h4 id="下载redis镜像"><a href="#下载redis镜像" class="headerlink" title="下载redis镜像"></a>下载redis镜像</h4><p><code>docker pull redis:6.2.13</code></p><h4 id="创建实例并启动-1"><a href="#创建实例并启动-1" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line">touch /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis:6.2.13 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h4 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h4><h5 id="方式一：通过容器命令行连接"><a href="#方式一：通过容器命令行连接" class="headerlink" title="方式一：通过容器命令行连接"></a>方式一：通过容器命令行连接</h5><p><code>docker exec -it redis redis-cli</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018211411410.png" alt="image-20231018211411410"></p><h5 id="方式二：通过其他主机远程访问"><a href="#方式二：通过其他主机远程访问" class="headerlink" title="方式二：通过其他主机远程访问"></a>方式二：通过其他主机远程访问</h5><p><code>redis-cli -h ip地址</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018211754523.png" alt="image-20231018211754523"></p><h5 id="补充—Redis-Desktop-Manager-Redis可视化工具安装"><a href="#补充—Redis-Desktop-Manager-Redis可视化工具安装" class="headerlink" title="补充—Redis Desktop Manager(Redis可视化工具安装)"></a>补充—Redis Desktop Manager(Redis可视化工具安装)</h5><p><a href="https://blog.csdn.net/JacaCao/article/details/106088148">安装教程和下载地址参考博客</a></p><p>连接示例</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212554795.png" alt="image-20231018212554795" style="zoom:80%;">可以查看数据据库内容</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212623835.png" alt="image-20231018212623835" style="zoom:80%;"></p><h2 id="Docker快速入门"><a href="#Docker快速入门" class="headerlink" title="Docker快速入门"></a>Docker快速入门</h2><h3 id="容器和镜像"><a href="#容器和镜像" class="headerlink" title="容器和镜像"></a>容器和镜像</h3><p>当我们利用Docker安装应用时，Docker会自动搜索并下载应用<strong>镜像（image</strong>）<strong>。镜像不仅包含应用本身，还包含应用运行所需要的环境、配置、系统函数库。Docker会在运行镜像时创建一个隔离环境，称为</strong>容器（<strong>container</strong>）。</p><p><strong>镜像仓库</strong>：存储和管理镜像的平台，Docker官方维护了一个公共仓库：<a href="https://hub.docker.com/">Docker Hub</a>。</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023192849389.png" alt="image-20231023192849389"></p><h2 id="Docker基础"><a href="#Docker基础" class="headerlink" title="Docker基础"></a>Docker基础</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><p>Docker最常见的命令就是操作镜像、容器的命令，详见<a href="https://docs.docker.com/">官方文档</a></p><h4 id="Docker常见命令概览"><a href="#Docker常见命令概览" class="headerlink" title="Docker常见命令概览"></a><strong>Docker常见命令概览</strong></h4><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023195219760.png" alt="image-20231023195219760"></p><h4 id="Doker常见命令列表"><a href="#Doker常见命令列表" class="headerlink" title="Doker常见命令列表"></a><strong>Doker常见命令列表</strong></h4><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">文档地址</th></tr></thead><tbody><tr><td style="text-align:center">docker pull</td><td style="text-align:center">拉取镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td></tr><tr><td style="text-align:center">docker push</td><td style="text-align:center">推送镜像到DockerRegistry</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td></tr><tr><td style="text-align:center">docker images</td><td style="text-align:center">查看本地镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td></tr><tr><td style="text-align:center">docker rmi</td><td style="text-align:center">删除本地镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td></tr><tr><td style="text-align:center">docker run</td><td style="text-align:center">创建并运行容器（不能重复创建）</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td></tr><tr><td style="text-align:center">docker stop</td><td style="text-align:center">停止指定容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td></tr><tr><td style="text-align:center">docker start</td><td style="text-align:center">启动指定容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td></tr><tr><td style="text-align:center">docker restart</td><td style="text-align:center">重新启动容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td></tr><tr><td style="text-align:center">docker rm</td><td style="text-align:center">删除指定容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docker rm</a></td></tr><tr><td style="text-align:center">docker ps</td><td style="text-align:center">查看容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td></tr><tr><td style="text-align:center">docker logs</td><td style="text-align:center">查看容器运行日志</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td></tr><tr><td style="text-align:center">docker exec</td><td style="text-align:center">进入容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td></tr><tr><td style="text-align:center">docker save</td><td style="text-align:center">保存镜像到本地压缩文件</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td></tr><tr><td style="text-align:center">docker load</td><td style="text-align:center">加载本地压缩文件到镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td></tr><tr><td style="text-align:center">docker inspect</td><td style="text-align:center">查看容器详细信息</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td></tr></tbody></table></div><h4 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h4><p>可以给常用的Docker命令起别名，便于我们访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br><span class="line">内容如下：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bashrc</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User specific aliases and <span class="built_in">functions</span></span></span><br><span class="line"></span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line">alias dps=&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class="line">alias dis=&#x27;docker images&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Source global definitions</span></span><br><span class="line">if [ -f /etc/bashrc ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>然后，执行命令使别名生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /root/.bashrc</span><br></pre></td></tr></table></figure><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p><strong>数据卷（volume</strong>）是一个虚拟目录，是<strong>容器内目录</strong>与宿主机目录之间映射的桥梁。</p><p>一定程度上类似于快捷方式，将容器内的文件挂载在宿主机上，这样可以通过对宿主机上对应文件修改达到改变容器内文件的目的</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023203149684.png" alt="image-20231023203149684"></p><h4 id="数据卷的相关命令"><a href="#数据卷的相关命令" class="headerlink" title="数据卷的相关命令"></a>数据卷的相关命令</h4><p>这些命令一般不会使用，容器文件挂载操作一般在容器创建时就已经完成</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">文档地址</th></tr></thead><tbody><tr><td style="text-align:center">docker volume create</td><td style="text-align:center">创建数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td></tr><tr><td style="text-align:center">docker volume ls</td><td style="text-align:center">查看所有数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docker volume ls</a></td></tr><tr><td style="text-align:center">docker volume rm</td><td style="text-align:center">删除指定数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume rm</a></td></tr><tr><td style="text-align:center">docker volume inspect</td><td style="text-align:center">查看某个数据卷的详情</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docker volume inspect</a></td></tr><tr><td style="text-align:center">docker volume prune</td><td style="text-align:center">清除数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td></tr></tbody></table></div><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023205944546.png" alt="image-20231023205944546"></p><h4 id="实例-利用Nginx容器部署静态资源"><a href="#实例-利用Nginx容器部署静态资源" class="headerlink" title="实例:利用Nginx容器部署静态资源"></a>实例:利用Nginx容器部署静态资源</h4><p>需求：</p><ul><li><p>创建Nginx容器，修改nginx容器内的html目录下的index.html文件内容</p></li><li><p>将静态资源部署到nginx的html目录</p></li></ul><p>操作</p><ul><li><p>在执行docker run命令时，使用<code>-v 数据卷:容器内目录</code>可以完成数据卷挂载</p></li><li><p>当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷</p></li></ul><p><strong>创建容器并挂载</strong></p><p><code>docker run -d --name nginx -v html:/usr/share/nginx/html -p 80:80 nginx</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023210627910.png" alt="image-20231023210627910"></p><p><strong>查看数据卷及其位置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls  #查看所有数据卷</span><br><span class="line">docker volume inspect html #查看数据卷html的详细信息，包括在宿主机的位置</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023210839704.png" alt="image-20231023210839704"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023210925071.png" alt="image-20231023210925071"></p><p><strong>修改html目录下文件，即可实现nginx静态部署</strong></p><p>直接访问<code>ip地址/</code>即可访问静态资源</p><p><strong>查看某个容器是否被挂载，以及挂载的数据卷信息</strong></p><p><code>docker inspect 容器名</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023212353220.png" alt="image-20231023212353220" style="zoom:80%;"></p><h4 id="实例-本地目录的挂载"><a href="#实例-本地目录的挂载" class="headerlink" title="实例:本地目录的挂载"></a>实例:本地目录的挂载</h4><ul><li>在执行docker run命令时，使用 <strong>-v</strong> <strong>本地目录</strong> <strong>:</strong> <strong>容器内目录</strong> 可以完成本地目录挂载</li><li>本地目录必须以“<strong>/</strong>”或 “<strong>./</strong>“ 开头，如果直接以名称开头，会被识别为数据卷而非本地目录<ul><li><code>-v mysql : /var/lib/mysql</code>会被识别为一个数据卷叫mysql</li><li><code>-v ./mysql : /var/lib/mysql</code> 会被识别为当前目录下的mysql目录</li></ul></li></ul><h3 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h3><p> 镜像就是包含了应用程序、程序运行的系统函数库、运行配置等文件的文件包。构建镜像的过程其实就是把上述文件打包的过程。</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023212959096.png" alt="image-20231023212959096"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023213143862.png" alt="image-20231023213143862"></p><h4 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h4><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerfile帮我们构建镜像</p><p><strong>DockerFile常用指令</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">说明</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center"><strong>FROM</strong></td><td style="text-align:center">指定基础镜像</td><td style="text-align:center">FROM centos:6</td></tr><tr><td style="text-align:center"><strong>ENV</strong></td><td style="text-align:center">设置环境变量，可在后面指令使用</td><td style="text-align:center">ENV key value</td></tr><tr><td style="text-align:center"><strong>COPY</strong></td><td style="text-align:center">拷贝本地文件到镜像的指定目录</td><td style="text-align:center">COPY ./xx.jar /tmp/app.jar</td></tr><tr><td style="text-align:center"><strong>RUN</strong></td><td style="text-align:center">执行Linux的shell命令，一般是安装过程的命令</td><td style="text-align:center">RUN yum install gcc</td></tr><tr><td style="text-align:center"><strong>EXPOSE</strong></td><td style="text-align:center">指定容器运行时监听的端口，是给镜像使用者看的</td><td style="text-align:center">EXPOSE 8080</td></tr><tr><td style="text-align:center"><strong>ENTRYPOINT</strong></td><td style="text-align:center">镜像中应用的启动命令，容器运行时调用</td><td style="text-align:center">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table></div><p>详细信息，可以参考<a href="https://docs.docker.com/engine/reference/builder/">官方文档</a></p><h4 id="制作Jar包的运行镜像"><a href="#制作Jar包的运行镜像" class="headerlink" title="制作Jar包的运行镜像"></a>制作Jar包的运行镜像</h4><p>我们可以基于Ubuntu基础镜像，利用Dockerfile描述镜像结构，也可以直接基于JDK为基础镜像，省略前面的步骤</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023214453287.png" alt="image-20231023214453287"></p><p>当编写好了Dockerfile，可以利用下面命令来构建镜像</p><p><code>docker build -t myImage:1.0 .</code></p><ul><li><p><code>-t</code>：是给镜像起名，格式依然是repository:tag的格式，不指定tag时，默认为latest</p></li><li><p><code>.</code>：是指定Dockerfile所在目录，如果就在当前目录，则指定为”.”</p></li></ul><p><strong>构建自定义镜像</strong></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023215948740.png" alt="image-20231023215948740"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220024629.png" alt="image-20231023220024629"></p><p><strong>启动并运行镜像</strong></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220115685.png" alt="image-20231023220115685"></p><p><strong>查看容器运行日志</strong></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220201265.png" alt="image-20231023220201265"></p><p>浏览器访问<code>ip地址:8080</code></p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>默认情况下，所有容器都是以bridge方式连接到Docker的一个虚拟网桥上</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220925309.png" alt="image-20231023220925309"></p><p>虽然各个容器之间网络联通，可以相互通信， 但是容器一旦重启，网络地址是动态分配的</p><p>所以需要自定义网络才可以通过<strong>容器名</strong>互相访问</p><p><code>Docker</code>常见的网络操作命令如下</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">文档地址</th></tr></thead><tbody><tr><td style="text-align:center">docker network create</td><td style="text-align:center">创建一个网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td style="text-align:center">docker network ls</td><td style="text-align:center">查看所有网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docker network ls</a></td></tr><tr><td style="text-align:center">docker network rm</td><td style="text-align:center">删除指定网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docker network rm</a></td></tr><tr><td style="text-align:center">docker network prune</td><td style="text-align:center">清除未使用的网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docker network prune</a></td></tr><tr><td style="text-align:center">docker network connect</td><td style="text-align:center">使指定容器连接加入某网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docker network connect</a></td></tr><tr><td style="text-align:center">docker network disconnect</td><td style="text-align:center">使指定容器连接离开某网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td style="text-align:center">docker network inspect</td><td style="text-align:center">查看网络详细信息</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table></div><p>更多详细信息，查看<a href="https://docs.docker.com/engine/reference/commandline/network/">官方文档</a></p><p><code>run 命令</code>中可以通过<code>--network 网络名</code>让创建的容器加入对应的网络</p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="部署Java后端应用"><a href="#部署Java后端应用" class="headerlink" title="部署Java后端应用"></a>部署Java后端应用</h3><h4 id="编写对应的Dockerfile文件"><a href="#编写对应的Dockerfile文件" class="headerlink" title="编写对应的Dockerfile文件"></a>编写对应的<code>Dockerfile</code>文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hm-service.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h4><p><code>maven package</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094249542.png" alt="image-20231024094249542"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094332057.png" alt="image-20231024094332057"></p><h4 id="上传服务器"><a href="#上传服务器" class="headerlink" title="上传服务器"></a>上传服务器</h4><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094728816.png" alt="image-20231024094728816"></p><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094853550.png" alt="image-20231024094853550"></p><h4 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h4><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024095030218.png" alt="image-20231024095030218"></p><h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><p><code>docker logs -f 容器名</code>：持续更新显示容器日志</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024095112971.png" alt="image-20231024095112971"></p><h4 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h4><p><code>192.168.80.130:8080/search/list</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024104121270.png" alt="image-20231024104121270"></p><h4 id="注意网络的配置"><a href="#注意网络的配置" class="headerlink" title="注意网络的配置"></a>注意网络的配置</h4><ul><li>自己创建一个网络</li><li>将<code>mysql</code>容器加入该网络</li><li>创建启动后端项目时，将后端项目加入<code>mysql</code>同一网络</li></ul><h3 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h3><p><strong>前端项目上传服务器</strong></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024105040433.png" alt="image-20231024105040433"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024105105757.png" alt="image-20231024105105757"></p><h4 id="容器的创建和启动"><a href="#容器的创建和启动" class="headerlink" title="容器的创建和启动"></a>容器的创建和启动</h4><ul><li>nginx配置文件的挂载</li><li>nginx静态资源文件的挂载</li><li>nginx端口的映射</li></ul><p>文件挂载参考<a href="https://hub.docker.com/_/nginx"><code>docker hub</code>官方文档</a></p><p>创建启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx \</span><br><span class="line">-p 18080:18080 \</span><br><span class="line">-p 18081:18081 \</span><br><span class="line">-v /home/front/html:/usr/share/nginx/html \</span><br><span class="line">-v /home/front/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">--network demo \</span><br><span class="line">nginx:latest</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024105916690.png" alt="image-20231024105916690"></p><h4 id="访问项目-1"><a href="#访问项目-1" class="headerlink" title="访问项目"></a>访问项目</h4><p><code>192.168.80.130:18080</code>和<code>192.168.80.130:18081</code></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>前端、后端和mysql所在容器必须要处于同一网络中，才能进行通信</p><h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><p><strong>Docker Compose</strong>通过一个单独的<strong>docker-compose.yml</strong> 模板文件（YAML 格式）来定义一组相关联的应用容器，帮助我们实现多个相互关联的Docker容器的快速部署。</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024111846289.png" alt="image-20231024111846289"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024112120132.png" alt="image-20231024112120132"></p><h4 id="docker-compose命令格式"><a href="#docker-compose命令格式" class="headerlink" title="docker compose命令格式"></a>docker compose命令格式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024112524685.png" alt="image-20231024112524685"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;p&gt;快速构建、运行、管理应用的工具&lt;/p&gt;
&lt;h2 id=&quot;环境安装&quot;&gt;&lt;a href=&quot;#环境安装&quot; clas</summary>
      
    
    
    
    <category term="Docker" scheme="https://bangwu2001.github.io/categories/Docker/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Plus</title>
    <link href="https://bangwu2001.github.io/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/"/>
    <id>https://bangwu2001.github.io/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/</id>
    <published>2023-10-23T14:54:42.000Z</published>
    <updated>2023-10-23T15:00:41.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h1><p>mybatis-plus学习笔记，<a href="https://www.bilibili.com/video/BV1Xu411A7tL/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">参考B站视频</a></p><p><a href="https://b11et3un53m.feishu.cn/wiki/PsyawI04ei2FQykqfcPcmd7Dnsc">参考博客</a></p><p><a href="https://baomidou.com/">Mybatis-Plus官方文档</a></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="使用mybatis-plus的基础步骤"><a href="#使用mybatis-plus的基础步骤" class="headerlink" title="使用mybatis-plus的基础步骤"></a>使用mybatis-plus的基础步骤</h3><ol><li><p>引入mybatisPlus的Maven依赖，代替原始Mybatis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义Mapper接口继承自BaseMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承BaseMapper接口，传入数据库对应实体类的泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单元测试即可直接使用</p><p><code>mapper</code>存在一系列增删改查的方法可以直接调用</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021195840724.png" alt="image-20231021195840724"></p></li></ol><p><strong>小插曲</strong></p><p>测试如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryByIds</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一直报错:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java: 找不到符号   符号:   方法 of(long,long,long,long)   位置: 接口 java.util.List</span><br></pre></td></tr></table></figure><p>原因：</p><p><code>List.of()</code>是<code>JDK9</code>之后才有的版本</p><p>解决方法：提升<code>java</code>编译的<code>JDK</code>版本</p><p>修改如下位置(注意：无论修改<code>ProjectStructure</code>还是<code>pom.xml</code>中的<code>java</code>版本均无效)</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021200120027.png" alt="image-20231021200120027" style="zoom:80%;"></p><h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><p><strong>MyBatisPlus</strong>通过扫描实体类，并基于反射获取实体类信息作为数据库表信息。</p><h4 id="基本约定"><a href="#基本约定" class="headerlink" title="基本约定"></a>基本约定</h4><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021200634159.png" alt="image-20231021200634159"></p><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><ul><li><strong>@TableName</strong>：用来指定表名</li><li><strong>@TableId</strong>：用来指定表中的主键字段信息</li><li><strong>@TableField</strong>：用来指定表中的普通字段信息</li></ul><p>注意的点：</p><p>当实体类和数据库不满足既定的约定的话，就必须要使用对应的注解</p><ul><li>对于<code>@TableId</code>是用来指定主键字段，对于数据库中主键存在一些属性(比如自增)，所以注解中有时也要注明主键类型<ul><li>IdType枚举：<ul><li>AUTO：数据库自增长</li><li>INPUT：通过set方法自行输入</li><li>ASSIGN_ID：分配 ID，接口IdentifierGenerator的方法nextId来生成id，默认实现类为DefaultIdentifierGenerator雪花算法</li></ul></li><li>默认采用雪花算法</li></ul></li><li>使用@TableField的常见场景：<ul><li>成员变量名与数据库字段名不一致</li><li>成员变量名以is开头，且是布尔值<ul><li>布尔变量反射时会去掉is</li></ul></li><li>成员变量名与数据库关键字冲突<ul><li>使用转义字符进行说明</li></ul></li><li>成员变量不是数据库字段<ul><li>使用<code>exist</code>说明</li></ul></li></ul></li></ul><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021202134848.png" alt="image-20231021202134848"></p><h3 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h3><p><strong>MyBatisPlus</strong>的配置项继承了MyBatis原生配置和一些自己特有的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">type-aliases-package: com.itheima.mp.domain.po # 别名扫描包</span><br><span class="line">mapper-locations: &quot;classpath*:/mapper/**/*.xml&quot; # Mapper.xml文件地址，默认值</span><br><span class="line">configuration:</span><br><span class="line">map-underscore-to-camel-case: true # 是否开启下划线和驼峰的映射</span><br><span class="line">cache-enabled: false # 是否开启二级缓存</span><br><span class="line"> global-config:</span><br><span class="line">db-config:</span><br><span class="line">id-type: assign_id # id为雪花算法生成</span><br><span class="line">update-strategy: not_null # 更新策略：只更新非空字段</span><br></pre></td></tr></table></figure><p>具体可参考官方文档：<a href="https://www.baomidou.com/pages/56bac0/">使用配置 </a><a href="https://www.baomidou.com/pages/56bac0/">| MyBatis-Plus (baomidou.com)</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>Mybatis-Plus</code>使用的基本流程</p><ul><li>引入起步依赖</li><li>自定义Mapper，继承自<code>BaseMapper</code></li><li>在实体类上添加注解申明信息</li><li>在<code>application.yml</code>中根据需要添加配置</li></ul><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p><code>Mybatis-Plus</code>支持各种复杂的<code>where</code>条件，可以满足日常开发的各种需求</p><p>下图中方法参数中的<code>wrapper</code>其实就是条件构造器</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021205520443.png" alt="image-20231021205520443"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021205627495.png" alt="image-20231021205627495" style="zoom:80%;"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021205819231.png" alt="image-20231021205819231" style="zoom:80%;"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><strong>基于QueryWrapper的查询</strong></p><p>①查询出名字中带o的，存款大于等于1000元的人的id、username、info、balance字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造查询条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;username&quot;</span>,<span class="string">&quot;info&quot;</span>,<span class="string">&quot;balance&quot;</span>)</span><br><span class="line">        .like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">        .ge(<span class="string">&quot;balance&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②更新用户名为jack的用户的余额为2000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateByQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造更新数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setBalance(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//2.构造更新条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .eq(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="comment">//3.更新</span></span><br><span class="line">    userMapper.update(user,wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基于UpdateWrapper的更新</strong></p><p>需求：更新id为1,2,4的用户的余额，扣200</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造upadteWrapper</span></span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">4L</span>);</span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">        .setSql(<span class="string">&quot;balance=balance-200&quot;</span>)</span><br><span class="line">        .in(<span class="string">&quot;id&quot;</span>,ids);</span><br><span class="line">    <span class="comment">//2.更细</span></span><br><span class="line">    userMapper.update(<span class="literal">null</span>,wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基于LambdaQueryWrapper</strong>的查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLambdaQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .select(User::getId,User::getUsername,User::getInfo,User::getBalance)</span><br><span class="line">        .like(User::getUsername,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">        .ge(User::getBalance,<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>QueryWrapper和LambdaQueryWrapper通常用来构建select、delete、update的where条件部分</li><li>UpdateWrapper和LambdaUpdateWrapper通常只有在set语句比较特殊才使用</li><li>尽量使用LambdaQueryWrapper和LambdaUpdateWrapper，避免硬编码</li></ul><h3 id="自定义SQL"><a href="#自定义SQL" class="headerlink" title="自定义SQL"></a>自定义SQL</h3><p>我们可以利用MyBatisPlus的Wrapper来构建复杂的Where条件，然后自己定义SQL语句中剩下的部分。</p><p>需求：将id在指定范围的用户（例如1、2、4 ）的余额扣减指定值</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h4><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021214903600.png" alt="image-20231021214903600"></p><ul><li>直接写SQL语句，<code>where</code>条件语句比较繁琐</li><li>全部用<code>Wrapper</code>来完成，不符合业务逻辑规范(参数往往只允许在<code>Service</code>层去定义)</li></ul><h4 id="自定义SQL流程"><a href="#自定义SQL流程" class="headerlink" title="自定义SQL流程"></a>自定义SQL流程</h4><p>①基于Wrapper构建where条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; ids = List.of(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">4L</span>);</span><br><span class="line"><span class="type">int</span> amount=-<span class="number">20000</span>;</span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">    .in(User::getId,ids);</span><br><span class="line">userMapper.updateBalanceById(lambdaQueryWrapper,amount);</span><br></pre></td></tr></table></figure><p>②在mapper方法参数中用Param注解声明wrapper变量名称，必须是ew</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateBalanceById</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span>LambdaQueryWrapper&lt;User&gt; wrapper,<span class="meta">@Param(&quot;amount&quot;)</span> <span class="type">int</span> amount)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③自定义SQL，并使用Wrapper条件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBalanceById&quot;</span>&gt;</span></span><br><span class="line">    Update user SET balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h3><p><code>Mybatis-Plus</code>还提供了<code>Service</code>层的接口，有一系列可用的增删改查方法</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022110437139.png" alt="image-20231022110437139" style="zoom:80%;"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022105850973.png" alt="image-20231022105850973" style="zoom:80%;"></p><h4 id="Mybatis-Plus-Service接口使用流程"><a href="#Mybatis-Plus-Service接口使用流程" class="headerlink" title="Mybatis-Plus Service接口使用流程"></a>Mybatis-Plus Service接口使用流程</h4><ol><li><p>自定义Service接口继承IService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义Service实现类，实现自定义接口并继承ServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="实例一：基于Restful风格实现下面的接口"><a href="#实例一：基于Restful风格实现下面的接口" class="headerlink" title="实例一：基于Restful风格实现下面的接口"></a>实例一：基于Restful风格实现下面的接口</h4><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022113118176.png" alt="image-20231022113118176"></p><h5 id="引入对应依赖"><a href="#引入对应依赖" class="headerlink" title="引入对应依赖"></a>引入对应依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="swagger配置信息"><a href="#swagger配置信息" class="headerlink" title="swagger配置信息"></a>swagger配置信息</h5><p>本实例借助<code>Swagger</code>实现接口功能的在线测试</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">用户管理接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;用户管理接口文档&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">bang@bang.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">bang</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.bang.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.itheima.mp.controller</span></span><br></pre></td></tr></table></figure><h5 id="创建对应的实体类"><a href="#创建对应的实体类" class="headerlink" title="创建对应的实体类"></a>创建对应的实体类</h5><ul><li><code>userFormDTO</code>：代表新增用户的表单</li><li><code>UserVO</code>:代表查询的返回结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户表单实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFormDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;注册手机号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息，JSON风格&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户VO实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;使用状态（1正常 2冻结）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建响应结果实体类"><a href="#创建响应结果实体类" class="headerlink" title="创建响应结果实体类"></a>创建响应结果实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//响应数据</span></span><br><span class="line">    <span class="keyword">private</span> Integer status; <span class="comment">//响应状态码</span></span><br><span class="line">    <span class="keyword">private</span> String message; <span class="comment">//响应信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="按照restful风格编写Controller接口方法"><a href="#按照restful风格编写Controller接口方法" class="headerlink" title="按照restful风格编写Controller接口方法"></a>按照<code>restful</code>风格编写<code>Controller</code>接口方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;用户管理接口&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//构造函数注入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> UserFormDTO userFormDTO)</span>&#123;</span><br><span class="line">        <span class="comment">//1.DTO对象转换成PO对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.copyProperties(userFormDTO, User.class);</span><br><span class="line">        <span class="comment">//2.新增</span></span><br><span class="line">        userService.save(user);</span><br><span class="line"></span><br><span class="line">        <span class="type">JsonResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">200</span>,<span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        userService.removeById(id);</span><br><span class="line">        JsonResult&lt;UserVO&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">200</span>,<span class="string">&quot;删除用户成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="comment">//1.查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">        <span class="comment">//对象类型转换</span></span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(user,UserVO.class);</span><br><span class="line">        JsonResult&lt;UserVO&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(userVO,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id批量查询</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id批量查询接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;UserVO&gt;&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id集合&quot;)</span> <span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        <span class="comment">//1.查询用户集合</span></span><br><span class="line">        List&lt;User&gt; userList = userService.listByIds(ids);</span><br><span class="line">        <span class="comment">//2.类型转换</span></span><br><span class="line">        List&lt;UserVO&gt; userVOList = BeanUtil.copyToList(userList, UserVO.class);</span><br><span class="line">        JsonResult&lt;List&lt;UserVO&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOList,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id扣减余额</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id扣减余额接口&quot;)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;/deduction/&#123;money&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">reductionBalanceById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id,<span class="meta">@ApiParam(&quot;扣减金额&quot;)</span> <span class="meta">@PathVariable(&quot;money&quot;)</span> Integer money)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">r</span> <span class="operator">=</span> userService.reductionBalanceById(id,money);</span><br><span class="line">        JsonResult&lt;UserVO&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(r) result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">200</span>,<span class="string">&quot;扣减余额成功&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">500</span>,<span class="string">&quot;扣减余额失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于需求5，删减指定用户金额，业务逻辑无法借助`Mybatis-plus现提供的方法，所以需要自定义方法</p><p><code>UserMapper</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateBalanceById</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span>LambdaQueryWrapper&lt;User&gt; wrapper,<span class="meta">@Param(&quot;amount&quot;)</span> <span class="type">int</span> amount)</span>;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBalanceById&quot;</span>&gt;</span></span><br><span class="line">        Update user SET balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>IUserService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reductionBalanceById</span><span class="params">(Long id,Integer money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IUserService</code>接口实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reductionBalanceById</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询用户余额</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getBalance()&lt;money)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.定义wrapper</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(User::getId,id);</span><br><span class="line">        userMapper.updateBalanceById(lambdaQueryWrapper,money);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>localhost:8080/doc.html</code>即可测试</p><h4 id="实例二：IService的Lambda查询"><a href="#实例二：IService的Lambda查询" class="headerlink" title="实例二：IService的Lambda查询"></a>实例二：IService的Lambda查询</h4><p>需求：实现一个根据复杂条件查询用户的接口，查询条件如下：</p><ul><li><p>name：用户名关键字，可以为空</p></li><li><p>status：用户状态，可以为空</p></li><li><p>minBalance：最小余额，可以为空</p></li><li><p>maxBalance：最大余额，可以为空</p></li></ul><p>上述功能其实就是多条件筛选，如果采用传统自己编写<code>SQL</code>语句的话，会非常繁琐</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022162757090.png" alt="image-20231022162757090" style="zoom:80%;"></p><p>如果采用<code>IService</code>提供的<code>lambdaQuery</code>的话会非常简洁</p><p>在<code>IUserServiceImpl</code>中实现如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUsersByCondition</span><span class="params">(String name, Integer status, Integer minBalance, Integer maxBalance)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lambdaQuery().like(name!=<span class="literal">null</span>,User::getUsername,name)</span><br><span class="line">        .eq(status!=<span class="literal">null</span>,User::getStatus,status)</span><br><span class="line">        .gt(minBalance!=<span class="literal">null</span>,User::getBalance,minBalance)</span><br><span class="line">        .lt(maxBalance!=<span class="literal">null</span>,User::getBalance,maxBalance)</span><br><span class="line">        .list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserController</code>添加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据条件进行用户查询</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据条件查询用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;UserVO&gt;&gt; <span class="title function_">queryUsers</span><span class="params">(UserQuery userQuery)</span>&#123;</span><br><span class="line">        <span class="comment">//1.查询</span></span><br><span class="line">        List&lt;User&gt; userList = userService.queryUsersByCondition(userQuery.getName(), userQuery.getStatus()</span><br><span class="line">                , userQuery.getMinBalance(), userQuery.getMaxBalance());</span><br><span class="line">        <span class="comment">//2.实体类型转换</span></span><br><span class="line">        List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(userList, UserVO.class);</span><br><span class="line">        JsonResult&lt;List&lt;UserVO&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOS, <span class="number">200</span>, <span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="案例三-IService的Lambda更新"><a href="#案例三-IService的Lambda更新" class="headerlink" title="案例三:IService的Lambda更新"></a>案例三:IService的Lambda更新</h4><p>需求：改造根据id修改用户余额的接口，要求如下</p><p>①完成对用户状态校验</p><p>②完成对用户余额校验</p><p>③如果扣减后余额为0，则将用户status修改为冻结状态（2）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reductionBalanceById</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询用户余额</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getBalance()&lt;money)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.计算余额,余额为零则需要将用户账户冻结</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remainBalance</span> <span class="operator">=</span> user.getBalance()-money;</span><br><span class="line">        lambdaUpdate().set(User::getBalance,remainBalance)</span><br><span class="line">                .set(remainBalance==<span class="number">0</span>,User::getStatus,<span class="number">2</span>)</span><br><span class="line">                .eq(User::getId,id)</span><br><span class="line">                .eq(User::getBalance,user.getBalance()) <span class="comment">//添加乐观锁，提高并发安全性</span></span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title=" "></a> </h4><h4 id="案例四：Iservice批量新增"><a href="#案例四：Iservice批量新增" class="headerlink" title="案例四：Iservice批量新增"></a>案例四：Iservice批量新增</h4><p>需求：批量插入10万条用户数据，并作出对比：</p><ul><li><p>普通for循环插入</p></li><li><p>IService的批量插入</p></li><li><p>开启<a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-performance-extensions.html">rewriteBatchedStatements</a><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-performance-extensions.html">=true</a>参数</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试循环插入所需时间</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveByFor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">        userService.save(buildUser(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.printf(<span class="string">&quot;耗费时间:&quot;</span>+(end-start)+<span class="string">&quot; ms&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试批次插入所需时间</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveByBatch</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">        list.add(buildUser(i));</span><br><span class="line">        <span class="comment">//每1000条批次插入一次</span></span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">1000</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            userService.saveBatch(list);</span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.printf(<span class="string">&quot;耗费时间:&quot;</span>+(end-start)+<span class="string">&quot; ms&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环插入所需时间</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184037735.png" alt="image-20231022184037735"></p><p>批次插入所需时间</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184051514.png" alt="image-20231022184051514"></p><p>开启<code>rewriteBatchedStatements</code>参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: jdbc:mysql://localhost:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184434795.png" alt="image-20231022184434795"></p><p><strong>结论</strong></p><p>批处理方案：</p><ul><li><p>普通for循环逐条插入速度极差，不推荐</p></li><li><p>MP的批量新增，基于预编译的批处理，性能不错</p></li><li><p>配置jdbc参数，开rewriteBatchedStatements，性能最好</p></li></ul><h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><p><code>Mybatis-plus</code>使用流程</p><ul><li>定义数据库对应的实体类</li><li>定义<code>mapper</code>接口并继承自<code>BaseMapper</code></li><li>定义<code>xxService</code>接口并继承自<code>IService</code></li><li>定义<code>xxService</code>实现类，并继承自<code>ServiceImpl</code></li></ul><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184909209.png" alt="image-20231022184909209" style="zoom:80%;"></p><p><code>Mybatis-Plus</code>提供了这些代码的自动生成，<a href="https://baomidou.com/pages/ba5b24/#%E5%8A%9F%E8%83%BD">官方文档</a></p><p>利用<code>MybatisPlus</code>插件来生成对应代码</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185434944.png" alt="image-20231022185434944" style="zoom:80%;"></p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185933343.png" alt="image-20231022185933343"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185940369.png" alt="image-20231022185940369"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185915708.png" alt="image-20231022185915708"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185949249.png" alt="image-20231022185949249"></p><h3 id="静态工具"><a href="#静态工具" class="headerlink" title="静态工具"></a>静态工具</h3><p>静态工具中的方法与<code>IService</code>中的方法比较相似，其由于是静态的，不用创建出对象即可调用；但是需要传入数据库对应实体类的<code>class</code>(泛型)</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022202619592.png" alt="image-20231022202619592"></p><h4 id="案例：静态工具查询"><a href="#案例：静态工具查询" class="headerlink" title="案例：静态工具查询"></a>案例：静态工具查询</h4><p>需求：</p><p>①改造根据id查询用户的接口，查询用户的同时，查询出用户对应的所有地址</p><p>②改造根据id批量查询用户的接口，查询用户的同时，查询出用户对应的所有地址</p><p>③实现根据用户id查询收货地址功能，需要验证用户状态，冻结用户抛出异常（练习）</p><p>上次需求的实现如果按照常规实现方式时，就会出现<strong>循环依赖</strong>，<code>UserService</code>中会注入<code>AddressService</code>，<code>AddressService</code>中也会注入<code>UserService</code></p><p>此时如借助静态工具，则无需相互注入，解决循环依赖问题</p><p><strong>创建地址数据表VO类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;收货地址VO&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressVO</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;省&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;市&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;县/区&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;联系人&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contact;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否是默认 1默认 0否&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;备注&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String notes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改写UserVO,新增地址属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户VO实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;使用状态（1正常 2冻结）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;收货地址列表&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AddressVO&gt; addresss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="根据Id查询单个用户信息及其收货地址"><a href="#根据Id查询单个用户信息及其收货地址" class="headerlink" title="根据Id查询单个用户信息及其收货地址"></a>根据Id查询单个用户信息及其收货地址</h5><p><strong>改写UserController</strong>中的<code>queryUserById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询用户接口&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="comment">//        //1.查询用户</span></span><br><span class="line">    <span class="comment">//        User user = userService.getById(id);</span></span><br><span class="line">    <span class="comment">//        //对象类型转换</span></span><br><span class="line">    <span class="comment">//        UserVO userVO = BeanUtil.copyProperties(user,UserVO.class);</span></span><br><span class="line">    <span class="comment">//        JsonResult&lt;UserVO&gt; result = new JsonResult&lt;UserVO&gt;(userVO,200,&quot;查询成功&quot;);</span></span><br><span class="line">    <span class="comment">//        return result;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> userService.queryUserAndAddressById(id);</span><br><span class="line">    <span class="keyword">if</span>(userVO==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="literal">null</span>,<span class="number">600</span>,<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVO,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增IUserService</strong>中的<code>queryUserAndAddressById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserVO <span class="title function_">queryUserAndAddressById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p><strong>新增UserServiceImpl</strong>中的<code>queryUserAndAddressById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserVO <span class="title function_">queryUserAndAddressById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//用户不存在或者用户账户被冻结</span></span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getStatus()==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.用户对象转换</span></span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line">    List&lt;Address&gt; addressList = Db.lambdaQuery(Address.class)</span><br><span class="line">        .eq(Address::getUserId, id)</span><br><span class="line">        .list();</span><br><span class="line">    <span class="comment">//3.地址对象转换</span></span><br><span class="line">    <span class="keyword">if</span>(CollUtil.isNotEmpty(addressList))&#123;</span><br><span class="line">        List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addressList, AddressVO.class);</span><br><span class="line">        userVO.setAddresses(addressVOS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据id列表查询多个用户信息及其收货地址"><a href="#根据id列表查询多个用户信息及其收货地址" class="headerlink" title="根据id列表查询多个用户信息及其收货地址"></a>根据id列表查询多个用户信息及其收货地址</h5><p><strong>改写UserController</strong>中的<code>queryUserByIds</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id批量查询</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id批量查询接口&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;UserVO&gt;&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id集合&quot;)</span> <span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    <span class="comment">//        //1.查询用户集合</span></span><br><span class="line">    <span class="comment">//        List&lt;User&gt; userList = userService.listByIds(ids);</span></span><br><span class="line">    <span class="comment">//        //2.类型转换</span></span><br><span class="line">    <span class="comment">//        List&lt;UserVO&gt; userVOList = BeanUtil.copyToList(userList, UserVO.class);</span></span><br><span class="line">    <span class="comment">//        JsonResult&lt;List&lt;UserVO&gt;&gt; result = new JsonResult&lt;&gt;(userVOList,200,&quot;查询成功&quot;);</span></span><br><span class="line">    <span class="comment">//        return result;</span></span><br><span class="line"></span><br><span class="line">    List&lt;UserVO&gt; userVOS = userService.listUserAndAddressByIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(userVOS==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="literal">null</span>,<span class="number">600</span>,<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOS,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增IUserService</strong>中的<code>queryUserAndAddressByIds</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserVO&gt; <span class="title function_">listUserAndAddressByIds</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p><strong>新增UserServiceImpl</strong>中的<code>queryUserAndAddressByIds</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">listUserAndAddressByIds</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">//1.根据id查询用户</span></span><br><span class="line">    List&lt;User&gt; userList = listByIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(CollUtil.isEmpty(userList))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户id查出所有地址</span></span><br><span class="line">    <span class="comment">//一次性查出所有id比for循环多次查询效率要搞</span></span><br><span class="line">    <span class="comment">//时间主要在于数据库连接通信上</span></span><br><span class="line">    List&lt;Address&gt; addressList = Db.lambdaQuery(Address.class)</span><br><span class="line">        .in(Address::getUserId, ids)</span><br><span class="line">        .list();</span><br><span class="line"></span><br><span class="line">    List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(userList, UserVO.class);</span><br><span class="line">    <span class="keyword">if</span>(CollUtil.isNotEmpty(addressList))&#123;</span><br><span class="line">        List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addressList, AddressVO.class);</span><br><span class="line">        <span class="comment">//按照用户id进行分组</span></span><br><span class="line">        Map&lt;Long, List&lt;AddressVO&gt;&gt; map = addressVOS.stream().collect(Collectors.groupingBy(AddressVO::getUserId));</span><br><span class="line">        <span class="comment">//将用户与其对应地址对应起来</span></span><br><span class="line">        <span class="keyword">for</span> (UserVO userVO : userVOS) &#123;</span><br><span class="line">            userVO.setAddresses(map.get(userVO.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userVOS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//        //用户类型转换</span></span><br><span class="line">    <span class="comment">//        List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(userList, UserVO.class);</span></span><br><span class="line">    <span class="comment">//        //2.查询对应收货地址</span></span><br><span class="line">    <span class="comment">//        for (UserVO userVO : userVOS) &#123;</span></span><br><span class="line">    <span class="comment">//            List&lt;Address&gt; addressList = Db.lambdaQuery(Address.class)</span></span><br><span class="line">    <span class="comment">//                    .eq(Address::getUserId, userVO.getId())</span></span><br><span class="line">    <span class="comment">//                    .list();</span></span><br><span class="line">    <span class="comment">//            //转换地址类型</span></span><br><span class="line">    <span class="comment">//            if(CollUtil.isNotEmpty(addressList))&#123;</span></span><br><span class="line">    <span class="comment">//                List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addressList, AddressVO.class);</span></span><br><span class="line">    <span class="comment">//                userVO.setAddresses(addressVOS);</span></span><br><span class="line">    <span class="comment">//            &#125;</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//        return userVOS;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p><strong>逻辑删除</strong>就是基于代码逻辑模拟删除效果，但并不会真正删除数据。思路如下：</p><ul><li><p>在表中添加一个字段标记数据是否被删除</p></li><li><p>当删除数据时把标记置为1</p></li><li><p>查询时只查询标记为0的数据</p></li></ul><p>背景:淘宝中的购物订单模块，用户点击订单删除按钮，本地会消失，但是实际上数据库中该数据并未被删除，应为对于商家而言，订单数据比较重要；此时采用的就是<strong>逻辑删除</strong>逻辑，用户查询时不会查询该数据，但该数据在数据库中仍然存在</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022213309968.png" alt="image-20231022213309968"></p><p><strong>MybatisPlus</strong>提供了逻辑删除功能，无需改变方法调用的方式，而是在底层帮我们自动修改CRUD的语句。我们要做的就是在application.yaml文件中配置逻辑删除的字段名称和值即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">global-config:</span><br><span class="line">db-config:</span><br><span class="line">logic-delete-field: flag # 全局逻辑删除的实体字段名，字段类型可以是boolean、integer</span><br><span class="line">logic-delete-value: 1 # 逻辑已删除值(默认为 1)</span><br><span class="line">logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>逻辑删除本身也有自己的问题，比如：</p><ul><li><p>会导致数据库表垃圾数据越来越多，影响查询效率</p></li><li><p>SQL中全都需要对逻辑删除字段做判断，影响查询效率</p></li></ul><p>因此，我不太推荐采用逻辑删除功能，如果数据不能删除，可以采用把数据迁移到其它表的办法。</p><h3 id="枚举处理器"><a href="#枚举处理器" class="headerlink" title="枚举处理器"></a>枚举处理器</h3><p><code>Java</code>中的枚举类型与<code>数据库整数</code>类型之间的转换问题</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022215018724.png" alt="image-20231022215018724" style="zoom:80%;"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022214852226.png" alt="image-20231022214852226" style="zoom:80%;"></p><h5 id="实现PO类中的枚举变量与数据库字段的转换"><a href="#实现PO类中的枚举变量与数据库字段的转换" class="headerlink" title="实现PO类中的枚举变量与数据库字段的转换"></a>实现<code>PO</code>类中的枚举变量与数据库字段的转换</h5><p>①给枚举中的与数据库对应value值添加@EnumValue注解</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022215238486.png" alt="image-20231022215238486"></p><p>②在配置文件中配置统一的枚举处理器，实现类型转换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">configuration:</span><br><span class="line">default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span><br></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p><strong>定义Status字段对应的枚举类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    Normal(<span class="number">1</span>,<span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>,<span class="string">&quot;冻结&quot;</span>);</span><br><span class="line">    <span class="comment">//通过注解与数据库字段关联起来</span></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件中定义Mybatis枚举处理器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span><br></pre></td></tr></table></figure><p><strong>将UserPO和UserVO类中的Status属性改成枚举类型</strong></p><p><strong>枚举类型属性返回值的更改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    Normal(<span class="number">1</span>,<span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>,<span class="string">&quot;冻结&quot;</span>);</span><br><span class="line">    <span class="comment">//通过注解与数据库字段关联起来</span></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="comment">//通过注解@JsonValue将该属性作为枚举的返回值</span></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022220514144.png" alt="image-20231022220514144"></p><h3 id="JSON处理器"><a href="#JSON处理器" class="headerlink" title="JSON处理器"></a>JSON处理器</h3><p><code>Java</code>数据类型与<code>数据库中Json</code>数据类型的转换</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022221135194.png" alt="image-20231022221135194" style="zoom:80%;"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022221311719.png" alt="image-20231022221311719"></p><p><strong>Json处理器使用流程</strong></p><ul><li>在VO/PO实体类的对应属性上添加<code>typeHandler</code>属性，让对应处理器生效</li><li>在实体类的<code>@TableName</code>注解中开启<code>autoResultMap</code>，对象嵌套过程中的自动映射</li></ul><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p><strong>创建数据库Json字段对应的实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改实体类User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;,autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;`username`&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 详细信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JacksonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> UserInfo info;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用状态（1正常 2冻结）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> UserStatus status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更改VO实体类</strong></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022222341097.png" alt="image-20231022222341097" style="zoom:80%;"></p><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><p>MyBatisPlus基于MyBatis的Interceptor实现了一个基础拦截器，并在内部保存了MyBatisPlus的内置拦截器的集合</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022222800205.png" alt="image-20231022222800205"></p><p>MyBatisPlus提供的内置拦截器有下面这些</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022222545775.png" alt="image-20231022222545775"></p><p>其中最常用的是<strong>分页插件</strong></p><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><h4 id="分页插件的配置"><a href="#分页插件的配置" class="headerlink" title="分页插件的配置"></a>分页插件的配置</h4><p>首先，要在配置类中注册MyBatisPlus的核心插件，同时添加分页插件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.初始化核心插件</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加分页插件</span></span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">pageInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>();</span><br><span class="line">        pageInterceptor.setMaxLimit(<span class="number">1000L</span>); <span class="comment">//设置分页上限</span></span><br><span class="line">        <span class="comment">//加入核心插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(pageInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页API的使用"><a href="#分页API的使用" class="headerlink" title="分页API的使用"></a>分页API的使用</h4><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022223335020.png" alt="image-20231022223335020"></p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试分页插件的使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.查询</span></span><br><span class="line">    <span class="type">int</span> pageNo=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> pageSize=<span class="number">5</span>;</span><br><span class="line">    <span class="comment">//1.1分页参数</span></span><br><span class="line">    Page&lt;User&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line">    <span class="comment">//1.2分页排序参数,通过OrderItem来指定按照某个字段升序(true)或者降序(false)</span></span><br><span class="line">    page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;balance&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">    <span class="comment">//1.3分页查询</span></span><br><span class="line">    Page&lt;User&gt; p = userService.page(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.数据总数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total=&quot;</span>+p.getTotal());</span><br><span class="line">    <span class="comment">//3.总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages=&quot;</span>+p.getPages());</span><br><span class="line">    <span class="comment">//4.分页数据</span></span><br><span class="line">    List&lt;User&gt; records = page.getRecords();</span><br><span class="line">    records.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用分页实体"><a href="#通用分页实体" class="headerlink" title="通用分页实体"></a>通用分页实体</h3><h4 id="实例：简单分页查询"><a href="#实例：简单分页查询" class="headerlink" title="实例：简单分页查询"></a>实例：简单分页查询</h4><p>需求：遵循下面的接口规范，编写一个UserController接口，实现User的分页查询</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231023101326507.png" alt="image-20231023101326507" style="zoom:80%;"></p><p>返回值类</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231023101526797.png" alt="image-20231023101526797"></p><p><strong>创建通用的查询参数实体</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;查询通用实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页大小&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否升序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isAsc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用户查询继承与查询实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">PageQuery</span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建通用的查询结果实体</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;通用查询结果实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;数据总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页面总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;当前页面数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service层编写对应方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> QueryDTO&lt;UserVO&gt; <span class="title function_">queryUsersByPage</span><span class="params">(UserQuery query)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="comment">//1.1构造分页查询条件</span></span><br><span class="line">    Page&lt;User&gt; page = Page.of(query.getPageNo(), query.getPageSize());</span><br><span class="line">    <span class="keyword">if</span>(StrUtil.isNotEmpty(query.getSortBy()))&#123;</span><br><span class="line">        page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(query.getSortBy(),query.isAsc()));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;update_time&quot;</span>,<span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.2构造条件查询</span></span><br><span class="line">    Page&lt;User&gt; pages = lambdaQuery().like(name != <span class="literal">null</span>, User::getUsername, name)</span><br><span class="line">        .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">        .page(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.构造结构实体实例</span></span><br><span class="line">    QueryDTO&lt;UserVO&gt; userVOPageDTO = <span class="keyword">new</span> <span class="title class_">QueryDTO</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(pages.getRecords(), UserVO.class);</span><br><span class="line">    userVOPageDTO.setTotal(pages.getTotal());</span><br><span class="line">    userVOPageDTO.setPages(pages.getPages());</span><br><span class="line">    userVOPageDTO.setData(userVOS);</span><br><span class="line">    <span class="keyword">return</span> userVOPageDTO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写对应的Controller层方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据条件进行分页查询</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据条件分页查询&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;QueryDTO&lt;UserVO&gt;&gt; <span class="title function_">queryUsersByPage</span><span class="params">(UserQuery userQuery)</span>&#123;</span><br><span class="line">    QueryDTO&lt;UserVO&gt; userVOPageDTO = userService.queryUsersByPage(userQuery);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOPageDTO,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化：函数封装"><a href="#优化：函数封装" class="headerlink" title="优化：函数封装"></a>优化：函数封装</h4><p><code>service</code>层中<code>page</code>分页条件的构建和根据查询结果构造分页查询结果实体的代码与业务无关，可以单独抽取出来进行封装</p><ul><li>在PageQuery中定义方法，将PageQuery对象转为MyBatisPlus中的Page对象</li><li>在PageDTO中定义方法，将MyBatisPlus中的Page结果转为PageDTO结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;查询通用实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页大小&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否升序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isAsc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  &lt;PO&gt; Page&lt;PO&gt; <span class="title function_">toMybatisPage</span><span class="params">()</span>&#123;</span><br><span class="line">        Page&lt;PO&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotEmpty(sortBy))&#123;</span><br><span class="line">            page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(sortBy,isAsc));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;update_time&quot;</span>,<span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;通用查询结果实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;数据总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页面总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;当前页面数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;PO,VO&gt; QueryDTO&lt;VO&gt; <span class="title function_">toPageDTO</span><span class="params">(Page&lt;PO&gt; pages,Class&lt;VO&gt; clazz)</span>&#123;</span><br><span class="line">        QueryDTO&lt;VO&gt; userVOPageDTO = <span class="keyword">new</span> <span class="title class_">QueryDTO</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;VO&gt; userVOS = BeanUtil.copyToList(pages.getRecords(),clazz);</span><br><span class="line">        userVOPageDTO.setTotal(pages.getTotal());</span><br><span class="line">        userVOPageDTO.setPages(pages.getPages());</span><br><span class="line">        userVOPageDTO.setData(userVOS);</span><br><span class="line">        <span class="keyword">return</span> userVOPageDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service层方法改写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> QueryDTO&lt;UserVO&gt; <span class="title function_">queryUsersByPage</span><span class="params">(UserQuery query)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="comment">//1.1构造分页查询条件</span></span><br><span class="line">    Page&lt;User&gt; page = query.toMybatisPage();</span><br><span class="line">    <span class="comment">//1.2构造条件查询</span></span><br><span class="line">    Page&lt;User&gt; pages = lambdaQuery().like(name != <span class="literal">null</span>, User::getUsername, name)</span><br><span class="line">        .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">        .page(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.构造结构实体实例</span></span><br><span class="line">    <span class="keyword">return</span> QueryDTO.toPageDTO(pages, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis-Plus&quot;&gt;&lt;a href=&quot;#Mybatis-Plus&quot; class=&quot;headerlink&quot; title=&quot;Mybatis-Plus&quot;&gt;&lt;/a&gt;Mybatis-Plus&lt;/h1&gt;&lt;p&gt;mybatis-plus学习笔记，&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="Mybatis-Plus" scheme="https://bangwu2001.github.io/categories/Mybatis-Plus/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第七章：本地方法栈</title>
    <link href="https://bangwu2001.github.io/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/"/>
    <id>https://bangwu2001.github.io/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</id>
    <published>2023-10-21T15:56:00.000Z</published>
    <updated>2023-10-21T15:56:19.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><h2 id="本地方法栈概述"><a href="#本地方法栈概述" class="headerlink" title="本地方法栈概述"></a>本地方法栈概述</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/image-20230831224231912.png" alt="image-20230831224231912"></p><p>  <img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/image-20230831224433183.png" alt="image-20230831224433183"></p><p> <img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/image-20230831224544933.png" alt="image-20230831224544933"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;本地方法栈&quot;&gt;&lt;a href=&quot;#本地方法栈&quot; class=&quot;headerlink&quot; title=&quot;本地方法栈&quot;&gt;&lt;/a&gt;本地方法栈&lt;/h1&gt;&lt;h2 id=&quot;本地方法栈概述&quot;&gt;&lt;a href=&quot;#本地方法栈概述&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第八章：堆</title>
    <link href="https://bangwu2001.github.io/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/"/>
    <id>https://bangwu2001.github.io/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/</id>
    <published>2023-10-21T15:56:00.000Z</published>
    <updated>2023-10-21T15:55:17.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="堆的核心概述"><a href="#堆的核心概述" class="headerlink" title="堆的核心概述"></a>堆的核心概述</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831230658229.png" alt="image-20230831230658229"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831231038739.png" alt="image-20230831231038739"></p><p>  每个Java程序代表一个进程，每个进程会创建一个单独的JVM示例，所以每个线程会有一个专门的堆区，而一个进程中的所有线程则共享一个堆区</p><p>查看堆空间的工具：<code>JDK</code>安装目录的<code>bin</code>目录下的<code>jvisualvm.exe</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831233155362.png" alt="image-20230831233155362"></p><p><strong>软件示例</strong></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831233310566.png" alt="image-20230831233310566"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831233613831.png" alt="image-20230831233613831"></p><p> 栈、堆、方法区之间的关系示例</p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831234101927.png" alt="image-20230831234101927"></p><h2 id="堆的内存细分"><a href="#堆的内存细分" class="headerlink" title="堆的内存细分"></a>堆的内存细分</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831234709080.png" alt="image-20230831234709080"></p><p> <strong>JDK7版本堆内存结构</strong></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230903232946649.png" alt="image-20230903232946649" style="zoom:67%;"></p><p> <strong>JDK8堆内存结构</strong></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230903233627749.png" alt="image-20230903233627749" style="zoom:67%;"></p><h2 id="设置堆内存大小和OOM"><a href="#设置堆内存大小和OOM" class="headerlink" title="设置堆内存大小和OOM"></a>设置堆内存大小和OOM</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230903234114120.png" alt="image-20230903234114120"></p><h3 id="设置和查看堆空间大小"><a href="#设置和查看堆空间大小" class="headerlink" title="设置和查看堆空间大小"></a>设置和查看堆空间大小</h3><p><strong>设置堆空间大小参数</strong></p><ul><li><code>-Xms</code> 用来设置堆空间(年轻代+老年代)的初始内存大小<ul><li><code>-X</code>为<code>jvm</code>运行参数</li><li><code>ms</code>:<code>memory start</code></li></ul></li><li><code>-Xmx</code> 用来设置堆空间(年轻代+老年代)的最大内存大小</li></ul><p><strong>默认堆空间大小</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.jvm.ch8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSizeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//返回Java虚拟机堆内存总量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">initialMemory</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory() /<span class="number">1024</span> /<span class="number">1024</span>;</span><br><span class="line">        <span class="comment">//返回Java虚拟机试图使用的最大堆内存总量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">maxMemory</span> <span class="operator">=</span> Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-Xms: &quot;</span>+initialMemory+<span class="string">&quot;M&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-Xmx: &quot;</span>+maxMemory+<span class="string">&quot;M&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;系统内存大小:&quot;</span>+initialMemory*<span class="number">64</span>/<span class="number">1024</span>+<span class="string">&quot;G&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;系统内存大小:&quot;</span>+maxMemory*<span class="number">4</span>/<span class="number">1024</span>+<span class="string">&quot;G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>设置查看Java进程内存空间</strong></p><p>设置java程序运行内存空间</p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904000217587.png" alt="image-20230904000217587"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001306935.png" alt="image-20230904001306935"></p><p>查看当前进程的堆空间大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回Java虚拟机堆内存总量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">initialMemory</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory() /<span class="number">1024</span> /<span class="number">1024</span>;</span><br><span class="line"><span class="comment">//返回Java虚拟机试图使用的最大堆内存总量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">maxMemory</span> <span class="operator">=</span> Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-Xms: &quot;</span>+initialMemory+<span class="string">&quot;M&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;-Xmx: &quot;</span>+maxMemory+<span class="string">&quot;M&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001325508.png" alt="image-20230904001325508"></p><p>Q:为什么手动设置空间大小为100M，而打印却只有96M</p><p>查看当前进程堆空间的构成方式一</p><ul><li><p>获取当前进程的PID：<code>jps</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001350362.png" alt="image-20230904001350362"></p></li><li><p>根据进程PID查看当前进程堆空间的构成</p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001404255.png" alt="image-20230904001404255"></p></li></ul><p>原因：新生代中的S0和S1区的空间大小只会算一个</p><p>查看当前进程堆空间的构成方式二</p><p>添加<code>jvm</code>运行参数：<code>-XX:+PrintGCDetails</code></p><p>会在控制台打印如下信息</p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001810246.png" alt="image-20230904001810246"></p><h3 id="OutOfMemory-OOM-举例"><a href="#OutOfMemory-OOM-举例" class="headerlink" title="OutOfMemory(OOM)举例"></a>OutOfMemory(OOM)举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.jvm.ch8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapOOM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Object&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            lists.add(<span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1024</span>*<span class="number">1024</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    Animal(<span class="type">int</span> size)&#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904002554837.png" alt="image-20230904002554837"></p><h2 id="年轻代与老年代"><a href="#年轻代与老年代" class="headerlink" title="年轻代与老年代"></a>年轻代与老年代</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230909230316493.png" alt="image-20230909230316493"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021100233287.png" alt="image-20231021100233287"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021101645835.png" alt="image-20231021101645835"></p><p>默认虽然是<code>8:1:1</code>,但是实际情况存在偏差，要想真正的成为<code>8:1:1</code>，则必须要手动显示这只<code>XX:SurvivorRatio=8</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021102417326.png" alt="image-20231021102417326"></p><p>随着对象存活周期的增长，会从一个区转移到另一个区</p><p><strong>实例</strong>  设置<code>NewRatio-4</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021100715037.png" alt="image-20231021100715037"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021100846994.png" alt="image-20231021100846994"></p><p>一般不会更改此参数的设置，如果程序中明确生命周期长的对象比较多，可以将老年区的空间调大一些</p><p><strong>实例</strong>  如何查看<code>jvm</code>的一些参数值</p><p><code>jinfo -flag 参数值 pid</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021101449223.png" alt="image-20231021101449223"></p><h2 id="对象分配过程图解"><a href="#对象分配过程图解" class="headerlink" title="对象分配过程图解"></a>对象分配过程图解</h2><h3 id="对象分配过程概述"><a href="#对象分配过程概述" class="headerlink" title="对象分配过程概述"></a>对象分配过程概述</h3><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021102852030.png" alt="image-20231021102852030"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021104324473.png" alt="image-20231021104324473"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021104458947.png" alt="image-20231021104458947"></p><p>一般对象创建的过程：</p><ol><li>新创建的对象会存放在<code>Eden区</code>，<code>Eden</code>满了之后会触发<code>Young/Minor GC</code>，没有引用对象会被销毁，存活对象会存放在<code>to区</code>，<code>Survivor 0</code>和<code>Survivor 1</code>哪一个此时刻为空，则为<code>to区</code>，同时每个对象会添加一个属性<code>age</code></li><li>下一轮次，<code>eden</code>触发<code>GC</code>之后，执行1中同样操作，于此同时，还会对<code>from</code>区的对象进行<code>GC</code>，<code>from区</code>存活的对象同样也要移动到<code>to区</code>，在整个过程中如果某个对象的<code>age</code>达到了阈值，则会被移入老年区</li><li><code>survivor 0</code>和<code>survivor 1</code>哪一个为空则哪一个为<code>to区</code>，另一个则为<code>from</code>区</li></ol><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021105502296.png" alt="image-20231021105502296"></p><h3 id="对象分配的特殊情况"><a href="#对象分配的特殊情况" class="headerlink" title="对象分配的特殊情况"></a>对象分配的特殊情况</h3><h4 id="对象分配整体流程"><a href="#对象分配整体流程" class="headerlink" title="对象分配整体流程"></a>对象分配整体流程</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021105741662.png" alt="image-20231021105741662"></p><h4 id="常用调优工具"><a href="#常用调优工具" class="headerlink" title="常用调优工具"></a>常用调优工具</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021111912975.png" alt="image-20231021111912975"></p><h2 id="Minor-GC、Major-GC与Full-GC"><a href="#Minor-GC、Major-GC与Full-GC" class="headerlink" title="Minor GC、Major GC与Full GC"></a>Minor GC、Major GC与Full GC</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021142808781.png" alt="image-20231021142808781"></p><h3 id="最简单的分代式GC策略的触发条件"><a href="#最简单的分代式GC策略的触发条件" class="headerlink" title="最简单的分代式GC策略的触发条件"></a>最简单的分代式GC策略的触发条件</h3><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021162334160.png" alt="image-20231021162334160"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021162803064.png" alt="image-20231021162803064"></p><p>  <img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021162843135.png" alt="image-20231021162843135"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021163048893.png" alt="image-20231021163048893"></p><h2 id="堆空间分代思想"><a href="#堆空间分代思想" class="headerlink" title="堆空间分代思想"></a>堆空间分代思想</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021163924381.png" alt="image-20231021163924381"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021164034381.png" alt="image-20231021164034381"></p><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021164659893.png" alt="image-20231021164659893"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021164818236.png" alt="image-20231021164818236"></p><h2 id="为对象分配内存：TLAB"><a href="#为对象分配内存：TLAB" class="headerlink" title="为对象分配内存：TLAB"></a>为对象分配内存：TLAB</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021170441095.png" alt="image-20231021170441095"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021170817967.png" alt="image-20231021170817967"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021171010101.png" alt="image-20231021171010101"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021171322334.png" alt="image-20231021171322334"></p><h2 id="总结：堆空间的参数设置"><a href="#总结：堆空间的参数设置" class="headerlink" title="总结：堆空间的参数设置"></a>总结：堆空间的参数设置</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021171705040.png" alt="image-20231021171705040"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021172740415.png" alt="image-20231021172740415"></p><p> <img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021172834062.png" alt="image-20231021172834062"></p><h2 id="堆是分配对象存储的唯一选择吗？"><a href="#堆是分配对象存储的唯一选择吗？" class="headerlink" title="堆是分配对象存储的唯一选择吗？"></a>堆是分配对象存储的唯一选择吗？</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021173409671.png" alt="image-20231021173409671"></p><h3 id="逃逸分析：概述"><a href="#逃逸分析：概述" class="headerlink" title="逃逸分析：概述"></a>逃逸分析：概述</h3><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021225842468.png" alt="image-20231021225842468"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230005247.png" alt="image-20231021230005247"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230157826.png" alt="image-20231021230157826"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230513461.png" alt="image-20231021230513461"></p><p>如何快速判断是否发生了逃逸分析：看方法内<code>new</code>的对象实体是否有可能在方法外被调用</p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230915451.png" alt="image-20231021230915451"></p><p><strong>结论：</strong>方法中使用局部变量的，就不要在方法外定义</p><h3 id="逃逸分析：代码优化"><a href="#逃逸分析：代码优化" class="headerlink" title="逃逸分析：代码优化"></a>逃逸分析：代码优化</h3><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021231136778.png" alt="image-20231021231136778"></p><h4 id="代码优化之栈上分配"><a href="#代码优化之栈上分配" class="headerlink" title="代码优化之栈上分配"></a>代码优化之栈上分配</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021231339250.png" alt="image-20231021231339250"></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000000</span>;i++)&#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间:&quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//满足逃逸分析，new出来的实例不会在方法外使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不开启逃逸分析:</strong></p><p><code>-Xms1G -Xmx1G -XX:-doEscapeAnalysis -XX:+PrintGCDetails</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232630791.png" alt="image-20231021232630791"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232715545.png" alt="image-20231021232715545"></p><p><strong>开启逃逸分析</strong></p><p><code>-Xms1G -Xmx1G -XX:+doEscapeAnalysis -XX:+PrintGCDetails</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232804323.png" alt="image-20231021232804323"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232833768.png" alt="image-20231021232833768"></p><p><strong>结论</strong></p><ul><li>开启逃逸分析，栈上分配，程序运行会更高效，时间更少</li><li>未开启逃逸分析。内存中<code>User</code>实例个数是<code>10000000</code>，开启逃逸分析后，内存中<code>User</code>实例较少，因为进行了栈上分配</li><li>如果堆空间不足，未开启逃逸分析会进行<code>GC</code>，开启逃逸分析则无<code>GC</code>发生</li></ul><h4 id="代码优化之同步省略"><a href="#代码优化之同步省略" class="headerlink" title="代码优化之同步省略"></a>代码优化之同步省略</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233306833.png" alt="image-20231021233306833"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233420048.png" alt="image-20231021233420048"></p><h4 id="代码优化之标量替换"><a href="#代码优化之标量替换" class="headerlink" title="代码优化之标量替换"></a>代码优化之标量替换</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233745285.png" alt="image-20231021233745285"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233936858.png" alt="image-20231021233936858"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234020569.png" alt="image-20231021234020569"></p><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000000</span>;i++)&#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间:&quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//满足逃逸分析，new出来的实例不会在方法外使用,可以进行标量替换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.id=<span class="number">100</span>;</span><br><span class="line">        user.name=<span class="string">&quot;com.www.baidu.com&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不开启标量替换</strong></p><p><code>-Xms100m -Xmx100m -XX:+DoEscapeAnalysis -XX:+PrintGCDetails -XX:-EliminateAllocations</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234603826.png" alt="image-20231021234603826"></p><p><strong>开启标量替换</strong></p><p><code>-Xms100m -Xmx100m -XX:+DoEscapeAnalysis -XX:+PrintGCDetails -XX:+EliminateAllocations</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234617154.png" alt="image-20231021234617154"></p><p><strong>总结</strong></p><ul><li>开启标量替换，在堆空间操作，无需new对象，所以时间更短且无需进行垃圾回收</li></ul><h4 id="逃逸分析总结"><a href="#逃逸分析总结" class="headerlink" title="逃逸分析总结"></a>逃逸分析总结</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234924370.png" alt="image-20231021234924370"></p><h2 id="堆空间总结"><a href="#堆空间总结" class="headerlink" title="堆空间总结"></a>堆空间总结</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021235150818.png" alt="image-20231021235150818"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆&quot;&gt;&lt;a href=&quot;#堆&quot; class=&quot;headerlink&quot; title=&quot;堆&quot;&gt;&lt;/a&gt;堆&lt;/h1&gt;&lt;h2 id=&quot;堆的核心概述&quot;&gt;&lt;a href=&quot;#堆的核心概述&quot; class=&quot;headerlink&quot; title=&quot;堆的核心概述&quot;&gt;&lt;/a&gt;堆的核心概</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第六章：本地方法接口</title>
    <link href="https://bangwu2001.github.io/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/"/>
    <id>https://bangwu2001.github.io/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/</id>
    <published>2023-10-21T15:56:00.000Z</published>
    <updated>2023-10-21T15:55:52.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地方法接口"><a href="#本地方法接口" class="headerlink" title="本地方法接口"></a>本地方法接口</h1><h2 id="什么是本地方法"><a href="#什么是本地方法" class="headerlink" title="什么是本地方法"></a>什么是本地方法</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831222814621.png" alt="image-20230831222814621"></p><h2 id="为什么需要本地方法"><a href="#为什么需要本地方法" class="headerlink" title="为什么需要本地方法"></a>为什么需要本地方法</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223159429.png" alt="image-20230831223159429"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223514806.png" alt="image-20230831223514806"></p><h2 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223906690.png" alt="image-20230831223906690"></p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223948957.png" alt="image-20230831223948957"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;本地方法接口&quot;&gt;&lt;a href=&quot;#本地方法接口&quot; class=&quot;headerlink&quot; title=&quot;本地方法接口&quot;&gt;&lt;/a&gt;本地方法接口&lt;/h1&gt;&lt;h2 id=&quot;什么是本地方法&quot;&gt;&lt;a href=&quot;#什么是本地方法&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
</feed>
