<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bang&#39;s Blog</title>
  
  
  <link href="https://bangwu2001.github.io/atom.xml" rel="self"/>
  
  <link href="https://bangwu2001.github.io/"/>
  <updated>2024-06-01T09:06:58.072Z</updated>
  <id>https://bangwu2001.github.io/</id>
  
  <author>
    <name>Bang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka的安装与快速使用</title>
    <link href="https://bangwu2001.github.io/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/"/>
    <id>https://bangwu2001.github.io/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/</id>
    <published>2024-06-01T09:07:00.000Z</published>
    <updated>2024-06-01T09:06:58.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka的安装与快速使用"><a href="#Kafka的安装与快速使用" class="headerlink" title="Kafka的安装与快速使用"></a>Kafka的安装与快速使用</h1><p><a href="https://kafka.apache.org/">Kafka官网</a></p><p>kafa是一个基于<code>zookeeper</code>的分布式消息系统，具有高吞吐率、高性能、实时以及高可靠的特点</p><h2 id="Kafka安装"><a href="#Kafka安装" class="headerlink" title="Kafka安装"></a>Kafka安装</h2><p><a href="https://kafka.apache.org/downloads">Kafka下载地址</a>   <a href="https://zookeeper.apache.org/releases.html">zookeeper下载地址</a></p><blockquote><p>环境需求：以下操作在: VMware+Centos7环境下进行</p><p>前置依赖：JDK8</p><p>安装版本：kafka_2.11-2.0.0、zookeeper-3.4.12</p></blockquote><p>下载kafka和zookeeper对应安装包，上传至虚拟机</p><p>文件上传我们可以采用第三方工具<code>WinSCP</code>，也可以文件传输的命令行工具<code>rz</code>、<code>sz</code></p><h3 id="安装lrzsz"><a href="#安装lrzsz" class="headerlink" title="安装lrzsz"></a>安装lrzsz</h3><p>rz，sz是Linux/Unix同Windows进行ZModem文件传输的命令行工具，rz 可以很方便的从客户端传文件到服务器，sz也可以很方便的从服务器传文件到客户端</p><p>yum方式安装:<code>yum install -y lrzsz</code></p><p><strong>从客户端上传文件</strong></p><p>直接在<code>ssh连接工具</code>某个路径下命令行输入<code>rz</code>，则会弹出文件选择按钮，</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524100114750.png" alt="image-20240524100114750" style="zoom:67%;"></p><p><strong>从服务器端下载文件</strong></p><p>直接在<code>ssh连接工具</code>中输入<code>sz xxx</code>，会弹出选择框，将服务器端文件<code>xxx</code>下载到客户端本地的某个位置</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524100242243.png" alt="image-20240524100242243" style="zoom:67%;"></p><h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><p>我们将下载的安装包<code>zookeeper-3.4.12.tar.gz</code>上传至服务器，然后解压至某个目录，解压直接执行<code>tar -zxvf zookeeper-3.4.12.tar.gz -C 目标目录</code></p><p><strong>修改zookeeper配置文件</strong></p><p><code>zookeeper</code>默认配置文件为<code>zoo.cfg</code>，他只提供了一个配置文件样例<code>zoo_sample.cfg</code>，所以我们需要对其进行拷贝，创建配置文件<code>zoo.cfg</code></p><p><code>cp zoo_sample.cfg zoo.cfg</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524100822946.png" alt="image-20240524100822946"></p><p>然后对<code>zoo.cfg</code>文件进行一些修改，一般只需关注于下面三个配置即可</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524101550892.png" alt="image-20240524101550892"></p><p><strong>启动 zookeeper</strong></p><p>切换至<code>bin</code>目录，执行<code>zkServer.sh start</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524101817665.png" alt="image-20240524101817665"></p><p><strong>查看状态</strong></p><p><code>zkServer.sh status</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524101937219.png" alt="image-20240524101937219"></p><p><strong>关闭服务</strong></p><p><code>zkServer.sh stop</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524102033493.png" alt="image-20240524102033493"></p><h3 id="安装kafka"><a href="#安装kafka" class="headerlink" title="安装kafka"></a>安装kafka</h3><p>我们将下载的安装包<code>kafka_2.11-2.0.0.tgz</code>上传至服务器，然后解压至某个目录，解压直接执行<code>tar -zxvf kafka_2.11-2.0.0.tgz -C 目标目录</code></p><p><strong>修改kafka配置文件</strong></p><p>主要的配置文件为<code>config/server.properties</code></p><p>几个重要的配置为：</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524102634821.png" alt="image-20240524102634821"></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524103126185.png" alt="image-20240524103126185"></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524103311380.png" alt="image-20240524103311380"></p><h2 id="Kafka简单使用"><a href="#Kafka简单使用" class="headerlink" title="Kafka简单使用"></a>Kafka简单使用</h2><h3 id="Kafka基本概念"><a href="#Kafka基本概念" class="headerlink" title="Kafka基本概念"></a>Kafka基本概念</h3><p><strong>Topic</strong></p><p>虚拟的概念，消息存放的地方，由1到多个Partitions组成</p><p><strong>Partition</strong></p><p>实际消息存储单位</p><p><strong>Producer</strong></p><p>消息生产者</p><p><strong>Consumer</strong></p><p>消息消费者</p><h3 id="Kafka常用命令"><a href="#Kafka常用命令" class="headerlink" title="Kafka常用命令"></a>Kafka常用命令</h3><p>在操作<code>kafka</code>之前需要首先启动<code>zookeeper</code></p><h4 id="启动Kafka"><a href="#启动Kafka" class="headerlink" title="启动Kafka"></a><strong>启动Kafka</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure><h4 id="停止Kafka"><a href="#停止Kafka" class="headerlink" title="停止Kafka"></a>停止Kafka</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure><h4 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建Topic</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic bang-topic</span><br></pre></td></tr></table></figure><h4 id="查看已经创建的Topic信息"><a href="#查看已经创建的Topic信息" class="headerlink" title="查看已经创建的Topic信息"></a>查看已经创建的Topic信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list 192.168.59.128:9092 --topic bang-topic</span><br></pre></td></tr></table></figure><h4 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server 192.168.59.128:9092 --topic bang-topic --from-beginning</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kafka的安装与快速使用&quot;&gt;&lt;a href=&quot;#Kafka的安装与快速使用&quot; class=&quot;headerlink&quot; title=&quot;Kafka的安装与快速使用&quot;&gt;&lt;/a&gt;Kafka的安装与快速使用&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://kafka.apa</summary>
      
    
    
    
    <category term="Kafka" scheme="https://bangwu2001.github.io/categories/Kafka/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>pycharm快捷键</title>
    <link href="https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/01%20pycharm%E5%BF%AB%E6%8D%B7/"/>
    <id>https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/01%20pycharm%E5%BF%AB%E6%8D%B7/</id>
    <published>2024-05-21T14:57:42.000Z</published>
    <updated>2024-05-21T14:57:01.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pycharm快捷键"><a href="#pycharm快捷键" class="headerlink" title="pycharm快捷键"></a>pycharm快捷键</h1><p>可以通过安装插件形式，使用其他软件快捷键，比如Eclipse或者VSCode快捷键</p><p>下面介绍的是安装Eclipse快捷键形式</p><p>Alt+鼠标：可以查看指定函数的源码</p><p>Alt+右键：切换到下一步代码位置</p><p>Alt+左键：切换到上一步代码位置</p><p>Alt+上建：当前行代码与其上一行代码位置互换</p><p>Alt+下键：当前代码与其下一行代码位置互换</p><p>Ctrl+d：删除当前行代码</p><p>ctrl+f：全局搜索</p><p>ctrl+h：所有当前项目所有文件目录包括第三方库</p><p>home：光标跳到当前行行首</p><p>end：光标跳到当前行行尾</p><p>ctrl+o：查看当前文件里有哪些方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pycharm快捷键&quot;&gt;&lt;a href=&quot;#pycharm快捷键&quot; class=&quot;headerlink&quot; title=&quot;pycharm快捷键&quot;&gt;&lt;/a&gt;pycharm快捷键&lt;/h1&gt;&lt;p&gt;可以通过安装插件形式，使用其他软件快捷键，比如Eclipse或者VSCode</summary>
      
    
    
    
    <category term="pycharam" scheme="https://bangwu2001.github.io/categories/pycharam/"/>
    
    
    <category term="python" scheme="https://bangwu2001.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>爬虫进阶</title>
    <link href="https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/"/>
    <id>https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/</id>
    <published>2024-05-21T14:57:42.000Z</published>
    <updated>2024-06-04T14:57:16.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫进阶"><a href="#爬虫进阶" class="headerlink" title="爬虫进阶"></a>爬虫进阶</h1><p>爬虫一定要找最新的教程，因为网站更新速度很快，老版教程很可能会过时，一些案例基本无法复现</p><h2 id="爬虫概述"><a href="#爬虫概述" class="headerlink" title="爬虫概述"></a>爬虫概述</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240515215806526.png" alt="image-20240515215806526" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240515220426489.png" alt="image-20240515220426489" style="zoom: 50%;"></p><p>​                                    <img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240515220603409.png" alt="image-20240515220603409" style="zoom: 50%;"></p><h2 id="静态页面抓取："><a href="#静态页面抓取：" class="headerlink" title="静态页面抓取："></a>静态页面抓取：</h2><ol><li>获取构造需要抓取的所有url列表</li><li>遍历这个列表，使用request等抓取页面数据</li><li>使用xpath+Scrapy Selector或者Xpath+lxml的方式对抓取的页面内容进行解析<ol><li>xpath的编写可以借助浏览器来完成，选中对应元素右键点击copy as xpath</li></ol></li></ol><h2 id="request构造请求："><a href="#request构造请求：" class="headerlink" title="request构造请求："></a>request构造请求：</h2><ul><li>get请求：<ul><li>方式一：url+参数拼接方式</li><li>方式二：url+params形参的方式</li></ul></li><li>post请求<ul><li>许多登陆页面，需要通过构造post请求，提交信息，破除限制 </li><li>可以通过form-data或者json的形式提交数据</li></ul></li></ul><h2 id="模拟登陆场景："><a href="#模拟登陆场景：" class="headerlink" title="模拟登陆场景："></a>模拟登陆场景：</h2><p>许多网站必须登陆之后才能访问里面其他的页面</p><ol><li>通过抓包，找到登陆接口</li><li>编写代码请求登陆接口，传入正确的账号、密码等信息</li></ol><p>即使登陆之后，仍然可以访问其他页面吗？不一定，这时我们要关注后台的鉴权方式</p><p>后台的鉴权方式一般有两种：</p><ul><li>基于cookie+session的鉴权机制</li><li>基于Token的鉴权机制<ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516004458958.png" alt="image-20240516004458958" style="zoom:50%;"></li></ul></li></ul><p>如何初步判断是采用的哪种鉴权？</p><ul><li>form-data大概率是cookie+session</li><li>网站首页地址与登陆请求地址不一致，大概率是token鉴权</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516005245589.png" alt="image-20240516005245589" style="zoom:67%;"></p><h3 id="模拟登录中华网"><a href="#模拟登录中华网" class="headerlink" title="模拟登录中华网"></a>模拟登录中华网</h3><p>模拟登录、访问需要登录之后才能够访问的页面</p><ul><li>1发送登录请求</li><li>保存cookie信息</li><li>下次请求需要登录页面直接携带cookie信息</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">中华网账号 https://passport.china.com/</span><br><span class="line">username:17775990925</span><br><span class="line">password:a546245426</span><br></pre></td></tr></table></figure><p>通过抓包找到登录接口地址，注意这里用错误的账号或者密码，如果是正确的则会自动跳转，无法找出登录接口</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516102343020.png" alt="image-20240516102343020" style="zoom:80%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516102405228.png" alt="image-20240516102405228"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516102418641.png" alt="image-20240516102418641"></p><p>利用python构造请求模拟登录实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#url</span></span><br><span class="line">url = <span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://passport.china.com/logon&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#请求参数</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;17775990925&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;a546245426&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#模拟登录请求</span></span><br><span class="line"><span class="comment"># login_response = requests.post(url,data=params,headers=headers)</span></span><br><span class="line"><span class="comment"># print(login_response.content.decode(&quot;utf8&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(login_response.cookies)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">如何提取请求的cookie信息:</span></span><br><span class="line"><span class="string">    response.cookies</span></span><br><span class="line"><span class="string">如何解决利用cookie进行校验的访问请求:</span></span><br><span class="line"><span class="string">    方式一: </span></span><br><span class="line"><span class="string">        request.get(cookies=cookies)，利用参数让请求携带cookie信息,cookie字典格式</span></span><br><span class="line"><span class="string">    方式二:</span></span><br><span class="line"><span class="string">        请求头中携带,cookie以字符串格式</span></span><br><span class="line"><span class="string">        headers=&#123;</span></span><br><span class="line"><span class="string">            &quot;Cookie&quot;:cookie值</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    方式三：requests.session</span></span><br><span class="line"><span class="string">    利用:</span></span><br><span class="line"><span class="string">        requests.session()对象去发送请求，其会自动记住状态信息</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问其他页面,不携带cookie信息的话会自动跳转到登录页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式一：以字典的形式传递</span></span><br><span class="line"><span class="comment"># url = &quot;https://passport.china.com&quot;</span></span><br><span class="line"><span class="comment"># response = requests.get(url,headers=headers,cookies=login_response.cookies)</span></span><br><span class="line"><span class="comment"># print(response.content.decode())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：以字符串的形式传递</span></span><br><span class="line"><span class="comment">#这种cookie来源:直接从浏览器复制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># headers[&quot;Cookie&quot;]=&#x27;area_name=%E6%B9%96%E5%8C%97%E7%9C%81%E6%AD%A6%E6%B1%89%E5%B8%82; SESSION_COOKIE=46; Hm_lvt_cbec92dec763e6774898d6d85460f707=1715822413,1715828314; Hm_lpvt_cbec92dec763e6774898d6d85460f707=1715828314; nickname=china_2823hxfg16791058; lastlogindate=2024-05-16; lastlogintime=&quot;10:58:48&quot;; lastloginip=211.161.157.200; bindMobile=&quot;1@177*****925&quot;; CHINACOMID=218ab446-115d-4fbe-93fe-a5fd744593825; CP_USER=FKBo6w-aaDELXK1EnoT3DPk1faoTCuWOzIpsuaQNIsJWqiRz6o9drrZQMJZRRbngi7eJikd0sv41eZDrzksZGmumfJyC7TEP5dMN41%2F1QIHag0K39t%2FVBxzGqQTN85yGmV%2FbilYB7ulfPMYVXbF6aMqwUoU1rfChWCxyzGnnrK%2FgdpLc0L1F5tS7hOqvGEkrBP23Gu2Sd0E76gm7%2FHCqgRxwGcN7FXOpmlLJ6WjemIAiC44IuLq2ow%3D%3D; CP_USERINFO=4Gkk4uas%2FGU6V4cAn8Kr14YtZHaRsQ3bb0iKxhYvuaLYLT-rPEFbvbaQzjvqSKm2v8Fd1lQ14weg0PM1aAxGqjzFStaNWwdXEhS3Zzs0jusNqPIZSkWIUHBpa7NyrsBUv2O8QVvh3O4yqW9wAjnfpw%3D%3D; china_variable=jpEe7N32pYz8SAjCjL8fnh2eLZiI1D/EC6dYmS6/lLUOPrHJGj-IxLIHbACvhNcaC9z3Z8pi2hy0JtYoQGGXmsutg32di8lhAZaSKKJ8BFBt-lJZl7B3R-LY1hWhKpza; lastlogindate=2024-05-16; lastlogintime=&quot;10:58:48&quot;; lastloginip=211.161.157.200&#x27;</span></span><br><span class="line"><span class="comment"># response = requests.get(url,headers=headers)</span></span><br><span class="line"><span class="comment"># print(response.content.decode())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三: requests.session</span></span><br><span class="line">login_url = <span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line">main_url = <span class="string">&quot;https://passport.china.com&quot;</span></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">session.post(login_url,data=params,headers=headers)</span><br><span class="line"><span class="comment">#访问其他页面,整个过程处于同一会话</span></span><br><span class="line">response = session.get(main_url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode())</span><br></pre></td></tr></table></figure><h2 id="Ajax异步数据"><a href="#Ajax异步数据" class="headerlink" title="Ajax异步数据"></a>Ajax异步数据</h2><p>背景：大对数网站采用前后端分离方式构建应用，数据都是通过Ajax请求异步加载获取的，直接请求目标网站的话，返回的内容中压根就没有任何数据</p><p>比如对于东方财富：<a href="https://quote.eastmoney.com/center">https://quote.eastmoney.com/center</a></p><p>浏览器抓包分析，发现页面数据根本不在请求返回的html文件中，他的数据都是通过异步请求得到的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516111515843.png" alt="image-20240516111515843"></p><p>对于这类型的网站，抓取数据的地址根本不是页面上的地址,因为html中压根就没有数据，我们要去分析其发送的AJAX请求，获取对应的URL，然后去抓取对应的数据</p><h3 id="异步数据抓取案例"><a href="#异步数据抓取案例" class="headerlink" title="异步数据抓取案例"></a>异步数据抓取案例</h3><p>我们选取<a href="https://careers.tencent.com/home.html">腾讯招聘</a>网站作为爬取目标，我们可以发现它的网站职位数据就是异步加载的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516144559312.png" alt="image-20240516144559312"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">url:https://careers.tencent.com/tencentcareer/api/post/Query</span></span><br><span class="line"><span class="string">请求参数:</span></span><br><span class="line"><span class="string">    timestamp: 1715841296996</span></span><br><span class="line"><span class="string">    countryId:</span></span><br><span class="line"><span class="string">    cityId:</span></span><br><span class="line"><span class="string">    bgIds:</span></span><br><span class="line"><span class="string">    productId:</span></span><br><span class="line"><span class="string">    categoryId:</span></span><br><span class="line"><span class="string">    parentCategoryId:</span></span><br><span class="line"><span class="string">    attrId:</span></span><br><span class="line"><span class="string">    keyword:</span></span><br><span class="line"><span class="string">    pageIndex: 1</span></span><br><span class="line"><span class="string">    pageSize: 10</span></span><br><span class="line"><span class="string">    language: zh-cn</span></span><br><span class="line"><span class="string">    area: cn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">base_url = <span class="string">&quot;https://careers.tencent.com/tencentcareer/api/post/Query&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>: <span class="number">1715841296996</span>,</span><br><span class="line">    <span class="string">&quot;countryId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cityId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bgIds&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;categoryId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parentCategoryId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attrId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;keyword&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageIndex&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;zh-cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area&quot;</span>: <span class="string">&quot;cn&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#分页抓取:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可变的参数:</span></span><br><span class="line"><span class="string"> pageIndex以及timestamp</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> pageIndex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    params[<span class="string">&quot;timestamp&quot;</span>] = <span class="built_in">int</span>(time.time()*<span class="number">1000</span>)</span><br><span class="line">    params[<span class="string">&quot;pageIndex&quot;</span>] = pageIndex</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">10</span>,<span class="string">&quot;current pageInde:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(pageIndex),<span class="string">&quot;=&quot;</span>*<span class="number">10</span>)</span><br><span class="line">    response = requests.get(url=base_url,params=params)</span><br><span class="line">    <span class="comment">#转换为json格式</span></span><br><span class="line">    result_data = response.json()</span><br><span class="line">    job_count = result_data[<span class="string">&quot;Data&quot;</span>][<span class="string">&quot;Count&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> job_count==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    job_list = result_data[<span class="string">&quot;Data&quot;</span>][<span class="string">&quot;Posts&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> job <span class="keyword">in</span> job_list:</span><br><span class="line">        <span class="built_in">print</span>(job[<span class="string">&quot;RecruitPostName&quot;</span>])</span><br><span class="line"><span class="comment">#数据后续可以根据具体业务需求，保存在本地文件或者数据库中   </span></span><br></pre></td></tr></table></figure><h2 id="数据格式转换问题"><a href="#数据格式转换问题" class="headerlink" title="数据格式转换问题"></a>数据格式转换问题</h2><p>有些网站，我们抓取时，响应返回的数据形式比较复杂，我们如何从中快速提取想要的数据</p><p>对于非结构化数据：HTML</p><ul><li>用正则表达式、xpath等手段处理</li></ul><p>对于结构化数据：json、xml等</p><ul><li>直接转换为python类型</li></ul><h3 id="json模块"><a href="#json模块" class="headerlink" title="json模块"></a>json模块</h3><p>json.loads</p><ul><li>把json格式字符串解码转换成python对象，json数组对应列表、json对象对应字典</li><li>python中的None，在json中用null表示</li></ul><p>json.dumps</p><ul><li>实现把python类型转换为json字符串，返回一个str对象，是把python对象编码成json字符串</li><li>其序列化默认采用ascii编码</li><li>添加参数 ensure_ascii=False禁用ascii编码，按utf-8编码</li></ul><p><a href="https://blog.csdn.net/qq_37806690/article/details/137988296">python json转换参考资料</a></p><h3 id="jsonPath"><a href="#jsonPath" class="headerlink" title="jsonPath"></a>jsonPath</h3><p>正如XPath之于XML文档一样，JsonPath为Json文档提供了解析能力，通过使用JsonPath，你可以方便的查找节点、获取想要的数据，JsonPath是Json版的XPath</p><p>其用法基本跟xpath一致</p><p><a href="https://www.cnblogs.com/youring2/p/10942728.html">参考资料</a></p><p><a href="https://www.jianshu.com/p/3f5b9cc88bde">python jsonpath教程</a></p><h3 id="案例：jsonpath进行数据提取"><a href="#案例：jsonpath进行数据提取" class="headerlink" title="案例：jsonpath进行数据提取"></a>案例：jsonpath进行数据提取</h3><p>目标网站<a href="https://www.xfz.cn/">小饭桌</a>，我们提取各个咨询的标题、发布作者、发布事件信息</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516153253078.png" alt="image-20240516153253078"></p><p>其响应数据格式如下图所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">10918</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;智愈医疗完成超6000万元Pre-A++轮融资&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;photo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://static-image.xfz.cn/1715658195_783.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;photo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://static-image.xfz.cn/1552965456_492.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;authors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;author_id&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;饭桌君&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;is_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;article_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;融资消息&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;intro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;由辰德资本领投，联想之星跟投，老股东顺为资本、礼来亚洲基金、众海投资持续加注。凡卓资本担任本轮融资独家财务顾问。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-05-14 11:43:15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;智愈医疗&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们需要从中解析出我们想要的数据</p><p>我们首先抓包，分析其数据异步加载的接口以及对应的请求参数，分析不同分页url和请求参数的规律</p><p>其请求的数据</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516153515923.png" alt="image-20240516153515923"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516153529052.png" alt="image-20240516153529052"></p><p><strong>python代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;uid&quot;: 10874,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;与微软合作，这家独角兽让GPT对中国企业开放了&quot;,</span></span><br><span class="line"><span class="string">    &quot;photo&quot;: &quot;https://static-image.xfz.cn/1708917564_964.jpg&quot;,</span></span><br><span class="line"><span class="string">    &quot;author&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;photo&quot;: &quot;https://static-image.xfz.cn/1693983197_842.jpg&quot;,</span></span><br><span class="line"><span class="string">        &quot;authors&quot;: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;author_id&quot;: 2295,</span></span><br><span class="line"><span class="string">                &quot;name&quot;: &quot;黄泽正&quot;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;is_original&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;article_type&quot;: &quot;热点&quot;,</span></span><br><span class="line"><span class="string">    &quot;intro&quot;: &quot;中国企业合法合规使用GPT的时代，终于来了。&quot;,</span></span><br><span class="line"><span class="string">    &quot;source&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">    &quot;time&quot;: &quot;2024-02-26 11:19:24&quot;,</span></span><br><span class="line"><span class="string">    &quot;keywords&quot;: [</span></span><br><span class="line"><span class="string">        &quot;GPT&quot;,</span></span><br><span class="line"><span class="string">        &quot;易点云&quot;,</span></span><br><span class="line"><span class="string">        &quot;IT综合解決方案供应商&quot;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&quot;https://www.xfz.cn/api/website/articles/&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;p&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;n&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    params[<span class="string">&quot;p&quot;</span>]=p</span><br><span class="line">    response = requests.get(url=base_url,params=params)</span><br><span class="line">    response_json = response.json()</span><br><span class="line">    <span class="comment">#提取感兴趣信息</span></span><br><span class="line">    <span class="comment">#文章标题</span></span><br><span class="line">    title_list = jsonpath.jsonpath(response_json,<span class="string">&quot;$..title&quot;</span>)</span><br><span class="line">    <span class="comment">#文章作者</span></span><br><span class="line">    author_list = jsonpath.jsonpath(response_json,<span class="string">&quot;$..author..name&quot;</span>)</span><br><span class="line">    <span class="comment">#发布时间</span></span><br><span class="line">    time_list = jsonpath.jsonpath(response_json,<span class="string">&quot;$..time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> title,author,time <span class="keyword">in</span> <span class="built_in">zip</span>(title_list,author_list,time_list):</span><br><span class="line">        <span class="built_in">print</span>(title,<span class="string">&quot;\t&quot;</span>,author,<span class="string">&quot;\t&quot;</span>,time)</span><br></pre></td></tr></table></figure><h2 id="视频抓取"><a href="#视频抓取" class="headerlink" title="视频抓取"></a>视频抓取</h2><h3 id="B站视频抓取"><a href="#B站视频抓取" class="headerlink" title="B站视频抓取"></a>B站视频抓取</h3><h4 id="资源抓取"><a href="#资源抓取" class="headerlink" title="资源抓取"></a>资源抓取</h4><p>B站视频的画面和音频是通过不同的url来异步请求获取，所以我们抓包分析得到画面和音频的请求链接，然后分别抓取画面和音频，最后在本地将两者合成视频文件</p><p>抓包分析，最开始的两个请求即为画面和音频资源请求</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516182906785.png" alt="image-20240516182906785"></p><h4 id="视频合成"><a href="#视频合成" class="headerlink" title="视频合成"></a>视频合成</h4><p>MoviePy是一个用于视频编辑的Python模块，它可以用于一些基本操作，比如剪切、拼接、插入标题、视频合成、视频处理和创建高级特效</p><p><a href="https://moviepy-cn.readthedocs.io/zh/latest/">官网教程</a></p><p><a href="https://zhuanlan.zhihu.com/p/680555324">参考博客</a></p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line"><span class="string">    对于B站而言，其视频和音频内容是分开请求的，最终的视频是由两者一起合成的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">注意:经过验证，如果不携带User-Agent和Referer这两个请求头，会直接返回403 forbidden</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>:<span class="string">&quot;https://www.bilibili.com/video/BV1Mp421m7Ck/?spm_id_from=333.1007.tianma.1-1-1.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url1=<span class="string">&quot;https://cn-hbwh-fx-01-13.bilivideo.com/upgcxcode/03/12/1475871203/1475871203-1-100026.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1715855097&amp;gen=playurlv2&amp;os=bcache&amp;oi=1939666239&amp;trid=00002988359d2ffb4c87ad295bbe92858e17u&amp;mid=503787920&amp;platform=pc&amp;upsig=9252145cbb94964367b3213d88a75b0f&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,mid,platform&amp;cdnid=3881&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;buvid=FEF21EE4-4208-C79B-80F6-27AC2A9BBD3459139infoc&amp;build=0&amp;f=u_0_0&amp;agrr=1&amp;bw=173938&amp;np=151388311&amp;logo=80000000&quot;</span></span><br><span class="line">url2=<span class="string">&quot;https://cn-hbwh-fx-01-12.bilivideo.com/upgcxcode/03/12/1475871203/1475871203-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1715855097&amp;gen=playurlv2&amp;os=bcache&amp;oi=1939666239&amp;trid=00002988359d2ffb4c87ad295bbe92858e17u&amp;mid=503787920&amp;platform=pc&amp;upsig=1d8cc071b206465e33d41d8e298308d9&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,mid,platform&amp;cdnid=1237&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;buvid=FEF21EE4-4208-C79B-80F6-27AC2A9BBD3459139infoc&amp;build=0&amp;f=u_0_0&amp;agrr=1&amp;bw=20005&amp;np=151388311&amp;logo=80000000&quot;</span></span><br><span class="line"></span><br><span class="line">response1 = requests.get(url1,headers=headers)</span><br><span class="line">response2 = requests.get(url2,headers=headers)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;b站1.mp4&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response1.content)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;b站2.mp4&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response2.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#合成视频:画面+音频</span></span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> ffmpeg_tools</span><br><span class="line">ffmpeg_tools.ffmpeg_merge_video_audio(<span class="string">&quot;b站1.mp4&quot;</span>,<span class="string">&quot;b站2.mp4&quot;</span>,<span class="string">&quot;b站.mp4&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="抖音视频抓取"><a href="#抖音视频抓取" class="headerlink" title="抖音视频抓取"></a>抖音视频抓取</h3><p>我们抓包分析，抖音各个视频的链接都是杂乱无规则的，所以无法用requests批量抓取，如果要批量抓取，只能模拟人来不断点击获取，这个就必须要用到自动化工具selenium了</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516184053032.png" alt="image-20240516184053032"></p><p>对于单个视频的下载比较简单，无任何其他的限制，直接发送请求即可获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;https://v3-weba.douyinvod.com/02263c98b4f10164f58047cc60b11827/6645f1ed/video/tos/cn/tos-cn-ve-15/osB7nDAWI4MQuoB8ECDoeGezOhEs4BbeV2AqM1/?a=6383&amp;ch=5&amp;cr=3&amp;dr=0&amp;lr=all&amp;cd=0%7C0%7C0%7C3&amp;cv=1&amp;br=1199&amp;bt=1199&amp;cs=0&amp;ds=3&amp;ft=kmz2Nvx2llUpoDtWsRdusEBOG4kbZ0Fl~z7avjZmpmPt188HKw9gHlcApW9w6x&amp;mime_type=video_mp4&amp;qs=0&amp;rc=aDk6Omc7ZjY7OTszN2c7Z0BpM3hnNGQ6Zmd4czMzNGkzM0BiLmBiXjZgX14xX2I0NTQ1YSMvYm1ycjRfMy5gLS1kLTBzcw%3D%3D&amp;btag=c0000e00030000&amp;cquery=101s_100B_100x_100z_100a&amp;dy_q=1715855997&amp;feature_id=f0150a16a324336cda5d6dd0b69ed299&amp;l=20240516183955A37ACE947DDB97002DEE&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;抖音.mp4&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure><p>单个视频url无任何规律，所以无法通过代码去批量构造，批量爬取的核心就在于如何批量获取视频的url列表</p><h2 id="selenium的使用"><a href="#selenium的使用" class="headerlink" title="selenium的使用"></a>selenium的使用</h2><p><a href="https://www.selenium.dev/zh-cn/documentation/webdriver/getting_started/">selenium</a>是一个Web的自动化测试工具，最初是为了网站自动化测试而开发的，其可以按照指定的指令自动操作，其可以直接运行在浏览器之上，它支持所有主流的浏览器，模拟人去手动操作浏览器</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们以<a href="https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81">领导留言板</a>这个网站为例，抓取里面的内容，通过抓包获取url，请求参数以及请求等信息，但还是会被拦截</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://liuyan.people.com.cn/v1/threads/list/df&quot;</span></span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">  <span class="string">&quot;appCode&quot;</span>: <span class="string">&quot;PC42ce3bfa4980a9&quot;</span>,</span><br><span class="line">  <span class="string">&quot;token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;signature&quot;</span>: <span class="string">&quot;315b4bdafbf17b3dbb6a48a244b67dff&quot;</span>,</span><br><span class="line">  <span class="string">&quot;param&quot;</span>: <span class="string">&quot;&#123;\&quot;fid\&quot;:\&quot;571\&quot;,\&quot;showUnAnswer\&quot;:1,\&quot;typeId\&quot;:5,\&quot;lastItem\&quot;:\&quot;\&quot;,\&quot;position\&quot;:\&quot;0\&quot;,\&quot;rows\&quot;:10,\&quot;orderType\&quot;:2&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;&quot;&quot;https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81&quot;&quot;&quot;</span></span><br><span class="line">            ,<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;__jsluid_s=4b575e53f2419a15d98413b3c2ade788; Hm_lvt_40ee6cb2aa47857d8ece9594220140f1=1715856547; language=zh-CN; deviceId=52e3892d-030a-4de8-8d77-c62c7c0a1a87; Hm_lpvt_40ee6cb2aa47857d8ece9594220140f1=1715856654&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers,data=params)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode())</span><br></pre></td></tr></table></figure><p>响应内容:</p><p>其网站内部设置了防护和反扒机制，单纯靠requests是无法处理的，所以这是我们就需要借助于Selenium，模拟人类登录网站的行为，来进行数据的抓取</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="keyword">\environment</span><span class="keyword">\anaconda</span>3<span class="keyword">\envs</span><span class="keyword">\scrap</span><span class="keyword">\python</span>.exe &quot;C:<span class="keyword">\bang</span><span class="keyword">\MyOwn</span><span class="keyword">\Java</span>重要知识点学习<span class="keyword">\BaiduSyncdisk</span><span class="keyword">\0</span>7 python网络爬虫<span class="keyword">\my</span><span class="built_in">_</span>code<span class="keyword">\ch</span>04-selenium<span class="keyword">\领</span>导留言板.py&quot; </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body&#123; background:<span class="params">#</span>eff1f0; font-family: microsoft yahei; color:<span class="params">#9</span>69696; font-size:12px;&#125;</span><br><span class="line">.online-desc-con &#123; text-align:center; &#125;</span><br><span class="line">.r-tip01 &#123; color: <span class="params">#9</span>69696; font-size: 16px; display: block; text-align: center; width: 600px; padding: 0 10px; overflow: hidden; text-overflow: ellipsis; margin: 0 auto 15px; &#125;</span><br><span class="line">.r-tip02 &#123; color: <span class="params">#</span>b1b0b0; font-size: 12px; display: block; margin-top: 20px; margin-bottom: 20px; &#125;</span><br><span class="line">.r-tip02 a:visited &#123; text-decoration: underline; color: <span class="params">#0</span>088CC; &#125;</span><br><span class="line">.r-tip02 a:link &#123; text-decoration: underline; color: <span class="params">#0</span>088CC; &#125;</span><br><span class="line">img &#123; border: 0; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;online-desc-con&quot; style=&quot;width:650px;padding-top:15px;margin:34px auto;&quot;&gt;</span><br><span class="line">    &lt;a id=&quot;official<span class="built_in">_</span>site&quot; href=&quot;http://www.365cyd.com&quot; target=&quot;<span class="built_in">_</span>blank&quot;&gt;</span><br><span class="line">        &lt;img id=&quot;wafblock&quot; alt=&quot;&quot; style=&quot;margin: 0 auto 17px auto;&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;span class=&quot;r-tip01&quot; id=&quot;error<span class="built_in">_</span>403&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;r-tip01&quot; id=&quot;error<span class="built_in">_</span>403<span class="built_in">_</span>en&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;r-tip02&quot;&gt;如果您是网站管理员&lt;a href=&quot;http://help.365cyd.com/cyd-error-help.html?code=403&quot; target=&quot;<span class="built_in">_</span>blank&quot;&gt;点击这里&lt;/a&gt;查看详情&lt;/span&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;center&gt;client: &lt;span id=&quot;client<span class="built_in">_</span>ip&quot;&gt;&lt;/span&gt;, server: e85ed68, time: &lt;span id=&quot;time<span class="built_in">_</span>error&quot;&gt;&lt;/span&gt;&lt;span id=&quot;rule<span class="built_in">_</span>id&quot;&gt;&lt;/span&gt;&lt;/center&gt;</span><br><span class="line">    &lt;img alt=&quot;&quot; src=&quot;/cdn-cgi/image/logo.png&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    void(function fuckie6()&#123;if(location.hash <span class="built_in">&amp;</span><span class="built_in">&amp;</span> /MSIE 6/.test(navigator.userAgent) <span class="built_in">&amp;</span><span class="built_in">&amp;</span> !/jsl<span class="built_in">_</span>sec/.test(location.href))&#123;location.href = location.href.split(&#x27;<span class="params">#</span>&#x27;)[0] + &#x27;<span class="built_in">&amp;</span>jsl<span class="built_in">_</span>sec&#x27; + location.hash&#125;&#125;)();</span><br><span class="line">    var data = &#123;&quot;error<span class="built_in">_</span>403<span class="built_in">_</span>type&quot;:&quot;cli<span class="built_in">_</span>ip&quot;,&quot;error<span class="built_in">_</span>403&quot;:&quot;您的IP( 218.106.117.241 )最近有可疑的攻击行为，请稍后重试.&quot;,&quot;client<span class="built_in">_</span>ip&quot;:&quot;218.106.117.241&quot;,&quot;time<span class="built_in">_</span>error&quot;:&quot;16<span class="keyword">\/</span>May<span class="keyword">\/</span>2024:19:01:37 +0800&quot;,&quot;error<span class="built_in">_</span>403<span class="built_in">_</span>en&quot;:&quot;&quot;&#125;;</span><br><span class="line">    var rule<span class="built_in">_</span>id = parseInt(data[&#x27;rule<span class="built_in">_</span>id&#x27;]) || &#x27;&#x27;;</span><br><span class="line">    if (rule<span class="built_in">_</span>id != &#x27;&#x27;) &#123;</span><br><span class="line">        rule<span class="built_in">_</span>id = &#x27;[&#x27; + rule<span class="built_in">_</span>id + &#x27;]&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    document.getElementById(&quot;wafblock&quot;).src = &#x27;/cdn-cgi/image/&#x27; + (data[&#x27;error<span class="built_in">_</span>403<span class="built_in">_</span>type&#x27;] || &#x27;hacker&#x27;) + &#x27;.png&#x27;;</span><br><span class="line">    document.getElementById(&#x27;error<span class="built_in">_</span>403&#x27;).innerText = data[&#x27;error<span class="built_in">_</span>403&#x27;] || &#x27;当前访问疑似黑客攻击，已被创宇盾拦截。&#x27;;</span><br><span class="line">    document.getElementById(&#x27;error<span class="built_in">_</span>403<span class="built_in">_</span>en&#x27;).innerText = data[&#x27;error<span class="built_in">_</span>403<span class="built_in">_</span>en&#x27;];</span><br><span class="line">    document.getElementById(&#x27;client<span class="built_in">_</span>ip&#x27;).innerText = data[&#x27;client<span class="built_in">_</span>ip&#x27;];</span><br><span class="line">    document.getElementById(&#x27;time<span class="built_in">_</span>error&#x27;).innerText = data[&#x27;time<span class="built_in">_</span>error&#x27;];</span><br><span class="line">    document.getElementById(&#x27;rule<span class="built_in">_</span>id&#x27;).innerText = rule<span class="built_in">_</span>id;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用Selenium的一般流程"><a href="#使用Selenium的一般流程" class="headerlink" title="使用Selenium的一般流程"></a>使用Selenium的一般流程</h3><ol><li>selenium打开浏览器</li><li>访问要爬取的页面，如果有需要可以设置对页面进行一些操作</li><li>获取想要爬取的页面数据</li></ol><h3 id="selenium环境安装"><a href="#selenium环境安装" class="headerlink" title="selenium环境安装"></a>selenium环境安装</h3><p><strong>selenium安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p><strong>浏览器对应的驱动chromedriver的下载</strong></p><p><a href="https://zhuanlan.zhihu.com/p/664339667">chromeDriver下载参考资料</a></p><p><a href="https://blog.csdn.net/linglong_L/article/details/136283810?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-136283810-blog-138708545.235^v43^pc_blog_bottom_relevance_base6&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=2">chromeDriver参考资料</a></p><p><a href="https://www.cnblogs.com/aiyablog/articles/17948703">ChromeDriver下载地址列表</a></p><p>安装之后可以在代码中指定charomeDriver的地址或者我们可以直接将chromeDriver放在python的安装文件夹中，更推荐后者</p><p>测试是否安装成功:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#请求</span></span><br><span class="line">driver.get(url)</span><br><span class="line"><span class="comment">#短暂延时</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#获取页面内容</span></span><br><span class="line">html = driver.page_source</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会自动弹出百度首页</p><h3 id="selenium基本用法"><a href="#selenium基本用法" class="headerlink" title="selenium基本用法"></a>selenium基本用法</h3><p><a href="https://selenium-python-zh.readthedocs.io/en/latest/installation.html">Python selenium库官方文档</a></p><p><strong>启动浏览器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure><p><strong>访问页面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get(url)</span><br></pre></td></tr></table></figure><p><strong>窗口最大化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.maximize_window()</span><br></pre></td></tr></table></figure><p><strong>刷新页面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.refresh()</span><br></pre></td></tr></table></figure><p><strong>获取页面源码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html = driver.page_source</span><br></pre></td></tr></table></figure><p><strong>页面截图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.save_screenshot(<span class="string">&quot;xxx.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>关闭浏览器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>使用Selenium时，如果关闭的时候没有使用driver.quit退出，会导致系统中会启动多个chromeDriver程序，可以在命令行中通过如下命令批量删除chromedriver进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /F /im chromedriver.exe</span><br></pre></td></tr></table></figure><h3 id="Selenium-driver对象的相关属性"><a href="#Selenium-driver对象的相关属性" class="headerlink" title="Selenium driver对象的相关属性"></a>Selenium driver对象的相关属性</h3><ul><li>current_url：当前url地址</li><li>title：页面标题</li><li>page_source：页面html源码，注意这个页面源码与requests获取的源码是不一样的，其是所有js执行之后的完整的源码</li><li>window_handler:获取浏览器上所有窗口句柄，窗口句柄即各个窗口id</li><li>curren_window_handler：获取当前窗口的句柄</li></ul><h3 id="selenium元素定位和等待"><a href="#selenium元素定位和等待" class="headerlink" title="selenium元素定位和等待"></a>selenium元素定位和等待</h3><h4 id="元素定位的方法："><a href="#元素定位的方法：" class="headerlink" title="元素定位的方法："></a>元素定位的方法：</h4><p><a href="https://selenium-python-zh.readthedocs.io/en/latest/locating-elements.html">selenium查找元素官网教程</a></p><p>一般我们知道如何通过xpath来定位元素就够了</p><p><strong>案例：打开百度首页，在输入框中输入值进行搜索</strong></p><p>首先打开百度首页，定位带搜索输入框元素，向输入框中输入值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment">#打开浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#url</span></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment">#定位到搜索框</span></span><br><span class="line">element = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#输入内容，发送请求</span></span><br><span class="line">element.send_keys(<span class="string">&quot;三国演义&quot;</span>)</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516202419933.png" alt="image-20240516202419933" style="zoom:67%;"></p><h4 id="元素的属性和操作"><a href="#元素的属性和操作" class="headerlink" title="元素的属性和操作"></a>元素的属性和操作</h4><h5 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h5><ul><li>tagname：获取标签名</li><li>text：获取标签文本</li><li>parent：获取父级标签</li><li>get_attribute()：获取属性</li><li>s_displayed()：判断元素是否可见</li></ul><h5 id="元素的操作"><a href="#元素的操作" class="headerlink" title="元素的操作"></a>元素的操作</h5><ul><li>click()，点击元素</li><li>send_keys()：输入内容</li><li>clear()：清空表单</li></ul><h3 id="selenium模拟登录案例"><a href="#selenium模拟登录案例" class="headerlink" title="selenium模拟登录案例"></a>selenium模拟登录案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">需求分析:</span></span><br><span class="line"><span class="string">    selenium模拟登录中华网:https://passport.china.com/logon</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;17775990925&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;a546245426&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#打开浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">url = <span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位登录的表单元素</span></span><br><span class="line"><span class="comment">#用户名元素</span></span><br><span class="line">userNameElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;userInput&quot;]/input[@name=&quot;userName&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#密码元素</span></span><br><span class="line">passWordElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;55&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#登录按钮</span></span><br><span class="line">loginButtonElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;index_logonid&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#填入信息</span></span><br><span class="line">userNameElement.send_keys(params[<span class="string">&quot;userName&quot;</span>])</span><br><span class="line">passWordElement.send_keys(params[<span class="string">&quot;password&quot;</span>])</span><br><span class="line"><span class="comment">#点击登录按钮</span></span><br><span class="line">loginButtonElement.click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="selenium爬取数据案例"><a href="#selenium爬取数据案例" class="headerlink" title="selenium爬取数据案例"></a>selenium爬取数据案例</h3><p><strong>需求分析</strong></p><p>利用selenium爬取领导留言板数据</p><p>主要抓取各个留言的：</p><ul><li>标题</li><li>正文内容</li><li>时间</li><li>留言ID</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516205322272.png" alt="image-20240516205322272" style="zoom:67%;"></p><p><strong>代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">selenium访问指定页面，并对页面解析，获取对应数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> selector</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#访问页面</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment">#等待</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#利用selenium定位元素</span></span><br><span class="line">titleElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//h1&#x27;</span>)</span><br><span class="line">textElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//p/span&#x27;</span>)</span><br><span class="line">timeElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//div[@class=&quot;headMainS fl&quot;]/p&#x27;</span>)</span><br><span class="line">IdElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//span[contains(text(),&quot;留言ID&quot;)]&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> titleElement,timeElement,IdElement,textElemen <span class="keyword">in</span> <span class="built_in">zip</span>(titleElementList,timeElementList,IdElementList,textElementList):</span><br><span class="line">    <span class="built_in">print</span>(timeElement.text,<span class="string">&quot;\t&quot;</span>,titleElement.text,<span class="string">&quot;\t&quot;</span>,IdElement.text)</span><br><span class="line">    <span class="built_in">print</span>(textElemen.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line"><span class="comment">#获取页面加载后的源码</span></span><br><span class="line"><span class="comment"># html = driver.page_source</span></span><br><span class="line"><span class="comment"># print(html)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">页面元素分析，如何利用xpath进行解析:</span></span><br><span class="line"><span class="string">标题: //h1/text()</span></span><br><span class="line"><span class="string">正文: //p/span/text()</span></span><br><span class="line"><span class="string">时间: //div[@class=&quot;headMainS fl&quot;]/p/text()</span></span><br><span class="line"><span class="string">留言ID://span[contains(text(),&quot;留言ID&quot;)]/text()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#解析</span></span><br><span class="line"><span class="comment"># title_list = selector.Selector(text=html).xpath(&quot;//h1/text()&quot;).extract()</span></span><br><span class="line"><span class="comment"># time_list = selector.Selector(text=html).xpath(&#x27;//div[@class=&quot;headMainS fl&quot;]/p/text()&#x27;).extract()</span></span><br><span class="line"><span class="comment"># ID_list = selector.Selector(text=html).xpath(&#x27;//span[contains(text(),&quot;留言ID&quot;)]/text()&#x27;).extract()</span></span><br><span class="line"><span class="comment"># for title,time,ID in zip(title_list,time_list,ID_list):</span></span><br><span class="line"><span class="comment">#     print(title+&quot;\t&quot;+time+&quot;\t&quot;+ID)</span></span><br></pre></td></tr></table></figure><p><strong>目前存在的问题</strong></p><ul><li><p>正文内容抓取不全，如下图所示，每一条帖子需要点击<strong>查看全文</strong>才能显示完全</p><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516212857275.png" alt="image-20240516212857275"></li></ul></li><li><p>内容抓取不全，目前只能抓取第一页数据，需要手动点击<strong>查看更多</strong>才能获取下一页记录</p><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516212942046.png" alt="image-20240516212942046"></li></ul></li></ul><h2 id="selenium进阶使用"><a href="#selenium进阶使用" class="headerlink" title="selenium进阶使用"></a>selenium进阶使用</h2><h3 id="等待机制"><a href="#等待机制" class="headerlink" title="等待机制"></a>等待机制</h3><p><a href="https://selenium-python-zh.readthedocs.io/en/latest/waits.html">官网 等待页面加载完成文档</a></p><h4 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a><strong>背景</strong></h4><p>现在大多数网页都是动态加载的，如果页面内容发生变更，就需要时间来进行渲染，代码是自动执行的，有可能在执行的时候页面新的元素还没有加载出来，就查不到，报 no such element的错误，如果报这个错误，则有可能是定位表达式不正确，或者也可能是页面元素已经发生了变化</p><p>我们爬虫的过程中，如果打开新的页面、页面跳转等情况都要添加合适的等待，否则有的情况下会导致程序错误，无法进行下去</p><h4 id="等待的三种方式"><a href="#等待的三种方式" class="headerlink" title="等待的三种方式"></a><strong>等待的三种方式</strong></h4><ul><li>强制等待<ul><li><code>time.sleep(n)</code></li></ul></li><li>隐式等待<ul><li><code>driver.implicitly_wait(n)</code></li></ul></li><li>显示等待（需要等待条件满足）<ul><li>隐式等待某些情况找不到，就要用显示等待</li></ul></li></ul><h4 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a>强制等待</h4><p><code>time.sleep()</code></p><p>不管网页有没有加载完成，都会等待指定时间</p><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><p><code>driver.implicitly_wait(n)</code></p><p>如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素。 默认等待时间是0秒</p><p>在n秒内如果还是找不到，则会抛出异常，在指定时间内，每隔一段时间就去看一下，如果成功找到，则程序会继续往下执行，如果没找到则继续等，直到最大等待时间</p><h4 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h4><p>可以设置等待条件，比如等待到某个元素可见、某个元素可点击</p><p>这种情况比较复杂，我们重点关注这种情况下如何使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一步:创建等待对象</span></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">10</span>)  <span class="comment">#WebDriverWait 三个参数，第一个为driver对象，第二个为最大时间，第三个为间隔时间，比如:WebDriverWait(driver,30,0.2)，即在30s内每个0.2s去找一次</span></span><br><span class="line"><span class="comment">#第二步：定义元素查找对象</span></span><br><span class="line">located = (By.XPATH,<span class="string">&quot;//input[@id=&#x27;u&#x27;&quot;</span>)</span><br><span class="line"><span class="comment">#第三步：定位的等待条件,比如指定元素可见为等待条件</span></span><br><span class="line">conditions = EC.visibility_of_element_located(located)</span><br><span class="line"><span class="comment">#第四步:通过等待计时器对象去查找</span></span><br><span class="line">wait.until(conditions)</span><br><span class="line"></span><br><span class="line"><span class="comment">#一行代码表示</span></span><br><span class="line">WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">            .until(EC.visibility_of_element_located((By.XPATH,<span class="string">&quot;//input[@id=&#x27;u&#x27;&quot;</span>)))</span><br></pre></td></tr></table></figure><h5 id="常用显示等待条件"><a href="#常用显示等待条件" class="headerlink" title="常用显示等待条件"></a><strong>常用显示等待条件</strong></h5><ul><li><code>visibility_of_element_located</code>：元素可见</li><li><code>element_to_be_clickable</code>：元素可点击</li></ul><h5 id="等待条件"><a href="#等待条件" class="headerlink" title="等待条件"></a>等待条件</h5><ul><li><code>presence_of_element_located</code>：元素存在</li><li><code>visibility_of_element_located</code>：元素可见</li><li><code>element_to_be_clickable</code>：元素可点击</li><li><code>title_contains</code>：标题包含某内容</li><li><code>new_window_is_opened</code>：等待新窗口出现</li><li><code>frame_to_be_available_and_switch_to_it</code>：加载并切换到iframe中</li><li><code>alert_is_present</code>：出现Alert弹框</li></ul><h3 id="iframe切换"><a href="#iframe切换" class="headerlink" title="iframe切换"></a>iframe切换</h3><h4 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h4><p>对于<a href="https://wx.mail.qq.com/">QQ邮箱登录页面</a>，其内部是一个网页嵌套另一个网页构成的，如果直接查找或者点击里面的某些元素是找不到的，必须要进行iframe切换</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517091621440.png" alt="image-20240517091621440"></p><h4 id="selenium控制iframe切换"><a href="#selenium控制iframe切换" class="headerlink" title="selenium控制iframe切换"></a>selenium控制iframe切换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式一：切换iframe，通过iframe的名字(name属性)进行切换</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;frame_name&#x27;</span>) </span><br><span class="line"><span class="comment">#方式二:通过element元素去切换</span></span><br><span class="line">iframeElement = driver.find_element_by_xpath(<span class="string">&#x27;//iframe[@id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(iframeElement)</span><br><span class="line"><span class="comment">#方式三：通过索引切换</span></span><br><span class="line">driver.switch_to.frame(<span class="number">1</span>) <span class="comment">#根据第几个iframe切换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切换回默认的html页面</span></span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到父级的iframe中</span></span><br><span class="line">driver.switch_to.parent_frame()</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>模拟QQ邮箱登录页面点击密码登录，然后输入账号密码模拟登陆</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517092226636.png" alt="image-20240517092226636"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#url</span></span><br><span class="line">url = <span class="string">&quot;https://wx.mail.qq.com/&quot;</span></span><br><span class="line">driver.get(url=url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换进入第一个iframe</span></span><br><span class="line">driver.switch_to.frame(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#切换进入第二个iframe</span></span><br><span class="line">iframeElement = driver.find_element(By.XPATH,<span class="string">&#x27;//iframe[@id=&quot;ptlogin_iframe&quot;]&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(iframeElement)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找密码登录按钮，并点击</span></span><br><span class="line">passwordLoginButton = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;switcher_plogin&quot;]&#x27;</span>)</span><br><span class="line">passwordLoginButton.click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到账号和密码输入框，模拟登录</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;u&quot;]&#x27;</span>).send_keys(<span class="string">&quot;wujjjj&quot;</span>)</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;p&quot;]&#x27;</span>).send_keys(<span class="string">&quot;99899&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#登录按钮</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;login_button&quot;]&#x27;</span>).click()</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><p>最终还会弹出</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517094617205.png" alt="image-20240517094617205"></p><h3 id="窗口滚动"><a href="#窗口滚动" class="headerlink" title="窗口滚动"></a>窗口滚动</h3><h4 id="背景-3"><a href="#背景-3" class="headerlink" title="背景"></a>背景</h4><p>有的时候，元素虽然被加载出来了，但是如果看不到，是无法进行操作的，这时就需要滚动页面才会显示新的内容</p><p>比如对于我们之前爬取的<a href="https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81">领导留言板</a>网站，就需要手动滚动页面到最底部，然后点击查看更多，才能分页查看下一页数据</p><p>所以要想抓取数据完全，需要不断查找查看更多按钮，然后点击进行翻页</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517111858981.png" alt="image-20240517111858981"></p><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=1179&amp;formName=%E5%AE%9C%E6%98%8C%E5%B8%82%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%86%8A%E5%BE%81%E5%AE%87&amp;position=0&amp;province=28&amp;city=230&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81&amp;pForumNames=%E5%AE%9C%E6%98%8C%E5%B8%82&quot;</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#隐式等待</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment">#循环迭代 找到查看更多，并翻页,无法确定有多少也，只能死循环，找不到即触发异常结束</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 找到 查看更多按钮</span></span><br><span class="line">        element = driver.find_element(By.XPATH, <span class="string">&#x27;//*[@class=&quot;mordList&quot;]&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(element)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        element.location_once_scrolled_into_view  <span class="comment"># 页面滚动到 查看更多按钮可见的位置</span></span><br><span class="line">        <span class="comment"># 点击查看更多按钮</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        element.click()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#整体页面解析</span></span><br><span class="line"><span class="comment">#利用selenium定位元素</span></span><br><span class="line">titleElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//h1&#x27;</span>)</span><br><span class="line">textElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//p/span&#x27;</span>)</span><br><span class="line">timeElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//div[@class=&quot;headMainS fl&quot;]/p&#x27;</span>)</span><br><span class="line">IdElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//span[contains(text(),&quot;留言ID&quot;)]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> titleElement,timeElement,IdElement,textElemen <span class="keyword">in</span> <span class="built_in">zip</span>(titleElementList,timeElementList,IdElementList,textElementList):</span><br><span class="line">    <span class="built_in">print</span>(timeElement.text,<span class="string">&quot;\t&quot;</span>,titleElement.text,<span class="string">&quot;\t&quot;</span>,IdElement.text)</span><br><span class="line">    <span class="built_in">print</span>(textElemen.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总条数:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(titleElementList)))</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="JS模拟滚动页面"><a href="#JS模拟滚动页面" class="headerlink" title="JS模拟滚动页面"></a>JS模拟滚动页面</h3><p><strong>js滚动窗口到指定坐标位置</strong></p><ul><li><p><code>scrollTo()</code>：可把内容滚动到指定的坐标</p><ul><li>```js<br>scrollTo(x,y)<h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1>x ：必须，要在窗口文档显示区左上角显示的文档的x坐标<br>y : 必须，要在窗口文档显示区左上角显示的文档的y坐标<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**selenium如何执行js代码**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">#移动Y坐标到500的位置</span><br><span class="line">js = &quot;window.scrollTo(0,500)&quot;</span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">#滚动到窗口底板</span><br><span class="line">js = &quot;window.scrollTo(0,document.body.scrollHeight)&quot;</span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">#相对滚动</span><br><span class="line">#scrollBy(x1,x2)表示相对当前位置(x,y)，页面下一步滚动到 x+x1,y+y1</span><br><span class="line">#有的时候，突然滚动到底部，可能会被反爬机制识别，这是用相对滑动，模拟人的操作</span><br><span class="line">js = &quot;window.scrollBy(0,100)&quot;</span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h3><p>比如：有的页面需要模拟鼠标操作，对页面元素进行拖拽操作，比如滑块验证码之类的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br></pre></td></tr></table></figure><p>ActionChains：鼠标操作类</p><ul><li>click：鼠标点击</li><li>double_click：鼠标双击</li><li>context_click：鼠标右击</li><li>move_to_element：鼠标移动到某个节点</li><li>click_and_hold：鼠标左键按下鼠标</li><li>move_by_offse：鼠标相对当前位置进行移动</li><li>drag_and_drop()：在一个位置按下鼠标，到另一个位置进行释放</li><li>release：释放鼠标</li><li>perform：执行动作</li></ul><p><a href="https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable">鼠标操作练习网站</a></p><p><strong>实例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ActionChains：鼠标操作类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- click：鼠标点击</span></span><br><span class="line"><span class="string">- double_click：鼠标双击</span></span><br><span class="line"><span class="string">- context_click：鼠标右击</span></span><br><span class="line"><span class="string">- move_to_element：鼠标移动到某个节点</span></span><br><span class="line"><span class="string">- click_and_hold：鼠标左键按下鼠标</span></span><br><span class="line"><span class="string">- move_by_offse：鼠标相对当前位置进行移动</span></span><br><span class="line"><span class="string">- drag_and_drop()：在一个位置按下鼠标，到另一个位置进行释放</span></span><br><span class="line"><span class="string">- release：释放鼠标</span></span><br><span class="line"><span class="string">- perform：执行动作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到子iframe</span></span><br><span class="line">driver.switch_to.frame(driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;iframeResult&quot;]&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到拖拽块元素</span></span><br><span class="line">dragElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;draggable&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化 ActionChains对象</span></span><br><span class="line">ac = ActionChains(driver)</span><br><span class="line"><span class="comment">#将鼠标移动到该元素上</span></span><br><span class="line">ac.move_to_element(dragElement)</span><br><span class="line"><span class="comment">#按住鼠标不放</span></span><br><span class="line">ac.click_and_hold()</span><br><span class="line"><span class="comment">#将鼠标移动到另一个元素</span></span><br><span class="line">ac.move_to_element(driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;droppable&quot;]&#x27;</span>))</span><br><span class="line"><span class="comment">#执行鼠标动作</span></span><br><span class="line">ac.perform()</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517184401515.png" alt="image-20240517184401515"></p><h3 id="selenium携带cookie登录"><a href="#selenium携带cookie登录" class="headerlink" title="selenium携带cookie登录"></a>selenium携带cookie登录</h3><p>很多网站需要登录才能访问其他页面，这种情况我们需要首先需要利用selenium模拟登录获取网站的cookie信息，然后在访问其他网站的时候模拟</p><p><a href="https://blog.csdn.net/weixin_43821172/article/details/105199481">参考资料</a></p><h2 id="selenium特征检测"><a href="#selenium特征检测" class="headerlink" title="selenium特征检测"></a>selenium特征检测</h2><p><a href="https://zhuanlan.zhihu.com/p/321928394">参考资料 js文件下载地址</a></p><h3 id="selenium启动的浏览器可能具有以下特殊的特征"><a href="#selenium启动的浏览器可能具有以下特殊的特征" class="headerlink" title="selenium启动的浏览器可能具有以下特殊的特征"></a>selenium启动的浏览器可能具有以下特殊的特征</h3><ul><li>User-Agent字符串<ul><li>Selenium启动的浏览器通常具有特定的User-Agent字符串，可以通过检查User-Agent来判断是否为Selenium启动的浏览器</li></ul></li><li>自动化工具标识<ul><li>Selenium启动的浏览器可能会在请求头中包含一些自动化工具的标识，例如<code>Requested-With</code>、<code>DNT</code>等</li></ul></li><li>WebDriver相关属性<ul><li>Selenium启动的浏览器可能会在全局<code>window</code>对象中注入一些特殊的属性，例如<code>webdriver</code>、<code>navigator.webdriver</code>等</li></ul></li><li>页面加载行为<ul><li>Selenium启动的浏览器通常会以自动化的方式加载页面，可能会出现一些快速点击、输入文本等行为</li></ul></li><li>元素检测<ul><li>Selenium启动浏览器的时候会在DOM中插入一些特定的元素或者属性，用于控制浏览器行为，可以通过检测这些特定的元素或属性来判断是否为Selenium启动的浏览器</li></ul></li></ul><h3 id="如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征"><a href="#如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征" class="headerlink" title="如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征"></a>如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征</h3><ul><li><code>--disable-infobars</code>：禁止显示Chrome浏览器正在受到自动测试软件控制的通知栏</li><li><code>excludeSwitches</code>、<code>enable-automation</code>：排除启动自动化扩展程序的开关，可以防止被网站检测到使用了自动化测试工具，减少被反爬虫封锁的可能</li><li><code>useAutomationExtension:False</code>：禁用自动化扩展程序，同样为了避免被网站检测到使用了自动化工具</li><li>通过<code>Page.addScriptToEvaluateOnNewDocument</code>方法，可以在每次页面加载时执行指定的JavaScript代码，我们每次打开新页面之前，执行<code>hide.js</code>来隐藏selenium启动浏览器生成的属性，从而防止被检测出来时爬虫</li></ul><h3 id="绕过特征检测案例"><a href="#绕过特征检测案例" class="headerlink" title="绕过特征检测案例"></a>绕过特征检测案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">目标网站: https://www.aqistudy.cn/ 对selenium做了反爬</span></span><br><span class="line"><span class="string">如果用selenium打开，是不会有数据显示的</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置浏览器配置,隐藏selenium一些特性</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">#添加防检测的参数</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-infobars&quot;</span>)</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;excludeSwitches&quot;</span>,[<span class="string">&quot;enable-automation&quot;</span>])</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;useAutomationExtension&quot;</span>,<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#添加浏览器头</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#每次打开新的页面之前，执行该脚本，去除selenium打开浏览器生成的相关属性特征</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../stealth.min.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    js = f.read()</span><br><span class="line">driver.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>,&#123;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: js</span><br><span class="line">&#125;)</span><br><span class="line">url = <span class="string">&#x27;https://www.aqistudy.cn/&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="JS逆向分析"><a href="#JS逆向分析" class="headerlink" title="JS逆向分析"></a>JS逆向分析</h2><h3 id="js参数加密案例"><a href="#js参数加密案例" class="headerlink" title="js参数加密案例"></a>js参数加密案例</h3><p>许多网站的请求参数都是加密传递的，要模拟发送请求，就得直到参数是怎么加密的，然后用代码实现加密的过程</p><p>比如对于一些网站的登录页面，其账号、密码传输时是通过某种加密算法加密后再发送请求的</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>对于 <a href="https://www.94mxd.com.cn/signin">网站</a>的登录界面，</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517194933379.png" alt="image-20240517194933379"></p><p>我们输入账号、密码模拟登录，抓包分析，发现其密码是加密后的数据</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517195033515.png" alt="image-20240517195033515"></p><p>找到调用的js文件</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517202540845.png" alt="image-20240517202540845"></p><p>我们班通过打断点分析，定位带其js代码中加密的函数,实际上是一个 盐值拼接，然后采用md5加密得到</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517202750673.png" alt="image-20240517202750673"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517202817522.png" alt="image-20240517202817522"></p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment">#md5加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hashPwd</span>(<span class="params">password</span>):</span><br><span class="line">    <span class="comment">#盐值</span></span><br><span class="line">    saltValue = <span class="string">&quot;Hq44cyp4mT9Fh5eNrZ67bjifidFhW%fb0ICjx#6gE59@P@Hr8%!WuYBa1yvytq$qh1FEM18qA8Hp9m3VLux9luIYpeYzA2l2W3Z&quot;</span></span><br><span class="line">    <span class="comment">#加密</span></span><br><span class="line">    strVal = password+saltValue</span><br><span class="line"></span><br><span class="line">    hashObj = hashlib.md5()</span><br><span class="line">    hashObj.update(strVal.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    md5StrVal = hashObj.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> md5StrVal</span><br></pre></td></tr></table></figure><p>当然，如果我们采用selenium模拟登录，无需直到其加密算法，直接在输入框中输入明文，即可模拟登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.94mxd.com.cn/signin&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;1985439923@qq.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wu123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#模拟登录</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位元素输入值</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;email&quot;]&#x27;</span>).send_keys(params[<span class="string">&quot;email&quot;</span>])</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;password&quot;]&#x27;</span>).send_keys(params[<span class="string">&quot;password&quot;</span>])</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#点击登录按钮</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;container&quot;]/div/div/div[2]/div[2]//button&#x27;</span>).click()</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="调用js加密代码"><a href="#调用js加密代码" class="headerlink" title="调用js加密代码"></a>调用js加密代码</h3><p>在逆向分析时，有时候会发现某个js加密算法会比较繁琐，用python还原同样的算法会比较费劲，此时，我们可以不必使用python去还原，而是利用python去直接调用JavaScript中定义的功能，通过调式分析加密算法所在的位置和源码，然后直接在代码中调用该js代码</p><p>python调用js，需要借助于第三方库<code>pyexcejs</code>，这个库底层调用<code>node.js</code>，所以还需要安装<code>node.js</code></p><p><strong>代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">python调用js用第三方库:</span></span><br><span class="line"><span class="string">    需要安装python第三方库:pyexecjs</span></span><br><span class="line"><span class="string">    需要安装: node.js</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line">jsCode=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function add(a,b)&#123;</span></span><br><span class="line"><span class="string">    return a+b</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function say()&#123;</span></span><br><span class="line"><span class="string">    return &quot;say,hello!!!&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#第一步：编译代码</span></span><br><span class="line">JS = execjs.<span class="built_in">compile</span>(jsCode)</span><br><span class="line"><span class="comment">#第二部调用</span></span><br><span class="line">result = JS.call(<span class="string">&quot;add&quot;</span>,<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line">message = JS.call(<span class="string">&quot;say&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><h2 id="验证码破解"><a href="#验证码破解" class="headerlink" title="验证码破解"></a>验证码破解</h2><h3 id="图像验证码破解"><a href="#图像验证码破解" class="headerlink" title="图像验证码破解"></a>图像验证码破解</h3><p>许多网站，在登陆的时候，除了输入账号、密码之外，还会显示一个图像验证码，那么这类网站应该如何破解？</p><p>对于 <a href="https://www.chaojiying.com/user/login/">超级鹰</a>：网站登陆页面，如下图所示：其会显示一个图像验证码，要想破解这类网站，就需要能够识别图像验证码中的字符</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518200110879.png" alt="image-20240518200110879" style="zoom: 33%;"></p><p>抓包分析，一打开登陆界面，其会自动向后台发送一个请求，获取一个图像验证码，且该同一链接地址多次请求，返回的结果均是不同的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518200524218.png" alt="image-20240518200524218" style="zoom:33%;"></p><p>对于其点击登陆按钮发送的登陆请求，抓包如下图所示：</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518200840384.png" alt="image-20240518200840384" style="zoom:50%;"></p><p>综上所述，该问题的难点就在于验证码的识别问题</p><p><strong>破解步骤：</strong></p><ul><li><p>发送请求获取验证码</p><ul><li>这个问题比较棘手，因为发现，同一个图片地址，每次请求时，其返回的图片都是不一样的</li><li>那么他是如何将验证码与登陆关联起来的呢？通过同一会话session关联起来的</li></ul></li><li><p>识别验证码内容</p><ul><li><p>```python<br>“””<br>图像验证码: 需要获取验证码图片，然后识别图片里面的文本内容，这个就需要用到ocr技术</p><p>python中ocr识别库: ddddocr<br>该库是免费的，但是精度不是很高，有的时候会识别错误</p><p>如果精度要求比较高，可以找一些第三方收费服务：百度直接搜：打码平台 一般会支持各种类型的验证码识别<br>“””<br>import ddddocr</p><h1 id="创建ocr对象"><a href="#创建ocr对象" class="headerlink" title="创建ocr对象"></a>创建ocr对象</h1><p>ocr = ddddocr.DdddOcr()</p><h1 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h1><p>with open(“1.png”,”rb”) as f:</p><pre><code>image = f.read()</code></pre><h1 id="识别图片内容"><a href="#识别图片内容" class="headerlink" title="识别图片内容"></a>识别图片内容</h1><p>code = ocr.classification(image)<br>print(“识别结果:”,code)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 发送登陆请求</span><br><span class="line"></span><br><span class="line">**破解超级鹰网站登陆页面代码示例**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import requests</span><br><span class="line">import ddddocr</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">流程：</span><br><span class="line">    ①请求网站，获取图像验证码图片</span><br><span class="line">    ②调用第三方库识别图像验证码文本</span><br><span class="line">    ③构造请求，发送登陆请求</span><br><span class="line">    </span><br><span class="line">    注意：这整个过程需在同一会话session中进行</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">#获取图形验证码</span><br><span class="line">codeUrl = &quot;https://www.chaojiying.com/include/code/code.php?u=1&quot;</span><br><span class="line">codeImage = session.get(url=codeUrl).content</span><br><span class="line">with open(&quot;code.png&quot;,&quot;wb&quot;) as f:</span><br><span class="line">    f.write(codeImage)</span><br><span class="line">#调用第三方库识别图像验证码</span><br><span class="line">ocr = ddddocr.DdddOcr()</span><br><span class="line">code = ocr.classification(codeImage)</span><br><span class="line">print(&quot;验证码：&quot;,code)</span><br><span class="line">#构造登陆请求</span><br><span class="line">loginUrl = &quot;https://www.chaojiying.com/user/login/&quot;</span><br><span class="line">params=&#123;</span><br><span class="line">    &quot;user&quot;: &quot;HustRich&quot;,</span><br><span class="line">    &quot;pass&quot;: &quot;wu123456&quot;,</span><br><span class="line">    &quot;imgtxt&quot;: code,</span><br><span class="line">    &quot;act&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line">headers=&#123;</span><br><span class="line">    &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span><br><span class="line">    # ,&quot;Cookie&quot;:&quot;PHPSESSID=c2s08og1j8244us3qc4ub9d217; __51cke__=; __tins__16851773=%7B%22sid%22%3A%201716036582790%2C%20%22vd%22%3A%203%2C%20%22expires%22%3A%201716039030500%7D; __51laig__=4&quot;</span><br><span class="line">&#125;</span><br><span class="line">response = session.post(url=loginUrl,data=params,headers=headers)</span><br><span class="line">print(response.content)</span><br><span class="line"></span><br><span class="line">with open(&quot;res.html&quot;,&quot;wb&quot;) as f:</span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="js逆向：滑动验证码的轨迹破解"><a href="#js逆向：滑动验证码的轨迹破解" class="headerlink" title="js逆向：滑动验证码的轨迹破解"></a>js逆向：滑动验证码的轨迹破解</h3><p>案例网站：<a href="https://user.qunar.com/passport/login.jsp">去哪儿</a></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100404382.png" alt="image-20240518100404382" style="zoom: 33%;"></p><p><strong>需求分析</strong></p><p>我们输入手机号，然后点击获取验证码，会弹出一个滑动验证码窗口，经过验证之后才会收到验证码，然后点击登陆注册，此过程向后端的请求包括：</p><ul><li>滑动验证码的请求</li><li>获取手机验证码的请求</li><li>登陆接口的请求</li></ul><p><strong>滑动验证码请求</strong></p><p>只有将滑动验证码拖动到最右端才能成功发送该请求</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100928636.png" alt="image-20240518100928636"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100848451.png" alt="image-20240518100848451" style="zoom:50%;"></p><p>观察滑动验证码请求参数，发现其中有一个未知的参数 data</p><p><strong>手机验证码请求</strong></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100959013.png" alt="image-20240518100959013" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518101033801.png" alt="image-20240518101033801"></p><p><strong>登陆接口请求</strong></p><p>验证码破解相关知识等后续有需求再了解</p><h2 id="异步爬虫"><a href="#异步爬虫" class="headerlink" title="异步爬虫"></a>异步爬虫</h2><p>当我们有大量数据需要抓取时，总的抓取时间会比较长，这个时候，如果需要提高数据的抓取效率，需要用到多线程异步并发爬取</p><p>该方法缺陷，并发会导致短时间对目标网站服务器大量请求，使得目标网站压力过大，如果被检测，可能触发一系列的反爬机制</p><p>该方法一般需要配合代理IP去使用，每次请求从不同ip发出，这样即使访问很频繁，由于请求来自于不同ip，被检测概率会比较低</p><h3 id="抓取需求"><a href="#抓取需求" class="headerlink" title="抓取需求"></a>抓取需求</h3><p>目标网站：<a href="https://www.myfreemp3.com.cn/">https://www.myfreemp3.com.cn/</a></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518104553106.png" alt="image-20240518104553106" style="zoom: 33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518105026649.png" alt="image-20240518105026649" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518105052266.png" alt="image-20240518105052266" style="zoom:33%;"></p><p>我们的目标是抓取该网站上周杰伦所有歌曲</p><ul><li><p>要求：下载每一首歌曲的封面图、mp3文件，歌词，然后保存在本地，要求保存的格式如下：</p><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518105221295.png" alt="image-20240518105221295" style="zoom:33%;"></li></ul></li><li><p>子目录名为各个歌曲名，里面包含mp3文件、封面图png，歌词文本txt文件</p></li></ul><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ul><li>先抓取搜索歌手所有的歌曲，提取歌曲名、歌手、封面图、歌词信息</li><li>然后再去下载歌曲、封面、歌词保存为文件</li></ul><h4 id="获取歌曲列表接口"><a href="#获取歌曲列表接口" class="headerlink" title="获取歌曲列表接口"></a>获取歌曲列表接口</h4><p>抓包分析：</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110007948.png" alt="image-20240518110007948" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110055152.png" alt="image-20240518110055152" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110125909.png" alt="image-20240518110125909" style="zoom:33%;"></p><p><img src="03 爬虫进阶//image-20240518110235118.png" alt="image-20240518110235118" style="zoom:33%;"></p><p>歌曲列表接口：</p><blockquote><p>url地址：</p><ul><li><a href="https://www.myfreemp3.com.cn/">https://www.myfreemp3.com.cn/</a></li></ul><p>请求方法：</p><ul><li>POST</li></ul><p>参数：</p><ul><li>input: 歌手名</li><li>filter: name</li><li>page: 页码</li><li>type: netease</li></ul><p>返回响应:</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110437045.png" alt="image-20240518110437045" style="zoom:50%;"></p></blockquote><h4 id="单线程下载"><a href="#单线程下载" class="headerlink" title="单线程下载"></a>单线程下载</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析:</span></span><br><span class="line"><span class="string">    抓取网站:https://www.myfreemp3.com.cn/ 中指定歌手的歌曲:</span></span><br><span class="line"><span class="string">        下载数据包括: 歌曲封面图片、歌曲歌词文本文件，歌曲mp3资源文件</span></span><br><span class="line"><span class="string">        文件存储格式:</span></span><br><span class="line"><span class="string">            歌手名:</span></span><br><span class="line"><span class="string">                歌曲名:</span></span><br><span class="line"><span class="string">                    歌曲名_作者.png</span></span><br><span class="line"><span class="string">                    歌曲名_作者.txt</span></span><br><span class="line"><span class="string">                    歌曲名_作者.mp3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrawMusic</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,baseDir</span>):</span><br><span class="line">        self.url = <span class="string">&quot;https://www.myfreemp3.com.cn&quot;</span></span><br><span class="line">        self.headers=&#123;</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">                ,<span class="string">&quot;X-Requested-With&quot;</span>:<span class="string">&quot;XMLHttpRequest&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        self.params=&#123;</span><br><span class="line">            <span class="string">&quot;input&quot;</span>: <span class="string">&quot;周杰伦&quot;</span>,</span><br><span class="line">            <span class="string">&quot;filter&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">            <span class="string">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;netease&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.baseDir = baseDir</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendRequest</span>(<span class="params">self,name,pageIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 歌手姓名</span></span><br><span class="line"><span class="string">        :param pageIndex: 当前页码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.params[<span class="string">&quot;name&quot;</span>]=name</span><br><span class="line">        self.params[<span class="string">&quot;page&quot;</span>]=pageIndex</span><br><span class="line">        response = requests.post(url=self.url, data=self.params, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        data = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;list&quot;</span>]</span><br><span class="line">        curSaveDir = os.path.join(self.baseDir,name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curSaveDir):</span><br><span class="line">            os.makedirs(curSaveDir)</span><br><span class="line">            self.parseData(curSaveDir,data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parseData</span>(<span class="params">self,curSaveDir,data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param curSaveDir: 该歌手数据存储根目录</span></span><br><span class="line"><span class="string">        :param data: 需要被解析的数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            <span class="comment"># 歌词标题</span></span><br><span class="line">            title = item[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">            <span class="comment"># 作者</span></span><br><span class="line">            author = item[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">            <span class="comment"># 封面图片链接</span></span><br><span class="line">            pic = item[<span class="string">&quot;pic&quot;</span>]</span><br><span class="line">            <span class="comment"># 歌词文本</span></span><br><span class="line">            tex = item[<span class="string">&quot;lrc&quot;</span>]</span><br><span class="line">            <span class="comment"># 歌词下载链接</span></span><br><span class="line">            mp3Link = item[<span class="string">&quot;url&quot;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment">#当前歌曲数据存储路径</span></span><br><span class="line">            curMusicSaveDir = os.path.join(curSaveDir, title)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curMusicSaveDir):</span><br><span class="line">                os.mkdir(curMusicSaveDir)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;benign dowmload &#123;&#125;&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">                <span class="comment"># 图片</span></span><br><span class="line">                curPicSavePath = os.path.join(curMusicSaveDir, title + <span class="string">&quot;.png&quot;</span>)</span><br><span class="line">                self.downloadFile(pic, curPicSavePath)</span><br><span class="line">                <span class="comment"># 歌词</span></span><br><span class="line">                curTexSavePath = os.path.join(curMusicSaveDir, title + <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(curTexSavePath, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(tex)</span><br><span class="line">                <span class="comment"># MP3</span></span><br><span class="line">                curMp3SavePath = os.path.join(curMusicSaveDir, title + <span class="string">&quot;.mp3&quot;</span>)</span><br><span class="line">                self.downloadFile(mp3Link, curMp3SavePath)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;歌曲&#123;&#125;已被下载，无需重复下载&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">downloadFile</span>(<span class="params">self,url, path</span>):</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(url+<span class="string">&quot; 下载失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    crawDownload = CrawMusic(<span class="string">r&quot;E:\tempData\musics&quot;</span>)</span><br><span class="line">    crawDownload.sendRequest(<span class="string">&quot;周杰伦&quot;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="异步下载"><a href="#异步下载" class="headerlink" title="异步下载"></a>异步下载</h4><p>上面代码是单线程下载，而且只是下载单页数据，当需要下载大量数据时，就必须采用多线程异步下载</p><p>整个爬虫其实主要分为以下三个模块：</p><ul><li>发送请求获取响应</li><li>数据解析</li><li>数据存储</li><li>如下图所示，对于这三个模块我们可以进行异步处理，模块一线程请求后的数据进入一个管道，模块二线程从管道中拿取数据进行解析，然后解析后的结果放入另一个管道，模块三线程从管道二中拿取解析后的数据进行存储，这个过程，三个模块相互独立，如果哪个部分耗时较多，可以采用多线程进行处理</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518182355861.png" alt="image-20240518182355861" style="zoom:50%;"></p><p><strong>多线程代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析:</span></span><br><span class="line"><span class="string">    抓取网站:https://www.myfreemp3.com.cn/ 中指定歌手的歌曲:</span></span><br><span class="line"><span class="string">        下载数据包括: 歌曲封面图片、歌曲歌词文本文件，歌曲mp3资源文件</span></span><br><span class="line"><span class="string">        文件存储格式:</span></span><br><span class="line"><span class="string">            歌手名:</span></span><br><span class="line"><span class="string">                歌曲名:</span></span><br><span class="line"><span class="string">                    歌曲名_作者.png</span></span><br><span class="line"><span class="string">                    歌曲名_作者.txt</span></span><br><span class="line"><span class="string">                    歌曲名_作者.mp3</span></span><br><span class="line"><span class="string">    并发下载:</span></span><br><span class="line"><span class="string">        请求、数据解析、数据存储三个部分用多个不同线程处理</span></span><br><span class="line"><span class="string">        各个线程之间用 queue.Queue来进行数据传递，该对象是线程安全的</span></span><br><span class="line"><span class="string">        queue的用法参考:https://blog.csdn.net/songpeiying/article/details/131761990</span></span><br><span class="line"><span class="string">        queue = queue.Queue()</span></span><br><span class="line"><span class="string">        queue.put() 添加数据  使用put()方法将元素放入队列。如果队列已满，put()方法会阻塞直到有空余空间</span></span><br><span class="line"><span class="string">        queue.get() 获取数据  使用get()方法从队列中取出元素。如果队列为空，get()方法会阻塞直到有元素可用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        queue.get(timeout=xx) 等待xx秒如果还未获取数据则会报错，如果不添加timeout参数则会一直阻塞</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrawMusic</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,baseDir</span>):</span><br><span class="line">        self.url = <span class="string">&quot;https://www.myfreemp3.com.cn&quot;</span></span><br><span class="line">        self.headers=&#123;</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">                ,<span class="string">&quot;X-Requested-With&quot;</span>:<span class="string">&quot;XMLHttpRequest&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        self.params=&#123;</span><br><span class="line">            <span class="string">&quot;input&quot;</span>: <span class="string">&quot;周杰伦&quot;</span>,</span><br><span class="line">            <span class="string">&quot;filter&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">            <span class="string">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;netease&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.baseDir = baseDir</span><br><span class="line">        <span class="comment">#响应数据类管道</span></span><br><span class="line">        self.responseDataQueue = queue.Queue()</span><br><span class="line">        <span class="comment">#解析数据管道</span></span><br><span class="line">        self.parseDataQueue = queue.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendRequest</span>(<span class="params">self,name,pageIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 歌手姓名</span></span><br><span class="line"><span class="string">        :param pageIndex: 当前页码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.params[<span class="string">&quot;input&quot;</span>]=name</span><br><span class="line">        self.params[<span class="string">&quot;page&quot;</span>]=pageIndex</span><br><span class="line">        response = requests.post(url=self.url, data=self.params, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        data = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;list&quot;</span>]</span><br><span class="line">        curSaveDir = os.path.join(self.baseDir,name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curSaveDir):</span><br><span class="line">            os.makedirs(curSaveDir)</span><br><span class="line">        self.responseDataQueue.put((curSaveDir,data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parseData</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param curSaveDir: 该歌手数据存储根目录</span></span><br><span class="line"><span class="string">        :param data: 需要被解析的数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                curSaveDir, data = self.responseDataQueue.get(timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span> queue.Empty:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">                <span class="comment"># 歌词标题</span></span><br><span class="line">                title = item[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">                <span class="comment"># 作者</span></span><br><span class="line">                author = item[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">                <span class="comment"># 封面图片链接</span></span><br><span class="line">                pic = item[<span class="string">&quot;pic&quot;</span>]</span><br><span class="line">                <span class="comment"># 歌词文本</span></span><br><span class="line">                tex = item[<span class="string">&quot;lrc&quot;</span>]</span><br><span class="line">                <span class="comment"># 歌词下载链接</span></span><br><span class="line">                mp3Link = item[<span class="string">&quot;url&quot;</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment">#当前歌曲数据存储路径</span></span><br><span class="line">                curMusicSaveDir = os.path.join(curSaveDir, title)</span><br><span class="line">                self.parseDataQueue.put((curMusicSaveDir,title,author,pic,tex,mp3Link))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">saveData</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                curMusicSaveDir, title, author,pic, tex, mp3Link = self.parseDataQueue.get(timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span> queue.Empty:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curMusicSaveDir):</span><br><span class="line">                os.mkdir(curMusicSaveDir)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;benign dowmload &#123;&#125;&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">                <span class="comment"># 图片</span></span><br><span class="line">                curPicSavePath = os.path.join(curMusicSaveDir, title +<span class="string">&quot;_&quot;</span>+author+ <span class="string">&quot;.png&quot;</span>)</span><br><span class="line">                self.downloadFile(pic, curPicSavePath)</span><br><span class="line">                <span class="comment"># 歌词</span></span><br><span class="line">                curTexSavePath = os.path.join(curMusicSaveDir, title +<span class="string">&quot;_&quot;</span>+author+ <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(curTexSavePath, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(tex)</span><br><span class="line">                <span class="comment"># MP3</span></span><br><span class="line">                curMp3SavePath = os.path.join(curMusicSaveDir, title +<span class="string">&quot;_&quot;</span>+author+ <span class="string">&quot;.mp3&quot;</span>)</span><br><span class="line">                self.downloadFile(mp3Link, curMp3SavePath)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;歌曲&#123;&#125;已被下载，无需重复下载&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">downloadFile</span>(<span class="params">self,url, path</span>):</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(url+<span class="string">&quot; 下载失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    crawDownload = CrawMusic(<span class="string">r&quot;E:\tempData\musics&quot;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    多线程，我们采用线程池来进行处理</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        pool.submit(crawDownload.sendRequest,<span class="string">&quot;蔡依林&quot;</span>,<span class="number">1</span>)</span><br><span class="line">        pool.submit(crawDownload.parseData)</span><br><span class="line">        <span class="comment">#save data比较耗时，采用三个线程</span></span><br><span class="line">        pool.submit(crawDownload.saveData)</span><br><span class="line">        pool.submit(crawDownload.saveData)</span><br><span class="line">        pool.submit(crawDownload.saveData)</span><br></pre></td></tr></table></figure><h2 id="Cookie池和IP代理"><a href="#Cookie池和IP代理" class="headerlink" title="Cookie池和IP代理"></a>Cookie池和IP代理</h2><p>多线程并发存在问题：同一时间向目标服务器发送请求过多，且请求来自于同一客户端，容易被对方察觉，触发反爬机制导致失败</p><h3 id="代理IP的使用"><a href="#代理IP的使用" class="headerlink" title="代理IP的使用"></a>代理IP的使用</h3><h4 id="代理IP的基本概念"><a href="#代理IP的基本概念" class="headerlink" title="代理IP的基本概念"></a>代理IP的基本概念</h4><h5 id="背景：为什么要使用代理"><a href="#背景：为什么要使用代理" class="headerlink" title="背景：为什么要使用代理"></a>背景：为什么要使用代理</h5><ul><li>一段时间内，检测IP访问频率，访问太频繁会被识别成爬虫被对方屏蔽</li><li>使用代理IP可以让服务器以为不是同一客户端在请求</li><li>防止我们真实的IP地址被泄露，被追究</li></ul><h5 id="使用代理的请求过程"><a href="#使用代理的请求过程" class="headerlink" title="使用代理的请求过程"></a>使用代理的请求过程</h5><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518190455761.png" alt="image-20240518190455761" style="zoom:50%;"></p><h4 id="代理IP的获取"><a href="#代理IP的获取" class="headerlink" title="代理IP的获取"></a>代理IP的获取</h4><p>目前有许多平台会提供代理IP的服务，且一般注册之后都会赠送一些免费使用的额度</p><h4 id="代理IP平台"><a href="#代理IP平台" class="headerlink" title="代理IP平台"></a><strong>代理IP平台</strong></h4><ul><li>天启  <a href="https://www.tianqiip.com/getIp">https://www.tianqiip.com/getIp</a><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518191323650.png" alt="image-20240518191323650" style="zoom: 33%;"></li></ul></li></ul><h4 id="在python代码中如何配置代理"><a href="#在python代码中如何配置代理" class="headerlink" title="在python代码中如何配置代理"></a>在python代码中如何配置代理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ip =<span class="string">&quot;122.239.153.110&quot;</span></span><br><span class="line">port =<span class="number">40020</span></span><br><span class="line">proxies=&#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">f&quot;htpp://<span class="subst">&#123;ip&#125;</span>.<span class="subst">&#123;port&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#通过参数 proxies配置代理</span></span><br><span class="line">response = requests.get(url=url,headers=headers,proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(proxies)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure><h4 id="动态ip池"><a href="#动态ip池" class="headerlink" title="动态ip池"></a>动态ip池</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">天启平台有教程，更具生成的api链接发送get请求可以获取代理Ip列表</span></span><br><span class="line"><span class="string">每次在爬虫时，随机从列表中选择一个代理ip</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpiderCraw</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.proxyGetUrl = <span class="string">&quot;http://api.tianqiip.com/getip?secret=ka9cjsm0egycakir&amp;num=10&amp;type=json&amp;port=1&amp;time=5&amp;mr=1&amp;sign=d50e433630f39d20c428a0d5c6c033e7&quot;</span></span><br><span class="line">        self.ipList = requests.get(self.proxyGetUrl).json()[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getProxyIp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> random.choice(self.ipList)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSendRequest</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#每次发送请求，从ip池中随机选择一个代理ip</span></span><br><span class="line">        proxyIp = self.getProxyIp()</span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(proxyIp[<span class="string">&quot;ip&quot;</span>],proxyIp[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">        requests.get(url=url,proxies=proxies)</span><br><span class="line">url =</span><br><span class="line">ipPool = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(ipPool.json()[<span class="string">&quot;data&quot;</span>])</span><br></pre></td></tr></table></figure><h3 id="Cookie池的搭建"><a href="#Cookie池的搭建" class="headerlink" title="Cookie池的搭建"></a>Cookie池的搭建</h3><h4 id="爬虫中使用cookie的利弊"><a href="#爬虫中使用cookie的利弊" class="headerlink" title="爬虫中使用cookie的利弊"></a>爬虫中使用cookie的利弊</h4><h5 id="带上cookie好处"><a href="#带上cookie好处" class="headerlink" title="带上cookie好处"></a>带上cookie好处</h5><ul><li>能够访问登陆后的页面</li><li>能够实现部分反爬</li></ul><h4 id="带上cookie的坏处"><a href="#带上cookie的坏处" class="headerlink" title="带上cookie的坏处"></a>带上cookie的坏处</h4><ul><li>一套cookie往往对应一个用户的信息，请求太频繁容易被对方识别为爬虫</li><li>上面问题如何解决？使用多个账号，每次请求的cookie不一样即可</li></ul><h4 id="cookie池的搭建"><a href="#cookie池的搭建" class="headerlink" title="cookie池的搭建"></a>cookie池的搭建</h4><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><ul><li>主备多个账号，越多越好</li><li>爬取数据之前对这些账号进行批量登录，并将cookie保存在本地cookie池中<ul><li>需要登陆账号的可以这么做</li><li>不需要登陆账号的，可以启动多个浏览器，手动登陆，然后将cookie值复制存储在本地</li></ul></li><li>爬虫执行之后，每次从cookie池中随机选择一个cookie</li></ul><p><strong>示例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CookieManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.cookieList=[]</span><br><span class="line">        <span class="comment">#实现准备一组账号密码</span></span><br><span class="line">        self.userInfoList=[</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123321&quot;</span>,<span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx1&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123322&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx2&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123323&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx3&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123324&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx4&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123325&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx5&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> userInfo <span class="keyword">in</span> self.userInfoList:</span><br><span class="line">            self.loginGetCookie(userInfo)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.cookieList:</span><br><span class="line">            <span class="built_in">print</span>(item)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loginGetCookie</span>(<span class="params">self,userInfo</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        登陆函数，并从响应中获取cookie，然后保存在cookie池中</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        url=<span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line">        response = requests.post(url,data=userInfo)</span><br><span class="line">        self.cookieList.append(response.cookies)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getCookie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        供外部使用，随机从cookie池中选择一个cookie</span></span><br><span class="line"><span class="string">        外部使用时:直接在requests中以cookies参数进行传递</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> random.choice(self.cookieList)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cookieManager = CookieManager()</span><br><span class="line">    <span class="built_in">print</span>(cookieManager.getCookie())</span><br></pre></td></tr></table></figure><h3 id="Cookie池-IP池"><a href="#Cookie池-IP池" class="headerlink" title="Cookie池+IP池"></a>Cookie池+IP池</h3><p>同一个IP使用不同的Cookie，还是会出现同一个IP频繁请求，如果每个Cookie都绑定一组代理IP，这个时候就很难会被检测出来</p><p>基本思路：用不同ip去登陆不同账号，得到不同cookie，这样每一个代理Ipd都会对应多个cookie，在爬虫启动时，每次从ip_cookei池中选择一个ip，cookie对</p><h2 id="综合项目实战案例"><a href="#综合项目实战案例" class="headerlink" title="综合项目实战案例"></a>综合项目实战案例</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p>某原创音乐网站数据抓取</p><p>需求：抓取某原创音乐平台整站数据</p><p>地址：<a href="https://5sing.kugou.com/">https://5sing.kugou.com/</a></p><p>分页抓取该网站所有的原创音乐数据，一共50页</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518222840513.png" alt="image-20240518222840513" style="zoom: 33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518222855995.png" alt="image-20240518222855995" style="zoom:33%;"></p><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a><strong>抓包分析</strong></h3><p>通过抓包分析，我们发现该网站数据不是Ajax请求，直接抓取请求页面即可获取对应数据</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518223255287.png" alt="image-20240518223255287" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518223819051.png" alt="image-20240518223819051" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518224023061.png" alt="image-20240518224023061"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518230616148.png" alt="image-20240518230616148"></p><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>获取歌曲列表、提取歌曲的歌名、歌曲首页地址<ol><li>发送请求，获取页面的HTML</li><li>解析HTML，提取歌名和歌曲ID、首页地址</li></ol></li><li>获取每首歌的下载地址<ol><li>发送请求获取歌曲的下载地址</li></ol></li><li>下载歌曲，保存在本地<ol><li>下载歌曲，保存本地</li></ol></li></ol><p>数据量分析：一共50页，每页20条数据，要完整的下载一首歌的话，需要通过两次请求，第一次请求页面，获取歌曲id，第二次针对该歌曲地址，将其下载到本地</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><h4 id="爬取所有歌曲的名称和id数据"><a href="#爬取所有歌曲的名称和id数据" class="headerlink" title="爬取所有歌曲的名称和id数据"></a>爬取所有歌曲的名称和id数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://5sing.kugou.com/yc/list&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#参数，经过分析，前三个参数应该是固定的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&quot;t&quot;</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;l&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;p&quot;</span>:page  <span class="comment">#页码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url=url,headers=headers,params=params).content.decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#解析htm，获取歌曲名称、链接地址</span></span><br><span class="line">    html = etree.HTML(response)</span><br><span class="line">    dlList = html.xpath(<span class="string">&#x27;//div[@class=&quot;lists&quot;]/dl&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> dlItem <span class="keyword">in</span> dlList:</span><br><span class="line">        title = dlItem.xpath(<span class="string">&#x27;.//h3/a/text()&#x27;</span>)[<span class="number">0</span>] <span class="comment">#名称</span></span><br><span class="line">        url = <span class="string">&#x27;https://5sing.kugou.com&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(dlItem.xpath(<span class="string">&#x27;.//h3/a/@href&#x27;</span>)[<span class="number">0</span>]) <span class="comment">#首页地址</span></span><br><span class="line">        <span class="built_in">id</span> = dlItem.xpath(<span class="string">&#x27;./dd[@class=&quot;l_action&quot;]/a[@class=&quot;m_date_shou&quot;]/@argid&#x27;</span>)[<span class="number">0</span>]<span class="comment">#id</span></span><br><span class="line">        <span class="built_in">print</span>(title,url,<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><h4 id="获取各个歌曲源文件的下载地址"><a href="#获取各个歌曲源文件的下载地址" class="headerlink" title="获取各个歌曲源文件的下载地址"></a>获取各个歌曲源文件的下载地址</h4><p>&gt;<br>&gt;</p><blockquote><p>抓包分析</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519000844468.png" alt="image-20240519000844468" style="zoom: 33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519001011699.png" alt="image-20240519001011699" style="zoom:33%;"></p><p>两个不同歌曲请求的参数对比：</p><p>我们发现只有songid和signature这两个参数不一样，songid即为我们前面抓取的歌曲id，而难点就在于signature不知从何而来</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519001105427.png" alt="image-20240519001105427"></p></blockquote><p>难点：参数signature不知从何而来，这个可能可能设计到js加密</p><p>如何分析网站生成signature的js代码？</p><p>在所有源代码中搜索signature</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519002901327.png" alt="image-20240519002901327"></p><p> 定位到该位置</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519003003459.png" alt="image-20240519003003459" style="zoom: 80%;"></p><p>我们在控制台执行，发现n的值为</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519003149366.png" alt="image-20240519003149366"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n的结构：</span><br><span class="line">字符串: o = &quot;5uytoxQewcvIc1gn1PlNF0T2jbbOzRl&quot;</span><br><span class="line">与请求参数的子字符串事项首位拼接得到拼接得到</span><br><span class="line"></span><br><span class="line">即 n = o + params +o</span><br><span class="line">我们经过多次实验发现字符串o为定值，不同请求、不同浏览器该值都是一致的</span><br></pre></td></tr></table></figure><p>这个js代码比较复杂，我们无法用python代码等价复现，只能将js代码拷贝至本地，由python调用执行</p><h2 id="其他补充知识"><a href="#其他补充知识" class="headerlink" title="其他补充知识"></a>其他补充知识</h2><h3 id="免费邮箱资源"><a href="#免费邮箱资源" class="headerlink" title="免费邮箱资源"></a>免费邮箱资源</h3><p>针对账户限制，注册账号需要大量邮箱进行注册新的账号</p><p><a href="https://blog.csdn.net/julius_lee/article/details/106802027">需要很多邮箱怎么办？分享几个不错的办法可无限安全生成多个邮箱</a></p><h3 id="免费代理IP资源"><a href="#免费代理IP资源" class="headerlink" title="免费代理IP资源"></a>免费代理IP资源</h3><p>设置自己本地的梯子IP地址：</p><p>打开clash软件，查看代理端口为7890，在代码首部添加如下代码，即可使用本地代理转发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置代理</span></span><br><span class="line">os.environ[<span class="string">&quot;http_proxy&quot;</span>] = <span class="string">&quot;http://localhost:7890&quot;</span></span><br><span class="line">os.environ[<span class="string">&quot;https_proxy&quot;</span>] = <span class="string">&quot;http://localhost:7890&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240604093135783.png" alt="image-20240604093135783"></p><p><a href="https://www.bytezonex.com/archives/8ZwHxBGP.html">参考资料一</a></p><h3 id="网站指纹反爬"><a href="#网站指纹反爬" class="headerlink" title="网站指纹反爬"></a>网站指纹反爬</h3><h4 id="背景-4"><a href="#背景-4" class="headerlink" title="背景"></a>背景</h4><p>我们使用<code>requests</code>库访问网站<a href="https://www.digikey.cn时，无论怎么设置头部信息，均是返回403页面，但是用浏览器或者PostMan访问时，均可得到正常的页面结果，这种情况大概率就是遇到了**原生模拟浏览器">https://www.digikey.cn时，无论怎么设置头部信息，均是返回403页面，但是用浏览器或者PostMan访问时，均可得到正常的页面结果，这种情况大概率就是遇到了**原生模拟浏览器</a> TLS/JA3 指纹的验证**，览器和<a href="https://so.csdn.net/so/search?q=postman&amp;spm=1001.2101.3001.7020">postman</a>都有自带指纹验证，而唯独requests库没有。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用第三方库<code>curl_cffi</code>访问，即可解决这个问题，其可以模仿对浏览器指纹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> curl_cffi <span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.digikey.cn&quot;</span>, impersonate=<span class="string">&quot;chrome110&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.content.decode(<span class="string">&quot;utf8&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://blog.csdn.net/lipachong/article/details/131213288">某网站指纹反爬处理</a></p><p><a href="https://www.bilibili.com/video/BV1nz421X7r8/?spm_id_from=333.337.search-card.all.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">JS逆向_浏览器JA3指纹信息</a></p><p><a href="https://pypi.org/project/curl-cffi/#description">curl-cffif官方文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬虫进阶&quot;&gt;&lt;a href=&quot;#爬虫进阶&quot; class=&quot;headerlink&quot; title=&quot;爬虫进阶&quot;&gt;&lt;/a&gt;爬虫进阶&lt;/h1&gt;&lt;p&gt;爬虫一定要找最新的教程，因为网站更新速度很快，老版教程很可能会过时，一些案例基本无法复现&lt;/p&gt;
&lt;h2 id=&quot;爬虫概述&quot;</summary>
      
    
    
    
    <category term="爬虫" scheme="https://bangwu2001.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="https://bangwu2001.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>爬虫概述</title>
    <link href="https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/"/>
    <id>https://bangwu2001.github.io/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/</id>
    <published>2024-05-21T14:57:42.000Z</published>
    <updated>2024-05-21T14:57:19.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫概述"><a href="#爬虫概述" class="headerlink" title="爬虫概述"></a>爬虫概述</h1><h2 id="爬虫的作用"><a href="#爬虫的作用" class="headerlink" title="爬虫的作用"></a>爬虫的作用</h2><ul><li>采集网络数据</li><li>自动化测试</li><li>实现一些脱离手动的操作，比如帮人投票、12306抢票、微信聊天助手</li><li>灰产，比如薅羊毛、网络攻击、做水军、刷单等</li></ul><h2 id="为什么要爬取数据-数据能做什么"><a href="#为什么要爬取数据-数据能做什么" class="headerlink" title="为什么要爬取数据(数据能做什么?)"></a>为什么要爬取数据(数据能做什么?)</h2><ul><li>聚合产品，比如新闻网站或者今日头条</li><li>搜索引擎，比如谷歌、百度</li><li>数据分析、人工智能的源数据</li><li>特定领域的数据服务，比如二手车估价、天气预报、去哪儿网等</li></ul><h2 id="爬虫的前置知识"><a href="#爬虫的前置知识" class="headerlink" title="爬虫的前置知识"></a>爬虫的前置知识</h2><ul><li>计算机网络协议，比如http/https协议、tcp/ip协议、socket编程</li><li>一定的前端基础，不用太深入</li><li>正则表达式，主要是用来进行数据分析的</li><li>数据存储技术，比如分布式存储</li><li>并发处理技术，多线程、多进程、线程池等技术</li><li>图像识别（解决验证码反爬），机器学习算法（验证码、数据分析等后续操作）</li></ul><h2 id="爬虫中的难点问题"><a href="#爬虫中的难点问题" class="headerlink" title="爬虫中的难点问题"></a>爬虫中的难点问题</h2><ul><li>爬虫的采集以及更新策略</li><li>解决反爬</li><li>数据解析</li><li>海量数据存储</li><li>模拟登录（验证码识别）</li><li>爬虫的监控和部署</li><li>数据的去重，比如url去重、内容去重</li></ul><h2 id="爬虫中需要的网络知识"><a href="#爬虫中需要的网络知识" class="headerlink" title="爬虫中需要的网络知识"></a>爬虫中需要的网络知识</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240514221103540.png" alt="image-20240514221103540" style="zoom:33%;"></p><p>问题一：为什么服务器不会随便封禁ip或者ip段</p><p>原因主要有以下两点：</p><ul><li>DHCP，动态ip，我们日常的ip地址基本都是动态ip(静态ip需要花钱去买)，同一台及其可能每天的ip都不一样</li><li>局域网，整个局域网可能对外只会存在一个公网ip，如果封禁，会导致整个局域网内所有用户均无法访问</li></ul><p>url协议</p><p>其他概念比较熟悉，了解锚点的概念，可以定位到同一页面的某个位置</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240514222633684.png" alt="image-20240514222633684" style="zoom:50%;"></p><p>Socket编程</p><p>了解即可</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240514224618291.png" alt="image-20240514224618291" style="zoom:33%;"></p><p>注意：recv、accept等方法都是阻塞式方式</p><h2 id="前端知识"><a href="#前端知识" class="headerlink" title="前端知识"></a>前端知识</h2><p>html（网页基础骨架）+css（网页装饰）+js（网页交互）</p><p>浏览器加载过程：</p><p>​                                                         <img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515095945789.png" alt="image-20240515095945789" style="zoom:50%;"> </p><p>dom树:</p><p>可以根据dom树定位特定元素节点，javaScript操控html本质就是通过dom树来实现的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515100145565.png" alt="image-20240515100145565" style="zoom:50%;"></p><p> 了解标签选择器、id选择器和class选择器的概念，很多动态网页都是依靠js来动态生成的html</p><p>AJAX &amp; json &amp; xml</p><p>AJAX = 异步JavaScript+XML</p><p>AJAX是一种无需重新加载整个页面的情况下，能够更新部分网页的技术</p><p>json和xml的产生背景：</p><ul><li>跨语言的数据格式 （不同语言编写服务之间的数据传输问题） </li><li>可以通过响应头 content-type字段指明数据为json格式</li></ul><p>jquery等框架都提供了对应API去构造AJAX请求</p><p>动态网页 vs 静态网页</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515103310799.png" alt="image-20240515103310799" style="zoom:50%;"></p><p>GET VS POST请求</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515104424712.png" alt="image-20240515104424712" style="zoom:50%;"></p><p>  数据传输格式 content-type</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515104549040.png" alt="image-20240515104549040" style="zoom:50%;"></p><pre><code>                          &lt;img src=&quot;02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515104635902.png&quot; alt=&quot;image-20240515104635902&quot; style=&quot;zoom:50%;&quot; /&gt;</code></pre><p>前端数据提交方式：</p><ul><li>form表单的submit</li><li>js监听事件的方式</li><li>button按钮点击事件的方式</li><li>js发送AJAX请求的方式</li></ul><h2 id="爬虫数据采集分类"><a href="#爬虫数据采集分类" class="headerlink" title="爬虫数据采集分类"></a>爬虫数据采集分类</h2><p>按照采集对象分类：</p><ul><li>全网采集：一般只有搜索引擎浏览器才会这么做</li><li>全站采集：对某个网站所以数据采集，一般需求也不多</li><li>具体网站指定数据采集：这种需求最多，一般应用只会对网站的某个具体数据感兴趣</li></ul><p>按照采集方案分类：</p><ul><li>利用http协议采集—页面分析</li><li>利用api接口采集—app数据采集</li><li>利用目标网站的api采集—微博、github、twitter、facebook等，这些大型网站用于一般有开放的api平台，可以供第三方开发者扩展使用</li></ul><p>对于99%以上的网站都不会对外提供api，所以绝大多数情况只能利用http请求，对网页进行分析</p><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><p><a href="https://requests.readthedocs.io/projects/cn/zh-cn/latest/user/quickstart.html">requests库的官方文档</a></p><p>知道如何构造请求、伪造请求头、获取请求、解析请求，详细教程参考官方文档即可</p><h2 id="数据解析手段"><a href="#数据解析手段" class="headerlink" title="数据解析手段"></a>数据解析手段</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式语法参照<a href="https://www.runoob.com/regexp/regexp-syntax.html">菜鸟教程 正则表达式 - 教程</a></p><p>python提供了<code>re</code>来进行正则化操作，具体用法参照<a href="https://www.runoob.com/python/python-reg-expressions.html">菜鸟教程-Python 正则表达式</a>，可以实现替换、搜索、提取数据的功能</p><h3 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a>beautifulsoup</h3><p>python中用于解析html的库</p><p><a href="https://beautifulsoup.cn/">beautifulsoup中文文档</a></p><h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><p>*XPath 是一门在 XML 文档中查找信息的语言。，<a href="https://www.runoob.com/xpath/xpath-intro.html">Xpath详细概念介绍</a></p><p><a href="https://www.bilibili.com/video/BV1MZ421H74V/?p=13&amp;spm_id_from=pageDriver&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">视频教程</a>，讲的比较好</p><p>python中支持xPath的库：</p><ul><li>lxml：文档不友好，不推荐</li><li>scrapy selector：是对lxml的再次封装<ul><li><a href="https://scrapy-chs.readthedocs.io/zh-cn/0.24/topics/selectors.html">scrapy官方文档</a></li></ul></li></ul><p>浏览器可以为我们自动生成想要的xpath表达式，流程如下图所示：</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515171015141.png" alt="image-20240515171015141" style="zoom:67%;"></p><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><p><a href="https://www.runoob.com/cssref/css-selectors.html">CSS选择器 菜鸟教程</a></p><p>在python中推荐使用scrapy中的Selector<a href="https://blog.csdn.net/dangsh_/article/details/78617178">,参考博客</a></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515194946491.png" alt="image-20240515194946491" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515195029759.png" alt="image-20240515195029759" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515195135282.png" alt="image-20240515195135282" style="zoom:50%;"></p><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬虫概述&quot;&gt;&lt;a href=&quot;#爬虫概述&quot; class=&quot;headerlink&quot; title=&quot;爬虫概述&quot;&gt;&lt;/a&gt;爬虫概述&lt;/h1&gt;&lt;h2 id=&quot;爬虫的作用&quot;&gt;&lt;a href=&quot;#爬虫的作用&quot; class=&quot;headerlink&quot; title=&quot;爬虫的作用&quot;&gt;</summary>
      
    
    
    
    <category term="爬虫" scheme="https://bangwu2001.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="https://bangwu2001.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SPring AI</title>
    <link href="https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/"/>
    <id>https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/</id>
    <published>2024-05-07T14:55:42.000Z</published>
    <updated>2024-05-07T15:07:30.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-AI"><a href="#Spring-AI" class="headerlink" title="Spring AI"></a>Spring AI</h1><h2 id="Spring-AI简介"><a href="#Spring-AI简介" class="headerlink" title="Spring AI简介"></a>Spring AI简介</h2><p><a href="https://spring.io/projects/spring-ai">Spring AI官方文档</a></p><p>Spring AI 是一个面向人工智能工程的应用框架，它类似于一个客户端，可以实现向不同厂商对应的AI模型服务发送请求获取响应</p><p>SpringAI目前能够支持的AI模型</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/model.png" alt="img" style="zoom:80%;"></p><h2 id="Spring-AI实践"><a href="#Spring-AI实践" class="headerlink" title="Spring AI实践"></a>Spring AI实践</h2><p><a href="https://api.xty.app/">Open ai Api Key第三方平台</a></p><p>在该平台上注册可以免费获取一定的使用额度</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507203148267.png" alt="image-20240507203148267"></p><p>参考<a href="https://docs.spring.io/spring-ai/reference/api/clients/openai-chat.html#_sample_controller_auto_configuration">SpringAI openAI官方文档</a>，快速搭建一个应用</p><h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependency&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-openai-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="进行相关配置"><a href="#进行相关配置" class="headerlink" title="进行相关配置"></a>进行相关配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务地址</span></span><br><span class="line"><span class="attr">spring.ai.openai.base-url</span>=<span class="string">https://api.xty.app</span></span><br><span class="line"><span class="comment">#openai key</span></span><br><span class="line"><span class="attr">spring.ai.openai.api-key</span>=<span class="string">sk-yJ86bNiRwQJVyczO122aF307B7554905A0F53eF6B3B27132</span></span><br><span class="line"><span class="comment">#使用模型名称</span></span><br><span class="line"><span class="attr">spring.ai.openai.chat.options.model</span>=<span class="string">gpt-3.5-turbo</span></span><br><span class="line"><span class="comment">#随机性</span></span><br><span class="line"><span class="attr">spring.ai.openai.chat.options.temperature</span>=<span class="string">0.7</span></span><br></pre></td></tr></table></figure><h3 id="编写一个简单controller"><a href="#编写一个简单controller" class="headerlink" title="编写一个简单controller"></a>编写一个简单controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OpenAiChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatController</span><span class="params">(OpenAiChatClient chatClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//整体响应</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">generate</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;generation&quot;</span>, chatClient.call(message));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//流式响应</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generateStream&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;ChatResponse&gt; <span class="title function_">generateStream</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="type">Prompt</span> <span class="variable">prompt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(<span class="keyword">new</span> <span class="title class_">UserMessage</span>(message));</span><br><span class="line">        <span class="keyword">return</span> chatClient.stream(prompt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>构造请求:<code>http://localhost:8080/ai/generate?message=%E5%AD%A6%E4%B9%A0Java%E8%B7%AF%E7%BA%BF</code></p><p>得到的响应:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507210454691.png" alt="image-20240507210454691"></p><h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><h3 id="调用openAI相关模型生成图片"><a href="#调用openAI相关模型生成图片" class="headerlink" title="调用openAI相关模型生成图片"></a>调用openAI相关模型生成图片</h3><p><a href="https://docs.spring.io/spring-ai/reference/api/clients/image/openai-image.html">官方文档参考</a></p><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启生图模式</span></span><br><span class="line"><span class="attr">spring.ai.openai.image.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#指定生图模型,默认为dall-e-3</span></span><br><span class="line"><span class="attr">spring.ai.openai.image.options.model</span>=<span class="string">dall-e-3</span></span><br></pre></td></tr></table></figure><h4 id="controller代码"><a href="#controller代码" class="headerlink" title="controller代码"></a>controller代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入openAiImageClien</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">OpenAiImageClient openAiImageClient;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/ai/image&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">generateImage</span><span class="params">(String prompt)</span>&#123;</span><br><span class="line">    <span class="type">ImageResponse</span> <span class="variable">response</span> <span class="operator">=</span> openAiImageClient.call(<span class="keyword">new</span> <span class="title class_">ImagePrompt</span>(prompt));</span><br><span class="line">    <span class="comment">//可以两种形式返回生成的图片</span></span><br><span class="line">    <span class="comment">//图片的url:response.getResult().getOutput().getUrl()</span></span><br><span class="line">    <span class="comment">//图片的base64编码:response.getResult().getOutput().getB64Json()</span></span><br><span class="line">    <span class="keyword">return</span> response.getResult().getOutput().getUrl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>构造请求:<code>http://localhost:8080/ai/image?prompt=一个女孩坐在苹果树下</code></p><p>响应结果:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507214047146.png" alt="image-20240507214047146"></p><p>在浏览器直接输入上述url即可显示下图</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507214027753.png" alt="image-20240507214027753" style="zoom:50%;"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><a href="https://zhuanlan.zhihu.com/p/671853034">AnythingLLM：基于RAG方案构专属私有知识库（开源｜高效｜可定制）</a></p><p>我们可以使用AnythingLLM 配合 Ollama 构建自己的知识库，可以通过给本地模型喂入一些文本文档，使其具有一些特殊领域的知识</p><p>比如：我们选择本地Ollama模型，直接提问得到的结果如下</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220505442.png" alt="image-20240507220505442" style="zoom:80%;"></p><p>我们给其上传一个文本txt文件，文本内容如下:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">吴棒，男，毕业于华中科技大学，人张的贼帅</span><br></pre></td></tr></table></figure><p>然后上传该文本文件，喂入模型</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220714606.png" alt="image-20240507220714606" style="zoom:80%;"></p><p>再次提问：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220803128.png" alt="image-20240507220803128"></p><p>也可以直接给一个网页链接，其可以自动爬取网页内容训练模型</p><p>比如我们给其输入网页:<code>https://eic.hust.edu.cn/info/1195/7541.htm</code></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507221034200.png" alt="image-20240507221034200"></p><p>喂入数据模型之前提问结果：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220938907.png" alt="image-20240507220938907"></p><p>喂入数据之后模型提问结果：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507221151449.png" alt="image-20240507221151449"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-AI&quot;&gt;&lt;a href=&quot;#Spring-AI&quot; class=&quot;headerlink&quot; title=&quot;Spring AI&quot;&gt;&lt;/a&gt;Spring AI&lt;/h1&gt;&lt;h2 id=&quot;Spring-AI简介&quot;&gt;&lt;a href=&quot;#Spring-AI简介&quot; c</summary>
      
    
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/categories/AI/"/>
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Ollama的使用</title>
    <link href="https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/"/>
    <id>https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/</id>
    <published>2024-05-07T14:55:42.000Z</published>
    <updated>2024-05-07T14:55:19.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ollama"><a href="#Ollama" class="headerlink" title="Ollama"></a>Ollama</h1><h2 id="Ollama简介"><a href="#Ollama简介" class="headerlink" title="Ollama简介"></a>Ollama简介</h2><p>随着各个公司发布开源大模型，大模型管理工具越来越重要。Ollama就是一款优秀的开源大模型管理工具。利用Ollma开发者们可以自由的创建，训练模型，并且搭建本地化chatbot。同时Ollama还支持OpenAI同样形式的REST API以提升开发者效率。本质上讲Ollama是一个集成的本地大模型运行框架，它的出现极大地简化了AI模型的开发和使用过程。它支持Linux、Mac、Windows等系统，其内部不仅提供了丰富的AI模型库，而且提供了强大的API接口，可以方便将AI功能整合到用户自己具体的应用中。</p><p>Ollama的特点：</p><ul><li>一键式安装，无需繁琐的环境配置，简单易用</li><li>性能强大，可以充分利用本地的计算资源，可以仅仅利用CPU或者充分调用本地GPU来运行模型</li><li>功能丰富，提供了丰富的模型库，支持多种大语言模型并且支持多模态模型</li><li>提供了丰富的API接口，便于开发者结合自身需求灵活进行功能扩展和开发</li></ul><p>相关资料：<a href="https://ollama.com/">Ollama官网</a>  <a href="https://github.com/ollama/ollama">GitHub</a> <a href="https://ollama.com/library">支持的模型列表</a></p><h2 id="Ollama在Windows系统上的使用"><a href="#Ollama在Windows系统上的使用" class="headerlink" title="Ollama在Windows系统上的使用"></a>Ollama在Windows系统上的使用</h2><h3 id="Ollama安装"><a href="#Ollama安装" class="headerlink" title="Ollama安装"></a>Ollama安装</h3><p>直接在<a href="https://ollama.com/download/windows">官网</a>下载Windows平台的安装包</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507145152909.png" alt="image-20240507145152909"></p><p>安装完成之后就可以在菜单栏看到Ollama图标，此时就可以在Windows上使用Ollama了</p><h3 id="Ollama使用"><a href="#Ollama使用" class="headerlink" title="Ollama使用"></a>Ollama使用</h3><p>安装成功之后，我们在电脑任何位置打开命令行窗口，可以直接启动Ollama</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507150145854.png" alt="image-20240507150145854"></p><p>我们执行以下命令，可以自动pull对应的模型，并对模型进行加载，我们可以通过<a href="https://ollama.com/library">官网</a>查看支持模型列表和具体的模型细节</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run [modelname]</span><br></pre></td></tr></table></figure><p>首次执行上述命令会下载模型到本地，如果本地存在该模型，则不会被重复下载</p><p>我们以阿里巴巴通义千问4B模型使用为例展示如何本地使用大语言模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run qwen:4b</span><br></pre></td></tr></table></figure><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152309824.png" alt="image-20240507152309824"></p><p>Ollama使用方式有两种，命令行的放方式和API的方式</p><h4 id="命令行方式使用"><a href="#命令行方式使用" class="headerlink" title="命令行方式使用"></a>命令行方式使用</h4><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152416981.png" alt="image-20240507152416981"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run [modelname] *prompt* #可以不进入命令行方式调用</span><br></pre></td></tr></table></figure><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152709759.png" alt="image-20240507152709759"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run [modelname] *prompt* --verbose  #添加--verbose可以查看模型推理的具体开销细节</span><br></pre></td></tr></table></figure><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507153558820.png" alt="image-20240507153558820"></p><p>退出命令行</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152452012.png" alt="image-20240507152452012"></p><h4 id="API方式使用"><a href="#API方式使用" class="headerlink" title="API方式使用"></a>API方式使用</h4><p><a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl用法指南</a>  <a href="https://github.com/ollama/ollama/blob/main/docs/api.md">Ollama API官方文档</a></p><p>Ollama API默认的地址和端口是<code>http:localhost:11434</code>，可以在安装启动Ollama的系统中直接调用访问</p><p>下面我们利用<code>postman</code>构造HTTP请求，访问Ollama服务:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507155607340.png" alt="image-20240507155607340"></p><p>响应</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507155704762.png" alt="image-20240507155704762"></p><p>如何修改默认端口号？</p><p>要更改地址和端口，可以添加以下环境变量：</p><ul><li>变量名：<code>OLLAMA_HOST</code></li><li>变量值（端口）：<code>:8000</code></li></ul><p>这样Ollama服务访问地址就可以变为<code>http://localhost:8000</code></p><h3 id="SpringAI整合Ollama"><a href="#SpringAI整合Ollama" class="headerlink" title="SpringAI整合Ollama"></a>SpringAI整合Ollama</h3><p><a href="https://docs.spring.io/spring-ai/reference/api/clients/ollama-chat.html">官方文档</a></p><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-ollama-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本地ollama服务地址</span></span><br><span class="line"><span class="attr">spring.ai.ollama.base-url</span>=<span class="string">http://localhost:11434</span></span><br><span class="line"><span class="comment">#启动allama客户端</span></span><br><span class="line"><span class="attr">spring.ai.ollama.chat.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#指定使用的模型</span></span><br><span class="line"><span class="attr">spring.ai.ollama.chat.options.model</span>=<span class="string">qwen:4b</span></span><br></pre></td></tr></table></figure><h3 id="编写简单controller代码"><a href="#编写简单controller代码" class="headerlink" title="编写简单controller代码"></a>编写简单controller代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OllamaChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatController</span><span class="params">(OllamaChatClient chatClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">generate</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;generation&quot;</span>, chatClient.call(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generateStream&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;ChatResponse&gt; <span class="title function_">generateStream</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="type">Prompt</span> <span class="variable">prompt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(<span class="keyword">new</span> <span class="title class_">UserMessage</span>(message));</span><br><span class="line">        <span class="keyword">return</span> chatClient.stream(prompt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>构造请求<code>http://localhost:8080/ai/generate?message=武汉景区</code></p><p>响应结果:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507211513747.png" alt="image-20240507211513747"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.youtube.com/watch?v=POf4qbohP9k">Ollama 使用指南 </a></p><p><a href="https://ollama.com/">Ollama官网</a></p><p><a href="https://github.com/ollama/ollama">Ollama GitHub</a></p><p><a href="https://www.sysgeek.cn/ollama-on-windows/">Ollama on Windows：本地运行大型语言模型（LLM）的新利器</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ollama&quot;&gt;&lt;a href=&quot;#Ollama&quot; class=&quot;headerlink&quot; title=&quot;Ollama&quot;&gt;&lt;/a&gt;Ollama&lt;/h1&gt;&lt;h2 id=&quot;Ollama简介&quot;&gt;&lt;a href=&quot;#Ollama简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/categories/AI/"/>
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Baidu Comate</title>
    <link href="https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/"/>
    <id>https://bangwu2001.github.io/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/</id>
    <published>2024-05-07T14:55:42.000Z</published>
    <updated>2024-05-07T14:55:39.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Baidu-Comate"><a href="#Baidu-Comate" class="headerlink" title="Baidu Comate"></a>Baidu Comate</h1><p><a href="https://comate.baidu.com/zh/download">Baidu Comate</a>基于文心大模型，结合百度积累多年的编程现场大数据和外部优秀开源数据，为你生成更符合实际研发场景的优质代码，提升编码效率</p><p>可以在VS Code或者IDEA中以插件的形式集成使用</p><h2 id="Idea中集成"><a href="#Idea中集成" class="headerlink" title="Idea中集成"></a>Idea中集成</h2><p>点击【Plugins】，进入 Marketplace 选项卡，搜索框输入【Comate】，找到 Baidu Comate 后点击安装</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507204012558.png" alt="image-20240507204012558" style="zoom:67%;"></p><p>重启 IntelliJ IDE，重启成功后登录百度账号，即可使用</p><p>点击代码旁边按钮，可以使用对应的功能，比如代码检查，代码调优等</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507204447566.png" alt="image-20240507204447566"></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507204417398.png" alt="image-20240507204417398" style="zoom:67%;"></p><h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>比如我们需要编写一个功能的前端代码，其会自动给我们生成html代码、ccs代码和javascript代码</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507221638012.png" alt="image-20240507221638012"></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507221724449.png" alt="image-20240507221724449"></p><p>我们直接运行其给出的代码，展示的页面如下图所示：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507222017558.png" alt="image-20240507222017558" style="zoom:50%;"></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507222133854.png" alt="image-20240507222133854" style="zoom:50%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Baidu-Comate&quot;&gt;&lt;a href=&quot;#Baidu-Comate&quot; class=&quot;headerlink&quot; title=&quot;Baidu Comate&quot;&gt;&lt;/a&gt;Baidu Comate&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://comate.baidu.</summary>
      
    
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/categories/AI/"/>
    
    
    <category term="AI" scheme="https://bangwu2001.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>git版本控制</title>
    <link href="https://bangwu2001.github.io/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/"/>
    <id>https://bangwu2001.github.io/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/</id>
    <published>2024-05-06T15:22:42.000Z</published>
    <updated>2024-06-05T03:01:56.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VCS-版本控制系统"><a href="#VCS-版本控制系统" class="headerlink" title="VCS(版本控制系统)"></a>VCS(版本控制系统)</h1><h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><p>关于git的详细介绍，可以参考官网的<a href="https://git-scm.com/book/zh/v2">Git Book</a></p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>不同系统上git的安装流程 ，参照<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">官方文档</a></p><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><p>Git 自带一个 <code>git config</code> 的工具来帮助设置控制 Git 外观和行为的配置变量</p><p><strong>config作用域</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> <span class="comment">#只对某个仓库有效,该命令只能在某个git repository内部使用，在仓库内部--local的配置优先级会大于--global的配置</span></span><br><span class="line">git config --global <span class="comment">#对当前用户的所有仓库都有效</span></span><br><span class="line">git config --system <span class="comment">#对系统所有登录的用户都有效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示指定作用域的config配置，只需加 --list</span></span><br><span class="line">git config --list --<span class="built_in">local</span>  <span class="comment">#只该命令只能在某个git repository内部使用,查看某个具体的仓库的配置</span></span><br><span class="line">git config --list --global</span><br><span class="line">git config --list --system</span><br></pre></td></tr></table></figure><p><strong>配置用户信息</strong></p><p>安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your_name&quot;</span><br><span class="line">git config --global user.email &quot;your_email&quot;</span><br></pre></td></tr></table></figure><p><strong>查看配置信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506152643834.png" alt="image-20240506152643834"></p><h3 id="新建Git仓库"><a href="#新建Git仓库" class="headerlink" title="新建Git仓库"></a>新建Git仓库</h3><p>新建git仓库的两者场景</p><p>方法一：将已有的代码文件纳入git管理</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入已有的项目文件夹，执行:</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>方法二：新建一个直接用git管理的新文件夹</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init 文件夹名 <span class="params">#</span>其会在当前目录下新建一个新的文件夹，并加此文件夹纳入git管理</span><br></pre></td></tr></table></figure><h3 id="git工作区域的理解"><a href="#git工作区域的理解" class="headerlink" title="git工作区域的理解"></a>git工作区域的理解</h3><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/1090617-20181008211557402-232838726.png" alt="img"></p><p>Git本地有四个工作目录，这四个工作目录之间的状态转换关系如上图所示</p><ul><li>Workspace：工作区，本地存放项目的文件夹</li><li>Index/Stage：暂存区，用于存放临时改动的记录</li><li>Repository：仓库区/版本库，里面会存放所有提交的版本数据</li><li>Remote：远程仓库，比如Github上的仓库，我们可以通过相关命令把本地文件推送到远程仓库</li></ul><p>我们通常直接操作的目录就是工作目录，然后将需要用git进行管理的文件或者文件夹，通过<code>git add 文件名..</code>放入暂存区，通过<code>git commit -m 标记</code>将暂存区文件提交至本地仓库，通过<code>git push</code>将本地仓库推送到关联的远程仓库</p><h3 id="git文件状态理解"><a href="#git文件状态理解" class="headerlink" title="git文件状态理解"></a>git文件状态理解</h3><p>版本控制是对文件进行版本控制，所以要明确当前操作文件所处的状态，在git中文件有四种状态</p><ul><li>untrack<ul><li>未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged</li></ul></li><li>modified<ul><li>修改过，针对的就是已经登记在案的文件最近又发生了改动的情况，也就是说我们最近改过了某一个之前已经登记在案的文件</li></ul></li><li>committed<ul><li>执行完commit之后，会在仓库中生成一个版本号(hash值)，标志这次提交。之后任何时候，都可以借助这个hash值回退到这次提交。</li></ul></li><li>stage<ul><li>这个时候已经执行过git add，但未执行git commit，但是用git diff已经看不到任何修改。</li></ul></li></ul><h2 id="Git常见实操"><a href="#Git常见实操" class="headerlink" title="Git常见实操"></a>Git常见实操</h2><h3 id="场景一：从头创建一个新的仓库"><a href="#场景一：从头创建一个新的仓库" class="headerlink" title="场景一：从头创建一个新的仓库"></a>场景一：从头创建一个新的仓库</h3><p>在项目中新建文件以及文件内容修改</p><p>在C盘下创建目录git_learning，进入该目录执行<code>git init</code>，可以看到生成了一个隐藏文件夹<code>.git</code>，此时git_learning文件夹就成为了一个版本库，里面的文件都可以被git管理，即每个文件的修改、删除都能被git跟</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506195103057.png" alt="image-20240506195103057"></p><p>在版本库(本地仓库)中添加新的文件</p><p>我们在git_learning文件夹下新建一个<code>hello.txt</code>文件，里面内容为v000000</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506200840972.png" alt="image-20240506200840972"></p><p>执行<code>git add hello.txt</code>将该文件提交到暂存区</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506200930083.png" alt="image-20240506200930083"></p><p>执行<code>git commit -m xxx</code>将文件提交到仓库</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506201100485.png" alt="image-20240506201100485"></p><p>每次执行<code>git status</code>可以查看文件的状态</p><p>对<code>hello.txt</code>文件进行修改，将<code>v000000</code>改为<code>v111111</code></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506201330714.png" alt="image-20240506201330714"></p><p>我们可以通过执行<code>git diff 文件名</code>的方式查看文件中到底改动了什么内容</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506201453188.png" alt="image-20240506201453188"></p><p>知道文件修改内容之后，如果无误，可以重新对文件提交到暂存区和仓库</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506201707786.png" alt="image-20240506201707786"></p><h3 id="场景二：文件版本回退"><a href="#场景二：文件版本回退" class="headerlink" title="场景二：文件版本回退"></a>场景二：文件版本回退</h3><p>前面我们对hello.txt文件进行了修改，前后一共提交了两次</p><p>现在我们对文件再次修改，将文件内容改为<code>v222222</code>，并提交，我们前后对该文件修改了两次，该文件存在三个不同的版本</p><p>我们可以通过<code>git log</code>查看历史提交记录</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506202044597.png" alt="image-20240506202044597"></p><p>那么如果我们现在想把文件内容恢复到前面的某个版本，该怎么做？</p><p>git中回滚到历史版本的命令:</p><ul><li><code>git reset --hard HEAD^</code>:回退到当前的上一个版本</li><li><code>git reset --hard HEAD^^</code>：回退到当前的上上一个版本</li><li><code>git reset --hard HEAD~n</code>：回退到当前的前n个版本</li><li><code>git reset --hard 版本号</code>：可以精准回退到某个具体的版本记录</li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506202650087.png" alt="image-20240506202650087"></p><p>可以看到回滚之后，<code>git log</code>看不到第三次提交的记录，那么如果我们想恢复到第三版记录(即内容为v222222)，该怎么做？</p><p>我们可以先通过<code>git reflog</code>查看版本号,然后回滚到指定版本</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git 的 reflog 是指引用日志（reference logs）的简称，它记录了 Git 仓库中 HEAD 引用的变化历史。换句话说，reflog 记录了本地仓库的操作历史，包括分支切换、合并、重置等操作，即使在一些操作后出现了提交丢失或者分支丢失的情况下，通过 reflog 也可以找回之前的状态。</span><br></pre></td></tr></table></figure><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506203046924.png" alt="image-20240506203046924"></p><h3 id="场景三：撤销文件修改与恢复被删除文件"><a href="#场景三：撤销文件修改与恢复被删除文件" class="headerlink" title="场景三：撤销文件修改与恢复被删除文件"></a>场景三：撤销文件修改与恢复被删除文件</h3><p>我们修改<code>hello.txt</code>文件，将其内容改为了<code>v333333</code>，此时未执行其他命令，文件处于工作区，我们发现内容修改错了，想恢复到原始内容<code>v222222</code>，该怎么做？</p><p>此时有三种解决办法：</p><ul><li>直接修改<code>hello.txt</code>，将内容修改为原始内容<ul><li>此方法缺陷在于，如果原始内容较多，不记得了该怎么办？无法手动恢复</li></ul></li><li>将错就错，执行<code>git add</code>、<code>git commit</code>将文件提交仓库，再执行<code>git reset --hard HEAD^</code>回滚到上一版本</li><li>执行<code>git checkout -- 文件名</code>，可以把文件在工作区的修改全部丢弃</li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506203932209.png" alt="image-20240506203932209"></p><p>我们在git_learning目录下新建一个文件<code>test.txt</code>，然后将其提交到仓库，然后将该文件删除，那么我们如果想将该文件恢复应该怎么做？</p><ul><li>方法1：<code>git commit</code>然后<code>git reset</code></li><li>方法2：<code>git checkout -- test.txt</code>，可以直接在版本库中恢复此文件</li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506204655377.png" alt="image-20240506204655377"></p><h3 id="场景四：本地仓库与远程仓库的关联"><a href="#场景四：本地仓库与远程仓库的关联" class="headerlink" title="场景四：本地仓库与远程仓库的关联"></a>场景四：本地仓库与远程仓库的关联</h3><p><a href="https://www.cnblogs.com/linshengqian/p/15065553.html">git配置连接github</a></p><p>我们在GitHub上新建一个仓库<code>git_learning</code>，可以通过如下操作，将本地仓库与远程仓库关联起来，并将本地仓库推送到远程仓库</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin xxxxx.git <span class="params">#</span>本地仓库与远程仓库</span><br><span class="line">git push -u origin master <span class="params">#</span>将本地仓库master分支推送到远程仓库</span><br></pre></td></tr></table></figure><h3 id="场景五：创建和管理分支"><a href="#场景五：创建和管理分支" class="headerlink" title="场景五：创建和管理分支"></a>场景五：创建和管理分支</h3><p>在我们实际代码开发过程中，一个项目可能会衍生出多个版本或者类型，但不同版本可能依赖的主体核心代码一致，只是不同版本的部分功能可能不一样，这个时候我们就需要将核心代码的部分生成多个分支用于支持不同版本程序的开发</p><p>或者同一项目多人协作，一般是不会直接允许在master(主分支)上进行开发，而是先在主分支上克隆一份，等个人开发完毕后再合并到主分支，这样可以避免代码污染等对主分支造成破坏</p><p><code>git branch -a</code>列出所有本地分支和远程分支</p><p><code>git branch</code>列出所有本地分支</p><p><code>git branch -r</code>列出所有远程分支</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506213127779.png" alt="image-20240506213127779"></p><p><code>git branch 分支名</code>创建分支</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506213656875.png" alt="image-20240506213656875"></p><p><code>git branch -d 分支名</code>删除分支</p><p><code>git checkout 分支名</code>将当前项目切换为指定分支</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506213823140.png" alt="image-20240506213823140"></p><p>将当前新的分支推送到远程仓库(当前本地分支first推送到远程仓库的分支名也应该叫first)</p><p><code>git push --set-upstream origin first</code></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506214230927.png" alt="image-20240506214230927"></p><p>在本地first分支上的修改不会影响本地和远程master分支上的内容</p><p>观察下面两张图，我们本地将分支切换回master，可以发现本地的tt.txt文件就会自动消失</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506214738664.png" alt="image-20240506214738664"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506214808174.png" alt="image-20240506214808174"></p><p>如何合并多个分支？</p><p>在实际项目开发过程中，我们在自己分支上进行开发，最后要部署测试时，需要将自己分支代码合并到主分支应该怎么做？</p><p>我们首先执行<code>git checkout master</code>切换回主分支</p><p>执行<code>git merge first</code>将当前分支(主分支)与first分支代码合并</p><p>执行<code>git push</code>将本地主分支代码推送到远程仓库主分支</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506215256645.png" alt="image-20240506215256645"></p><h3 id="场景六：团队协作与代码冲突解决"><a href="#场景六：团队协作与代码冲突解决" class="headerlink" title="场景六：团队协作与代码冲突解决"></a>场景六：团队协作与代码冲突解决</h3><p>团队仓库如何进行git协作</p><p>团队仓库可以添加多名成员同时协作，注意此时各个成员在本地操作之前最好使用</p><p><code>git pull</code>将仓库最新代码拉取到本地，保证线上仓库与本地仓库的一致性</p><p>对于团队协作，我们的提交顺序：</p><ol><li>刚开始进行项目开发时，使用<code>git pull</code>拉取更新</li><li>项目代码开发完毕之后，先<code>git add</code>、<code>git comiit</code>到本地仓库</li><li>push之前再使用<code>git pull</code>确保当前远程仓库所有更新都已经获取<ul><li>这样做是为了避免冲突，因为如果两个人同时操作了一个文件的变更，这时就会出现协作冲突，git此时不知道到底要使用哪一个人的变更，所以它会将两个人提交的不同部分标记出来</li></ul></li><li>最后再<code>git push</code>将本地仓库推送到远程仓库</li></ol><h2 id="Git开源项目或者团队项目协作场景"><a href="#Git开源项目或者团队项目协作场景" class="headerlink" title="Git开源项目或者团队项目协作场景"></a>Git开源项目或者团队项目协作场景</h2><p>如何进行Github团队项目的协作？</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们准备两台不同的电脑，每台电脑登陆不同的github账号，模拟团队中的不同项目成员，由其中一个成员在github上创建一个公共仓库，然后邀请另一个账号(成员)协作。github创建团队项目team-work、并且邀请团队成员如下图所示</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240604234532722.png" alt="image-20240604234532722" style="zoom:33%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240604234406883.png" alt="image-20240604234406883" style="zoom: 33%;"></p><h3 id="团队协作整个流程"><a href="#团队协作整个流程" class="headerlink" title="团队协作整个流程"></a>团队协作整个流程</h3><p>一般团队协作各个成员是不允许直接在main(master)分支上直接操作，都是各自简历一个新的分支来进行</p><p>下面来模拟两个成员A和成员B如何协作团队项目</p><p>仓库最初的状态如下图所示，三个文件，以及test.txt中的内容如下图所示：</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605100946687.png" alt="image-20240605100946687" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605101127141.png" alt="image-20240605101127141" style="zoom:50%;"></p><p>下面模拟团队协作，成员A的任务：创建新的文件testA.txt、在原始的test.txt最后一行添加<code>I am member A</code></p><p>成员B的任务：创建新的文件testB.txt、在原始test.txt最后一行添加<code>I am member B</code></p><p>然后两个成员各自提交到远程仓库对应的分支，然后由管理员B来进行分支合并和冲突问题解决</p><h4 id="成员A"><a href="#成员A" class="headerlink" title="成员A"></a>成员A</h4><ul><li>拉取项目到本地<ul><li><code>git clone 远程仓库地址</code></li></ul></li><li>在本地创建自己的分支<ul><li><code>git checkout -b 自己的分支名</code></li></ul></li><li>进行文件修改或者相关文件添加</li><li>提交到远程仓库<ul><li><code>git push origin 自己的分支名</code></li></ul></li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605102708908.png" alt="image-20240605102708908" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605102814850.png" alt="image-20240605102814850"></p><h4 id="成员B"><a href="#成员B" class="headerlink" title="成员B"></a>成员B</h4><ul><li>拉取项目到本地<ul><li><code>git clone 远程仓库地址</code></li></ul></li><li>在本地创建自己的分支<ul><li><code>git checkout -b 自己的分支名</code></li></ul></li><li>进行文件修改或者相关文件添加</li><li>提交到远程仓库<ul><li><code>git push origin 自己的分支名</code></li></ul></li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103558966.png" alt="image-20240605103558966"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103623151.png" alt="image-20240605103623151"></p><h4 id="仓库合并"><a href="#仓库合并" class="headerlink" title="仓库合并"></a>仓库合并</h4><p>当前仓库状态：</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103656896.png" alt="image-20240605103656896"></p><p>成员可以在Github上创建pull request请求，让原作者(管理员人)看到你的修改，然后管理员会review代码文件，解决合并冲突，然后会执行<code>Squash merge</code>将对应分支代码合并到main(master)分支</p><p><strong>对于分支memberA的处理</strong></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103729459.png" alt="image-20240605103729459" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103758042.png" alt="image-20240605103758042" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103848407.png" alt="image-20240605103848407" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103949299.png" alt="image-20240605103949299" style="zoom:50%;"></p><p><strong>对于分支memberB的处理</strong></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104109678.png" alt="image-20240605104109678" style="zoom:50%;"></p><p>由于分支A与分支B都在同一文件test.txt中做了修改，所以会发生合并冲突，需要解决冲突才能合并</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104152827.png" alt="image-20240605104152827" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104330474.png" alt="image-20240605104330474" style="zoom:50%;"></p><p>解决冲突，同时保留A和B的修改（删除文件中所有的分隔符即可)</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104508244.png" alt="image-20240605104508244"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104547186.png" alt="image-20240605104547186"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104614032.png" alt="image-20240605104614032" style="zoom:50%;"></p><p>此时main分支中包含了A和B两者提交和更改的所有记录</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104708323.png" alt="image-20240605104708323" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104839138.png" alt="image-20240605104839138"></p><h4 id="各个成员如何同步远程最新的代码"><a href="#各个成员如何同步远程最新的代码" class="headerlink" title="各个成员如何同步远程最新的代码"></a>各个成员如何同步远程最新的代码</h4><p>远程main(master)仓库更新后，各个成员本地git与远程仓库不一致，需要拉取远程main仓库最新状态，然后与本地自己的分支合并，同步最新状态</p><p>仓库主分支main中内容发生了变更，此时成员A需要同步远程仓库最新状态，并在最新状态上做修改，那么他应该怎么做？</p><ul><li>本地切换到main分支<code>git checkout main</code></li><li>拉取远程仓库main分支最新内容到本地<code>git pull origin main</code></li><li>切换到自己的分支<code>git checkout memberA</code></li><li>将main分支与自己的分支进行合并<code>git rebase main</code></li><li>后续在最新状态上重复前面正常操作即可</li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605105913293.png" alt="image-20240605105913293" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605110117907.png" alt="image-20240605110117907" style="zoom:50%;"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/m0_48319758/article/details/122832675">如何作为Collaborator在Github更新仓库（上传代码）</a></p><p><a href="https://www.youtube.com/watch?v=uj8hjLyEBmU">十分钟学会正确的github工作流，和开源作者们使用同一套流程</a></p><p><a href="https://blog.csdn.net/u010393510/article/details/127121169">详解Git合并冲突——问题重现、原因及解决 “Automatic merge failed； fix conflicts and then commit the result.“</a></p><h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://git-scm.com/book/zh/v2">Pro Git</a></p><p><a href="https://zhuanlan.zhihu.com/p/30044692">Git使用教程,最详细，最傻瓜，最浅显，真正手把手教</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VCS-版本控制系统&quot;&gt;&lt;a href=&quot;#VCS-版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;VCS(版本控制系统)&quot;&gt;&lt;/a&gt;VCS(版本控制系统)&lt;/h1&gt;&lt;h2 id=&quot;Git基础&quot;&gt;&lt;a href=&quot;#Git基础&quot; class=&quot;</summary>
      
    
    
    
    <category term="git" scheme="https://bangwu2001.github.io/categories/git/"/>
    
    
    <category term="计算机基础" scheme="https://bangwu2001.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>常见免费资源网站</title>
    <link href="https://bangwu2001.github.io/2024/04/22/%E4%B8%AA%E4%BA%BA%E6%9D%82%E9%A1%B9/%E5%85%8D%E8%B4%B9%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/"/>
    <id>https://bangwu2001.github.io/2024/04/22/%E4%B8%AA%E4%BA%BA%E6%9D%82%E9%A1%B9/%E5%85%8D%E8%B4%B9%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/</id>
    <published>2024-04-21T16:43:42.000Z</published>
    <updated>2024-04-21T16:36:42.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见免费资源网站"><a href="#常见免费资源网站" class="headerlink" title="常见免费资源网站"></a>常见免费资源网站</h1><h2 id="聚合搜索平台"><a href="#聚合搜索平台" class="headerlink" title="聚合搜索平台"></a>聚合搜索平台</h2><p><a href="https://www.chongbuluo.com/">虫部落</a>    聚合搜索平台，涵盖论坛以及常见问题的问答，学术、教程等常见搜索网站的聚合</p><p><a href="https://keyanyu.com/">科研鱼导航</a> 聚合搜索平台，主要是学术科研相关搜索资源的聚合，包含常见的科研工具、学术论文、期刊会议等</p><p><a href="https://yigekuang.cn/">一个框导航网</a>  各种资源网站大聚合</p><h2 id="设计类"><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h2><p><a href="https://www.maliquankai.com/">码力全开</a>  技术、设计、产品、运营，以及关于独立开发者常使用的设计资源类库</p><h2 id="电子书类"><a href="#电子书类" class="headerlink" title="电子书类"></a>电子书类</h2><p><a href="https://shuxiangjia.cn/#google_vignette">书享家</a>   聚合各种电子书下载网站</p><h2 id="PPT类"><a href="#PPT类" class="headerlink" title="PPT类"></a>PPT类</h2><p><a href="https://hippter.com/">HiPPTER</a>  聚合各种PPT资源网站</p><h2 id="教学资源类"><a href="#教学资源类" class="headerlink" title="教学资源类"></a>教学资源类</h2><p><a href="https://www.diyijc.com/">第一教程网_免费的综合知识学习网站 (diyijc.com)</a>  涵盖小学、初中、高中、大学、研究生以及各种技能教学视频的网站</p><p><a href="https://www.examcoo.com/">考试酷</a>  涵盖各种学科考试的在线题库系统，比如计算机等级考试、软考、考公、英语等级考试等</p><p><a href="https://moocs.unipus.cn/">中国高校外语慕课平台（UMOOCs） (unipus.cn)</a>  汇聚中国各个高效优质的外语教学课程，包含英语、以及各种其他小语种</p><h2 id="视频图片资源相关"><a href="#视频图片资源相关" class="headerlink" title="视频图片资源相关"></a>视频图片资源相关</h2><p><a href="https://shuxiangjia.cn/#google_vignette">wallhaven</a>  涵盖大量高清壁纸资源</p><p><a href="https://unsplash.com/">Unsplash</a> 各种设计师、摄影师制作的图片资源，可以免费下载</p><p><a href="https://www.videvo.net/">Videvo</a>  视频和音视频资源网站，适用于视频剪辑制作者，需要的各种素材齐全</p><p><a href="https://pixabay.com/zh/">Pixabay</a> 音视频资源丰富，包含大量视频、音频、图片、插画、矢量图资源</p><p><a href="https://www.pexels.com/zh-cn/">Pexels</a>  高清图片资源</p><h2 id="其他稀缺资源类"><a href="#其他稀缺资源类" class="headerlink" title="其他稀缺资源类"></a>其他稀缺资源类</h2><p><a href="https://airpano.org.cn/">AirPano</a>  可以在线观看世界各地360全景风景图</p><p><a href="https://www.upyunso.com/">upyunso</a> 没有套路的网盘资源搜索网站</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见免费资源网站&quot;&gt;&lt;a href=&quot;#常见免费资源网站&quot; class=&quot;headerlink&quot; title=&quot;常见免费资源网站&quot;&gt;&lt;/a&gt;常见免费资源网站&lt;/h1&gt;&lt;h2 id=&quot;聚合搜索平台&quot;&gt;&lt;a href=&quot;#聚合搜索平台&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="杂项" scheme="https://bangwu2001.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="杂项" scheme="https://bangwu2001.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>实现带括号的四则运算表达式的计算</title>
    <link href="https://bangwu2001.github.io/2024/04/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95%E4%BB%A5%E5%8F%8A%E4%B8%AA%E4%BA%BA%E7%BB%8F%E9%AA%8C%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E5%AE%9E%E7%8E%B0%E5%B8%A6%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
    <id>https://bangwu2001.github.io/2024/04/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95%E4%BB%A5%E5%8F%8A%E4%B8%AA%E4%BA%BA%E7%BB%8F%E9%AA%8C%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E5%AE%9E%E7%8E%B0%E5%B8%A6%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%AE%A1%E7%AE%97/</id>
    <published>2024-04-16T15:08:22.000Z</published>
    <updated>2024-04-16T15:08:43.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现带括号的四则运算表达式的计算"><a href="#实现带括号的四则运算表达式的计算" class="headerlink" title="实现带括号的四则运算表达式的计算"></a>实现带括号的四则运算表达式的计算</h1><p>本题源于找暑期实习携程二面当时的手撕题目，当时比较懵逼，没有撕出来</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目描述:</span><br><span class="line">利用栈或者队列求解:</span><br><span class="line">1+((2+3)×4)-5</span><br></pre></td></tr></table></figure><p>分析:我们以前做过如何用单个栈求解逆波兰表达式的值，本题给出的是一个中缀表达式，逆波兰表达式是后缀表达式的形式</p><p>比如:题目中的表达式对应的后缀表达形式为:<code>123+4×+5-</code></p><p>所以本题首先需要解决的问题是：</p><ol><li>如何将一个中缀表达式转换为后缀表达式</li><li>如何求解后缀表达式的值</li></ol><h2 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h2><p>利用一个栈一个队列即可，定义一个栈<code>stack</code>和一个队列<code>queue</code>，然后遍历中缀表达式，碰到数字，直接将其加入队列<code>queue</code>，碰到非数字字符，则根据实际情况需要做如下操作：</p><ul><li>如果当前栈<code>stack</code>为空或者<code>stack</code>栈顶元素为<code>(</code>，则直接将当前字符加入栈<code>stack</code></li><li>如果当前字符的优先级大于栈<code>stack</code>栈顶字符的优先级，则也直接将当亲字符加入栈<code>stack</code></li><li>否则，不断弹出栈<code>statck</code>栈顶的字符直到栈顶字符的优先级小于当前字符或者栈顶字符为’(‘</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">(<span class="type">char</span> c)</span>&#123;</span><br><span class="line">    <span class="type">int</span> priority=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:priority=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:priority=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;×&#x27;</span>:priority=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:priority=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> priority;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">inPrefix2postPrefix</span><span class="params">(String str)</span>&#123;</span><br><span class="line">    List&lt;String&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Stack&lt;Character&gt; opStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index&lt; str.length())&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(index);</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//数字，注意有的数字并非只有一位，所以要注意拼接</span></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> (index&lt;str.length() &amp;&amp; (str.charAt(index)&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(index)&lt;=<span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">                sb.append(str.charAt(index));</span><br><span class="line">                index+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            resultList.add(sb.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//非数字字符</span></span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || opStack.isEmpty())&#123;</span><br><span class="line">                opStack.push(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//全部弹出直至栈顶为(</span></span><br><span class="line">                <span class="keyword">while</span> (!(opStack.peek()==<span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">                    resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                opStack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(opStack.peek()==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                opStack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(getPriority(opStack.peek())&lt;getPriority(c))&#123;</span><br><span class="line">                opStack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (getPriority(c)&lt;=getPriority(opStack.peek()))&#123;</span><br><span class="line">                    resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(opStack.size()==<span class="number">0</span> || opStack.peek()==<span class="string">&#x27;(&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                opStack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">            index+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!opStack.isEmpty())&#123;</span><br><span class="line">        resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符的优先级</p><ul><li>‘)’优先级最高</li><li>‘×’与’/‘的优先级要高于’+’和’-‘</li><li>‘(‘的优先级最低</li></ul><h2 id="后缀表达式求值"><a href="#后缀表达式求值" class="headerlink" title="后缀表达式求值"></a>后缀表达式求值</h2><p>利用单个栈<code>stack</code>即可解决，碰到数字，则直接入栈，碰到字符，则弹出栈中的两个数字，根据运算符类型进行求解，再将运算结果加入栈中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">calbyPostPrefix</span><span class="params">(List&lt;String&gt; postPrefixList)</span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(String item:postPrefixList)&#123;</span><br><span class="line">        <span class="keyword">if</span>(item.equals(<span class="string">&quot;+&quot;</span>) || item.equals(<span class="string">&quot;-&quot;</span>) || item.equals(<span class="string">&quot;×&quot;</span>) || item.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            stack.push(cal(num1,num2,item));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(Integer.parseInt(item));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.peek();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2,String c)</span>&#123;</span><br><span class="line">    <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:result=num1+num2;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:result=num1-num2;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;×&quot;</span>:result=num1*num2;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:result=num1/num2;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ALTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Java求解带括号的优先级运算:</span></span><br><span class="line"><span class="comment">            1 + ( ( 2 + 3 ) × 4 ) - 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          思路:首先将中缀表达式转换为后缀表达式，然后根据后缀表达式去计算</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;12+((21+3)×4)-5&quot;</span>;</span><br><span class="line">        List&lt;String&gt; postPrefixList = inPrefix2postPrefix(str);</span><br><span class="line">        System.out.println(postPrefixList);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calbyPostPrefix(postPrefixList);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calbyPostPrefix</span><span class="params">(List&lt;String&gt; postPrefixList)</span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String item:postPrefixList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(item.equals(<span class="string">&quot;+&quot;</span>) || item.equals(<span class="string">&quot;-&quot;</span>) || item.equals(<span class="string">&quot;×&quot;</span>) || item.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                stack.push(cal(num1,num2,item));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(Integer.parseInt(item));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2,String c)</span>&#123;</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:result=num1+num2;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:result=num1-num2;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;×&quot;</span>:result=num1*num2;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:result=num1/num2;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">(<span class="type">char</span> c)</span>&#123;</span><br><span class="line">        <span class="type">int</span> priority=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:priority=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:priority=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;×&#x27;</span>:priority=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:priority=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> priority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">inPrefix2postPrefix</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        List&lt;String&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;Character&gt; opStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index&lt; str.length())&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(index);</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//数字，注意有的数字并非只有一位，所以要注意拼接</span></span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">while</span> (index&lt;str.length() &amp;&amp; (str.charAt(index)&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(index)&lt;=<span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">                    sb.append(str.charAt(index));</span><br><span class="line">                    index+=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                resultList.add(sb.toString());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//非数字字符</span></span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || opStack.isEmpty())&#123;</span><br><span class="line">                    opStack.push(c);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">//全部弹出直至栈顶为(</span></span><br><span class="line">                    <span class="keyword">while</span> (!(opStack.peek()==<span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">                        resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    opStack.pop();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(opStack.peek()==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    opStack.push(c);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(getPriority(opStack.peek())&lt;getPriority(c))&#123;</span><br><span class="line">                    opStack.push(c);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (getPriority(c)&lt;=getPriority(opStack.peek()))&#123;</span><br><span class="line">                        resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span>(opStack.size()==<span class="number">0</span> || opStack.peek()==<span class="string">&#x27;(&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    opStack.push(c);</span><br><span class="line">                &#125;</span><br><span class="line">                index+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!opStack.isEmpty())&#123;</span><br><span class="line">            resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现带括号的四则运算表达式的计算&quot;&gt;&lt;a href=&quot;#实现带括号的四则运算表达式的计算&quot; class=&quot;headerlink&quot; title=&quot;实现带括号的四则运算表达式的计算&quot;&gt;&lt;/a&gt;实现带括号的四则运算表达式的计算&lt;/h1&gt;&lt;p&gt;本题源于找暑期实习携程二面当</summary>
      
    
    
    
    <category term="java" scheme="https://bangwu2001.github.io/categories/java/"/>
    
    
    <category term="面试总结" scheme="https://bangwu2001.github.io/tags/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo简单使用</title>
    <link href="https://bangwu2001.github.io/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/"/>
    <id>https://bangwu2001.github.io/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/</id>
    <published>2024-04-10T16:27:42.000Z</published>
    <updated>2024-04-10T16:28:01.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><h2 id="分布式系统概述"><a href="#分布式系统概述" class="headerlink" title="分布式系统概述"></a>分布式系统概述</h2><h3 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h3><ul><li>美观</li><li>功能</li><li>速度</li><li>稳定性</li></ul><p>其中美观由UI决定、功能由PM决定，而速度和稳定性则与开发人员息息相关</p><h3 id="互联网项目特点"><a href="#互联网项目特点" class="headerlink" title="互联网项目特点"></a>互联网项目特点</h3><ul><li>用户多</li><li>流量大、并发高</li><li>海量数据</li><li>易受攻击</li><li>功能繁琐</li><li>变更快</li></ul><h3 id="大型互联网项目架构目标"><a href="#大型互联网项目架构目标" class="headerlink" title="大型互联网项目架构目标"></a>大型互联网项目架构目标</h3><h4 id="衡量网站的性能指标"><a href="#衡量网站的性能指标" class="headerlink" title="衡量网站的性能指标"></a>衡量网站的性能指标</h4><h5 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h5><p>指执行一个请求从开始到最后收到响应数据所花费的总体时间</p><h5 id="并发数"><a href="#并发数" class="headerlink" title="并发数"></a>并发数</h5><p>指系统同时能够处理的请求数量</p><ul><li>并发连接数<ul><li>指的是客户端向服务器发起请求，并建立了TCP连接，每秒钟服务器连接的总TCP数量</li></ul></li><li>请求数(QPS)<ul><li>每秒多少请求</li></ul></li><li>并发用户数<ul><li>单位时间内多少用户</li></ul></li></ul><h5 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h5><p>单位时间内系统能处理的请求数量</p><ul><li>QPS（Query per second) 每秒查询数</li><li>TPS（Transactions per second)每秒事务数<ul><li>一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</li><li>•一个页面的一次访问，只会形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，就会有多个QPS</li></ul></li></ul><h4 id="大型互联网项目目标"><a href="#大型互联网项目目标" class="headerlink" title="大型互联网项目目标"></a>大型互联网项目目标</h4><ul><li><p><strong>高性能</strong>：提供快速的访问体验。</p></li><li><p><strong>高可用</strong>：网站服务一直可以正常访问。</p></li><li><p><strong>可伸缩</strong>：通过硬件增加/减少，提高/降低处理能力。</p></li><li><p><strong>高可扩展</strong>：系统间耦合低，方便的通过新增/移除方式，增加/减少新的功能/模块。 </p></li><li><p><strong>安全性</strong>：提供网站安全访问和数据加密，安全存储等策略。</p></li><li><p><strong>敏捷性</strong>：随需应变，快速响应。</p></li></ul><h3 id="集群与分布式"><a href="#集群与分布式" class="headerlink" title="集群与分布式"></a>集群与分布式</h3><ul><li>集群：很多人一起干一样的事，同一业务部署在多台机器</li><li>分布式：很多人一起干不一样的事，这些不一样的事，合起来是一件大事，一个大的业务系统，拆分成多个小的业务模块，不同模块部署在不同机器上</li></ul><p>高性能、高可用、可伸缩、高扩展</p><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240409220727156.png" alt="image-20240409220727156" style="zoom: 33%;"></p><h2 id="Dubbo概述"><a href="#Dubbo概述" class="headerlink" title="Dubbo概述"></a>Dubbo概述</h2><ul><li>Dubbo是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。</li><li>致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案</li><li><a href="http://dubbo.apache.org">官网</a></li></ul><h3 id="Dubbo基本架构"><a href="#Dubbo基本架构" class="headerlink" title="Dubbo基本架构"></a>Dubbo基本架构</h3><p><strong>节点角色说明：</strong></p><ul><li><p><strong>Provider</strong>：暴露服务的服务提供方</p></li><li><p><strong>Container</strong>：服务运行容器</p></li><li><p><strong>Consumer</strong>：调用远程服务的服务消费方</p></li><li><p><strong>Registry</strong>：服务注册与发现的注册中心</p></li><li><p><strong>Monitor</strong>：统计服务的调用次数和调用时间的监控中心</p></li></ul><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240409235820537.png" alt="image-20240409235820537"></p><h2 id="Dubbo快速入门"><a href="#Dubbo快速入门" class="headerlink" title="Dubbo快速入门"></a>Dubbo快速入门</h2><p>Dubbo官方推荐使用<a href="https://zookeeper.apache.org/"><strong>Zookeeper</strong></a>作为注册中心</p><p>所以需要首先安装zookeeper</p><h3 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h3><p>我们选择在VMWare虚拟机CentOS7系统上进行安装，安装zookeeper版本为3.5.6</p><p><a href="https://zookeeper.apache.org/releases.html">Zookeeper下载地址</a></p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>下载对应安装包，并上传到虚拟机对应目录</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/springCloudTool <span class="params">#</span>切换到对应目录</span><br><span class="line">mkdir zookeeper <span class="params">#</span>创建目录</span><br><span class="line">通过winscap将安装包上传至/home/springCloudTool/zookeeper目录下</span><br><span class="line">tar -zxvf apache-ZooKeeper-3.5.6-bin.tar.gz   <span class="params">#</span>解压安装包</span><br></pre></td></tr></table></figure><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240410002642779.png" alt="image-20240410002642779"></p><h4 id="启动配置"><a href="#启动配置" class="headerlink" title="启动配置"></a>启动配置</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /home/springCloudTool/zookeeper <span class="params">#</span>切换目录</span><br><span class="line">mkdir zkdata  <span class="params">#</span>创建目录</span><br><span class="line">cd ./conf <span class="params">#</span>进入配置文件目录</span><br><span class="line">cp  zoo<span class="built_in">_</span>sample.cfg  zoo.cfg <span class="params">#</span>拷贝配置文件</span><br><span class="line">vim zoo.cfg <span class="params">#</span>修改配置文件</span><br></pre></td></tr></table></figure><p>修改存储目录</p><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240410003008221.png" alt="image-20240410003008221" style="zoom:50%;"></p><h4 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ../bin <span class="params">#</span>进入目录</span><br><span class="line">./zkServer.sh start <span class="params">#</span>启动zookeeper</span><br><span class="line">./zkServer.sh stop <span class="params">#</span>停止zookeeper</span><br><span class="line">./zkServer.sh status <span class="params">#</span>查看zookeeper状态</span><br></pre></td></tr></table></figure><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240410004115488.png" alt="image-20240410004115488"></p><h3 id="Dubbo快速入门案例"><a href="#Dubbo快速入门案例" class="headerlink" title="Dubbo快速入门案例"></a>Dubbo快速入门案例</h3><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/quickstart/java/spring-boot/">入门案例参考官网教程</a></p><h4 id="创建项目Dubbo-Demo-Project"><a href="#创建项目Dubbo-Demo-Project" class="headerlink" title="创建项目Dubbo-Demo-Project"></a>创建项目Dubbo-Demo-Project</h4><p>在此项目下创建三个子模块</p><ul><li>common-api  公共接口模块</li><li>dubbo-consumer  服务消费者模块</li><li>dubbo-provider 服务提供者模块</li></ul><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><h5 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h5><p>对于多模块项目，首先需要在父项目的 <code>pom.xml</code> 里面配置依赖信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Dubbo-Demo-Project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>common-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>3.2.0-beta.4<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Boot --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Dubbo --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-dependencies-zookeeper-curator5 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper-curator5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0-beta.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在服务消费者和服务提供者模块中的pom.xml进行如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Dubbo-Demo-Project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- dubbo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper-curator5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-reload4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring boot starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="application-yaml文件配置"><a href="#application-yaml文件配置" class="headerlink" title="application.yaml文件配置"></a>application.yaml文件配置</h5><p>dubbo-consumer 模块进行如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-demo-consumer</span>  <span class="comment">#模块名称</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.134.129:2181</span>  <span class="comment">#服务注册中心zookeeper地址</span></span><br></pre></td></tr></table></figure><p>dubbo-provider 模块进行如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-demo-provider</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.134.129:2181</span></span><br></pre></td></tr></table></figure><h4 id="代码逻辑编写"><a href="#代码逻辑编写" class="headerlink" title="代码逻辑编写"></a>代码逻辑编写</h4><h5 id="公共模块中编写服务接口"><a href="#公共模块中编写服务接口" class="headerlink" title="公共模块中编写服务接口"></a>公共模块中编写服务接口</h5><p>在coomon-api模块下的<code>com/bang/dubbo/demo</code>包下编写服务接口<code>UserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务提供模块对公共接口进行实现，提供具体的业务逻辑"><a href="#服务提供模块对公共接口进行实现，提供具体的业务逻辑" class="headerlink" title="服务提供模块对公共接口进行实现，提供具体的业务逻辑"></a>服务提供模块对公共接口进行实现，提供具体的业务逻辑</h5><p>在dubbo-provider模块的<code>com/bang/dubbo/demo</code>模块中编写具体接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,&quot;</span>+name+<span class="string">&quot;,welcome to dubbo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>@DubboService</code> 注解，通过这个配置可以基于 Spring Boot 去发布 Dubbo 服务</p><h5 id="服务消费模块编写对应的服务调用逻辑"><a href="#服务消费模块编写对应的服务调用逻辑" class="headerlink" title="服务消费模块编写对应的服务调用逻辑"></a>服务消费模块编写对应的服务调用逻辑</h5><p>在dubbo-consumer模块的<code>com/bang/dubbo/demo</code>模块中编写具体服务调用代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboReference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@DubboReference</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> userService.sayHello(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Receive result ======&gt; &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; Receive result ======&gt; &quot;</span> + userService.sayHello(<span class="string">&quot;TOM&quot;</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>Task</code> 类中，通过<code>@DubboReference</code> 从 Dubbo 获取了一个 RPC 订阅，这个 <code>userService</code> 可以像本地调用一样直接调用。在 <code>run</code>方法中创建了一个线程进行调用。</p><h4 id="编写各个模块启动类"><a href="#编写各个模块启动类" class="headerlink" title="编写各个模块启动类"></a>编写各个模块启动类</h4><p>启动类上需添加<code>@EnableDubbo</code>注解</p><h5 id="duubo-consumer模块启动类ConsumerApplication"><a href="#duubo-consumer模块启动类ConsumerApplication" class="headerlink" title="duubo-consumer模块启动类ConsumerApplication"></a>duubo-consumer模块启动类<code>ConsumerApplication</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="dubbo-provider模块启动类ProviderApplication"><a href="#dubbo-provider模块启动类ProviderApplication" class="headerlink" title="dubbo-provider模块启动类ProviderApplication"></a>dubbo-provider模块启动类<code>ProviderApplication</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h4><h5 id="在服务器上启动zookeeper注册中心"><a href="#在服务器上启动zookeeper注册中心" class="headerlink" title="在服务器上启动zookeeper注册中心"></a>在服务器上启动<code>zookeeper</code>注册中心</h5><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240411002347869.png" alt="image-20240411002347869"></p><h5 id="启动服务提供模块"><a href="#启动服务提供模块" class="headerlink" title="启动服务提供模块"></a>启动服务提供模块</h5><p>出现下图，即代表服务提供者启动完毕，标志着该服务提供者可以对外提供服务了</p><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240411002436647.png" alt="image-20240411002436647"></p><h5 id="启动服务调用模块"><a href="#启动服务调用模块" class="headerlink" title="启动服务调用模块"></a>启动服务调用模块</h5><p>出现下图效果，即代表服务消费端启动完毕并调用到服务端成功获取结果</p><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240411002541788.png" alt="image-20240411002541788"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dubbo&quot;&gt;&lt;a href=&quot;#Dubbo&quot; class=&quot;headerlink&quot; title=&quot;Dubbo&quot;&gt;&lt;/a&gt;Dubbo&lt;/h1&gt;&lt;h2 id=&quot;分布式系统概述&quot;&gt;&lt;a href=&quot;#分布式系统概述&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Dubbo" scheme="https://bangwu2001.github.io/categories/Dubbo/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://bangwu2001.github.io/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://bangwu2001.github.io/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-04-01T08:29:42.000Z</published>
    <updated>2024-04-06T07:42:09.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>主要是学习掌握：进程管理与内存管理这两部分；关于IO管理只需了解即可</p><h2 id="CH1-操作系统概述"><a href="#CH1-操作系统概述" class="headerlink" title="CH1 操作系统概述"></a>CH1 操作系统概述</h2><h3 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329101703565.png" alt="image-20240329101703565" style="zoom: 33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329102306616.png" alt="image-20240329102306616" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329102505147.png" alt="image-20240329102505147" style="zoom:33%;"></p><p>操作系统向上层提供的简易服务：</p><ul><li>图像化用户接口</li><li>命令接口<ul><li>联机命令接口：类似于CMD，交互的方式，用户输入一个命令，操作系统执行对应的操作</li><li>脱机命令接口：批处理命令接口，比如Windows下执行.bat脚本或者Linux下执行.sh脚本</li></ul></li><li>程序接口：在程序中通过系统调用来使用程序接口，执行相关的功能<ul><li>比如执行print函数，将内容输出时，内部就进行了系统调用</li></ul></li></ul><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329103245727.png" alt="image-20240329103245727" style="zoom:33%;"></p><h3 id="操作系统的基本特征"><a href="#操作系统的基本特征" class="headerlink" title="操作系统的基本特征"></a>操作系统的基本特征</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329103933052.png" alt="image-20240329103933052" style="zoom:33%;"></p><h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329104338488.png" alt="image-20240329104338488" style="zoom:33%;"></p><p>在一定程度上并发和共享是相互存在的前提条件</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329110214579.png" alt="image-20240329110214579"></p><h4 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329105335225.png" alt="image-20240329105335225"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329105528794.png" alt="image-20240329105528794"></p><h3 id="操作系统的运行机制"><a href="#操作系统的运行机制" class="headerlink" title="操作系统的运行机制"></a>操作系统的运行机制</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329110743123.png" alt="image-20240329110743123" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329112117138.png" alt="image-20240329112117138" style="zoom:33%;"></p><p>核心：内核态与用户态之间的切换</p><p>CPU如何实现内核态和用户态之间的切换？</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330160907592.png" alt="image-20240330160907592"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330161220818.png" alt="image-20240330161220818" style="zoom:33%;"></p><h3 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h3><h4 id="中断的作用"><a href="#中断的作用" class="headerlink" title="中断的作用"></a>中断的作用</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330161359620.png" alt="image-20240330161359620" style="zoom:33%;"></p><p>中断是让操作系统内核夺回CPU使用权的唯一途径</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330161703444.png" alt="image-20240330161703444" style="zoom:33%;"></p><p>发生中断，CPU会暂停当前程序的执行，转而执行对应的中断处理程序</p><h4 id="中断的类型"><a href="#中断的类型" class="headerlink" title="中断的类型"></a>中断的类型</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330162024172.png" alt="image-20240330162024172" style="zoom:33%;"></p><h5 id="内中断的例子"><a href="#内中断的例子" class="headerlink" title="内中断的例子"></a>内中断的例子</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330162407138.png" alt="image-20240330162407138" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330162754820.png" alt="image-20240330162754820" style="zoom:33%;"></p><p>外中断的例子</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330163648701.png" alt="image-20240330163648701" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330163940308.png" alt="image-20240330163940308" style="zoom:33%;"></p><h4 id="中断机制的原理"><a href="#中断机制的原理" class="headerlink" title="中断机制的原理"></a>中断机制的原理</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330172636154.png" alt="image-20240330172636154" style="zoom:33%;"></p><h4 id="中断总结"><a href="#中断总结" class="headerlink" title="中断总结"></a>中断总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330172822246.png" alt="image-20240330172822246" style="zoom:33%;"></p><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331092830406.png" alt="image-20240331092830406" style="zoom:33%;"></p><h4 id="什么是系统调用"><a href="#什么是系统调用" class="headerlink" title="什么是系统调用"></a>什么是系统调用</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331093109959.png" alt="image-20240331093109959" style="zoom:33%;"></p><h4 id="系统调用与库函数的区别"><a href="#系统调用与库函数的区别" class="headerlink" title="系统调用与库函数的区别"></a>系统调用与库函数的区别</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331093401427.png" alt="image-20240331093401427" style="zoom:33%;"></p><h4 id="什么功能需要系统调用？"><a href="#什么功能需要系统调用？" class="headerlink" title="什么功能需要系统调用？"></a>什么功能需要系统调用？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331093820510.png" alt="image-20240331093820510" style="zoom:33%;"></p><h4 id="系统调用的过程"><a href="#系统调用的过程" class="headerlink" title="系统调用的过程"></a>系统调用的过程</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331094313271.png" alt="image-20240331094313271" style="zoom:33%;"></p><h3 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h3><h4 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331095203052.png" alt="image-20240331095203052" style="zoom:33%;"></p><p>一般可以分为大内核和微内核这两种体系结构</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331100203297.png" alt="image-20240331100203297" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331100343140.png" alt="image-20240331100343140" style="zoom:33%;"></p><h3 id="操作系统的引导"><a href="#操作系统的引导" class="headerlink" title="操作系统的引导"></a>操作系统的引导</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331100544668.png" alt="image-20240331100544668" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331102542575.png" alt="image-20240331102542575" style="zoom:33%;"></p><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331104423948.png" alt="image-20240331104423948" style="zoom:33%;"></p><h2 id="CH2-进程管理"><a href="#CH2-进程管理" class="headerlink" title="CH2 进程管理"></a>CH2 进程管理</h2><h3 id="进程的概述"><a href="#进程的概述" class="headerlink" title="进程的概述"></a>进程的概述</h3><p>要理解以下几个问题：</p><ul><li>进程的概念：理解进程与程序的区别</li><li>进程的组成：一个进程由哪些部分组成</li><li>进程的特征：进程有哪些重要的特征</li></ul><h4 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h4><p>程序：是静态的，是存放在磁盘里的可执行文件，就是一系列的指令集合</p><p>进程：是动态的，是程序的一次执行过程</p><p>同一个程序多次运行会对应多个进程 </p><p> <strong>Q:操作系统作为这些进程的管理者，他是如何区分各个进程？</strong></p><h4 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h4><h5 id="PCB：进程控制块"><a href="#PCB：进程控制块" class="headerlink" title="PCB：进程控制块"></a>PCB：进程控制块</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331184210902.png" alt="image-20240331184210902" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331184306253.png" alt="image-20240331184306253" style="zoom:33%;"></p><h5 id="程序段、数据段"><a href="#程序段、数据段" class="headerlink" title="程序段、数据段"></a>程序段、数据段</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331184625343.png" alt="image-20240331184625343" style="zoom:33%;"></p><pre><code>                                 &lt;img src=&quot;操作系统/image-20240331184952014.png&quot; alt=&quot;image-20240331184952014&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331185302328.png" alt="image-20240331185302328" style="zoom:33%;"></p><h3 id="进程的状态与转换"><a href="#进程的状态与转换" class="headerlink" title="进程的状态与转换"></a>进程的状态与转换</h3><h4 id="进程的状态以及状态之间的转换"><a href="#进程的状态以及状态之间的转换" class="headerlink" title="进程的状态以及状态之间的转换"></a>进程的状态以及状态之间的转换</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331185532434.png" alt="image-20240331185532434" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331190255612.png" alt="image-20240331190255612" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331190659103.png" alt="image-20240331190659103" style="zoom:33%;"></p><p>操作系统如何将各个进程的PCB组织起来？</p><h5 id="进程的组织方式一：链接方式"><a href="#进程的组织方式一：链接方式" class="headerlink" title="进程的组织方式一：链接方式"></a>进程的组织方式一：链接方式</h5><p>链表的形式存放不同状态的进程</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331190854657.png" alt="image-20240331190854657" style="zoom:33%;"></p><h5 id="进程的组织方式二：索引方式"><a href="#进程的组织方式二：索引方式" class="headerlink" title="进程的组织方式二：索引方式"></a>进程的组织方式二：索引方式</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331191108337.png" alt="image-20240331191108337" style="zoom:33%;"></p><h5 id="进程组织方式总结"><a href="#进程组织方式总结" class="headerlink" title="进程组织方式总结"></a>进程组织方式总结</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331191136504.png" alt="image-20240331191136504" style="zoom:33%;"></p><h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><p>​                            <img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331191531974.png" alt="image-20240331191531974" style="zoom:33%;">   </p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331191713944.png" alt="image-20240331191713944" style="zoom:33%;"></p><h4 id="如何实现进程的控制"><a href="#如何实现进程的控制" class="headerlink" title="如何实现进程的控制"></a>如何实现进程的控制</h4><p><strong>原语：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原语是操作系统内核中的一直特殊程序，它的执行具有原子性，也就是这段程序的运行必须是一气呵成，不可中断</span><br></pre></td></tr></table></figure><p>  <strong>为什么进程控制需要用原语来实现(或者为什么这个过程需要一气呵成、不可中断？)</strong></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331192400695.png" alt="image-20240331192400695" style="zoom:33%;"></p><p><strong>操作系统是如何实现原语的原子性？</strong></p><p>背景：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正常情况下：CPU每执行完一条指令都会例行检查是否有中断信号需要处理，如果有，则暂停运行当前程序，转而去执行相应的中断处理程序</span><br></pre></td></tr></table></figure><p> 操作系统利用开中断和关中断指令去保证原语的原子性</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331193415950.png" alt="image-20240331193415950" style="zoom:33%;"></p><h4 id="进程控制相关的原语"><a href="#进程控制相关的原语" class="headerlink" title="进程控制相关的原语"></a>进程控制相关的原语</h4><h5 id="进程创建（创建原语）"><a href="#进程创建（创建原语）" class="headerlink" title="进程创建（创建原语）"></a>进程创建（创建原语）</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331193717795.png" alt="image-20240331193717795" style="zoom:33%;"></p><h5 id="进程的终止（撤销原语）"><a href="#进程的终止（撤销原语）" class="headerlink" title="进程的终止（撤销原语）"></a>进程的终止（撤销原语）</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331194410242.png" alt="image-20240331194410242" style="zoom:33%;"></p><h5 id="阻塞原语和唤醒原语"><a href="#阻塞原语和唤醒原语" class="headerlink" title="阻塞原语和唤醒原语"></a>阻塞原语和唤醒原语</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331194602482.png" alt="image-20240331194602482" style="zoom:33%;"></p><h5 id="切换原语"><a href="#切换原语" class="headerlink" title="切换原语"></a>切换原语</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331194736908.png" alt="image-20240331194736908" style="zoom:33%;"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>无论是哪种进程原语，在进程状态切换时无非做的三类事情：</p><ul><li>更新PCB中的信息<ul><li>修改进程状态state,保存恢复进程的运行环境</li></ul></li><li>将PCB插入合适的队列</li><li>分配/回收资源 </li></ul><h4 id="扩充：程序是如何执行的以及进程之间的切换会发生什么？"><a href="#扩充：程序是如何执行的以及进程之间的切换会发生什么？" class="headerlink" title="扩充：程序是如何执行的以及进程之间的切换会发生什么？"></a>扩充：程序是如何执行的以及进程之间的切换会发生什么？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331195409640.png" alt="image-20240331195409640" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331195522798.png" alt="image-20240331195522798" style="zoom:33%;"></p><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>概念：进程间通信(IPC,Inter-Process Communication)是指两个进程之间产生数据交互 </p><p>背景：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进程是资源分配的基本单位，因此各个进程拥有的内存地址空间是相互独立的，为了保证安全，一个进程是不能直接访问另一个进程的地址空间</span><br></pre></td></tr></table></figure><p>进程之间是如何进行通信的？</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331200027954.png" alt="image-20240331200027954" style="zoom:33%;"></p><h4 id="进程通信方式一：共享存储"><a href="#进程通信方式一：共享存储" class="headerlink" title="进程通信方式一：共享存储"></a>进程通信方式一：共享存储</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331201150098.png" alt="image-20240331201150098" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331201430938.png" alt="image-20240331201430938" style="zoom:33%;"></p><h4 id="进程通信方式二：消息传递"><a href="#进程通信方式二：消息传递" class="headerlink" title="进程通信方式二：消息传递"></a>进程通信方式二：消息传递</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331201745944.png" alt="image-20240331201745944" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331202322351.png" alt="image-20240331202322351" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331202521007.png" alt="image-20240331202521007" style="zoom:33%;"></p><h4 id="进程通信方式三：管道通信"><a href="#进程通信方式三：管道通信" class="headerlink" title="进程通信方式三：管道通信"></a>进程通信方式三：管道通信</h4><pre><code>                                         &lt;img src=&quot;操作系统/image-20240331203332343.png&quot; alt=&quot;image-20240331203332343&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h3 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331204009917.png" alt="image-20240331204009917" style="zoom:33%;"></p><h4 id="为什么引入线程？"><a href="#为什么引入线程？" class="headerlink" title="为什么引入线程？"></a>为什么引入线程？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331204304470.png" alt="image-20240331204304470" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331204439565.png" alt="image-20240331204439565" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331204720727.png" alt="image-20240331204720727" style="zoom:33%;"></p><h4 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331204924114.png" alt="image-20240331204924114" style="zoom:33%;"></p><h3 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331205012635.png" alt="image-20240331205012635" style="zoom:33%;"></p><h4 id="用户级线程"><a href="#用户级线程" class="headerlink" title="用户级线程"></a>用户级线程</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331205602438.png" alt="image-20240331205602438" style="zoom:33%;"></p><p>用户级线程的特点：</p><ul><li>线程的管理工作是由线程库来完成的</li><li>线程的切换不需要CP变态(由用户态-&gt;核心态)</li><li>操作系统无法意识到用户级线程的存在</li></ul><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331210012233.png" alt="image-20240331210012233" style="zoom:33%;"></p><h4 id="内核级线程"><a href="#内核级线程" class="headerlink" title="内核级线程"></a>内核级线程</h4><pre><code>                                     &lt;img src=&quot;操作系统/image-20240331210233658.png&quot; alt=&quot;image-20240331210233658&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h4><h5 id="一对一模型"><a href="#一对一模型" class="headerlink" title="一对一模型"></a>一对一模型</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331210459845.png" alt="image-20240331210459845" style="zoom:33%;"></p><h5 id="多对一模型"><a href="#多对一模型" class="headerlink" title="多对一模型"></a>多对一模型</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331210646253.png" alt="image-20240331210646253" style="zoom:33%;"></p><h5 id="多对多模型"><a href="#多对多模型" class="headerlink" title="多对多模型"></a>多对多模型</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331210823048.png" alt="image-20240331210823048" style="zoom:33%;"></p><h3 id="线程的状态与转换"><a href="#线程的状态与转换" class="headerlink" title="线程的状态与转换"></a>线程的状态与转换</h3><p>线程的状态以及各个状态之间的转换与进程基本一致</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331211122746.png" alt="image-20240331211122746" style="zoom:33%;"></p><h3 id="线程的组织与控制"><a href="#线程的组织与控制" class="headerlink" title="线程的组织与控制"></a>线程的组织与控制</h3><p>进程的组织与控制是通过PCB来实现的，而线程的组织与控制是通过TCB(线程控制块)来实现的</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331211602274.png" alt="image-20240331211602274" style="zoom:33%;"></p><h3 id="处理器调度"><a href="#处理器调度" class="headerlink" title="处理器调度"></a>处理器调度</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331220650527.png" alt="image-20240331220650527" style="zoom:33%;"></p><h4 id="调度的概念"><a href="#调度的概念" class="headerlink" title="调度的概念"></a>调度的概念</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331221435911.png" alt="image-20240331221435911"></p><h4 id="调度层次"><a href="#调度层次" class="headerlink" title="调度层次"></a>调度层次</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331222521655.png" alt="image-20240331222521655" style="zoom:33%;"></p><h5 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331221904732.png" alt="image-20240331221904732" style="zoom:33%;"></p><h5 id="低级调度"><a href="#低级调度" class="headerlink" title="低级调度"></a>低级调度</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331221955990.png" alt="image-20240331221955990" style="zoom:33%;"></p><h5 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331222155365.png" alt="image-20240331222155365" style="zoom:33%;"></p><h3 id="进程调度的时机、切换与过程、方式"><a href="#进程调度的时机、切换与过程、方式" class="headerlink" title="进程调度的时机、切换与过程、方式"></a>进程调度的时机、切换与过程、方式</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331222739796.png" alt="image-20240331222739796" style="zoom:33%;"></p><h4 id="进程调度的时机"><a href="#进程调度的时机" class="headerlink" title="进程调度的时机"></a>进程调度的时机</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331223151270.png" alt="image-20240331223151270" style="zoom:33%;"></p><h4 id="进程调度方式"><a href="#进程调度方式" class="headerlink" title="进程调度方式"></a>进程调度方式</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331224337647.png" alt="image-20240331224337647" style="zoom:33%;"></p><h4 id="进程的切换与过程"><a href="#进程的切换与过程" class="headerlink" title="进程的切换与过程"></a>进程的切换与过程</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331224639448.png" alt="image-20240331224639448" style="zoom:33%;"></p><h3 id="调度器和闲逛进程"><a href="#调度器和闲逛进程" class="headerlink" title="调度器和闲逛进程"></a>调度器和闲逛进程</h3><h4 id="调度器-调度程序"><a href="#调度器-调度程序" class="headerlink" title="调度器/调度程序"></a>调度器/调度程序</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331225213245.png" alt="image-20240331225213245" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331225541506.png" alt="image-20240331225541506" style="zoom:33%;"></p><h4 id="闲逛进程"><a href="#闲逛进程" class="headerlink" title="闲逛进程"></a>闲逛进程</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331225622880.png" alt="image-20240331225622880" style="zoom:33%;"></p><h3 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331230015428.png" alt="image-20240331230015428" style="zoom:33%;"></p><h4 id="CPU利用率"><a href="#CPU利用率" class="headerlink" title="CPU利用率"></a>CPU利用率</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331230417364.png" alt="image-20240331230417364" style="zoom:33%;"></p><h4 id="系统吞吐量"><a href="#系统吞吐量" class="headerlink" title="系统吞吐量"></a>系统吞吐量</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331230640212.png" alt="image-20240331230640212" style="zoom:33%;"></p><h4 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331231214518.png" alt="image-20240331231214518" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331231351719.png" alt="image-20240331231351719" style="zoom:33%;"></p><h4 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h4><p>等待时间=周转时间-运行时间</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331231537845.png" alt="image-20240331231537845" style="zoom:33%;"></p><h4 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331232308693.png" alt="image-20240331232308693" style="zoom:33%;"></p><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><h4 id="先来先服务-FCFS"><a href="#先来先服务-FCFS" class="headerlink" title="先来先服务(FCFS)"></a>先来先服务(FCFS)</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331233004559.png" alt="image-20240331233004559" style="zoom:33%;"></p><h4 id="短作业优先-SJF"><a href="#短作业优先-SJF" class="headerlink" title="短作业优先(SJF)"></a>短作业优先(SJF)</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331233326887.png" alt="image-20240331233326887" style="zoom:33%;"></p><h4 id="高响应比优先-HRRN"><a href="#高响应比优先-HRRN" class="headerlink" title="高响应比优先(HRRN)"></a>高响应比优先(HRRN)</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331233451122.png" alt="image-20240331233451122" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331233939491.png" alt="image-20240331233939491" style="zoom:33%;"></p><h4 id="时间片轮转（Round-Robin"><a href="#时间片轮转（Round-Robin" class="headerlink" title="时间片轮转（Round-Robin)"></a>时间片轮转（Round-Robin)</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331235211864.png" alt="image-20240331235211864" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331235248536.png" alt="image-20240331235248536"></p><h4 id="优先级调度"><a href="#优先级调度" class="headerlink" title="优先级调度"></a>优先级调度</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331235416056.png" alt="image-20240331235416056" style="zoom:33%;"></p><h4 id="多级反馈队列"><a href="#多级反馈队列" class="headerlink" title="多级反馈队列"></a>多级反馈队列</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331235950486.png" alt="image-20240331235950486" style="zoom:33%;"></p><h3 id="进程的同步和互斥"><a href="#进程的同步和互斥" class="headerlink" title="进程的同步和互斥"></a>进程的同步和互斥</h3><h4 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401092423993.png" alt="image-20240401092423993" style="zoom:33%;"></p><h4 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401092616916.png" alt="image-20240401092616916" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401092927040.png" alt="image-20240401092927040" style="zoom:33%;"></p><h3 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h3><ul><li>单标志法</li><li>双标志先检查</li><li>双标志后检查</li><li>Peterson算法</li></ul><h4 id="单标志法"><a href="#单标志法" class="headerlink" title="单标志法"></a>单标志法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401094254630.png" alt="image-20240401094254630" style="zoom:33%;"></p><p>缺陷:</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401094619192.png" alt="image-20240401094619192"></p><h4 id="双标志先检查法"><a href="#双标志先检查法" class="headerlink" title="双标志先检查法"></a>双标志先检查法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401095010555.png" alt="image-20240401095010555" style="zoom:33%;"></p><h4 id="双标志后检查法"><a href="#双标志后检查法" class="headerlink" title="双标志后检查法"></a>双标志后检查法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401095241562.png" alt="image-20240401095241562" style="zoom:33%;"></p><h4 id="Peterson算法"><a href="#Peterson算法" class="headerlink" title="Peterson算法"></a>Peterson算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401095953874.png" alt="image-20240401095953874" style="zoom:33%;"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401100017982.png" alt="image-20240401100017982" style="zoom:33%;"></p><h3 id="进程互斥的硬件实现方法"><a href="#进程互斥的硬件实现方法" class="headerlink" title="进程互斥的硬件实现方法"></a>进程互斥的硬件实现方法</h3><ul><li>中断屏蔽方法</li><li>TestAndSet(TS指令/TSL指令)</li><li>Swap指令</li></ul><h4 id="中断屏蔽方法"><a href="#中断屏蔽方法" class="headerlink" title="中断屏蔽方法"></a>中断屏蔽方法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401100430216.png" alt="image-20240401100430216" style="zoom:33%;"></p><h4 id="TestAndSet指令"><a href="#TestAndSet指令" class="headerlink" title="TestAndSet指令"></a>TestAndSet指令</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401100808496.png" alt="image-20240401100808496" style="zoom:33%;"></p><h4 id="Swap指令"><a href="#Swap指令" class="headerlink" title="Swap指令"></a>Swap指令</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401101100489.png" alt="image-20240401101100489" style="zoom:33%;"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401101134298.png" alt="image-20240401101134298" style="zoom:33%;"></p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401101350222.png" alt="image-20240401101350222" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401101412640.png" alt="image-20240401101412640" style="zoom:33%;"></p><h3 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h3><ul><li>整型信号量</li><li>记录型信号量</li></ul><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401102402021.png" alt="image-20240401102402021" style="zoom:33%;"></p><h4 id="信号量机制-1"><a href="#信号量机制-1" class="headerlink" title="信号量机制"></a>信号量机制</h4><pre><code>                                             &lt;img src=&quot;操作系统/image-20240401103540739.png&quot; alt=&quot;image-20240401103540739&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401104524695.png" alt="image-20240401104524695" style="zoom:33%;"></p><h4 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401105112654.png" alt="image-20240401105112654" style="zoom:33%;"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401105734937.png" alt="image-20240401105734937" style="zoom:33%;"></p><h3 id="信号量机制实现进程互斥、同步和前驱关系"><a href="#信号量机制实现进程互斥、同步和前驱关系" class="headerlink" title="信号量机制实现进程互斥、同步和前驱关系"></a>信号量机制实现进程互斥、同步和前驱关系</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401110923594.png" alt="image-20240401110923594" style="zoom:33%;"></p><h4 id="信号量机制实现进程互斥"><a href="#信号量机制实现进程互斥" class="headerlink" title="信号量机制实现进程互斥"></a>信号量机制实现进程互斥</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401111219479.png" alt="image-20240401111219479" style="zoom:33%;"></p><h4 id="信号量机制实现同步"><a href="#信号量机制实现同步" class="headerlink" title="信号量机制实现同步"></a>信号量机制实现同步</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401111738525.png" alt="image-20240401111738525" style="zoom:33%;"></p><h4 id="信号量机制实现进程前驱关系"><a href="#信号量机制实现进程前驱关系" class="headerlink" title="信号量机制实现进程前驱关系"></a>信号量机制实现进程前驱关系</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401112004610.png" alt="image-20240401112004610" style="zoom:33%;"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401112250329.png" alt="image-20240401112250329" style="zoom:33%;"></p><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401113201092.png" alt="image-20240401113201092" style="zoom:33%;"></p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401144331656.png" alt="image-20240401144331656" style="zoom:33%;"></p><p>不能改变相邻P、V操作的顺序，因为可能会发生死锁</p><pre><code>                                             &lt;img src=&quot;操作系统/image-20240401144625031.png&quot; alt=&quot;image-20240401144625031&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h3 id="多生产者多消费者问题"><a href="#多生产者多消费者问题" class="headerlink" title="多生产者多消费者问题"></a>多生产者多消费者问题</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><pre><code>                                 &lt;img src=&quot;操作系统/image-20240401150006736.png&quot; alt=&quot;image-20240401150006736&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401150314106.png" alt="image-20240401150314106" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401150731670.png" alt="image-20240401150731670" style="zoom:33%;"></p><p>本题中缓冲区大小为1，所以在任何时刻，apple、orange、plate三个同步信号量做多只有一个是1，因此在任何时刻，做多只有一个进程的p操作不会被阻塞，并顺利进入临界区</p><h3 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401151540571.png" alt="image-20240401151540571" style="zoom:33%;"></p><h4 id="问题解决-1"><a href="#问题解决-1" class="headerlink" title="问题解决"></a>问题解决</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401152727525.png" alt="image-20240401152727525" style="zoom:33%;"></p><h3 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401154621589.png" alt="image-20240401154621589" style="zoom:33%;"></p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p> 这个问题比前面几个问题都要复杂，因为写进程与写进程之间是可以同时进行的，读进程与写进程之间是互斥的</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401155355869.png" alt="image-20240401155355869" style="zoom:33%;"></p><p>上述方案存在的潜在问题：只要有读进程还在读，写进程就要一直阻塞，可能饿死，在这种算法中，读进程是优先的</p><p>写进程优先的解决方案</p><pre><code>                                 &lt;img src=&quot;操作系统/image-20240401155954921.png&quot; alt=&quot;image-20240401155954921&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h3 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401160425529.png" alt="image-20240401160425529" style="zoom:33%;"></p><p>存在的问题：如果5个哲学家并发执行，都拿起了自己左手边的筷子，那么就会出现死锁问题</p><p>那么如何防止死锁的发生？</p><p>方案一：</p><p>可以对哲学家进程施加一些限制，比如每次做多允许四个哲学家同时进餐。这样可以保证至少有一个哲学家能够同时拿到左右两只筷子</p><p>方案二：</p><p>要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家正好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有一个可以拿起第一只筷子，另一个会直接阻塞。</p><p>方案三：仅当一个哲学家左右两只筷子都可用时，才允许他抓起筷子</p><h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><h4 id="背景：什么要引入管程？"><a href="#背景：什么要引入管程？" class="headerlink" title="背景：什么要引入管程？"></a>背景：什么要引入管程？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401161846510.png" alt="image-20240401161846510" style="zoom:33%;"></p><h4 id="管程的定义和特征"><a href="#管程的定义和特征" class="headerlink" title="管程的定义和特征"></a>管程的定义和特征</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401162249333.png" alt="image-20240401162249333" style="zoom:33%;"></p><h4 id="管程例子：解决生产者消费者问题"><a href="#管程例子：解决生产者消费者问题" class="headerlink" title="管程例子：解决生产者消费者问题"></a>管程例子：解决生产者消费者问题</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401162512261.png" alt="image-20240401162512261" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401162828756.png" alt="image-20240401162828756" style="zoom:33%;"></p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="死锁的概述"><a href="#死锁的概述" class="headerlink" title="死锁的概述"></a>死锁的概述</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401163512406.png" alt="image-20240401163512406" style="zoom:33%;"></p><h4 id="死锁-vs-死循环-vs-饥饿"><a href="#死锁-vs-死循环-vs-饥饿" class="headerlink" title="死锁 vs 死循环 vs 饥饿"></a>死锁 vs 死循环 vs 饥饿</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401163719224.png" alt="image-20240401163719224" style="zoom:33%;"></p><h4 id="死锁产生的必要条件"><a href="#死锁产生的必要条件" class="headerlink" title="死锁产生的必要条件"></a>死锁产生的必要条件</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401164054846.png" alt="image-20240401164054846" style="zoom:33%;"></p><h4 id="发生死锁的例子"><a href="#发生死锁的例子" class="headerlink" title="发生死锁的例子"></a>发生死锁的例子</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401164221699.png" alt="image-20240401164221699" style="zoom:33%;"></p><h4 id="死锁的处理策略"><a href="#死锁的处理策略" class="headerlink" title="死锁的处理策略"></a>死锁的处理策略</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401164300209.png" alt="image-20240401164300209" style="zoom:33%;"></p><h5 id="预防死锁"><a href="#预防死锁" class="headerlink" title="预防死锁"></a>预防死锁</h5><h6 id="破坏互斥条件"><a href="#破坏互斥条件" class="headerlink" title="破坏互斥条件"></a>破坏互斥条件</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170030811.png" alt="image-20240401170030811" style="zoom:33%;"></p><h6 id="破坏不剥夺条件"><a href="#破坏不剥夺条件" class="headerlink" title="破坏不剥夺条件"></a>破坏不剥夺条件</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170102218.png" alt="image-20240401170102218" style="zoom:33%;"></p><h6 id="破坏请求和保持条件"><a href="#破坏请求和保持条件" class="headerlink" title="破坏请求和保持条件"></a>破坏请求和保持条件</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170129540.png" alt="image-20240401170129540" style="zoom:33%;"></p><h6 id="破坏循环等待条件"><a href="#破坏循环等待条件" class="headerlink" title="破坏循环等待条件"></a>破坏循环等待条件</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170223020.png" alt="image-20240401170223020" style="zoom:33%;"></p><h5 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170416397.png" alt="image-20240401170416397" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170648093.png" alt="image-20240401170648093" style="zoom:33%;"></p><h6 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170721430.png" alt="image-20240401170721430" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170935904.png" alt="image-20240401170935904" style="zoom:33%;"></p><h5 id="死锁检测和解除"><a href="#死锁检测和解除" class="headerlink" title="死锁检测和解除"></a>死锁检测和解除</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401171058693.png" alt="image-20240401171058693" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401171208372.png" alt="image-20240401171208372" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401171234908.png" alt="image-20240401171234908" style="zoom:33%;"></p><h2 id="CH3内存管理"><a href="#CH3内存管理" class="headerlink" title="CH3内存管理"></a>CH3内存管理</h2><h3 id="内存的基础知识"><a href="#内存的基础知识" class="headerlink" title="内存的基础知识"></a>内存的基础知识</h3><h4 id="什么是内存？内存有什么作用？"><a href="#什么是内存？内存有什么作用？" class="headerlink" title="什么是内存？内存有什么作用？"></a>什么是内存？内存有什么作用？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402093505547.png" alt="image-20240402093505547" style="zoom:33%;"></p><h4 id="相对地址的转换"><a href="#相对地址的转换" class="headerlink" title="相对地址的转换"></a>相对地址的转换</h4><p>程序经过编译、链接之后生成的指令中指明的是相对地址，是相对进程起始地址而言的地址，那么如何将相对地址转换为物理地址？</p><p>常见的装入方式：</p><ul><li>绝对装入</li><li>可重定位装入</li><li>动态运行时装入</li></ul><h5 id="绝对装入"><a href="#绝对装入" class="headerlink" title="绝对装入"></a>绝对装入</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402095545432.png" alt="image-20240402095545432" style="zoom:33%;"></p><p>灵活性低，如果绝对装入，换了一台电脑运行，可能就不行了</p><h5 id="可重定位装入"><a href="#可重定位装入" class="headerlink" title="可重定位装入"></a>可重定位装入</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402095748633.png" alt="image-20240402095748633" style="zoom:33%;"></p><h5 id="动态运行时装入"><a href="#动态运行时装入" class="headerlink" title="动态运行时装入"></a>动态运行时装入</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402100032950.png" alt="image-20240402100032950" style="zoom:33%;"></p><h4 id="写程序到程序运行流程"><a href="#写程序到程序运行流程" class="headerlink" title="写程序到程序运行流程"></a>写程序到程序运行流程</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402100340432.png" alt="image-20240402100340432" style="zoom:33%;"></p><h4 id="链接的方式"><a href="#链接的方式" class="headerlink" title="链接的方式"></a>链接的方式</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402100452123.png" alt="image-20240402100452123" style="zoom:33%;"></p><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><h4 id="内存空间的分配与回收"><a href="#内存空间的分配与回收" class="headerlink" title="内存空间的分配与回收"></a>内存空间的分配与回收</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402101453649.png" alt="image-20240402101453649" style="zoom:33%;"></p><h4 id="虚拟技术：操作系统需要提供某种技术从逻辑上对内存空间进行扩充"><a href="#虚拟技术：操作系统需要提供某种技术从逻辑上对内存空间进行扩充" class="headerlink" title="虚拟技术：操作系统需要提供某种技术从逻辑上对内存空间进行扩充"></a>虚拟技术：操作系统需要提供某种技术从逻辑上对内存空间进行扩充</h4><pre><code>                                     &lt;img src=&quot;操作系统/image-20240402101637091.png&quot; alt=&quot;image-20240402101637091&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="操作系统需要提供地址转换功能，负责程序的逻辑地址和物理地址的转换"><a href="#操作系统需要提供地址转换功能，负责程序的逻辑地址和物理地址的转换" class="headerlink" title="操作系统需要提供地址转换功能，负责程序的逻辑地址和物理地址的转换"></a>操作系统需要提供地址转换功能，负责程序的逻辑地址和物理地址的转换</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402101744861.png" alt="image-20240402101744861" style="zoom:33%;"></p><h4 id="操作系统需要提供内存保护功能，保证各个进程在各自存储-空间运行，互不干扰"><a href="#操作系统需要提供内存保护功能，保证各个进程在各自存储-空间运行，互不干扰" class="headerlink" title="操作系统需要提供内存保护功能，保证各个进程在各自存储 空间运行，互不干扰"></a>操作系统需要提供内存保护功能，保证各个进程在各自存储 空间运行，互不干扰</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402102319744.png" alt="image-20240402102319744" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402102446478.png" alt="image-20240402102446478" style="zoom:33%;"></p><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402102545024.png" alt="image-20240402102545024" style="zoom:33%;"></p><h3 id="内存空间扩充"><a href="#内存空间扩充" class="headerlink" title="内存空间扩充"></a>内存空间扩充</h3><ul><li>覆盖技术</li><li>交换技术</li><li>虚拟存储技术</li></ul><h4 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h4><pre><code>                                 &lt;img src=&quot;操作系统/image-20240402110123096.png&quot; alt=&quot;image-20240402110123096&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402110435908.png" alt="image-20240402110435908" style="zoom:33%;"></p><h4 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402111427650.png" alt="image-20240402111427650" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402143107871.png" alt="image-20240402143107871" style="zoom:33%;"></p><h3 id="内存空间的分配与回收-1"><a href="#内存空间的分配与回收-1" class="headerlink" title="内存空间的分配与回收"></a>内存空间的分配与回收</h3><h4 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h4><p>连续分配：指为用户进程分配的必须是一个连续的内存空间 </p><h5 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402144828511.png" alt="image-20240402144828511" style="zoom:33%;"></p><h5 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402145124314.png" alt="image-20240402145124314" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402145943111.png" alt="image-20240402145943111" style="zoom:33%;"></p><h5 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402150217254.png" alt="image-20240402150217254" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402150408786.png" alt="image-20240402150408786" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151307492.png" alt="image-20240402151307492" style="zoom:33%;"></p><p>内存分配</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151406451.png" alt="image-20240402151406451" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151522519.png" alt="image-20240402151522519" style="zoom:33%;"></p><p>内存回收</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151643847.png" alt="image-20240402151643847" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151751962.png" alt="image-20240402151751962" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151826215.png" alt="image-20240402151826215" style="zoom:33%;"></p><pre><code>                                              &lt;img src=&quot;操作系统/image-20240402151853579.png&quot; alt=&quot;image-20240402151853579&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402152235712.png" alt="image-20240402152235712" style="zoom:33%;"></p><h4 id="非连续分配管理方式"><a href="#非连续分配管理方式" class="headerlink" title="非连续分配管理方式"></a>非连续分配管理方式</h4><p>非连续分配：为用户进程分配的可以是一些分散的内存空间</p><h3 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402152725479.png" alt="image-20240402152725479" style="zoom:33%;"></p><h4 id="首次适应算法"><a href="#首次适应算法" class="headerlink" title="首次适应算法"></a>首次适应算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402153358523.png" alt="image-20240402153358523" style="zoom:33%;"></p><h4 id="最佳适应算法"><a href="#最佳适应算法" class="headerlink" title="最佳适应算法"></a>最佳适应算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402153753646.png" alt="image-20240402153753646" style="zoom:33%;"></p><h4 id="最坏适应算法"><a href="#最坏适应算法" class="headerlink" title="最坏适应算法"></a>最坏适应算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402153957703.png" alt="image-20240402153957703" style="zoom:33%;"></p><h4 id="邻近适应算法"><a href="#邻近适应算法" class="headerlink" title="邻近适应算法"></a>邻近适应算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402154435594.png" alt="image-20240402154435594" style="zoom:33%;"></p><h3 id="连续分配管理方式-1"><a href="#连续分配管理方式-1" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h3><h4 id="基本分页存储管理"><a href="#基本分页存储管理" class="headerlink" title="基本分页存储管理"></a>基本分页存储管理</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402163232103.png" alt="image-20240402163232103" style="zoom:33%;"></p><p>问题一：如何存储逻辑页面与物理页面的对应关系—页表</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402163600999.png" alt="image-20240402163600999" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402163820921.png" alt="image-20240402163820921" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402163929309.png" alt="image-20240402163929309" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402164132995.png" alt="image-20240402164132995" style="zoom:33%;"></p><p>如何实现地址的转换？</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402164513364.png" alt="image-20240402164513364" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402164826838.png" alt="image-20240402164826838" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402165123334.png" alt="image-20240402165123334" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402165359715.png" alt="image-20240402165359715" style="zoom:33%;"></p><p>总结</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402165457383.png" alt="image-20240402165457383" style="zoom:33%;"></p><h5 id="基本地址转换结构"><a href="#基本地址转换结构" class="headerlink" title="基本地址转换结构"></a>基本地址转换结构</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402170125722.png" alt="image-20240402170125722" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402171018980.png" alt="image-20240402171018980" style="zoom:33%;"></p><h5 id="具有快表的地址变换机构"><a href="#具有快表的地址变换机构" class="headerlink" title="具有快表的地址变换机构"></a>具有快表的地址变换机构</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402191211264.png" alt="image-20240402191211264" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402192026060.png" alt="image-20240402192026060" style="zoom:33%;"></p><pre><code>                                      &lt;img src=&quot;操作系统/image-20240402192314710.png&quot; alt=&quot;image-20240402192314710&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402192744066.png" alt="image-20240402192744066" style="zoom:33%;"></p><h5 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h5><h6 id="单级页表存在的问题"><a href="#单级页表存在的问题" class="headerlink" title="单级页表存在的问题"></a>单级页表存在的问题</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402193228050.png" alt="image-20240402193228050" style="zoom:33%;"></p><h6 id="如何解决单级页表存在的问题"><a href="#如何解决单级页表存在的问题" class="headerlink" title="如何解决单级页表存在的问题"></a>如何解决单级页表存在的问题</h6><p>采用多级页表解决页表必须连续存放的问题</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402193605231.png" alt="image-20240402193605231" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402194124240.png" alt="image-20240402194124240" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402194304083.png" alt="image-20240402194304083" style="zoom:33%;"></p><p>采用虚拟技术解决没有必要让整个页表常驻内存的问题</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402194512651.png" alt="image-20240402194512651" style="zoom:33%;"></p><p>例题：</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402194923971.png" alt="image-20240402194923971" style="zoom:33%;"></p><p>两级页表与一级页表相比的缺点：</p><p>一级页表只需访问两次内存，二级页表需要访问三次内存</p><h6 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402195140403.png" alt="image-20240402195140403" style="zoom:33%;"></p><h4 id="基本分段存储管理"><a href="#基本分段存储管理" class="headerlink" title="基本分段存储管理"></a>基本分段存储管理</h4><h5 id="分段管理"><a href="#分段管理" class="headerlink" title="分段管理"></a>分段管理</h5><pre><code>                                     &lt;img src=&quot;操作系统/image-20240402195537504.png&quot; alt=&quot;image-20240402195537504&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402200425466.png" alt="image-20240402200425466" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402200816780.png" alt="image-20240402200816780" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402202256535.png" alt="image-20240402202256535" style="zoom:33%;"></p><h5 id="分段-vs-分页管理"><a href="#分段-vs-分页管理" class="headerlink" title="分段 vs 分页管理"></a>分段 vs 分页管理</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402202836672.png" alt="image-20240402202836672" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402202950649.png" alt="image-20240402202950649" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402203051009.png" alt="image-20240402203051009" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402203140419.png" alt="image-20240402203140419" style="zoom:33%;"></p><h4 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h4><h5 id="分页、分段的优缺点"><a href="#分页、分段的优缺点" class="headerlink" title="分页、分段的优缺点"></a>分页、分段的优缺点</h5><pre><code>                                         &lt;img src=&quot;操作系统/image-20240402203837533.png&quot; alt=&quot;image-20240402203837533&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h5 id="分段-分页—-段页式管理方式"><a href="#分段-分页—-段页式管理方式" class="headerlink" title="分段+分页—-段页式管理方式"></a>分段+分页—-段页式管理方式</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402203935865.png" alt="image-20240402203935865" style="zoom:33%;"></p><h5 id="段表、页表"><a href="#段表、页表" class="headerlink" title="段表、页表"></a>段表、页表</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402204159873.png" alt="image-20240402204159873" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402204452230.png" alt="image-20240402204452230" style="zoom:33%;"></p><h5 id="如何实现地址转换"><a href="#如何实现地址转换" class="headerlink" title="如何实现地址转换"></a>如何实现地址转换</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402204546951.png" alt="image-20240402204546951" style="zoom:33%;"></p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><h4 id="传统存储管理方式的特征、缺点"><a href="#传统存储管理方式的特征、缺点" class="headerlink" title="传统存储管理方式的特征、缺点"></a>传统存储管理方式的特征、缺点</h4><pre><code>                                         &lt;img src=&quot;操作系统/image-20240402205246881.png&quot; alt=&quot;image-20240402205246881&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="虚拟内存的定义和特征"><a href="#虚拟内存的定义和特征" class="headerlink" title="虚拟内存的定义和特征"></a>虚拟内存的定义和特征</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402205721274.png" alt="image-20240402205721274" style="zoom:33%;"></p><h4 id="如何实现虚拟内存技术？"><a href="#如何实现虚拟内存技术？" class="headerlink" title="如何实现虚拟内存技术？"></a>如何实现虚拟内存技术？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402205925768.png" alt="image-20240402205925768" style="zoom:33%;"></p><h3 id="请求分页管理方式"><a href="#请求分页管理方式" class="headerlink" title="请求分页管理方式"></a>请求分页管理方式</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402210152436.png" alt="image-20240402210152436" style="zoom:33%;"></p><h4 id="请求页表"><a href="#请求页表" class="headerlink" title="请求页表"></a>请求页表</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402210344072.png" alt="image-20240402210344072" style="zoom:33%;"></p><h4 id="缺页中断机制"><a href="#缺页中断机制" class="headerlink" title="缺页中断机制"></a>缺页中断机制</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402210803244.png" alt="image-20240402210803244" style="zoom:33%;"></p><pre><code>                                             &lt;img src=&quot;操作系统/image-20240402211008408.png&quot; alt=&quot;image-20240402211008408&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="地址变换机构"><a href="#地址变换机构" class="headerlink" title="地址变换机构"></a>地址变换机构</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211124688.png" alt="image-20240402211124688" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211224479.png" alt="image-20240402211224479" style="zoom:25%;"></p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211306225.png" alt="image-20240402211306225" style="zoom:33%;"></p><h4 id="最佳置换算法"><a href="#最佳置换算法" class="headerlink" title="最佳置换算法"></a>最佳置换算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211637510.png" alt="image-20240402211637510" style="zoom:33%;"></p><h4 id="先进先出置换算法"><a href="#先进先出置换算法" class="headerlink" title="先进先出置换算法"></a>先进先出置换算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211707918.png" alt="image-20240402211707918" style="zoom:33%;"></p><h4 id="最近最久未使用置换"><a href="#最近最久未使用置换" class="headerlink" title="最近最久未使用置换"></a>最近最久未使用置换</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211737449.png" alt="image-20240402211737449" style="zoom:33%;"></p><h4 id="时钟置换算法"><a href="#时钟置换算法" class="headerlink" title="时钟置换算法"></a>时钟置换算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211814968.png" alt="image-20240402211814968" style="zoom:33%;"></p><h4 id="改进型的时钟置换算法"><a href="#改进型的时钟置换算法" class="headerlink" title="改进型的时钟置换算法"></a>改进型的时钟置换算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211946798.png" alt="image-20240402211946798" style="zoom:33%;"></p><h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402212043180.png" alt="image-20240402212043180" style="zoom:33%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;p&gt;主要是学习掌握：进程管理与内存管理这两部分；关于IO管理只需了解即可&lt;/p&gt;
&lt;h2 id=&quot;CH1-操作系统概述&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="操作系统" scheme="https://bangwu2001.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="计算机基础" scheme="https://bangwu2001.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML 与 CSS</title>
    <link href="https://bangwu2001.github.io/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/07_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF_HTML&amp;CSS/"/>
    <id>https://bangwu2001.github.io/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/07_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF_HTML&amp;CSS/</id>
    <published>2024-01-16T14:10:42.000Z</published>
    <updated>2024-01-16T14:10:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-与-CSS"><a href="#HTML-与-CSS" class="headerlink" title="HTML 与 CSS"></a>HTML 与 CSS</h1><p>HTML 是什么：即 HyperText Markup language 超文本标记语言，咱们熟知的网页就是用它编写的，HTML 的作用是定义网页的内容和结构。</p><ul><li>HyperText 是指用超链接的方式组织网页，把网页联系起来</li><li>Markup 是指用 <code>&lt;标签&gt;</code> 的方式赋予内容不同的功能和含义</li></ul><p>CSS 是什么：即 Cascading  Style  Sheets 级联（层叠）样式表，它描述了网页的表现与展示效果</p><h2 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML 元素"></a>HTML 元素</h2><p>HTML 由一系列元素 <code>elements</code> 组成，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>整体称之为元素</li><li><code>&lt;p&gt;</code> 和 <code>&lt;/p&gt;</code> 分别称为起始和结束标签</li><li><p>标签包围起来的 Hello, world 称之为内容</p></li><li><p>p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落</p></li></ul><p>元素还可以有属性，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识</li></ul><p>元素之间可以嵌套，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大<span class="tag">&lt;/<span class="name">b</span>&gt;</span>的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误嵌套写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不包含内容的元素称之为空元素，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>img 作用是用来展示图片</li><li>src 属性用来指明图片路径</li></ul><h2 id="HTML-页面"><a href="#HTML-页面" class="headerlink" title="HTML 页面"></a>HTML 页面</h2><p>前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>html</code> 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素</li><li><code>head</code> 元素包含的是那些不用于展现内容的元素，如 <code>title</code>，<code>link</code>，<code>meta</code> 等</li><li><code>body</code> 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素</li></ul><h2 id="常见元素"><a href="#常见元素" class="headerlink" title="常见元素"></a>常见元素</h2><h3 id="1-文本"><a href="#1-文本" class="headerlink" title="1) 文本"></a>1) 文本</h3><h4 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a>Heading</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2号标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3号标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4号标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>5号标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>6号标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>无序列表 unordered list</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多级列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    北京市</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>海淀区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>朝阳区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>昌平区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    河北省</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>石家庄<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>保定<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h4><p>锚，超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;网页地址&quot;</span>&gt;</span>超链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-多媒体"><a href="#2-多媒体" class="headerlink" title="2) 多媒体"></a>2) 多媒体</h3><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>src 格式有 3 种</p><ul><li><p>文件地址</p></li><li><p>data URL，格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:媒体类型;base64,数据</span><br></pre></td></tr></table></figure></li><li><p>object URL，需要配合 javascript 使用</p></li></ul><h4 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-表单"><a href="#3-表单" class="headerlink" title="3) 表单"></a>3) 表单</h3><h4 id="作用与语法"><a href="#作用与语法" class="headerlink" title="作用与语法"></a>作用与语法</h4><p>表单的作用：<strong>收集</strong>用户填入的<strong>数据</strong>，并将这些数据<strong>提交给服务器</strong></p><p>表单的语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;服务器地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;请求方式&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;数据格式&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单项 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>method 请求方式有 <ul><li>get （默认）提交时，数据跟在 URL 地址之后</li><li>post 提交时，数据在请求体内</li></ul></li><li>enctype 在 post 请求时，指定请求体的数据格式<ul><li>application/x-www-form-urlencoded（默认）</li><li>multipart/form-data</li></ul></li><li>其中表单项提供多种收集数据的方式<ul><li>有 name 属性的表单项数据，才会被发送给服务器</li></ul></li></ul><h4 id="常见的表单项"><a href="#常见的表单项" class="headerlink" title="常见的表单项"></a>常见的表单项</h4><p>文本框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uesrname&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>密码框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>隐藏框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日期框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;唱歌&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;逛街&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h2><h3 id="1-请求组成"><a href="#1-请求组成" class="headerlink" title="1) 请求组成"></a>1) 请求组成</h3><p>请求由三部分组成</p><ol><li>请求行</li><li>请求头</li><li>请求体</li></ol><p>可以用 telnet 程序测试</p><h3 id="2-请求方式与数据格式"><a href="#2-请求方式与数据格式" class="headerlink" title="2) 请求方式与数据格式"></a>2) 请求方式与数据格式</h3><h4 id="get-请求示例"><a href="#get-请求示例" class="headerlink" title="get 请求示例"></a>get 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /test2?name=%E5%BC%A0&amp;age=20 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><ul><li>%E5%BC%A0 是【张】经过 URL 编码后的结果</li></ul><h4 id="post-请求示例"><a href="#post-请求示例" class="headerlink" title="post 请求示例"></a>post 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 21</span><br><span class="line"></span><br><span class="line">name=%E5%BC%A0&amp;age=18</span><br></pre></td></tr></table></figure><p>application/x-www-form-urlencoed 格式细节：</p><ul><li>参数分成名字和值，中间用 = 分隔</li><li>多个参数使用 &amp; 进行分隔</li><li>【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送</li></ul><h4 id="json-请求示例"><a href="#json-请求示例" class="headerlink" title="json 请求示例"></a>json 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test3 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 25</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure><p>json 对象格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;属性名&quot;:属性值&#125;</span><br></pre></td></tr></table></figure><p>其中属性值可以是</p><ul><li>字符串 “”</li><li>数字</li><li>true, false</li><li>null</li><li>对象</li><li>数组</li></ul><p>json 数组格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[元素1, 元素2, ...]</span><br></pre></td></tr></table></figure><h4 id="multipart-请求示例"><a href="#multipart-请求示例" class="headerlink" title="multipart 请求示例"></a>multipart 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: multipart/form-data; boundary=123</span><br><span class="line">Content-Length: 125</span><br><span class="line"></span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">lisi</span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;age&quot;</span><br><span class="line"></span><br><span class="line">30</span><br><span class="line">--123--</span><br></pre></td></tr></table></figure><ul><li>boundary=123 用来定义分隔符</li><li>起始分隔符是 <code>--分隔符</code></li><li>结束分隔符是 <code>--分隔符--</code></li></ul><h4 id="数据格式小结"><a href="#数据格式小结" class="headerlink" title="数据格式小结"></a>数据格式小结</h4><p>客户端发送</p><ul><li>编码 <ul><li>application/x-www-form-urlencoded ：url 编码</li><li>application/json：utf-8 编码</li><li>multipart/form-data：每部分编码可以不同</li></ul></li><li>表单只支持以 application/x-www-form-urlencoded 和 multipart/form-data 格式发送数据</li><li>文件上传需要用 multipart/form-data 格式</li><li>js 代码可以支持任意格式发送数据 </li></ul><p>服务端接收</p><ul><li>对 application/x-www-form-urlencoded 和 multipart/form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可</li><li>对于 applicaiton/json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式</li></ul><h3 id="3-session-原理"><a href="#3-session-原理" class="headerlink" title="3) session 原理"></a>3) session 原理</h3><p>Http 无状态，有会话</p><ul><li>无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用</li><li>有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享</li></ul><p>服务端使用了 session 技术来暂存数据</p><p>存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /s1?name=zhang HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /s2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Cookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D</span><br></pre></td></tr></table></figure><p>session 技术实现身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line">participant Session</span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L -&gt;&gt; +Session : 存入用户名</span><br><span class="line">Session --&gt;&gt; -L: </span><br><span class="line">L --&gt;&gt; -Client: 登录成功</span><br><span class="line">end</span><br><span class="line">rect rgb(200, 190, 255)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求</span><br><span class="line">i -&gt;&gt; +Session : 获取用户名</span><br><span class="line">Session --&gt;&gt; -i : </span><br><span class="line">i -&gt;&gt; i: 用户名存在，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="4-jwt-原理"><a href="#4-jwt-原理" class="headerlink" title="4) jwt 原理"></a>4) jwt 原理</h3><p>jwt 技术实现身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line"></span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L --&gt;&gt; -Client : 登录成功，返回token</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rect rgb(150, 190, 155)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求，携带token</span><br><span class="line">i -&gt;&gt; i : 校验token，校验无误，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>生成 token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /j1?name=zhang&amp;pass=123 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>校验 token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /j2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Authorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28</span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>即 Cascading  Style  Sheets，它描述了网页的表现与展示效果</p><p>先用选择器定位到对应的元素，然后用属性对对应的元素赋值</p><h3 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1) 选择器"></a>1) 选择器</h3><ul><li>type 选择器 - 根据标签名进行匹配（元素选择器）</li><li><p>class 选择器 - 根据元素的 class 属性进行匹配</p></li><li><p>id 选择器  - 根据元素的 id 属性进行匹配</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 元素(type)选择器 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">243</span>, <span class="number">136</span>, <span class="number">42</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* class 选择器 */</span></span><br><span class="line"><span class="selector-class">.c1</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">151</span>, <span class="number">211</span>, <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* id 选择器 */</span></span><br><span class="line"><span class="selector-id">#p3</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: cyan;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line">//多个选择器之间可以用逗号分隔</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三个选择器之间存在一定的优先级:</span></span><br><span class="line"><span class="comment">优先级: id选择器&gt;class选择器&gt;type选择器</span></span><br><span class="line"><span class="comment">即同一个元素被三个选择器同时命中时，只有id选择器会生效</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-属性和值"><a href="#2-属性和值" class="headerlink" title="2) 属性和值"></a>2) 属性和值</h3><p>属性与值太多太多，使用时根据需要上网搜索即可</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS">前端参考文档</a></p><ul><li>background-color : red;</li><li>…</li><li>display</li></ul><h3 id="3-布局"><a href="#3-布局" class="headerlink" title="3) 布局"></a>3) 布局</h3><p>与布局相关的 html 元素</p><ul><li>div</li><li>template</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML-与-CSS&quot;&gt;&lt;a href=&quot;#HTML-与-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML 与 CSS&quot;&gt;&lt;/a&gt;HTML 与 CSS&lt;/h1&gt;&lt;p&gt;HTML 是什么：即 HyperText Markup language 超</summary>
      
    
    
    
    <category term="前端" scheme="https://bangwu2001.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://bangwu2001.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript</title>
    <link href="https://bangwu2001.github.io/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/"/>
    <id>https://bangwu2001.github.io/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/</id>
    <published>2024-01-16T14:10:42.000Z</published>
    <updated>2024-01-16T14:10:40.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p>它是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等</p><p>例子</p><ul><li>修改页面内容</li></ul><p>js 代码位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// js 代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 js 脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js脚本路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意，到了框架之后，引入方式会有不同</li></ul><h2 id="变量与数据类型"><a href="#变量与数据类型" class="headerlink" title="变量与数据类型"></a>变量与数据类型</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><h4 id="1-let-star"><a href="#1-let-star" class="headerlink" title="1) let :star:"></a>1) let :star:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名 = 值;</span><br></pre></td></tr></table></figure><ul><li>let 声明的变量可以被多次赋值，例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;  <span class="comment">// 初始值是 100</span></span><br><span class="line">a = <span class="number">200</span>;  <span class="comment">// ok, 被重新赋值为 200</span></span><br></pre></td></tr></table></figure><h4 id="2-const-star"><a href="#2-const-star" class="headerlink" title="2) const :star:"></a>2) const :star:</h4><ul><li>const 修饰的叫常量，只能赋值一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="number">300</span>; <span class="comment">// 初始值是 300</span></span><br><span class="line">b = <span class="number">400</span>;   <span class="comment">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure><ul><li>const 并不意味着它引用的内容不可修改，例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">c[<span class="number">2</span>] = <span class="number">4</span>;         <span class="comment">// ok, 数组内容被修改成 [1,2,4]</span></span><br><span class="line">c = [<span class="number">5</span>,<span class="number">6</span>];<span class="comment">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure><h4 id="3-var"><a href="#3-var" class="headerlink" title="3) var"></a>3) var</h4><p>var 声明的变量可以被多次赋值，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="number">100</span>;</span><br><span class="line">f = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="1-2-undefined-和-null"><a href="#1-2-undefined-和-null" class="headerlink" title="1,2) undefined 和 null"></a>1,2) undefined 和 null</h4><ul><li>执行表达式或函数，没有返回结果，出现 undefined</li><li>访问数组不存在的元素，访问对象不存在的属性，出现 undefined</li><li>定义变量，没有初始化，出现 undefined</li></ul><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);  <span class="comment">// 函数没有返回值, 结果是  undefined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>; <span class="comment">// 表达式没有返回值, 结果是 undefined</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b[<span class="number">10</span>]); <span class="comment">// 数组未定义元素是 undefined</span></span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="property">age</span>); <span class="comment">// 对象未定义属性是 undefined</span></span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">// 变量未初始化是 undefined</span></span><br></pre></td></tr></table></figure><p>二者共同点</p><ul><li>都没有属性、方法</li><li>二者合称 Nullish</li></ul><p>二者区别</p><ul><li>undefined 由 js 产生</li><li>null 由程序员提供</li></ul><h4 id="3-string-star"><a href="#3-string-star" class="headerlink" title="3) string :star:"></a>3) string :star:</h4><p>js 字符串三种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;hello&quot;</span>;  <span class="comment">// 双引号</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&quot;world&quot;</span>;  <span class="comment">// 单引号</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">`hello`</span>;  <span class="comment">// 反引号</span></span><br></pre></td></tr></table></figure><p>html 代码如下，用 java 和 js 中的字符串如何表示？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.html&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java 显得比较繁琐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;&lt;a href=\&quot;1.html\&quot;&gt;超链接&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>js 就比较灵活</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&#x27;&lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">`&lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;`</span>;</span><br></pre></td></tr></table></figure><p>模板字符串（Template strings）</p><p>需求：拼接 URI 的请求参数，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/test?name=zhang&amp;age=18</span><br><span class="line">/test?name=li&amp;age=20</span><br></pre></td></tr></table></figure><p>传统方法拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ; <span class="comment">// zhang li ...</span></span><br><span class="line"><span class="keyword">let</span> age = ; <span class="comment">// 18 20 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;/test?name=&quot;</span> + name + <span class="string">&quot;&amp;age=&quot;</span> + age;</span><br></pre></td></tr></table></figure><p>模板字符串方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ; <span class="comment">// zhang li ...</span></span><br><span class="line"><span class="keyword">let</span> age = ; <span class="comment">// 18 20 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">`/test?name=<span class="subst">$&#123;name&#125;</span>&amp;age=<span class="subst">$&#123;age&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h4 id="4-5-number-和-bigint-star"><a href="#4-5-number-和-bigint-star" class="headerlink" title="4,5) number 和 bigint:star:"></a>4,5) number 和 bigint:star:</h4><p>number 类型标识的是双精度浮动小数，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">3</span>;   <span class="comment">// 结果 3.3333333333333335</span></span><br></pre></td></tr></table></figure><p>既然是浮点小数，那么可以除零</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">0</span>;  <span class="comment">// 结果 Infinity 正无穷大</span></span><br><span class="line">-<span class="number">10</span> / <span class="number">0</span>;  <span class="comment">// 结果 -Infinity 负无穷大</span></span><br></pre></td></tr></table></figure><p>浮点小数都有运算精度问题，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.0</span> - <span class="number">1.1</span>; <span class="comment">// 结果 0.8999999999999999</span></span><br></pre></td></tr></table></figure><p>字符串转数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>); <span class="comment">// 结果是数字 10 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10.5&quot;</span>);<span class="comment">// 结果是数字 10, 去除了小数部分</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>) / <span class="number">3</span>; <span class="comment">// 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 转换失败，结果是特殊值 NaN (Not a Number)</span></span><br></pre></td></tr></table></figure><p>要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10n</span> / <span class="number">3n</span>;<span class="comment">// 结果 3n, 按整数除法处理</span></span><br></pre></td></tr></table></figure><h4 id="6-boolean-star"><a href="#6-boolean-star" class="headerlink" title="6) boolean :star:"></a>6) boolean :star:</h4><ul><li>Truthy</li><li>Falsy</li></ul><p>在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】… 作为判断条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b) &#123; <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy</p><p>下面值都是 falsy</p><ul><li><code>false</code></li><li><code>Nullish (null, undefined)</code></li><li><code>0, 0n, NaN</code></li><li><code>&quot;&quot; &#39;&#39; `` </code>  即长度为零的字符串</li></ul><p>剩余的值绝大部分都是 truthy</p><p>有几个容易被当作 falsy 实际是 truthy 的</p><ul><li><code>&quot;false&quot;, &quot;0&quot;</code> 即字符串的 false 和 字符串的零</li><li><code>[]</code> 空数组</li><li><code>&#123;&#125;</code> 空对象</li></ul><h4 id="7-symbol"><a href="#7-symbol" class="headerlink" title="7) symbol"></a>7) symbol</h4><ul><li>很少使用</li></ul><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><h4 id="1-Function-star-star"><a href="#1-Function-star-star" class="headerlink" title="1) Function :star::star:"></a>1) Function :star::star:</h4><h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(实参);</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);     <span class="comment">// 返回 3</span></span><br></pre></td></tr></table></figure><p>js 中的函数调用特点：对参数的<strong>类型</strong>和<strong>个数</strong>都没有限制，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);  <span class="comment">// 返回 ab</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);   <span class="comment">// 返回 9, 第三个参数没有被用到, 不会报错</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>);<span class="comment">// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN</span></span><br></pre></td></tr></table></figure><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p>java 中（spring）要实现默认参数的效果得这么做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">page</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(defaultValue=&quot;1&quot;)</span> <span class="type">int</span> page, </span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(defaultValue=&quot;10&quot;)</span> <span class="type">int</span> size</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pagination</span>(<span class="params">page = <span class="number">1</span>, size = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(page, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">参数</span>) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第一种场景：定义完毕后立刻调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>第二种场景：作为其它对象的方法，例如</p><p>页面有元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>点我啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此元素有一个 onclick 方法，会在鼠标单击这个元素后被执行，onclick 方法刚开始是 null，需要赋值后才能使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标单击了...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(参数) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有参数，() 还是要保留</li><li>如果只有一个参数，() 可以省略</li><li>如果函数体内只有一行代码，{} 可以省略</li><li>如果这一行代码就是结果，return 可以省略</li></ul><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span>  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aa&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="函数是对象"><a href="#函数是对象" class="headerlink" title="函数是对象"></a>函数是对象</h5><p>以下形式在 js 中非常常见！</p><ol><li>可以参与赋值，例，具名函数也能参与赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = abc;</span><br></pre></td></tr></table></figure><ol><li>有属性、有方法，执行 <code>console.dir(abc)</code>，输出结果如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ƒ abc()</span><br><span class="line">    arguments: null</span><br><span class="line">    caller: null</span><br><span class="line">    length: 0</span><br><span class="line">    name: &quot;abc&quot;</span><br><span class="line">    ➡prototype: &#123;constructor: ƒ&#125;</span><br><span class="line">    [[FunctionLocation]]: VM1962:1</span><br><span class="line">    ➡[[Prototype]]: ƒ ()</span><br><span class="line">    ➡[[Scopes]]: Scopes[1]</span><br></pre></td></tr></table></figure><ul><li>其中带有 f 标记的是方法，不带的是属性</li><li><p>带有 ➡ 符号的可以继续展开，限于篇幅省略了</p></li><li><p>带有 <code>[[ ]]</code> 的是内置属性，不能访问，只能查看</p></li><li>相对重要的是 <code>[[Prototype]]</code> 和 <code>[[Scopes]]</code> 会在后面继承和作用域时讲到</li></ul><ol><li>可以作为方法参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">fn</span>) &#123;          <span class="comment">// fn 将来可以是一个函数对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="title function_">fn</span>();                 <span class="comment">// 调用函数对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">b</span>(a)</span><br></pre></td></tr></table></figure><ol><li>可以作为方法返回值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">c</span>()()</span><br></pre></td></tr></table></figure><h5 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h5><p>函数可以嵌套（js 代码中很常见，只是嵌套的形式更多是匿名函数，箭头函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 看这里</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>();</span><br></pre></td></tr></table></figure><ul><li>以函数为分界线划定作用域，所有函数之外是全局作用域</li><li>查找变量时，由内向外查找<ul><li>在内层作用域找到变量，就会停止查找，不会再找外层</li><li>所有作用域都找不到变量，报错</li></ul></li><li>作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试</li></ul><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()();  <span class="comment">// 在外面执行了 b</span></span><br></pre></td></tr></table></figure><ul><li>函数定义时，它的作用域已经确定好了，因此无论函数将来去了哪，都能从它的作用域中找到当时那些变量</li><li>别被概念忽悠了，闭包就是指<strong>函数能够访问自己的作用域中变量</strong></li></ul><h5 id="let、var-与作用域"><a href="#let、var-与作用域" class="headerlink" title="let、var 与作用域"></a>let、var 与作用域</h5><p>如果函数外层引用的是 let 变量，那么外层普通的 {} 也会作为作用域边界，最外层的 let 也占一个 script 作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 因为是同一个变量，还是打印 20</span></span><br></pre></td></tr></table></figure><p>如果是 let，则视为两个作用域中的两个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 10</span></span><br></pre></td></tr></table></figure><p>要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br></pre></td></tr></table></figure><h4 id="2-Array-star"><a href="#2-Array-star" class="headerlink" title="2) Array :star:"></a>2) Array :star:</h4><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]); <span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组元素</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="number">5</span>; <span class="comment">// 数组元素变成了 [5,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组元素，其中 length 是数组属性，代表数组长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API</p><ul><li>push、shift、splice</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);    <span class="comment">// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]</span></span><br><span class="line">arr.<span class="title function_">shift</span>();<span class="comment">// 从数组头部(左侧)移除元素, 结果 [2,3,4]</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]</span></span><br></pre></td></tr></table></figure><ul><li>join</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">join</span>(); <span class="comment">// 默认使用【,】作为连接符，结果 &#x27;a,b,c&#x27;</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);<span class="comment">// 结果 &#x27;abc&#x27;</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>);<span class="comment">// 结果 &#x27;a-b-c&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>map、filter、forEach</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">i</span>) &#123;   <span class="comment">// 代表的新旧元素之间的变换规则</span></span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map(a) // 具名函数，结果 [10,20,30,60]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map( (i) =&gt; &#123;return i * 10&#125; ); // 箭头函数</span></span><br><span class="line">arr.<span class="title function_">map</span>( <span class="function"><span class="params">i</span> =&gt;</span> i * <span class="number">10</span> ); <span class="comment">// 箭头函数</span></span><br></pre></td></tr></table></figure><ul><li>传给 map 的函数，参数代表旧元素，返回值代表新元素</li></ul><p>map 的内部实现（伪代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">a</span>) &#123; <span class="comment">// 参数是一个函数</span></span><br><span class="line">    <span class="keyword">let</span> narr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> o = arr[i]; <span class="comment">// 旧元素</span></span><br><span class="line">        <span class="keyword">let</span> n = <span class="title function_">a</span>(o);   <span class="comment">// 新元素</span></span><br><span class="line">        narr.<span class="title function_">push</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> narr;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>filter 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line">arr.<span class="title function_">filter</span>( <span class="function">(<span class="params">i</span>)=&gt;</span> i % <span class="number">2</span> == <span class="number">1</span> ); <span class="comment">// 结果 [1,3]</span></span><br></pre></td></tr></table></figure><ul><li>传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素</li></ul><p>forEach 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for(let i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">    console.log(arr[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>( <span class="function">(<span class="params">i</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i) );</span><br></pre></td></tr></table></figure><p>两个称呼</p><ul><li>高阶函数，map，filter，forEach</li><li>回调函数，例如作为参数传入的函数</li></ul><h4 id="3-Object-star-star"><a href="#3-Object-star-star" class="headerlink" title="3) Object :star::star:"></a>3) Object :star::star:</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    属性名: 值,</span><br><span class="line">    方法名: 函数,</span><br><span class="line">    get 属性名() &#123;&#125;,</span><br><span class="line">    set 属性名(新值) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">study</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;小黑&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> study = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123; name, age, study &#125;</span><br></pre></td></tr></table></figure><p>例3（重点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu3 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="title function_">study</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：对象方法这么写，仅限于对象内部</li></ul><p>例4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu4 = &#123;</span><br><span class="line">    <span class="attr">_name</span>: <span class="literal">null</span>, <span class="comment">/*类似于java中私有成员变量*/</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了get&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了set&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 get，set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu4.<span class="property">name</span> = <span class="string">&quot;小白&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu4.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><h5 id="特色：属性增删"><a href="#特色：属性增删" class="headerlink" title="特色：属性增删"></a>特色：属性增删</h5><p>对比一下 Java 中的 Object</p><ul><li>Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的</li><li>js 的对象，不需要什么模板，它的属性和方法可以随时加减</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;;</span><br><span class="line">stu.<span class="property">age</span> = <span class="number">18</span>;<span class="comment">// 添加属性</span></span><br><span class="line"><span class="keyword">delete</span> stu.<span class="property">age</span>;<span class="comment">// 删除属性</span></span><br><span class="line"></span><br><span class="line">stu.<span class="property">study</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">// 添加方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 get，set，需要借助 Object.definePropery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">_name</span>:<span class="literal">null</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(stu, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>参数1：目标对象</li><li>参数2：属性名</li><li>参数3：get，set 的定义</li></ul><h5 id="特色：this"><a href="#特色：this" class="headerlink" title="特色：this"></a>特色：this</h5><p>先来对 Java 中的 this 有个理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">(Student <span class="built_in">this</span>, String subject)</span> &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;在学习 &quot;</span> + subject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下面的代码，本质上是执行 study(stu, &quot;java&quot;)，因此 this 就是 stu</span></span><br><span class="line">        stu.study(<span class="string">&quot;java&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java 中的 this 是个隐式参数</li><li>Java 中，我们说 this 代表的就是调用方法的那个对象</li></ul><p>js 中的 this 也是隐式参数，但它与函数运行时上下文相关</p><p>例如，一个“落单”的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">study</span>(<span class="params">subject</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在学习 &quot;</span> + subject)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">study</span>(<span class="string">&quot;js&quot;</span>);  <span class="comment">// 输出 在学习 js</span></span><br></pre></td></tr></table></figure><p>这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串</p><p>同样的函数，如果作为对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    study</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，会将当前对象作为 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stu.<span class="title function_">study</span>(<span class="string">&#x27;js&#x27;</span>); <span class="comment">// 输出 小白在学习 js</span></span><br></pre></td></tr></table></figure><p>还可以动态改变 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">name</span>:<span class="string">&quot;小黑&quot;</span>&#125;;</span><br><span class="line">study.<span class="title function_">call</span>(stu, <span class="string">&quot;js&quot;</span>);<span class="comment">// 输出 小黑在学习 js</span></span><br></pre></td></tr></table></figure><p>这回 study 执行时，就把 call 的第一个参数 stu 作为 this</p><p>一个例外是，在<strong>箭头函数</strong>内出现的 this，以外层 this 理解 </p><p>用匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">stu.<span class="title function_">play</span>()</span><br></pre></td></tr></table></figure><ul><li>this.name 所在的函数是【落单】的函数，因此 this 代表 window</li></ul><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">与小白在玩耍</span><br><span class="line">与小黑在玩耍</span><br><span class="line">与小明在玩耍</span><br></pre></td></tr></table></figure><p>用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象</li></ul><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小花与小白在玩耍</span><br><span class="line">小花与小黑在玩耍</span><br><span class="line">小花与小明在玩耍</span><br></pre></td></tr></table></figure><p>不用箭头函数的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> me = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(me.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="特色：原型继承"><a href="#特色：原型继承" class="headerlink" title="特色：原型继承"></a>特色：原型继承</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> father = &#123;</span><br><span class="line">    <span class="attr">f1</span>: <span class="string">&#x27;父属性&#x27;</span>,</span><br><span class="line">    <span class="attr">m1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="title class_">Object</span>.<span class="title function_">create</span>(father);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">f1</span>);  <span class="comment">// 打印 父属性</span></span><br><span class="line">son.<span class="title function_">m1</span>();  <span class="comment">// 打印 父方法</span></span><br></pre></td></tr></table></figure><ul><li>father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找</li><li>son 自己可以添加自己的属性和方法</li><li>son 里有特殊属性 <code>__proto__</code> 代表它的父对象，js 术语： son 的原型对象</li><li>不同浏览器对打印 son 的 <code>__proto__</code> 属性时显示不同<ul><li>Edge 打印 console.dir(son) 显示 <code>[[Prototype]]</code></li><li>Firefox 打印 console.dir(son) 显示 <code>&lt;prototype&gt;</code></li></ul></li></ul><h5 id="特色：基于函数的原型继承"><a href="#特色：基于函数的原型继承" class="headerlink" title="特色：基于函数的原型继承"></a>特色：基于函数的原型继承</h5><p>出于方便的原因，js 又提供了一种基于函数的原型继承</p><blockquote><p><strong>函数职责</strong></p><ol><li><p>负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法</p></li><li><p>函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象</p><p><strong>注意！</strong>名字有差异，这个属性的作用就是为新对象提供原型</p></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cons</span>(<span class="params">f2</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建子对象(this), 给子对象提供属性和方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">f2</span> = f2;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">m2</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cons.prototype 就是父对象</span></span><br><span class="line">cons.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">f1</span> = <span class="string">&quot;父属性&quot;</span>;</span><br><span class="line">cons.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">m1</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合 new 关键字，创建子对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title function_">cons</span>(<span class="string">&quot;子属性&quot;</span>)</span><br></pre></td></tr></table></figure><p>子对象的 <code>__proto__</code> 就是函数的 <code>prototype</code> 属性</p><h5 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h5><p>之前我们讲 http 请求格式时，讲过 json 这种数据格式，它的语法看起来与 js 对象非常相似，例如：</p><p>一个 json 对象可以长这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>一个 js 对象长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么他们的区别在哪儿呢？我总结了这么几点</p><ol><li>本质不同<ul><li>json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货</li><li>js 对象是切切实实的对象，可以有属性方法</li></ul></li><li>语法细节不同<ul><li>json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组</li><li>json 中不能有除以上的其它 js 对象的特性，如方法等</li><li>json 中的属性必须用双引号引起来</li></ul></li></ol><p>json 字符串与 js 对象的转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(json字符串);  <span class="comment">// 返回js对象</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(js对象);  <span class="comment">// 返回json字符串</span></span><br></pre></td></tr></table></figure><h3 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h3><p>静态类型语言，如 Java，值有类型，变量也有类型、赋值给变量时，类型要相符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;  <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>而 js 属于动态类型语言，值有类型，但变量没有类型，赋值给变量时，没要求</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100</span>;</span><br><span class="line">b = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">b = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>动态类型看起来比较灵活，但变量没有类型，会给后期维护带来困难，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// obj 的类型未知，必须根据不同类型做出相应的容错处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><ul><li><code>+ - * / % **</code></li><li><code>+= -= *= /= %= **=</code></li><li><code>++ --</code></li><li>位运算、移位运算</li><li><code>== != &gt; &gt;= &lt; &lt;=</code></li><li><code>=== !==</code> :star:</li><li><code>&amp;&amp; || !</code> :star:</li><li><code>?? ?.</code> :star:</li><li><code>...</code> :star:</li><li>解构赋值 :star:</li></ul><h3 id="1"><a href="#1" class="headerlink" title="1) ==="></a>1) ===</h3><p>严格相等运算符，用作逻辑判等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1</span>    <span class="comment">// 返回 true </span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 true，会先将右侧的字符串转为数字，再做比较</span></span><br><span class="line"><span class="number">1</span> === <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 false，类型不等，直接返回 false</span></span><br></pre></td></tr></table></figure><p>typeof 查看某个值的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span><span class="comment">// 返回 &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2) ||"></a>2) ||</h3><p>需求，如果参数 n 没有传递，给它一个【男】</p><p><strong>推荐</strong>做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n = <span class="string">&#x27;男&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        n = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可能是这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = (n === <span class="literal">undefined</span>) ? <span class="string">&#x27;男&#x27;</span> : n;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些老旧代码中可能的做法（不推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = n || <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的语法是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值<span class="number">1</span> || 值<span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2</p><h3 id="3-与"><a href="#3-与" class="headerlink" title="3) ?? 与 ?."></a>3) ?? 与 ?.</h3><h4 id><a href="#" class="headerlink" title="??"></a>??</h4><p>需求，如果参数 n 没有传递或是 null，给它一个【男】</p><p>如果用传统办法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="literal">undefined</span> || n === <span class="literal">null</span>) &#123;</span><br><span class="line">        n = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 ??</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = n ?? <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值1 ?? 值2</span><br></pre></td></tr></table></figure><ul><li>值1 是 nullish，返回值2</li><li>值1 不是 nullish，返回值1</li></ul><h4 id="-1"><a href="#-1" class="headerlink" title="?."></a>?.</h4><p>需求，函数参数是一个对象，可能包含有子属性</p><p>例如，参数可能是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu3 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在要访问子属性（有问题）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>?.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用传统办法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(stu.<span class="property">address</span> === <span class="literal">undefined</span> || stu.<span class="property">address</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-…"><a href="#4-…" class="headerlink" title="4) …"></a>4) …</h3><p>展开运算符</p><p>作用1：打散数组，把元素传递给多个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b,c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求，把数组元素依次传递给函数参数</p><p>传统写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>]);<span class="comment">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure><p>展开运算符写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(...arr);<span class="comment">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure><ul><li>打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素</li></ul><p>作用2：复制数组或对象</p><p>数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1];<span class="comment">// 复制数组</span></span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;...obj1&#125;;<span class="comment">// 复制对象</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：展开运算符复制属于浅拷贝，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">address</span>: &#123;<span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span>&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;...o1&#125;;</span><br></pre></td></tr></table></figure><p>作用3：合并数组或对象</p><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> a2 = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b1 = [...a1,...a2];<span class="comment">// 结果 [1,2,3,4]</span></span><br><span class="line"><span class="keyword">let</span> b2 = [...a2,<span class="number">5</span>,...a1]<span class="comment">// 结果 [3,4,5,1,2]</span></span><br></pre></td></tr></table></figure><p>合并对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o3 = &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n1 = &#123;...o1, ...o2&#125;;<span class="comment">// 结果 &#123;name:&#x27;张三&#x27;,age:18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n2 = &#123;...o3, ...o2, ...o1&#125;; <span class="comment">// 结果&#123;name:&#x27;李四&#x27;,age:18&#125;</span></span><br></pre></td></tr></table></figure><ul><li>复制对象时出现同名属性，后面的会覆盖前面的</li></ul><h3 id="5"><a href="#5" class="headerlink" title="5) [] {}"></a>5) [] {}</h3><p>解构赋值</p><h4 id="-2"><a href="#-2" class="headerlink" title="[]"></a>[]</h4><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;<span class="comment">// 结果 a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">[a,b,c]</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c) <span class="comment">// 结果 a=1, b=2, c=3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(arr);</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title="{}"></a>{}</h4><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = obj;<span class="comment">// 结果 name=张三, age=18</span></span><br></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">&#123;name, age&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age); <span class="comment">// 结果 name=张三, age=18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(obj)</span><br></pre></td></tr></table></figure><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><ul><li><code>if ... else</code></li><li><code>switch</code></li><li><code>while</code></li><li><code>do ... while</code></li><li><code>for</code> </li><li><code>for ... in</code> :star:</li><li><code>for ... of</code> :star:</li><li><code>try ... catch</code> :star:</li></ul><h3 id="1-for-in"><a href="#1-for-in" class="headerlink" title="1) for in"></a>1) for in</h3><p>主要用来遍历对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> father = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">study</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> father) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中 const n 代表遍历出来的属性名</li><li>注意1：方法名也能被遍历出来（它其实也算一种特殊属性）</li><li>注意2：遍历子对象时，父对象的属性会跟着遍历出来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="title class_">Object</span>.<span class="title function_">create</span>(father);</span><br><span class="line">son.<span class="property">sex</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> son) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> son) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n, son[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-for-of"><a href="#2-for-of" class="headerlink" title="2) for of"></a>2) for of</h3><p>主要用来遍历数组，也可以是其它可迭代对象，如 Map，Set 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> a1) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a2 = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>:<span class="number">22</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> obj <span class="keyword">of</span> a2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> &#123;name,age&#125; <span class="keyword">of</span> a2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-try-catch"><a href="#3-try-catch" class="headerlink" title="3) try catch"></a>3) try catch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">address</span>: &#123;<span class="attr">city</span>:<span class="string">&#x27;北京&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)   </span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现了异常&#x27;</span>, e.<span class="property">message</span>)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>前端与后端一样，也需要自己的服务器，前端一般基于<code>node.js</code>来开发的</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="1-安装-nvm"><a href="#1-安装-nvm" class="headerlink" title="1) 安装 nvm"></a>1) 安装 nvm</h4><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p><p><a href="https://blog.csdn.net/HuangsTing/article/details/113857145">nvm的安装教程</a></p><p>安装注意事项</p><ol><li>要卸载掉现有的 nodejs</li><li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li><li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li><li>首次运行前设置好国内镜像地址</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror http://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><p>首先查看有哪些可用版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |</span><br><span class="line">|--------------|--------------|--------------|--------------|</span><br><span class="line">|    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    |</span><br><span class="line">|    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    |</span><br><span class="line">|    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    |</span><br><span class="line">|    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    |</span><br><span class="line">|    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    |</span><br><span class="line">|    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    |</span><br><span class="line">|    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    |</span><br><span class="line">|    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    |</span><br><span class="line">|    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    |</span><br><span class="line">|    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    |</span><br><span class="line">|    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    |</span><br><span class="line">|    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    |</span><br><span class="line">|    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    |</span><br><span class="line">|    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    |</span><br><span class="line">|    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    |</span><br><span class="line">|    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    |</span><br><span class="line">|    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    |</span><br><span class="line">|    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    |</span><br><span class="line">|    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    |</span><br><span class="line">|    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |</span><br></pre></td></tr></table></figure><p>建议安装 LTS（长期支持版）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install 16.16.0</span><br><span class="line">nvm install 14.20.0</span><br></pre></td></tr></table></figure><p>执行 <code>nvm list</code> 会列出已安装版本</p><p>切换到 16.16.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 16.16.0</span><br></pre></td></tr></table></figure><p>切换到 14.20.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 14.20.0</span><br></pre></td></tr></table></figure><p>安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量</p><h4 id="2-检查-npm"><a href="#2-检查-npm" class="headerlink" title="2) 检查 npm"></a>2) 检查 npm</h4><p>npm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p><p>检查镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure><p>如果返回的不是 <code>https://registry.npm.taobao.org/</code>，需要做如下设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><h4 id="3-搭建前端服务器"><a href="#3-搭建前端服务器" class="headerlink" title="3) 搭建前端服务器"></a>3) 搭建前端服务器</h4><p>新建一个保存项目的 client 文件夹，进入文件夹执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save-dev</span><br></pre></td></tr></table></figure><p>安装依赖,express服务器，—save-dev表明以后在程序打包时，express不会打包</p><p>安装之后目录下会出现如下文件：</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240106112802902.png" alt="image-20240106112802902"></p><p>其中:</p><ul><li><code>package.json</code>相当于<code>maven</code>中的<code>pom.xml</code>，下载的依赖包及其版本号都会在该文件中申明</li><li><code>node_modules</code>存放安装js依赖包的目录</li></ul><p>修改 package.json 文件</p><p>添加type的目的是为了在main.js中能够直接使用import语法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.18.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>其中 devDependencies 是 npm install —save-dev 添加的</li></ul><p>express服务器必须编写启动脚本main.js才能运行启动该服务器</p><p>编写 main.js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>(); <span class="comment">//服务器对象</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;./&quot;</span>)) <span class="comment">//设置静态资源目录，便于映射</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">7070</span>); <span class="comment">//服务器启动端口</span></span><br></pre></td></tr></table></figure><p>在当前目录下新建一个静态资源:<code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello,Welcom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 js 代码（运行前端服务器）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node main.js</span><br></pre></td></tr></table></figure><p>在浏览器中输入<code>localhost:7070</code>即可显示如下页面</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240110211216759.png" alt="image-20240110211216759"></p><h3 id="前端案例"><a href="#前端案例" class="headerlink" title="前端案例"></a>前端案例</h3><ul><li>前端只有静态页面，使用 Express 服务器</li><li>后端使用 Tomcat 服务器，通过 SpringBoot、MyBatis 等框架获取数据库数据</li></ul><p>前端的核心：</p><ul><li>用html搭建前端页面的基础架构</li><li>用css样式展示前端效果</li><li>用javascript代码操控html中组件标签，绑定实践，使页面能够交互和动态化</li></ul><h4 id="1-查找元素"><a href="#1-查找元素" class="headerlink" title="1) 查找元素"></a>1) 查找元素</h4><ul><li>document.getElementById - 根据 id 值查找一个元素</li><li><p>[document|元素].querySelector - 根据选择器查找第一个匹配元素</p><ul><li>三大选择器<ul><li>标签名选择器</li><li>class选择器,格式<code>.class名</code></li><li>id选择器,格式<code>#id</code></li></ul></li></ul></li><li><p>[document|元素].querySelectorAll - 根据选择器查找所有匹配元素</p></li></ul><p>例如，有下面的 html 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thead&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row bold&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>); <span class="comment">// 找到 &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.col&#x27;</span>); <span class="comment">// 找到 &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.col&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  找到的是一个集合</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;1&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;张三&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;男&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;18&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thead = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.thead&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只在 thead 元素范围内找</span></span><br><span class="line">thead.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.col&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  找到的是一个集合</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111160837053.png" alt="image-20240111160837053"></p><p>根据 id 属性查找既可以用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id值&quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以用 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#id值&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-修改元素内容"><a href="#2-修改元素内容" class="headerlink" title="2) 修改元素内容"></a>2) 修改元素内容</h4><ul><li>元素.innerHTML</li><li>元素.textContent</li></ul><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;侠客列表&#x27;</span></span><br></pre></td></tr></table></figure><p>innerHTML  会解析内容中的标签</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111161314954.png" alt="image-20240111161314954"></p><p>textContext 不会解析内容中的标签</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111161335183.png" alt="image-20240111161335183"></p><p>给 innerHTML 或 textContent 赋值空串，可以实现清空标签内容的效果</p><h4 id="3-利用模板"><a href="#3-利用模板" class="headerlink" title="3) 利用模板"></a>3) 利用模板</h4><p>模拟场景：后端从数据库中查询学生信息列表，以json数组形式返回，前端如何动态的将他们展示出来(学生人数是动态的)</p><p>使用模板，模板定义可重用的部分，模板标签内部的内容并不会在页面显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thead&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row bold&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将来这些数据从 java 端返回</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> array = [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    ];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">        c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">        c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">        c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">        c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//importNode复制元素，第一个元素是待复制的对象，true代表递归复制其下的所有子标签元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.importNode(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 建立父子关系，左边父，右边子</span></span></span><br><span class="line"><span class="language-javascript">        tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-Fetch-API"><a href="#4-Fetch-API" class="headerlink" title="4) Fetch API"></a>4) Fetch API</h4><p>Fetch API 可以用来获取远程数据，它有两种方式接收结果，同步方式与异步方式</p><p>同步与异步的区别：</p><ul><li>同步：主线程会阻塞，知道获取子线程的结果才会继续向下执行</li><li>异步：主线程直接继续执行无需等待中间的子线程的执行结果，子线程结束之后会返回结果</li></ul><p>格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, options) <span class="comment">// 返回 Promise，并不是请求的最终结果</span></span><br><span class="line"><span class="comment">//url资源地址,options请求头请求参数等信息</span></span><br></pre></td></tr></table></figure><p>同步方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 结果 = <span class="keyword">await</span> <span class="title class_">Promise</span></span><br><span class="line"><span class="comment">// 后续代码</span></span><br></pre></td></tr></table></figure><ul><li>await 关键字必须在一个标记了 async 的 function 内来使用</li><li>后续代码不会在结果返回前执行</li></ul><p>异步方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">then</span>(结果 =&gt; &#123; ... &#125;)</span><br><span class="line"><span class="comment">// 后续代码                 </span></span><br></pre></td></tr></table></figure><ul><li>后续代码不必等待结果返回就可以执行</li></ul><p>例：</p><p>在 express 服务器上有 students.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">17</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>现在用 fetch api 获取这些数据，并展示</p><p>同步方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findStudents</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取响应对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;students.json&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取响应体, 按json格式转换为js数组</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> array = <span class="keyword">await</span> resp.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 显示数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">                c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">                c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">                c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">                c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.importNode(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 建立父子关系</span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">findStudents</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>fetch(‘students.json’) 内部会发送请求，但响应结果不能立刻返回，因此 await 就是等待响应结果返回</li><li>其中 resp.json() 也不是立刻能返回结果，它返回的也是 Promise 对象，也要配合 await 取结果</li></ul><p>异步方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&#x27;students.json&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>( <span class="function"><span class="params">resp</span> =&gt;</span> resp.<span class="title function_">json</span>() )</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>( <span class="function"><span class="params">array</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 显示数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">                c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">                c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">                c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">                c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.importNode(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 建立父子关系</span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>( <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e) )  <span class="comment">//捕获异常</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第一个 then 是在响应返回后，才会调用它里面的箭头函数，箭头函数参数即 resp  响应对象</li><li>第二个 then 是在 json 解析完成后，才会调用它里面的箭头函数，箭头函数参数即解析结果（本例是 array 数组）</li><li>上一个 then 返回的是 Promise 对象时，才能链式调用下一个 then</li></ul><h5 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h5><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111213945679.png" alt="image-20240111213945679" style="zoom:800%;"></p><ul><li>只要协议、主机、端口之一不同，就不同源，例如<ul><li><a href="http://localhost:7070/a">http://localhost:7070/a</a> 和 <a href="https://localhost:7070/b">https://localhost:7070/b</a> 就不同源</li></ul></li><li>同源检查是浏览器的行为，而且只针对 fetch、xhr 请求<ul><li>如果是其它客户端，例如 java http client，postman，它们是不做同源检查的</li><li>通过表单提交、浏览器直接输入 url 地址这些方式发送的请求，也不会做同源检查</li></ul></li><li>更多相关知识请参考<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></li></ul></li></ul><p>跨域现象分析</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111214437118.png" alt="image-20240111214437118"></p><p>上图中，如果请求时服务器与请求方来自于不同源，则会在请求头中携带Origin字段，指明发送者的<strong>源</strong></p><p>对于后端服务器而言，如果允许不同源的访问，则会在响应头中携带<code>Access-Control-Allow-Origin</code>，知名其响应允许来自于<code>http://localhost:7070</code>的源访问使用</p><p>请求响应头解决</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111215900034.png" alt="image-20240111215900034"></p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111215930378.png" alt="image-20240111215930378"></p><ul><li>fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域<ul><li>我们的例子中：student.html 发送 fetch 请求，告诉 tomcat，我源自 localhost:7070</li><li><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111215557707.png" alt="image-20240111215557707"></li></ul></li><li>目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】<ul><li>我们的例子中：tomcat 返回 fetch 响应，告诉浏览器，这个响应允许源自 localhost:7070 的资源使用</li><li><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111215626343.png" alt="image-20240111215626343"></li></ul></li></ul><p>代理解决</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111220344221.png" alt="image-20240111220344221"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-proxy-middleware --save-dev</span><br></pre></td></tr></table></figure><p>在 express 服务器启动代码中加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createProxyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;http-proxy-middleware&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, <span class="title function_">createProxyMiddleware</span>(&#123; <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>, <span class="attr">changeOrigin</span>: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure><p>fetch 代码改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:7070/api/students&#x27;</span>)</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/students&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111220640614.png" alt="image-20240111220640614"></p><h4 id="5-模块化"><a href="#5-模块化" class="headerlink" title="5) 模块化"></a>5) 模块化</h4><p>项目中，通常存在很多JS文件，各个JS之间会存在相互引用，所以需要用到不同JS之间的导入导出</p><p>在源文件中中用<code>export</code>导出，在使用文件中用<code>import</code>导入</p><p>没加export只能同一JS内部使用，外部无法使用</p><p>单个导出 const、let、function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一齐导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;a,b,c&#125;</span><br></pre></td></tr></table></figure><p>导出 default，只能有一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> b;</span><br></pre></td></tr></table></figure><p>import 语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> 语句(<span class="keyword">import</span> &#123;xx,xxx&#125; form xx.<span class="property">js</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>import 需要遵循同源策略</li></ul><p>整个导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable language_">module</span> <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">a</span>)<span class="comment">// 输出10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">b</span>)<span class="comment">// 输出20</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">c</span>()<span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><p>单个导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a,c&#125; <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// 输出10</span></span><br><span class="line"><span class="title function_">c</span>()<span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><p>导入默认</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> x <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)<span class="comment">// 输出20</span></span><br></pre></td></tr></table></figure><h4 id="6-scrip标签引入外部文件的两种写法"><a href="#6-scrip标签引入外部文件的两种写法" class="headerlink" title="6) scrip标签引入外部文件的两种写法"></a>6) scrip标签引入外部文件的两种写法</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>写法1,两个JS文件之间可以不同源</span><br><span class="line">&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="params">#</span>写法2 这种方法引用时，JS文件之间必须遵从同源策略</span><br><span class="line">&lt;script type=&quot;module&quot;&gt;</span><br><span class="line">import xxx</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h1&gt;&lt;p&gt;它是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等&lt;/p</summary>
      
    
    
    
    <category term="前端" scheme="https://bangwu2001.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://bangwu2001.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>代码生成器</title>
    <link href="https://bangwu2001.github.io/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://bangwu2001.github.io/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2023-12-17T03:08:42.000Z</published>
    <updated>2023-12-17T03:07:44.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h1><h2 id="代码生成器概述"><a href="#代码生成器概述" class="headerlink" title="代码生成器概述"></a>代码生成器概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>基于<code>MVC</code>架构的传统进行模块开发的步骤：</p><ul><li>创建数据库表</li><li>根据表字段设计对应的实体类(PO)</li><li>编写增删改查持久层(dao)代码</li><li>根据业务逻辑编写service层代码</li><li>controller层代码和前端页面</li></ul><p>通常只要知道了一个表的结构，增删改查的前后台代码格式基本上就是固定的，比如<code>controller</code>、<code>service</code>、<code>dao</code>、<code>实体类Po</code>、前端<code>jsp</code>等模块的代码在不同数据库表基础上都具有类似的结构，所以正对这部分代码，可以让计算机自动帮我们生成，让精力聚焦于更复杂业务代码的编写上</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>代码生成器依据公共的模板和数据库表中的信息自动生成代码</p><ul><li>传统开发中，由于不同数据库基础增删改查代码结构相似，程序员通常都是将一份已经写好的代码进行复制和修改，再根据不同业务需求在此基础上进行代码的完善，可以将这份代码称之为<strong>代码模板</strong></li><li>生成的基础代码与对应数据库密切相关，所以除代码模板之外还需要数据库表的信息来对模板相关内容进行填充</li></ul><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231214225027020.png" alt="image-20231214225027020" style="zoom: 50%;"></p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231214225902481.png" alt="image-20231214225902481" style="zoom:50%;"></p><p>代码生成自动生成代码的几个重点需要解决的问题</p><ol><li><p>数据库以及表的解析，用于生成实体类以及其他代码</p><p>从数据库中解析出数据库中表的名称以及表字段等属性：可以根据表名确定实体类名称，根据字段确定实体类中的属性</p></li><li><p>模板开发生成代码文件</p><p>模板中定义公共的基础代码和需要替换的占位符内容，然后根据解析好的数据库信息进行数据替换并生成对应代码文件</p></li><li><p>基础框架模板代码的抽取</p></li></ol><h2 id="FreeMaker的使用"><a href="#FreeMaker的使用" class="headerlink" title="FreeMaker的使用"></a>FreeMaker的使用</h2><h3 id="FreeMaker概述"><a href="#FreeMaker概述" class="headerlink" title="FreeMaker概述"></a>FreeMaker概述</h3><p><code>FreeMaker</code>是一款模板引擎：一种基于模板的，用来输出文本的通用工具。</p><p>它是为Java程序员提供的一个开发包或者类库，它并不面向最终用户，而是面向程序员提供的嵌入他们开发产品过程中的一款应用程序。</p><p><code>FreeMaker</code>最早是用来设计生成HTML网页的。使用 MVC 模式的动态网页的构思使得你可以将前端设计者(编写 HTML)从 程序员中分离出来。所有人各司其职，发挥其擅长的一面。网页设计师可以改写页面的显示效果而不受程序员编译 代码的影响，因为应用程序的逻辑(Java 程序)和页面设计(FreeMarker 模板)已经分开了。页面模板代码不会受到复 杂的程序代码影响。这种分离的思想即便对一个程序员和页面设计师是同一个人的项目来说都是非常有用的，因为 分离使得代码保持简洁而且便于维护。</p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231214231403258.png" alt="image-20231214231403258" style="zoom: 67%;"></p><h3 id="FreeMaker的应用场景"><a href="#FreeMaker的应用场景" class="headerlink" title="FreeMaker的应用场景"></a>FreeMaker的应用场景</h3><h4 id="动态页面"><a href="#动态页面" class="headerlink" title="动态页面"></a>动态页面</h4><p>基于模板配置和表达式生成页面文件，可以像jsp一样被客户端访问</p><h4 id="页面静态化"><a href="#页面静态化" class="headerlink" title="页面静态化"></a>页面静态化</h4><p>对于系统中频繁使用数据库进行查询但是内容更新很小的应用，都可以用FreeMarker将网页静态化，这样就避免 了大量的数据库访问请求，从而提高网站的性能</p><h4 id="代码生成器-1"><a href="#代码生成器-1" class="headerlink" title="代码生成器"></a>代码生成器</h4><p>可以自动根据后台配置生成页面或者代码</p><h3 id="FreeMaker的优势"><a href="#FreeMaker的优势" class="headerlink" title="FreeMaker的优势"></a>FreeMaker的优势</h3><ul><li>强大的模板语言：有条件的块，迭代，赋值，字符串和算术运算和格式化，宏和函数，编码等更多的功能；</li><li>多用途且轻量：零依赖，输出任何格式，可以从任何地方加载模板（可插拔），配置选项丰富；</li><li>智能的国际化和本地化：对区域设置和日期/时间格式敏感；</li><li>XML处理功能：将dom-s放入到XML数据模型并遍历它们，甚至处理他们的声明；</li><li>通用的数据模型：通过可插拔适配器将java对象暴露于模板作为变量树；</li></ul><h3 id="FreeMaker的基本使用"><a href="#FreeMaker的基本使用" class="headerlink" title="FreeMaker的基本使用"></a>FreeMaker的基本使用</h3><p>使用<code>FreeMaker</code>的重点</p><ul><li>编写模板文件</li><li>使用FreeMaker解析模板，并将模板中的对应内容替换掉</li></ul><h4 id="导入pom依赖"><a href="#导入pom依赖" class="headerlink" title="导入pom依赖"></a>导入pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="FreeMaker使用步骤"><a href="#FreeMaker使用步骤" class="headerlink" title="FreeMaker使用步骤"></a>FreeMaker使用步骤</h4><h5 id="编写对应的模板文件"><a href="#编写对应的模板文件" class="headerlink" title="编写对应的模板文件"></a>编写对应的模板文件</h5><p><code>FreeMaker</code>的模板文件一般以<code>.ftl</code>结尾，以什么后缀结尾并不影响最终的处理</p><h5 id="模板数据填充替换"><a href="#模板数据填充替换" class="headerlink" title="模板数据填充替换"></a>模板数据填充替换</h5><p>解析模板文件，将数据替换到模板中对应位置，并生成需要的文件，此过程一般需要经历以下5个步骤</p><ol><li>创建FreeMaker的配置类</li><li>指定模板加载器，将模板存入缓存</li><li>获取模板</li><li>构造数据模型</li><li>输出生成的文件</li></ol><h4 id="入门案例：文件模板"><a href="#入门案例：文件模板" class="headerlink" title="入门案例：文件模板"></a>入门案例：文件模板</h4><h5 id="创建模板文件template01-ftl"><a href="#创建模板文件template01-ftl" class="headerlink" title="创建模板文件template01.ftl"></a>创建模板文件template01.ftl</h5><p>在工程<code>src</code>同级目录下新建文件<code>templates/template01.ftl</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中国欢迎您:<span class="built_in">$</span>&#123;username&#125;</span><br></pre></td></tr></table></figure><h5 id="使用FreeMaker进行数据填充，生成指定文件"><a href="#使用FreeMaker进行数据填充，生成指定文件" class="headerlink" title="使用FreeMaker进行数据填充，生成指定文件"></a>使用FreeMaker进行数据填充，生成指定文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMakerParse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="comment">//1.创建FreeMaker配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">//2.选择模板加载器</span></span><br><span class="line">        <span class="comment">//2.1指定模板路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateFolder</span> <span class="operator">=</span> <span class="string">&quot;templates&quot;</span>;</span><br><span class="line">        <span class="comment">//2.2选择文件模板加载器</span></span><br><span class="line">        <span class="type">FileTemplateLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileTemplateLoader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(templateFolder));</span><br><span class="line">        <span class="comment">//2.3设置模板加载器</span></span><br><span class="line">        cfg.setTemplateLoader(loader);</span><br><span class="line">        <span class="comment">//3.获取模板</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templatePath</span> <span class="operator">=</span> <span class="string">&quot;template01.ftl&quot;</span>;</span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfg.getTemplate(templatePath);</span><br><span class="line">        <span class="comment">//4.构造数据模型,FreeMaker中数据模型以HashMap的形式存在,key为模板中占位符,value为替换数据</span></span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        dataMap.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        <span class="comment">//5.处理模板,输出文件</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * process参数:</span></span><br><span class="line"><span class="comment">         *     参数1:数据模型,HashMap</span></span><br><span class="line"><span class="comment">         *     参数2:writer对象，可以输出到文件或者控制台</span></span><br><span class="line"><span class="comment">         *       文件用: new FileWriter(文件名)</span></span><br><span class="line"><span class="comment">         *       控制台用: new PrintWriter()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//输出到控制台</span></span><br><span class="line">        <span class="comment">//template.process(dataMap,new PrintWriter(System.out));</span></span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">outPath</span> <span class="operator">=</span> <span class="string">&quot;Files/out1.txt&quot;</span>;</span><br><span class="line">        template.process(dataMap,<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(outPath)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>项目目录结构</strong></p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231214235525320.png" alt="image-20231214235525320"></p><h4 id="入门案例：字符模板"><a href="#入门案例：字符模板" class="headerlink" title="入门案例：字符模板"></a>入门案例：字符模板</h4><p>模板通过字符串的形式在代码中直接定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMakerStringParse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="comment">//1.创建FreeMaker配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">//2.选择模板加载器</span></span><br><span class="line">        cfg.setTemplateLoader(<span class="keyword">new</span> <span class="title class_">StringTemplateLoader</span>());</span><br><span class="line">        <span class="comment">//3.创建模板</span></span><br><span class="line">        <span class="comment">//3.1定义字模板字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateStr</span> <span class="operator">=</span> <span class="string">&quot;你来自于哪个城市:$&#123;cityName&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">//3.2创建模板</span></span><br><span class="line">        <span class="comment">//第一参数:模板名 第二个参数:读取字符模板 第三个参数:配置类</span></span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Template</span>(<span class="string">&quot;strYemplate&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringReader</span>(templateStr), cfg);</span><br><span class="line">        <span class="comment">//4.构造数据模型,FreeMaker中数据模型以HashMap的形式存在,key为模板中占位符,value为替换数据</span></span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        dataMap.put(<span class="string">&quot;cityName&quot;</span>,<span class="string">&quot;安徽&quot;</span>);</span><br><span class="line">        <span class="comment">//5.输出文件</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * process参数:</span></span><br><span class="line"><span class="comment">         *     参数1:数据模型,HashMap</span></span><br><span class="line"><span class="comment">         *     参数2:writer对象，可以输出到文件或者控制台</span></span><br><span class="line"><span class="comment">         *       文件用: new FileWriter(文件名)</span></span><br><span class="line"><span class="comment">         *       控制台用: new PrintWriter()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//输出到控制台</span></span><br><span class="line">        template.process(dataMap,<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(System.out));</span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line"><span class="comment">//        String outPath = &quot;Files/out1.txt&quot;;</span></span><br><span class="line"><span class="comment">//        template.process(dataMap,new FileWriter(new File(outPath)));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231215000952116.png" alt="image-20231215000952116"></p><h3 id="FreeMaker模板"><a href="#FreeMaker模板" class="headerlink" title="FreeMaker模板"></a>FreeMaker模板</h3><p>经过前面案例，明显感觉到<code>FreeMaker</code>的<code>Java</code>代码部分编写的步骤比较固定，<code>FreeMaker</code>的重点部分在于模板的创建编写</p><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p><code>FreeMaker</code>模板文件主要由以下5个部分组成：</p><ul><li>数据模型：模板中用到的数据</li><li>文本：直接输出的部分</li><li>注释：模板中的注释格式<code>&lt;#-- 注释内容 --&gt;</code></li><li>插值：即<code>$&#123;&#125;</code>或者<code>#&#123;&#125;</code>部分，将会使用数据模型中的部分来对这部分进行替换</li><li>FTL指令：<code>FreeMaker</code>指令，和HTML标记类似，名字前面加<code>#</code>区分，不会输出</li></ul><h5 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h5><p>FreeMarker（还有模板开发者）并不关心数据是如何计算的，FreeMarker 只是知道真实的数据是什么。模板能用 的所有数据被包装成 data-model 数据模型</p><p>数据模型结构</p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231215002110262.png" alt="image-20231215002110262" style="zoom:67%;"></p><p>比如要获取user数据，模板中应该写为:<code>$&#123;user&#125;</code>，要获取url数据，模板中应该写为：<code>$&#123;latestProduct.url&#125;</code></p><h5 id="模板常用标签"><a href="#模板常用标签" class="headerlink" title="模板常用标签"></a>模板常用标签</h5><ul><li><code>$&#123;&#125;</code>，插值(占位符)，<code>FreeMaker</code>在输出时，会用数据模型中的实际值进行替代</li><li><code>&lt;#..&gt;</code>: FTL标记，类似于HTML标记，<code>#</code>主要是为了与HTML进行区分</li><li><code>&lt;@&gt;</code>：宏，自定义标签</li><li><code>&lt;#-- --&gt;</code>注释符</li></ul><h5 id="模板中常用的指令-FTL标记"><a href="#模板中常用的指令-FTL标记" class="headerlink" title="模板中常用的指令(FTL标记)"></a>模板中常用的指令(FTL标记)</h5><h6 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h6><p>条件分支控制语句</p><p>在<code>&lt;#</code>内写的占位符，无需用<code>#&#123;&#125;</code>包裹</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="params">#</span>if flag=1&gt;</span><br><span class="line">    传入的数据是1</span><br><span class="line">    &lt;<span class="params">#</span>elseif flag=2&gt;</span><br><span class="line">    传入的数据据是2</span><br><span class="line">    &lt;<span class="params">#</span>else&gt;</span><br><span class="line">    传入的数据是其他</span><br><span class="line">&lt;/<span class="params">#</span>if&gt;</span><br></pre></td></tr></table></figure><p><strong>对应的FreeMaker解析的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMakerParse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="comment">//1.创建FreeMaker配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">//2.选择模板加载器</span></span><br><span class="line">        <span class="comment">//2.1指定模板路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateFolder</span> <span class="operator">=</span> <span class="string">&quot;templates&quot;</span>;</span><br><span class="line">        <span class="comment">//2.2选择文件模板加载器</span></span><br><span class="line">        <span class="type">FileTemplateLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileTemplateLoader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(templateFolder));</span><br><span class="line">        <span class="comment">//2.3设置模板加载器</span></span><br><span class="line">        cfg.setTemplateLoader(loader);</span><br><span class="line">        <span class="comment">//3.获取模板</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templatePath</span> <span class="operator">=</span> <span class="string">&quot;template01.ftl&quot;</span>;</span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfg.getTemplate(templatePath);</span><br><span class="line">        <span class="comment">//4.构造数据模型,FreeMaker中数据模型以HashMap的形式存在,key为模板中占位符,value为替换数据</span></span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        dataMap.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        dataMap.put(<span class="string">&quot;flag&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//5.输出文件</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * process参数:</span></span><br><span class="line"><span class="comment">         *     参数1:数据模型,HashMap</span></span><br><span class="line"><span class="comment">         *     参数2:writer对象，可以输出到文件或者控制台</span></span><br><span class="line"><span class="comment">         *       文件用: new FileWriter(文件名)</span></span><br><span class="line"><span class="comment">         *       控制台用: new PrintWriter()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//输出到控制台</span></span><br><span class="line">        template.process(dataMap,<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(System.out));</span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line"><span class="comment">//        String outPath = &quot;Files/out1.txt&quot;;</span></span><br><span class="line"><span class="comment">//        template.process(dataMap,new FileWriter(new File(outPath)));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="list指令"><a href="#list指令" class="headerlink" title="list指令"></a>list指令</h6><p><code>list</code>指令是迭代输出指令，用于迭代输出数据模型中的集合数据</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="params">#</span>list userList as user&gt;</span><br><span class="line">    当前登录用户:<span class="built_in">$</span>&#123;user&#125;</span><br><span class="line">&lt;/<span class="params">#</span>list&gt;</span><br></pre></td></tr></table></figure><p><strong>对应的FreeMaker解析的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMakerParse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="comment">//1.创建FreeMaker配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">//2.选择模板加载器</span></span><br><span class="line">        <span class="comment">//2.1指定模板路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateFolder</span> <span class="operator">=</span> <span class="string">&quot;templates&quot;</span>;</span><br><span class="line">        <span class="comment">//2.2选择文件模板加载器</span></span><br><span class="line">        <span class="type">FileTemplateLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileTemplateLoader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(templateFolder));</span><br><span class="line">        <span class="comment">//2.3设置模板加载器</span></span><br><span class="line">        cfg.setTemplateLoader(loader);</span><br><span class="line">        <span class="comment">//3.获取模板</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templatePath</span> <span class="operator">=</span> <span class="string">&quot;template01.ftl&quot;</span>;</span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfg.getTemplate(templatePath);</span><br><span class="line">        <span class="comment">//4.构造数据模型,FreeMaker中数据模型以HashMap的形式存在,key为模板中占位符,value为替换数据</span></span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        dataMap.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        dataMap.put(<span class="string">&quot;flag&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;曹阿满&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;刘大耳&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;孙十万&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;诸葛村夫&quot;</span>);</span><br><span class="line">        dataMap.put(<span class="string">&quot;userList&quot;</span>,list);</span><br><span class="line">        <span class="comment">//5.输出文件</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * process参数:</span></span><br><span class="line"><span class="comment">         *     参数1:数据模型,HashMap</span></span><br><span class="line"><span class="comment">         *     参数2:writer对象，可以输出到文件或者控制台</span></span><br><span class="line"><span class="comment">         *       文件用: new FileWriter(文件名)</span></span><br><span class="line"><span class="comment">         *       控制台用: new PrintWriter()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//输出到控制台</span></span><br><span class="line">        template.process(dataMap,<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(System.out));</span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line"><span class="comment">//        String outPath = &quot;Files/out1.txt&quot;;</span></span><br><span class="line"><span class="comment">//        template.process(dataMap,new FileWriter(new File(outPath)));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231215004420106.png" alt="image-20231215004420106"></p><h6 id="list结合break指令使用"><a href="#list结合break指令使用" class="headerlink" title="list结合break指令使用"></a>list结合break指令使用</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="params">#</span>list userList as user&gt;</span><br><span class="line">    当前登录用户:<span class="built_in">$</span>&#123;user&#125;,当前用户编号:<span class="built_in">$</span>&#123;user<span class="built_in">_</span>index+1&#125;</span><br><span class="line">    &lt;<span class="params">#</span>if user<span class="built_in">_</span>has<span class="built_in">_</span>next&gt;=========&lt;/<span class="params">#</span>if&gt;</span><br><span class="line">    &lt;<span class="params">#</span>if user=&quot;孙十万&quot;&gt;&lt;<span class="params">#</span>break&gt;&lt;/<span class="params">#</span>if&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="params">#</span>list&gt;</span><br></pre></td></tr></table></figure><ul><li><code>xxx_index</code>：当前变量的索引值</li><li><code>xxx_has_next</code>：是否存在下一个对象</li><li><code>&lt;#break&gt;</code>：跳出循环迭代</li></ul><p><strong>运行结果</strong></p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231215005053032.png" alt="image-20231215005053032"></p><h6 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h6><p>模板包含，一个模板中包含另一个模板内容</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="params">#</span>include &quot;需要导入包含模板路径，支持相对路径的写法，只是要用引号括起来&quot;&gt;</span><br></pre></td></tr></table></figure><h6 id="assign指令"><a href="#assign指令" class="headerlink" title="assign指令"></a>assign指令</h6><p><code>assign</code>指令用于在模板中自定义个变量，可以存储到数据模型中，在模板其他部分引用</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="params">#</span>assign age=27&gt;</span><br></pre></td></tr></table></figure><p>模板其他位置可以通过<code>$&#123;age&#125;</code>来引用该变量</p><h6 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h6><p>FreeMarker还提供了一些内建函数来转换输出，可以在任何变量后紧跟?,?后紧跟内建函数，就可通过内建函 数来转换输出变量。</p><p>使用语法:<code>$&#123;username?upper_case&#125;</code></p><p>下面是常用的内建的字符串函数：</p><ul><li>?html:html字符转义</li><li>?cap_first: 字符串的第一个字母变为大写形式</li><li>?lower_case :字符串的小写形式</li><li>?upper_case :字符串的大写形式</li><li>?trim:去掉字符串首尾的空格</li><li>?substring:截字符串</li><li>?lenth: 取长度</li><li>?size: 序列中元素的个数</li><li>?int : 数字的整数部分（比如- 1.9?int 就是- 1）</li><li>?replace:字符串替换</li></ul><h2 id="数据库元数据"><a href="#数据库元数据" class="headerlink" title="数据库元数据"></a>数据库元数据</h2><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><h4 id="什么是数据库元数据"><a href="#什么是数据库元数据" class="headerlink" title="什么是数据库元数据"></a>什么是数据库元数据</h4><p>元数据(<code>meta data</code>)是指定义数据结构的数据，数据库元数据是指定义数据库各类对象结构的数据，例如数据库中的数据库名、表名、列名、用户名、版本名以及从SQL语句得到的结果中大部分字符串都是元数据</p><h4 id="数据库元数据作用"><a href="#数据库元数据作用" class="headerlink" title="数据库元数据作用"></a>数据库元数据作用</h4><ul><li>在应用设计时，能够充分利用数据库元数据</li><li>深入理解了数据库组织结构，再去理解数据访问相关框架的实现原理会更加容易</li></ul><h4 id="如何获取数据库元数据"><a href="#如何获取数据库元数据" class="headerlink" title="如何获取数据库元数据"></a>如何获取数据库元数据</h4><p>JDBC来处理数据库的接口主要有三个，即<code>Connection</code>，<code>PreparedStatement</code>和<code>ResultSet</code>这三个， 而对于这三个接口，还可以获取不同类型的元数据，通过这些元数据类获得一些数据库的信息。</p><h3 id="数据库元数据-1"><a href="#数据库元数据-1" class="headerlink" title="数据库元数据"></a>数据库元数据</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>数据库元数据（<code>DatabaseMetaData</code>）：是由<code>Connection</code>对象通过<code>getMetaData</code>方法获取而来，主要封装了是对 数据库本身的一些整体综合信息，例如数据库的产品名称，数据库的版本号，数据库的URL，是否支持事务等等</p><p>下面是<code>getMetaData</code>的一些常用方法:</p><ul><li>getDatabaseProductName：获取数据库的产品名称</li><li>getDatabaseProductVersion：获取数据库的版本号</li><li>getUserName：获取数据库的用户名</li><li>getURL：获取数据库连接的URL</li><li>getDriverName：获取数据库的驱动名称</li><li>driverVersion：获取数据库的驱动版本号</li><li>isReadOnly：查看数据库是否只允许读操作</li><li>supportsTransactions：查看数据库是否支持事务</li></ul><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><h5 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Connection conn;</span><br><span class="line">    <span class="comment">//建立数据库连接</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.配置连接基本属性</span></span><br><span class="line">        <span class="comment">//url不指定数据据库名，便于获取当前服务器下所有数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;train_member&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passWd</span> <span class="operator">=</span> <span class="string">&quot;wu123456&quot;</span>;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;user&quot;</span>,userName);</span><br><span class="line">        props.put(<span class="string">&quot;password&quot;</span>,passWd);</span><br><span class="line">        props.put(<span class="string">&quot;remarksReporting&quot;</span>,<span class="string">&quot;true&quot;</span>); <span class="comment">//获取表的REMARK(备注信息)</span></span><br><span class="line">        <span class="comment">//3.获取连接</span></span><br><span class="line">        conn = (Connection) DriverManager.getConnection(url, props);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="获取数据库综合信息"><a href="#获取数据库综合信息" class="headerlink" title="获取数据库综合信息"></a>获取数据库综合信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数据库综合信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//获取数据库元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">//获取数据库产品名称</span></span><br><span class="line">        System.out.println(metaData.getDatabaseProductName());</span><br><span class="line">        <span class="comment">//获取数据库版本号</span></span><br><span class="line">        System.out.println(metaData.getDatabaseProductVersion());</span><br><span class="line">        <span class="comment">//获取数据库的用户名</span></span><br><span class="line">        System.out.println(metaData.getUserName());</span><br><span class="line">        <span class="comment">//获取数据库连接的URL</span></span><br><span class="line">        System.out.println(metaData.getURL());</span><br><span class="line">        <span class="comment">//获取数据库的驱动名称</span></span><br><span class="line">        System.out.println(metaData.getDriverName());</span><br><span class="line">        <span class="comment">//获取数据库的驱动版本号</span></span><br><span class="line">        System.out.println(metaData.getDriverVersion());</span><br><span class="line">        <span class="comment">//查看数据库是否只允许读操作</span></span><br><span class="line">        System.out.println(metaData.isReadOnly());</span><br><span class="line">        <span class="comment">//查看数据库是否支持事务</span></span><br><span class="line">        System.out.println(metaData.supportsTransactions());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>运行结果</span><br><span class="line">MySQL</span><br><span class="line">5.7.35-log</span><br><span class="line">train<span class="built_in">_</span>member@localhost</span><br><span class="line">jdbc:mysql://127.0.0.1:3306?useUnicode=true<span class="built_in">&amp;</span>characterEncoding=utf8</span><br><span class="line">MySQL-AB JDBC Driver</span><br><span class="line">mysql-connector-java-5.1.6 ( Revision: <span class="built_in">$</span>&#123;svn.Revision&#125; )</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h5 id="获取数据库列表"><a href="#获取数据库列表" class="headerlink" title="获取数据库列表"></a>获取数据库列表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数据列表</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//获取元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">//获取数据库列表</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">catalogs</span> <span class="operator">=</span> metaData.getCatalogs();</span><br><span class="line">        <span class="comment">//年里数据库列表</span></span><br><span class="line">        <span class="keyword">while</span> (catalogs.next())&#123;</span><br><span class="line">            System.out.println(catalogs.getString(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        catalogs.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>运行结果</span><br><span class="line">information<span class="built_in">_</span>schema</span><br><span class="line">train<span class="built_in">_</span>member</span><br></pre></td></tr></table></figure><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231216102339977.png" alt="image-20231216102339977"></p><h5 id="获取数据库中表信息"><a href="#获取数据库中表信息" class="headerlink" title="获取数据库中表信息"></a>获取数据库中表信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数据库表的信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1.获取元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">//2.数据库表信息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * getTables有四个参数:</span></span><br><span class="line"><span class="comment">         *      String catalog: 数据库名称</span></span><br><span class="line"><span class="comment">         *      String schemaPattern: mysql此项参数为空</span></span><br><span class="line"><span class="comment">*               String tableNamePattern：表名,为空则为所有表</span></span><br><span class="line"><span class="comment">*               String types[]：表类型，可以为 TABLE:数据库表 VIEW:视图</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> metaData.getTables(<span class="string">&quot;train_member&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;TABLE&quot;</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//所属数据库</span></span><br><span class="line">            System.out.println(rs.getString(<span class="number">1</span>));</span><br><span class="line">            <span class="comment">//所属schema</span></span><br><span class="line">            System.out.println(rs.getString(<span class="number">2</span>));</span><br><span class="line">            <span class="comment">//表名</span></span><br><span class="line">            System.out.println(rs.getString(<span class="number">3</span>));</span><br><span class="line">            <span class="comment">//数据库表类型</span></span><br><span class="line">            System.out.println(rs.getString(<span class="number">4</span>));</span><br><span class="line">            <span class="comment">//数据库备注</span></span><br><span class="line">            System.out.println(rs.getString(<span class="number">5</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>运行结果</span><br><span class="line">train<span class="built_in">_</span>member</span><br><span class="line">null</span><br><span class="line">member</span><br><span class="line">TABLE</span><br><span class="line"></span><br><span class="line">train<span class="built_in">_</span>member</span><br><span class="line">null</span><br><span class="line">passenger</span><br><span class="line">TABLE</span><br><span class="line"></span><br><span class="line">train<span class="built_in">_</span>member</span><br><span class="line">null</span><br><span class="line">ticket</span><br><span class="line">TABLE</span><br></pre></td></tr></table></figure><h5 id="获取指定表中的字段信息"><a href="#获取指定表中的字段信息" class="headerlink" title="获取指定表中的字段信息"></a>获取指定表中的字段信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数据库表字段信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//获取元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        getColumns有四个参数</span></span><br><span class="line"><span class="comment">        String catalog: 数据库名</span></span><br><span class="line"><span class="comment">        String schemaPattern: mysql可以为空</span></span><br><span class="line"><span class="comment">        String tableNamePattern: 表名</span></span><br><span class="line"><span class="comment">        String columnNamePattern: 列名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> metaData.getColumns(<span class="string">&quot;train_member&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;passenger&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//rs结果集中对应属性获取建议参考JDK官方文档</span></span><br><span class="line">            System.out.println(rs.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>)); <span class="comment">//字段名获取</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        rs.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体详细用法，可以参考JDK官方文档</p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231216104929224.png" alt="image-20231216104929224" style="zoom:50%;"></p><h3 id="参数元数据"><a href="#参数元数据" class="headerlink" title="参数元数据"></a>参数元数据</h3><p>参数元数据（<code>ParameterMetaData</code>）：是由<code>PreparedStatement</code>对象通过<code>getParameterMetaData</code>方法获取而 来，主要是针对<code>PreparedStatement</code>对象和其预编译的SQL命令语句提供一些信息，<code>ParameterMetaData</code>能提供 占位符参数的个数，获取指定位置占位符的SQL类型等等</p><p>参数元数据在实际应用场景中一般很少用到，只需了解即可，主要常用方法:</p><ul><li>getParameterCount：获取预编译SQL语句中占位符参数的个数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数元数据简单使用</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.配置连接基本属性</span></span><br><span class="line">        <span class="comment">//url不指定数据据库名，便于获取当前服务器下所有数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/train_member?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;train_member&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passWd</span> <span class="operator">=</span> <span class="string">&quot;wu123456&quot;</span>;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;user&quot;</span>,userName);</span><br><span class="line">        props.put(<span class="string">&quot;password&quot;</span>,passWd);</span><br><span class="line">        props.put(<span class="string">&quot;remarksReporting&quot;</span>,<span class="string">&quot;true&quot;</span>); <span class="comment">//获取表的REMARK(备注信息)</span></span><br><span class="line">        <span class="comment">//3.获取连接</span></span><br><span class="line">        conn = (Connection) DriverManager.getConnection(url, props);</span><br><span class="line">        <span class="comment">//4.编写SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from passenger where id=?&quot;</span>;</span><br><span class="line">        <span class="comment">//5.编译SQL</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//6.填充参数</span></span><br><span class="line">        pstm.setString(<span class="number">1</span>,<span class="string">&quot;1733754970974588928&quot;</span>);</span><br><span class="line">        <span class="comment">//7.获取参数元数据</span></span><br><span class="line">        <span class="type">ParameterMetaData</span> <span class="variable">parameterMetaData</span> <span class="operator">=</span> pstm.getParameterMetaData();</span><br><span class="line">        <span class="comment">//8.获取参数个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> parameterMetaData.getParameterCount();</span><br><span class="line">        System.out.println(count);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="结果集元数据"><a href="#结果集元数据" class="headerlink" title="结果集元数据"></a>结果集元数据</h3><p>结果集元数据（<code>ResultSetMetaData</code>）：是由<code>ResultSet</code>对象通过<code>getMetaData</code>方法获取而来，主要是针对由数据 库执行的SQL脚本命令获取的结果集对象<code>ResultSet</code>中提供的一些信息，比如结果集中的列数、指定列的名称、指定 列的SQL类型等等，可以说这个是对于框架来说非常重要的一个对象</p><p>关于ResultSetMetaData的常用方法：</p><ul><li>getColumnCount：获取结果集中列项的个数</li><li>.getColumnName： 获取列名</li><li>getColumnTypeName：getColumnTypeName：获取指定列的SQL数据类型</li><li>getColumnClassName：获取指定列SQL类型对应于Java中的数据类型(包名加类名)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结果集元数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.配置连接基本属性</span></span><br><span class="line">        <span class="comment">//url不指定数据据库名，便于获取当前服务器下所有数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/train_member?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;train_member&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passWd</span> <span class="operator">=</span> <span class="string">&quot;wu123456&quot;</span>;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;user&quot;</span>,userName);</span><br><span class="line">        props.put(<span class="string">&quot;password&quot;</span>,passWd);</span><br><span class="line">        props.put(<span class="string">&quot;remarksReporting&quot;</span>,<span class="string">&quot;true&quot;</span>); <span class="comment">//获取表的REMARK(备注信息)</span></span><br><span class="line">        <span class="comment">//3.获取连接</span></span><br><span class="line">        conn = (Connection) DriverManager.getConnection(url, props);</span><br><span class="line">        <span class="comment">//4.编写SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from passenger where id=?&quot;</span>;</span><br><span class="line">        <span class="comment">//5.编译SQL</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//6.填充参数</span></span><br><span class="line">        pstm.setString(<span class="number">1</span>,<span class="string">&quot;1733754970974588928&quot;</span>);</span><br><span class="line">        <span class="comment">//7.执行获取结果集</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstm.executeQuery();</span><br><span class="line">        <span class="comment">//8.获取结果集元数据</span></span><br><span class="line">        <span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">        <span class="comment">//获取列个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> metaData.getColumnCount();</span><br><span class="line">        <span class="comment">//获取列信息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=columnCount;i++)&#123;</span><br><span class="line">            <span class="comment">//1.获取列名</span></span><br><span class="line">            System.out.println(metaData.getColumnName(i));</span><br><span class="line">            <span class="comment">//2.获取列对应的SQL数据类型</span></span><br><span class="line">            System.out.println(metaData.getColumnTypeName(i));</span><br><span class="line">            <span class="comment">//3.获取列对应Java数据类型</span></span><br><span class="line">            System.out.println(metaData.getColumnClassName(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>运行结果</span><br><span class="line">id</span><br><span class="line">BIGINT</span><br><span class="line">java.lang.Long</span><br><span class="line">================================</span><br><span class="line">member<span class="built_in">_</span>id</span><br><span class="line">BIGINT</span><br><span class="line">java.lang.Long</span><br><span class="line">================================</span><br><span class="line">name</span><br><span class="line">VARCHAR</span><br><span class="line">java.lang.String</span><br><span class="line">================================</span><br><span class="line">id<span class="built_in">_</span>card</span><br><span class="line">VARCHAR</span><br><span class="line">java.lang.String</span><br><span class="line">================================</span><br><span class="line">type</span><br><span class="line">CHAR</span><br><span class="line">java.lang.String</span><br><span class="line">================================</span><br><span class="line">create<span class="built_in">_</span>time</span><br><span class="line">DATETIME</span><br><span class="line">java.sql.Timestamp</span><br><span class="line">================================</span><br><span class="line">update<span class="built_in">_</span>time</span><br><span class="line">DATETIME</span><br><span class="line">java.sql.Timestamp</span><br><span class="line">================================</span><br></pre></td></tr></table></figure><h2 id="代码生成器制作"><a href="#代码生成器制作" class="headerlink" title="代码生成器制作"></a>代码生成器制作</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231216144427656.png" alt="image-20231216144427656" style="zoom:67%;"></p><p>完成代码生成器需要以下几个步骤：</p><ul><li>用户填写数据库相关信息，相关信息封装到实体类，便于后续操作</li><li>借助元数据，将数据库表信息、数据库字段信息封装到对应实体类</li><li>构建FreeMaker数据模型，将数据库表对象和相关配置存入Map集合</li><li>利用FreeMaker完成代码生成</li><li>自定义公共代码模板</li></ul><h3 id="项目环境搭建"><a href="#项目环境搭建" class="headerlink" title="项目环境搭建"></a>项目环境搭建</h3><h4 id="引入pom依赖-1"><a href="#引入pom依赖-1" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建对应实体类"><a href="#创建对应实体类" class="headerlink" title="创建对应实体类"></a>创建对应实体类</h4><p>在整个项目中设计如下实体类的封装</p><h5 id="数据库信息实体类"><a href="#数据库信息实体类" class="headerlink" title="数据库信息实体类"></a>数据库信息实体类</h5><p>在代码生成过程中，用户需要提供数据库类型、数据名、用户名、密码、数据库地址等数据信息，为便于后续操作，可以将这些信息统一封装成一个对应的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库信息对应实体类</span></span><br><span class="line"><span class="comment"> * 用户需要提供以下信息:</span></span><br><span class="line"><span class="comment"> * ①数据库类型 ②数据库名称 ③数据库ip地址以及端口号 ④用户名 ⑤用户密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataBase</span> &#123;</span><br><span class="line">    <span class="comment">//数据库连接，支持Mysql和Oracale两种数据库类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">mysqlUrl</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://[ip]:[port]/[db]?useUnicode=true&amp;amp;characterEncoding=UTF8&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">oracleUrl</span> <span class="operator">=</span> <span class="string">&quot;jdbc:oracle:thin:@[ip]:[port]:[db]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dbType=<span class="string">&quot;MYSQL&quot;</span>;<span class="comment">//数据库类型,需要用户输入，默认为</span></span><br><span class="line">    <span class="keyword">private</span> String dbName; <span class="comment">//数据库名称</span></span><br><span class="line">    <span class="keyword">private</span> String driver=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;<span class="comment">//驱动名称</span></span><br><span class="line">    <span class="keyword">private</span> String userName;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String passWord;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String ip=<span class="string">&quot;127.0.0.1&quot;</span>; <span class="comment">//数据库ip地址</span></span><br><span class="line">    <span class="keyword">private</span> String port=<span class="string">&quot;3306&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//数据库地址，包括协议类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataBase</span><span class="params">(String dbType,String dbName,String userName,String passWord,String ip,String port)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.dbType = dbType;</span><br><span class="line">        <span class="built_in">this</span>.dbName = dbName;</span><br><span class="line">        <span class="built_in">this</span>.ip=ip;</span><br><span class="line">        <span class="built_in">this</span>.port=port;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">        <span class="built_in">this</span>.passWord = passWord;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;MYSQL&quot;</span>.equals(dbType.toUpperCase()))&#123;</span><br><span class="line">            <span class="built_in">this</span>.driver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">            <span class="built_in">this</span>.url = mysqlUrl.replace(<span class="string">&quot;[ip]&quot;</span>,<span class="built_in">this</span>.ip).replace(<span class="string">&quot;[port]&quot;</span>,port).replace(<span class="string">&quot;[db]&quot;</span>,<span class="built_in">this</span>.dbName);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.driver = <span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>;</span><br><span class="line">            <span class="built_in">this</span>.url=oracleUrl.replace(<span class="string">&quot;[ip]&quot;</span>,ip).replace(<span class="string">&quot;[port]&quot;</span>,port).replace(<span class="string">&quot;[db]&quot;</span>,dbName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置信息实体类"><a href="#配置信息实体类" class="headerlink" title="配置信息实体类"></a>配置信息实体类</h5><p>用户需要输入项目的项目名称、全包名、项目的中文名等，为便于使用，也将这些数据封装成一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">项目配置信息实体类，包括项目名称、包名、项目中文名等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Settings</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String project=<span class="string">&quot;example&quot;</span>; <span class="comment">//项目名</span></span><br><span class="line">    <span class="keyword">private</span> String pPackage=<span class="string">&quot;com.example.demo&quot;</span>; <span class="comment">//全包名</span></span><br><span class="line">    <span class="keyword">private</span> String projectComment; <span class="comment">//项目中文名</span></span><br><span class="line">    <span class="keyword">private</span> String author; <span class="comment">//作者</span></span><br><span class="line">    <span class="keyword">private</span> String path1=<span class="string">&quot;com&quot;</span>; <span class="comment">//项目包名的分解，这里假定一般为三级目录</span></span><br><span class="line">    <span class="keyword">private</span> String path2=<span class="string">&quot;example&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String path3=<span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String pathAll; <span class="comment">//项目存储全路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Settings</span><span class="params">(String project, String pPackage, String projectComment, String author)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotBlank(project)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.project = project;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotBlank(pPackage)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.pPackage = pPackage;</span><br><span class="line">            String[] paths = pPackage.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.path1 = paths[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">this</span>.path2 = paths.length&gt;<span class="number">1</span>?paths[<span class="number">1</span>]:path2;</span><br><span class="line">            <span class="built_in">this</span>.path3 = paths.length&gt;<span class="number">2</span>?paths[<span class="number">2</span>]:path3;</span><br><span class="line">            <span class="built_in">this</span>.pathAll = pPackage.replaceAll(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.projectComment = projectComment;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性和值转换为map形式，便于后续生成freeMaker的数据模型</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getSettingMap</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Field[] declaredFields = Settings.class.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                map.put(field.getName(), field.get(<span class="built_in">this</span>));</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数据库表信息实体类"><a href="#数据库表信息实体类" class="headerlink" title="数据库表信息实体类"></a>数据库表信息实体类</h5><p>数据某个表的SQL表名、处理后的Java表名，以及数据库表的注释信息、字段列表等数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库表属性信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Table</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String tableName; <span class="comment">//SQL中数据库表名</span></span><br><span class="line">    <span class="keyword">private</span> String poName; <span class="comment">//SQL表对应Java实体类名</span></span><br><span class="line">    <span class="keyword">private</span> String comment; <span class="comment">//数据库表附属信息</span></span><br><span class="line">    <span class="keyword">private</span> String key; <span class="comment">//主键列</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Column&gt; columnsList; <span class="comment">//字段列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数据库字段实体类"><a href="#数据库字段实体类" class="headerlink" title="数据库字段实体类"></a>数据库字段实体类</h5><p>数据库字段SQL名称、SQL数据类型、列备注信息，是否主键，以及对应Java实体类属性名、Java数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据库字段信息实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Column</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String columnName; <span class="comment">//SQL字段名</span></span><br><span class="line">    <span class="keyword">private</span> String fieldName; <span class="comment">//Java实体类属性名</span></span><br><span class="line">    <span class="keyword">private</span> String columnType;<span class="comment">//SQL数据类型</span></span><br><span class="line">    <span class="keyword">private</span> String fieldType;<span class="comment">//SQL字段类型</span></span><br><span class="line">    <span class="keyword">private</span> String columnComment;<span class="comment">//字段附加信息</span></span><br><span class="line">    <span class="keyword">private</span> String columnKey;<span class="comment">//主键名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据库相关工具类的创建"><a href="#数据库相关工具类的创建" class="headerlink" title="数据库相关工具类的创建"></a>数据库相关工具类的创建</h4><p>将获取数据库连接，数据库资源关闭以及获取数据库表信息等功能封装成对应的工具类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataBaseUtils</span> &#123;</span><br><span class="line">    <span class="comment">//获取数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(DataBase dataBase)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(dataBase.getDriver());</span><br><span class="line">        <span class="comment">//2.配置连接基本属性</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> dataBase.getUrl();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;user&quot;</span>,dataBase.getUserName());</span><br><span class="line">        props.put(<span class="string">&quot;password&quot;</span>,dataBase.getPassWord());</span><br><span class="line">        props.put(<span class="string">&quot;remarksReporting&quot;</span>,<span class="string">&quot;true&quot;</span>); <span class="comment">//获取表的REMARK(备注信息)</span></span><br><span class="line">        <span class="comment">//3.获取连接</span></span><br><span class="line">        conn = (Connection) DriverManager.getConnection(url, props);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库中所有数据库名列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getSchema</span><span class="params">(DataBase db)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection(db);</span><br><span class="line">        <span class="comment">//2.获取元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">//获取数据库列表</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">catalogs</span> <span class="operator">=</span> metaData.getCatalogs();</span><br><span class="line">        <span class="comment">//数据库列表</span></span><br><span class="line">        List&lt;String&gt; schemaList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (catalogs.next())&#123;</span><br><span class="line">            schemaList.add(catalogs.getString(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        catalogs.close();</span><br><span class="line">        conn.close();</span><br><span class="line">        <span class="keyword">return</span> schemaList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串相关工具类创建"><a href="#字符串相关工具类创建" class="headerlink" title="字符串相关工具类创建"></a>字符串相关工具类创建</h4><p>在整个代码编写中，涉及到大量字符串处理操作，比如数据库表名、字段名与Java实体类名、属性名的映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.generator.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removeCrlf</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.join(StringUtils.tokenizeToStringArray(str,<span class="string">&quot;\t\n\r\f&quot;</span>),<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,String&gt; XML = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        XML.put(<span class="string">&quot;apos&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        XML.put(<span class="string">&quot;quot&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        XML.put(<span class="string">&quot;amp&quot;</span>, <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        XML.put(<span class="string">&quot;lt&quot;</span>, <span class="string">&quot;&lt;&quot;</span>);</span><br><span class="line">        XML.put(<span class="string">&quot;gt&quot;</span>, <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">unescapeXml</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(String key : XML.keySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> XML.get(key);</span><br><span class="line">            str = StringUtils.replace(str, <span class="string">&quot;&amp;&quot;</span>+key+<span class="string">&quot;;&quot;</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removePrefix</span><span class="params">(String str,String prefix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> removePrefix(str,prefix,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removePrefix</span><span class="params">(String str,String prefix,<span class="type">boolean</span> ignoreCase)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(prefix == <span class="literal">null</span>) <span class="keyword">return</span> str;</span><br><span class="line">        <span class="keyword">if</span>(ignoreCase) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.toLowerCase().startsWith(prefix.toLowerCase())) &#123;</span><br><span class="line">                <span class="keyword">return</span> str.substring(prefix.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.startsWith(prefix)) &#123;</span><br><span class="line">                <span class="keyword">return</span> str.substring(prefix.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBlank</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str == <span class="literal">null</span> || str.trim().length() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNotBlank</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !isBlank(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getExtension</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> str.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> str.substring(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Count the occurrences of the substring in string s.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str string to search in. Return 0 if this is null.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sub string to search for. Return 0 if this is null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countOccurrencesOf</span><span class="params">(String str, String sub)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || sub == <span class="literal">null</span> || str.length() == <span class="number">0</span> || sub.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> idx;</span><br><span class="line">        <span class="keyword">while</span> ((idx = str.indexOf(sub, pos)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            pos = idx + sub.length();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String str,String... keywords)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(keywords == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;&#x27;keywords&#x27; must be not null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String keyword : keywords) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.equals(keyword)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">defaultString</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">defaultIfEmpty</span><span class="params">(Object value,String defaultValue)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">makeAllWordFirstLetterUpperCase</span><span class="params">(String sqlName)</span> &#123;</span><br><span class="line">        String[] strs = sqlName.toLowerCase().split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">preStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preStr.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                result += strs[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result += capitalize(strs[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            preStr = strs[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOfByRegex</span><span class="params">(String input,String regex)</span> &#123;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(input);</span><br><span class="line">        <span class="keyword">if</span>(m.find()) &#123;</span><br><span class="line">            <span class="keyword">return</span> m.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJavaVariableName</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uncapitalize(toJavaClassName(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJavaClassName</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> makeAllWordFirstLetterUpperCase(StringUtils.toUnderscoreName(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removeMany</span><span class="params">(String inString, String... keywords)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String k : keywords) &#123;</span><br><span class="line">            inString = replace(inString, k, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replace</span><span class="params">(String inString, String oldPattern, String newPattern)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (oldPattern == <span class="literal">null</span> || newPattern == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> inString;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sbuf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="comment">// output StringBuffer we&#x27;ll build up</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// our position in the old string</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> inString.indexOf(oldPattern);</span><br><span class="line">        <span class="comment">// the index of an occurrence we&#x27;ve found, or -1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">patLen</span> <span class="operator">=</span> oldPattern.length();</span><br><span class="line">        <span class="keyword">while</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            sbuf.append(inString.substring(pos, index));</span><br><span class="line">            sbuf.append(newPattern);</span><br><span class="line">            pos = index + patLen;</span><br><span class="line">            index = inString.indexOf(oldPattern, pos);</span><br><span class="line">        &#125;</span><br><span class="line">        sbuf.append(inString.substring(pos));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remember to append any characters to the right of a match</span></span><br><span class="line">        <span class="keyword">return</span> sbuf.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**����ĸ��copy from spring*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">capitalize</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> changeFirstCharacterCase(str, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**����ĸСдcopy from spring*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uncapitalize</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> changeFirstCharacterCase(str, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**copy from spring*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">changeFirstCharacterCase</span><span class="params">(String str, <span class="type">boolean</span> capitalize)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str.length());</span><br><span class="line">        <span class="keyword">if</span> (capitalize) &#123;</span><br><span class="line">            buf.append(Character.toUpperCase(str.charAt(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            buf.append(Character.toLowerCase(str.charAt(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        buf.append(str.substring(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> buf.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Random</span> <span class="variable">RANDOM</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">randomNumeric</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random(count, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">random</span><span class="params">(<span class="type">int</span> count, <span class="type">boolean</span> letters, <span class="type">boolean</span> numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random(count, <span class="number">0</span>, <span class="number">0</span>, letters, numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">random</span><span class="params">(<span class="type">int</span> count, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">boolean</span> letters, <span class="type">boolean</span> numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random(count, start, end, letters, numbers, <span class="literal">null</span>, RANDOM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">random</span><span class="params">(<span class="type">int</span> count, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">boolean</span> letters,</span></span><br><span class="line"><span class="params">                                <span class="type">boolean</span> numbers, <span class="type">char</span>[] chars, Random random)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;Requested random string length &quot;</span> + count</span><br><span class="line">                            + <span class="string">&quot; is less than 0.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((start == <span class="number">0</span>) &amp;&amp; (end == <span class="number">0</span>)) &#123;</span><br><span class="line">            end = <span class="string">&#x27;z&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            start = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!letters &amp;&amp; !numbers) &#123;</span><br><span class="line">                start = <span class="number">0</span>;</span><br><span class="line">                end = Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[count];</span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> end - start;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (count-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> ch;</span><br><span class="line">            <span class="keyword">if</span> (chars == <span class="literal">null</span>) &#123;</span><br><span class="line">                ch = (<span class="type">char</span>) (random.nextInt(gap) + start);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ch = chars[random.nextInt(gap) + start];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((letters &amp;&amp; Character.isLetter(ch))</span><br><span class="line">                    || (numbers &amp;&amp; Character.isDigit(ch))</span><br><span class="line">                    || (!letters &amp;&amp; !numbers)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ch &gt;= <span class="number">56320</span> &amp;&amp; ch &lt;= <span class="number">57343</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// low surrogate, insert high surrogate after putting it</span></span><br><span class="line">                        <span class="comment">// in</span></span><br><span class="line">                        buffer[count] = ch;</span><br><span class="line">                        count--;</span><br><span class="line">                        buffer[count] = (<span class="type">char</span>) (<span class="number">55296</span> + random.nextInt(<span class="number">128</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="number">55296</span> &amp;&amp; ch &lt;= <span class="number">56191</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// high surrogate, insert low surrogate before putting</span></span><br><span class="line">                        <span class="comment">// it in</span></span><br><span class="line">                        buffer[count] = (<span class="type">char</span>) (<span class="number">56320</span> + random.nextInt(<span class="number">128</span>));</span><br><span class="line">                        count--;</span><br><span class="line">                        buffer[count] = ch;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="number">56192</span> &amp;&amp; ch &lt;= <span class="number">56319</span>) &#123;</span><br><span class="line">                    <span class="comment">// private high surrogate, no effing clue, so skip it</span></span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    buffer[count] = ch;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toUnderscoreName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filteredName</span> <span class="operator">=</span> name;</span><br><span class="line">        <span class="keyword">if</span>(filteredName.indexOf(<span class="string">&quot;_&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; filteredName.equals(filteredName.toUpperCase())) &#123;</span><br><span class="line">            filteredName = filteredName.toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(filteredName.indexOf(<span class="string">&quot;_&quot;</span>) == -<span class="number">1</span> &amp;&amp; filteredName.equals(filteredName.toUpperCase())) &#123;</span><br><span class="line">            filteredName = filteredName.toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">if</span> (filteredName != <span class="literal">null</span> &amp;&amp; filteredName.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result.append(filteredName.substring(<span class="number">0</span>, <span class="number">1</span>).toLowerCase());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; filteredName.length(); i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">preChart</span> <span class="operator">=</span> filteredName.substring(i - <span class="number">1</span>, i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> filteredName.substring(i, i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(c.equals(<span class="string">&quot;_&quot;</span>)) &#123;</span><br><span class="line">                    result.append(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(preChart.equals(<span class="string">&quot;_&quot;</span>))&#123;</span><br><span class="line">                    result.append(c.toLowerCase());</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(c.matches(<span class="string">&quot;\\d&quot;</span>)) &#123;</span><br><span class="line">                    result.append(c);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c.equals(c.toUpperCase())) &#123;</span><br><span class="line">                    result.append(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                    result.append(c.toLowerCase());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.append(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removeEndWiths</span><span class="params">(String inputString,String... endWiths)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(String endWith : endWiths) &#123;</span><br><span class="line">            <span class="keyword">if</span>(inputString.endsWith(endWith)) &#123;</span><br><span class="line">                <span class="keyword">return</span> inputString.substring(<span class="number">0</span>,inputString.length() - endWith.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inputString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将string转换为List&lt;ColumnEnum&gt; 格式为: &quot;enumAlias(enumKey,enumDesc)&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Pattern</span> <span class="variable">three</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(.*)\\((.*),(.*)\\)&quot;</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Pattern</span> <span class="variable">two</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(.*)\\((.*)\\)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Test whether the given string matches the given substring</span></span><br><span class="line"><span class="comment">     * at the given index.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str the original string (or StringBuilder)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index the index in the original string to start matching against</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> substring the substring to match at the given index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">substringMatch</span><span class="params">(CharSequence str, <span class="type">int</span> index, CharSequence substring)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; substring.length(); j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index + j;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= str.length() || str.charAt(i) != substring.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] tokenizeToStringArray(String str,String seperators) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="type">StringTokenizer</span> <span class="variable">tokenlizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(str,seperators);</span><br><span class="line">        <span class="type">List</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(tokenlizer.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">s</span> <span class="operator">=</span> tokenlizer.nextElement();</span><br><span class="line">            result.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (String[])result.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[result.size()]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">join</span><span class="params">(List list, String seperator)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> join(list.toArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]),seperator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replace</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, String str,String replacement)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">before</span> <span class="operator">=</span> str.substring(<span class="number">0</span>,start);</span><br><span class="line">        <span class="type">String</span> <span class="variable">after</span> <span class="operator">=</span> str.substring(end);</span><br><span class="line">        <span class="keyword">return</span> before + replacement + after;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">join</span><span class="params">(Object[] array, String seperator)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(array == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            result.append(array[i]);</span><br><span class="line">            <span class="keyword">if</span>(i != array.length - <span class="number">1</span>)  &#123;</span><br><span class="line">                result.append(seperator);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">containsCount</span><span class="params">(String string, String keyword)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(string == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; string.length(); i++ ) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexOf</span> <span class="operator">=</span> string.indexOf(keyword,i);</span><br><span class="line">            <span class="keyword">if</span>(indexOf &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count ++;</span><br><span class="line">            i = indexOf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构造数据模型"><a href="#构造数据模型" class="headerlink" title="构造数据模型"></a>构造数据模型</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p>借助<code>FreeMaker</code>可以方便的根据模板生成文件，对于<code>FreeMaker</code>而言，其强调<code>数据模型+模板=文件</code>的思想，所以代码生成器最重要的一个部分就是数据模型</p><p>数据模型一共以两种形式组成：</p><ul><li>数据库中表、字段等信息<ul><li>使用元数据读取，封装成对应实体类，构建数据模型</li></ul></li><li>用户自定义数据<ul><li>为使得代码生成器匹配多样的使用环境，可以让用户自定义数据，并且以key-value的形式配置到<code>propertities</code>文件中</li></ul></li></ul><h4 id="自定义数据"><a href="#自定义数据" class="headerlink" title="自定义数据"></a>自定义数据</h4><p>规定用户自定义数据存放在<code>properties</code>目录下，构建<code>PropertiesUtils</code>工具类，统一对<code>properties</code>文件夹下的所有<code>.properties</code>文件进行加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    读取Properties数据工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesUtils</span> &#123;</span><br><span class="line">    <span class="comment">//自定义数据对应的FreeMaker数据模型map集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; customMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//默认用户将自定义数据存放在properties目录下</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;File&gt; files = searchAllFile(<span class="keyword">new</span> <span class="title class_">File</span>(dir.getAbsolutePath()));</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span>(file.getName().endsWith(<span class="string">&quot;.properties&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">                    prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">                    customMap.putAll((Map) prop);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询某个目录下的所有文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;File&gt; <span class="title function_">searchAllFile</span><span class="params">(File dir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        searchFiles(dir,arrayList);</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归获取某个目录下的所有文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">searchFiles</span><span class="params">(File dir,List&lt;File&gt; collector)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span>(dir.isDirectory()) &#123;</span><br><span class="line">            File[] subFiles = dir.listFiles();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; subFiles.length; i++) &#123;</span><br><span class="line">                searchFiles(subFiles[i],collector);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            collector.add(dir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        PropertiesUtils.customMap.forEach((k,v)-&gt;&#123;</span><br><span class="line">            System.out.println(k+<span class="string">&quot;-&gt;&quot;</span>+v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="元数据处理"><a href="#元数据处理" class="headerlink" title="元数据处理"></a>元数据处理</h4><p>将元数据读取到对应数据库表和字段的信息封装到前面定义的<code>Table</code>和<code>Column</code>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *将数据库中表和字段信息封装成实体类</span></span><br><span class="line"><span class="comment">     * 操作步骤:</span></span><br><span class="line"><span class="comment">     *  ①获取连接</span></span><br><span class="line"><span class="comment">     *  ②获取dbdatabasemetaData</span></span><br><span class="line"><span class="comment">     *  ③获取数据库中所有的表</span></span><br><span class="line"><span class="comment">     *  ④获取表中的所有字段</span></span><br><span class="line"><span class="comment">     *  ⑤封装成Java对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Table&gt; <span class="title function_">getDbInfo</span><span class="params">(DataBase db)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection(db);</span><br><span class="line">        <span class="comment">//2.获取元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">//3.获取数据库下所有表名</span></span><br><span class="line">        List&lt;Table&gt; tableList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">tables</span> <span class="operator">=</span> metaData.getTables(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;TABLE&quot;</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (tables.next())&#123;</span><br><span class="line">            <span class="type">Table</span> <span class="variable">tab</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Table</span>();</span><br><span class="line">            <span class="comment">//①表名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> tables.getString(<span class="string">&quot;TABLE_NAME&quot;</span>);</span><br><span class="line">            tab.setTableName(tableName);</span><br><span class="line">            <span class="comment">//②对应Java实体类名，去掉前缀，首字母大写</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> removePrefix(tableName);</span><br><span class="line">            tab.setPoName(className);</span><br><span class="line">            <span class="comment">//③获取描述信息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">remarks</span> <span class="operator">=</span> tables.getString(<span class="string">&quot;REMARKS&quot;</span>);</span><br><span class="line">            tab.setComment(remarks);</span><br><span class="line">            <span class="comment">//④主键</span></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">primaryKeys</span> <span class="operator">=</span> metaData.getPrimaryKeys(<span class="literal">null</span>, <span class="literal">null</span>, tableName);</span><br><span class="line">            String primaryKesName=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (primaryKeys.next())&#123;</span><br><span class="line">                <span class="comment">//获取主键名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">keyName</span> <span class="operator">=</span> primaryKeys.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>);</span><br><span class="line">                primaryKesName+=keyName+<span class="string">&quot;,&quot;</span>; <span class="comment">//多个主键以逗号分隔</span></span><br><span class="line">            &#125;</span><br><span class="line">            tab.setKey(primaryKesName);</span><br><span class="line">            <span class="comment">//5表中所有字段</span></span><br><span class="line">            List&lt;Column&gt; columnList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">columns</span> <span class="operator">=</span> metaData.getColumns(<span class="literal">null</span>, <span class="literal">null</span>, tableName, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">while</span> (columns.next())&#123;</span><br><span class="line">                <span class="type">Column</span> <span class="variable">column</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Column</span>();</span><br><span class="line">                <span class="comment">//列名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> columns.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>); <span class="comment">//字段名获取</span></span><br><span class="line">                column.setColumnName(columnName);</span><br><span class="line">                <span class="comment">//Java属性名,转换规则: user_id--&gt; userId</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> StringUtils.toJavaVariableName(columnName);</span><br><span class="line">                column.setFieldName(fieldName);</span><br><span class="line">                <span class="comment">//字段SQL数据类型</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">columnType</span> <span class="operator">=</span> columns.getString(<span class="string">&quot;TYPE_NAME&quot;</span>);</span><br><span class="line">                column.setColumnType(columnType);</span><br><span class="line">                <span class="comment">//Java属性类型</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">filedType</span> <span class="operator">=</span> PropertiesUtils.customMap.get(columnType);</span><br><span class="line">                column.setFieldType(filedType);</span><br><span class="line">                <span class="comment">//备注信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">comment</span> <span class="operator">=</span> columns.getString(<span class="string">&quot;REMARKS&quot;</span>);</span><br><span class="line">                column.setColumnComment(comment);</span><br><span class="line">                <span class="comment">//是否是主键</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">pri</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(StringUtils.contains(columnName,primaryKesName.split(<span class="string">&quot;，&quot;</span>)))&#123;</span><br><span class="line">                    pri = <span class="string">&quot;PRI&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                column.setColumnKey(pri);</span><br><span class="line">                columnList.add(column);</span><br><span class="line">            &#125;</span><br><span class="line">            tab.setColumnsList(columnList);</span><br><span class="line">            tableList.add(tab);</span><br><span class="line">            columns.close();</span><br><span class="line">        &#125;</span><br><span class="line">        tables.close();</span><br><span class="line">        conn.close();</span><br><span class="line">        <span class="keyword">return</span> tableList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除字符串中指定前缀</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removePrefix</span><span class="params">(String tableName)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> PropertiesUtils.customMap.get(<span class="string">&quot;tableRemovePrefixes&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newTableName</span> <span class="operator">=</span> tableName;</span><br><span class="line">        <span class="comment">//替换指定前缀</span></span><br><span class="line">        <span class="keyword">for</span>(String pf:prefix.split(<span class="string">&quot;,&quot;</span>))&#123;</span><br><span class="line">            newTableName = newTableName.replace(pf,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首字母大写</span></span><br><span class="line">        <span class="keyword">return</span> StrUtil.upperFirst(newTableName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">DataBase</span> <span class="variable">dataBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBase</span>(<span class="string">&quot;MYSQL&quot;</span>, <span class="string">&quot;train_member&quot;</span>, <span class="string">&quot;train_member&quot;</span>, <span class="string">&quot;wu123456&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;3306&quot;</span>);</span><br><span class="line">    List&lt;Table&gt; dbInfo = DataBaseUtils.getDbInfo(dataBase);</span><br><span class="line">    <span class="keyword">for</span> (Table table : dbInfo) &#123;</span><br><span class="line">        System.out.println(table);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码生成器实现"><a href="#代码生成器实现" class="headerlink" title="代码生成器实现"></a>代码生成器实现</h3><h4 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h4><p>用户需要提供的信息</p><ul><li>数据库相关信息<ul><li>包括数据库类型、ip、端口、用户名、密码等</li></ul></li><li>工程配置信息<ul><li>项目目录、包名等</li></ul></li><li>模板路径<ul><li>模板文件根目录，程序会获取目录下的所有模板文件，集合数据模型生成对应代码文件</li></ul></li><li>输出路径<ul><li>最终生成的代码文件存储位置</li></ul></li></ul><p>中间需要生成的数据模型</p><ul><li>用户自定义数据对应的数据模型</li><li>数据库元数据对应的数据模型</li><li>工程配置信息对应的数据模型</li></ul><h4 id="数据模型构建类创建"><a href="#数据模型构建类创建" class="headerlink" title="数据模型构建类创建"></a>数据模型构建类创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户提供的数据</span></span><br><span class="line"><span class="comment"> *      模板位置</span></span><br><span class="line"><span class="comment"> *      代码生成路径</span></span><br><span class="line"><span class="comment"> *      工程配置对象 setting</span></span><br><span class="line"><span class="comment"> *      数据库对象   DataBase</span></span><br><span class="line"><span class="comment"> * 准备对应的数据模型</span></span><br><span class="line"><span class="comment"> *      1.自定义配置</span></span><br><span class="line"><span class="comment"> *      2.元数据</span></span><br><span class="line"><span class="comment"> *      3.setting</span></span><br><span class="line"><span class="comment"> * 调用核心处理类完成代码生成工作</span></span><br><span class="line"><span class="comment"> *      方法：Generator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneratorFacade</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Settings settings;</span><br><span class="line">    <span class="keyword">private</span> DataBase db;</span><br><span class="line">    <span class="keyword">private</span> Generator generator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 附加信息，templates:所用模板路径列表   tables： 需要生成代码的数据库表名列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> settings 工程配置信息类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> db 数据库信息类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeneratorFacade</span><span class="params">(HashMap&lt;String, Object&gt; map, Settings settings, DataBase db)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="built_in">this</span>.settings = settings;</span><br><span class="line">        <span class="built_in">this</span>.db = db;</span><br><span class="line">        <span class="built_in">this</span>.generator = <span class="keyword">new</span> <span class="title class_">Generator</span>(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.准备数据模型</span></span><br><span class="line"><span class="comment">     * 2.调用核心处理类完成代码生成工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generatorByDataBase</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//map为配置信息，里面包含①需要生成代码对应的数据库表名②对应模板的目录</span></span><br><span class="line">        List&lt;String&gt; tables = (List&lt;String&gt;) map.get(<span class="string">&quot;tables&quot;</span>);</span><br><span class="line">        List&lt;Table&gt; allTable = DataBaseUtils.getDbInfo(db);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; allTable.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; tables.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tables.get(j).equals(allTable.get(i).getTableName())) &#123; <span class="comment">//只为指定表生成代码</span></span><br><span class="line">                    Map&lt;String, Object&gt; dataModel = getDataModel(allTable.get(i));</span><br><span class="line">                    generator.scanAndGenerator(dataModel);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据table对象获取数据模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">getDataModel</span><span class="params">(Table table)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; dataModel = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//1.自定义配置</span></span><br><span class="line">        dataModel.putAll(PropertiesUtils.customMap);</span><br><span class="line">        <span class="comment">//2.元数据</span></span><br><span class="line">        dataModel.put(<span class="string">&quot;table&quot;</span>, table);  <span class="comment">//table.name2</span></span><br><span class="line">        <span class="comment">//3.setting</span></span><br><span class="line">        dataModel.putAll(<span class="built_in">this</span>.settings.getSettingMap());</span><br><span class="line">        <span class="comment">//4.类型</span></span><br><span class="line">        dataModel.put(<span class="string">&quot;ClassName&quot;</span>, table.getPoName());</span><br><span class="line">        <span class="comment">//5.添加数据库信息</span></span><br><span class="line">        dataModel.put(<span class="string">&quot;username&quot;</span>, db.getUserName());</span><br><span class="line">        dataModel.put(<span class="string">&quot;password&quot;</span>, db.getPassWord());</span><br><span class="line">        dataModel.put(<span class="string">&quot;url&quot;</span>, db.getUrl());</span><br><span class="line">        dataModel.put(<span class="string">&quot;driver&quot;</span>, db.getDriver());</span><br><span class="line">        dataModel.put(<span class="string">&quot;author&quot;</span>, settings.getAuthor());</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> simpleDateFormat.format(date);</span><br><span class="line">        dataModel.put(<span class="string">&quot;createTime&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FreeMaker解析输出代码文件"><a href="#FreeMaker解析输出代码文件" class="headerlink" title="FreeMaker解析输出代码文件"></a>FreeMaker解析输出代码文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码生成器的核心处理类</span></span><br><span class="line"><span class="comment"> *      使用Freemarker完成文件生成</span></span><br><span class="line"><span class="comment"> *             数据模型 + 模板</span></span><br><span class="line"><span class="comment"> *  数据：</span></span><br><span class="line"><span class="comment"> *      数据模型</span></span><br><span class="line"><span class="comment"> *      模板的位置</span></span><br><span class="line"><span class="comment"> *      生成文件的路径</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Configuration&gt; cfgs;<span class="comment">//模板加载器配置文件</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; template;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generator</span><span class="params">(HashMap&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="comment">//实例化Configuration对象</span></span><br><span class="line">        cfgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        template = (List&lt;String&gt;) map.get(<span class="string">&quot;template&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; template.size(); i++) &#123;</span><br><span class="line">            cfgs.add(i, <span class="keyword">new</span> <span class="title class_">Configuration</span>());</span><br><span class="line">            <span class="type">FileTemplateLoader</span> <span class="variable">ftl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileTemplateLoader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(template.get(i)));</span><br><span class="line">            cfgs.get(i).setTemplateLoader(ftl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据选中的表进行代码生成代码生成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scanAndGenerator</span><span class="params">(Map&lt;String, Object&gt; dataModel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取模板目录路径列表</span></span><br><span class="line">        List&lt;String&gt; template = (List&lt;String&gt;) map.get(<span class="string">&quot;template&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; template.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//1.根据模板路径找到此路径下的所有模板文件</span></span><br><span class="line">            List&lt;File&gt; fileList = FileUtils.searchAllFile(<span class="keyword">new</span> <span class="title class_">File</span>(template.get(i)));</span><br><span class="line">            <span class="comment">//2.对每个模板进行文件生成</span></span><br><span class="line">            <span class="keyword">for</span> (File file : fileList) &#123;</span><br><span class="line">                executeGenerator(dataModel, file, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对模板进行文件生成</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataModel ： 数据模型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      ： 模板文件</span></span><br><span class="line"><span class="comment">     *                  模板文件：c：com.ihrm.system.abc.java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">executeGenerator</span><span class="params">(Map&lt;String, Object&gt; dataModel, File file, <span class="type">int</span> index)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.文件路径处理   (E:\模板\$&#123;path1&#125;\$&#123;path2&#125;\$&#123;path3&#125;\$&#123;ClassName&#125;.java)</span></span><br><span class="line">        <span class="comment">//templatePath : E:\模板\</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//file.getAbsolutePath(): E:\模板\xx.xx.xx.java</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateFileName</span> <span class="operator">=</span> file.getAbsolutePath().replace(template.get(index), <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//输出路径用FreeMaker字符串模板进行处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">outFileName</span> <span class="operator">=</span> processTemplateString(templateFileName, dataModel,index);</span><br><span class="line"><span class="comment">//        2.读取文件模板</span></span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfgs.get(index).getTemplate(templateFileName);</span><br><span class="line">        template.setOutputEncoding(<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//指定生成文件的字符集编码</span></span><br><span class="line"><span class="comment">//        3.创建文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> FileUtils.mkdir((String) map.get(<span class="string">&quot;templatePath&quot;</span>), outFileName);</span><br><span class="line"><span class="comment">//        4.模板处理（文件生成）</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file1);</span><br><span class="line">        template.process(dataModel, fw);</span><br><span class="line"></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据库的数据添加到模板里面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataModel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">processTemplateString</span><span class="params">(String templateString,Map dataModel,<span class="type">int</span> index)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Template</span>(<span class="string">&quot;ts&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringReader</span>(templateString), cfgs.get(index));</span><br><span class="line">        template.process(dataModel,out);</span><br><span class="line">        <span class="keyword">return</span> out.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板文件的编写"><a href="#模板文件的编写" class="headerlink" title="模板文件的编写"></a>模板文件的编写</h3><p>重点在于模板文件的编写，根据需求编写不同模板</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码生成器&quot;&gt;&lt;a href=&quot;#代码生成器&quot; class=&quot;headerlink&quot; title=&quot;代码生成器&quot;&gt;&lt;/a&gt;代码生成器&lt;/h1&gt;&lt;h2 id=&quot;代码生成器概述&quot;&gt;&lt;a href=&quot;#代码生成器概述&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="杂项" scheme="https://bangwu2001.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础命令</title>
    <link href="https://bangwu2001.github.io/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://bangwu2001.github.io/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-12-14T14:12:42.000Z</published>
    <updated>2023-12-14T14:11:58.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>/home/itheima/a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，==非==<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，==以==<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前，比如./a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test/，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符<em>， 比如：`</em>`test表示搜索任意以test结尾的文件</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h2 id="反引号"><a href="#反引号" class="headerlink" title="`反引号"></a>`反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027215841.png" alt="image-20221027215841573"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220010.png" alt="image-20221027220009949"></p><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221149.png" alt="image-20221027221148964">`</p><p>-O 指定文件下载后本地的存储路径</p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221201.png" alt="image-20221027221201079"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221440.png" alt="image-20221027221439990"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>临时设置：export 变量名=变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221939.png" alt="image-20221027221939899"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222157.png" alt="image-20221027222157276"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222446.png" alt="image-20221027222446514"></p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux基础命令&quot;&gt;&lt;a href=&quot;#Linux基础命令&quot; class=&quot;headerlink&quot; title=&quot;Linux基础命令&quot;&gt;&lt;/a&gt;Linux基础命令&lt;/h1&gt;&lt;h2 id=&quot;Linux的目录结构&quot;&gt;&lt;a href=&quot;#Linux的目录结构&quot; cla</summary>
      
    
    
    
    <category term="linux" scheme="https://bangwu2001.github.io/categories/linux/"/>
    
    
    <category term="计算机基础" scheme="https://bangwu2001.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux软件安装和部署</title>
    <link href="https://bangwu2001.github.io/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>https://bangwu2001.github.io/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</id>
    <published>2023-12-14T14:12:42.000Z</published>
    <updated>2023-12-14T14:11:54.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Linux上部署各类软件"><a href="#在Linux上部署各类软件" class="headerlink" title="在Linux上部署各类软件"></a>在Linux上部署各类软件</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>下面全部的软件安装的相关流程，90%都是取自软件自身的官方网站。</p><p>一个合格的程序员应当要有良好的信息收集能力哦</p><h1 id="MySQL数据库管理系统安装部署【简单】"><a href="#MySQL数据库管理系统安装部署【简单】" class="headerlink" title="MySQL数据库管理系统安装部署【简单】"></a>MySQL数据库管理系统安装部署【简单】</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL数据库管理系统（后续简称MySQL），是一款知名的数据库系统，其特点是：轻量、简单、功能丰富。</p><p>MySQL数据库可谓是软件行业的明星产品，无论是后端开发、大数据、AI、运维、测试等各类岗位，基本上都会和MySQL打交道。</p><p>让我们从MySQL开始，进行实战的Linux软件安装部署。</p><p>本次课程分为2个版本进行安装：</p><ul><li>MySQL 5.7版本安装</li><li>MySQL 8.x版本安装</li></ul><blockquote><p>由于MySQL5.x和8.x各自有许多使用者，所以这两个版本我们都演示安装一遍</p></blockquote><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>MySQL的安装过程中，除了会使用Linux命令外，还会使用到少量的数据库专用的：SQL语句</p><p>对于SQL语句我们并未涉及，所以可以跟随教程的内容，复制粘贴即可</p><p>如对MySQL感兴趣，可以学习BiliBili黑马程序员视频：<a href="https://www.bilibili.com/video/BV1iF411z7Pu">2022新版黑马程序员MySQL知识精讲+mysql实战案例_零基础mysql数据库入门到高级全套教程</a></p><blockquote><p>如有时间，建议可以在学习完Linux系统之后，学习一下MySQL数据库</p><p>无论从事什么方面的开发，Java后端、大数据、AI、前端、Linux运维等，都会要求掌握MySQL数据库的</p><p>可以说，MySQL是IT开发从业者必备的技能了。</p></blockquote><h2 id="MySQL5-7版本在CentOS系统安装"><a href="#MySQL5-7版本在CentOS系统安装" class="headerlink" title="MySQL5.7版本在CentOS系统安装"></a>MySQL5.7版本在CentOS系统安装</h2><blockquote><p>注意：安装操作需要root权限</p></blockquote><p>MySQL的安装我们可以通过前面学习的yum命令进行。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>配置yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182514.png" alt="image-20221012182514865"></p><blockquote><p>由于MySQL并不在CentOS的官方仓库中，所以我们通过上述rpm命令：</p><ul><li>导入MySQL仓库的密钥</li><li>配置MySQLQ的yum仓库</li></ul></blockquote></li><li><p>使用yum安装MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182556.png" alt="image-20221012182555420"></p></li><li><p>安装完成后，启动MySQL并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld# 启动</span><br><span class="line">systemctl enable mysqld# 开机自启</span><br></pre></td></tr></table></figure><blockquote><p>MySQL安装完成后，会自动配置为名称叫做：<code>mysqld</code>的服务，可以被systemctl所管理</p></blockquote></li><li><p>检查MySQL的运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182716.png" alt="image-20221012182716598"></p></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>主要配置管理员用户root的密码以及配置允许远程登录的权限。</p><ol><li><p>获取MySQL的初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182744.png" alt="image-20221012182744115"></p></li><li><p>登陆MySQL数据库系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182806.png" alt="image-20221012182805966"></p></li><li><p>修改root用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在MySQL控制台内执行</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root的简单密码</p><blockquote><p>我们可以给root设置简单密码，如123456.</p><p>请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 如果你想设置简单密码，需要降低Mysql的密码安全级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span>LOW; # 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">4</span>; # 密码长度最低<span class="number">4</span>位即可</span><br><span class="line"></span><br><span class="line"># 然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;简单密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root运行远程登录</p><blockquote><p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p><p>请注意，允许root远程登录会带来安全风险</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 授权root远程登录</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> root@&quot;IP地址&quot; identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;  </span><br><span class="line"># IP地址即允许登陆的IP地址，也可以填写<span class="operator">%</span>，表示允许任何地址</span><br><span class="line"># 密码表示给远程登录独立设置密码，和本地登陆的密码可以不同</span><br><span class="line"></span><br><span class="line"># 刷新权限，生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台页面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure></li><li><p>检查端口</p><p>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012183746.png" alt="image-20221012183746802"></p></li></ol><p>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p><h2 id="MySQL8-0版本在CentOS系统安装"><a href="#MySQL8-0版本在CentOS系统安装" class="headerlink" title="MySQL8.0版本在CentOS系统安装"></a>MySQL8.0版本在CentOS系统安装</h2><blockquote><p>注意：安装操作需要root权限</p></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ol><li><p>配置yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql8.x版本 yum库</span></span><br><span class="line">rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>使用yum安装MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，启动MySQL并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld# 启动</span><br><span class="line">systemctl enable mysqld# 开机自启</span><br></pre></td></tr></table></figure><blockquote><p>MySQL安装完成后，会自动配置为名称叫做：<code>mysqld</code>的服务，可以被systemctl所管理</p></blockquote></li><li><p>检查MySQL的运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>主要修改root密码和允许root远程登录</p><ol><li><p>获取MySQL的初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p>登录MySQL数据库系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure></li><li><p>修改root密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root的简单密码</p><blockquote><p>我们可以给root设置简单密码，如123456.</p><p>请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;# 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">4</span>;# 密码长度最低<span class="number">4</span>位即可</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>允许root远程登录，并设置远程登录密码</p><blockquote><p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p><p>请注意，允许root远程登录会带来安全风险</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 第一次设置root远程登录，并配置远程密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码!&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br><span class="line"></span><br><span class="line"># 后续修改密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台页面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure></li><li><p>检查端口</p><p>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012192303.png" alt="image-20221012192303607"></p></li></ol><p>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p><h2 id="MySQL5-7版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL5-7版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL5.7版本在Ubuntu（WSL环境）系统安装"></a>MySQL5.7版本在Ubuntu（WSL环境）系统安装</h2><blockquote><p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p><p>所以我们需要额外的步骤才可以安装5.7版本的MySQL</p></blockquote><p>安装操作需root权限，你可以：</p><ol><li><p>通过 sudo su -，切换到root用户</p><blockquote><p>课程中选择这种方式操作</p></blockquote></li><li><p>或在每一个命令前，加上sudo，用来临时提升权限</p></li></ol><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ol><li><p>下载apt仓库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载apt仓库的安装包，Ubuntu的安装包是.deb文件</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094103.png" alt="image-20221016094103315"></p></li><li><p>配置apt仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用dpkg命令安装仓库</span></span><br><span class="line">dpkg -i mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure><p>弹出框中选择：<code>ubuntu bionic</code> （Ubuntu18.04系统的代号是bionic，选择18.04的版本库用来安装）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094142.png" alt="image-20221016094142343"></p><p>弹出框中选择：<code>MySQL Server &amp; Cluster</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094216.png" alt="image-20221016094216377"></p><p>弹出框中选择：<code>mysql-5.7</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094254.png" alt="image-20221016094254397"></p><p>最后选择：<code>ok</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094306.png" alt="image-20221016094306917"></p></li><li><p>更新apt仓库的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先导入仓库的密钥信息</span></span><br><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新仓库信息</span></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure></li><li><p>检查是否成功配置MySQL5.7的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache policy mysql-server</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094546.png" alt="image-20221016094546943"></p><p>看到如图所示字样，即成功</p></li><li><p>安装MySQL5.7</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用apt安装mysql客户端和mysql服务端</span></span><br><span class="line">apt install -f -y mysql-client=5.7* mysql-community-server=5.7*</span><br></pre></td></tr></table></figure><p>弹出框中输入root密码并选择ok，密码任意，课程中以123456代替</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094941.png" alt="image-20221016094941439"></p><p>再次输入root密码确认</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094954.png" alt="image-20221016094954505"></p></li><li><p>启动MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start# 启动</span><br><span class="line">/etc/init.d/mysql stop# 停止</span><br><span class="line">/etc/init.d/mysql status# 查看状态</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095259.png" alt="image-20221016095259172"></p></li><li><p>对MySQL进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li><p>输入密码：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095458.png" alt="image-20221016095458755"></p></li><li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车（课程中选择直接回车）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095537.png" alt="image-20221016095537716"></p></li><li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车（课程不更改）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095621.png" alt="image-20221016095621386"></p></li><li><p>是否移除匿名用户，移除输入<code>y</code>回车，不移除直接回车（课程选择移除）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101232.png" alt="image-20221016101232827"></p></li><li><p>是否进制root用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车（课程选择不禁止）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101324.png" alt="image-20221016101324577"></p></li><li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车（课程选择不移除）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101404.png" alt="image-20221016101404392"></p></li><li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车（课程选择刷新）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101442.png" alt="image-20221016101442459"></p></li></ol></li><li><p>登陆MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码即可登陆成功</span></span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101524.png" alt="image-20221016101524498"></p></li></ol><p>至此，在Ubuntu上安装MySQL5.7版本成功。</p><h2 id="MySQL8-0版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL8-0版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL8.0版本在Ubuntu（WSL环境）系统安装"></a>MySQL8.0版本在Ubuntu（WSL环境）系统安装</h2><blockquote><p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p><p>所以直接可以通过apt安装即可</p><p>注意，课程是以WSL获得的Ubuntu操作系统环境。</p><p>如果你通过VMware虚拟机的方式获得了Ubuntu操作系统环境，操作步骤不用担心，和课程中使用WSL环境是==完全一致的==</p></blockquote><p>安装操作需root权限，你可以：</p><ol><li><p>通过 sudo su -，切换到root用户</p><blockquote><p>课程中选择这种方式操作</p></blockquote></li><li><p>或在每一个命令前，加上sudo，用来临时提升权限</p></li></ol><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><ol><li><p>如果已经安装过MySQL5.7版本，需要卸载仓库信息哦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载MySQL5.7版本</span></span><br><span class="line">apt remove -y mysql-client=5.7* mysql-community-server=5.7*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载5.7的仓库信息</span></span><br><span class="line">dpkg -l | grep mysql | awk &#x27;&#123;print $2&#125;&#x27; | xargs dpkg -P</span><br></pre></td></tr></table></figure></li><li><p>更新apt仓库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure></li><li><p>安装mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y mysql-server</span><br></pre></td></tr></table></figure></li><li><p>启动MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start# 启动</span><br><span class="line">/etc/init.d/mysql stop# 停止</span><br><span class="line">/etc/init.d/mysql status# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>登陆MySQL设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接执行：mysql</span></span><br><span class="line">mysql</span><br></pre></td></tr></table></figure></li><li><p>设置密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>对MySQL进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li><p>输入密码：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095458-170256022735349.png" alt="image-20221016095458755"></p></li><li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车（课程中选择直接回车）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095537-170256022969752.png" alt="image-20221016095537716"></p></li><li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车（课程不更改）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095621-170256023177855.png" alt="image-20221016095621386"></p></li><li><p>是否移除匿名用户，移除输入<code>y</code>回车，不移除直接回车（课程选择移除）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101232-170256023387458.png" alt="image-20221016101232827"></p></li><li><p>是否进制root用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车（课程选择不禁止）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101324-170256023608861.png" alt="image-20221016101324577"></p></li><li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车（课程选择不移除）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101404-170256023814164.png" alt="image-20221016101404392"></p></li><li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车（课程选择刷新）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101442-170256023988467.png" alt="image-20221016101442459"></p></li></ol></li><li><p>重新登陆MySQL（用更改后的密码）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016110414.png" alt="image-20221016110414182"></p></li></ol><p>至此，在Ubuntu上安装MySQL5.7版本成功。</p><h1 id="Tomcat安装部署【简单】"><a href="#Tomcat安装部署【简单】" class="headerlink" title="Tomcat安装部署【简单】"></a>Tomcat安装部署【简单】</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。</p><p>简单来说，Tomcat是一个WEB应用程序的托管平台，可以让用户编写的WEB应用程序，被Tomcat所托管，并提供网站服务。</p><blockquote><p>即让用户开发的WEB应用程序，变成可以被访问的网页。</p></blockquote><h2 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h2><p>Tomcat的安装非常简单，主要分为2部分：</p><ol><li>安装JDK环境</li><li>解压并安装Tomcat</li></ol><blockquote><p>本次安装使用Tomcat版本是：10.0.27版本，需要Java（JDK）版本最低为JDK8或更高版本</p><p>课程中使用的JDK版本是：JDK8u351版本</p></blockquote><h3 id="安装JDK环境"><a href="#安装JDK环境" class="headerlink" title="安装JDK环境"></a>安装JDK环境</h3><ol><li><p>下载JDK软件</p><p><a href="https://www.oracle.com/java/technologies/downloads">https://www.oracle.com/java/technologies/downloads</a></p><p>在页面下方找到：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163411.png" alt="image-20221017163411651" style="zoom: 67%;"></p><p>下载<code>jdk-8u351-linux-x64.tar.gz</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163440.png" alt="image-20221017163440491"></p><p>==在弹出的页面中输入Oracle的账户密码即可下载（如无账户，请自行注册，注册是免费的）==</p></li><li><p>登陆Linux系统，切换到root用户</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163607.png" alt></p></li><li><p>通过FinalShell，上传下载好的JDK安装包</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163706.png" alt="image-20221017163706026"></p></li><li><p>创建文件夹，用来部署JDK，将JDK和Tomcat都安装部署到：/export/server 内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server</span><br></pre></td></tr></table></figure></li><li><p>解压缩JDK安装文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u351-linux-x64.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>配置JDK的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/jdk1.8.0_351 /export/server/jdk</span><br></pre></td></tr></table></figure></li><li><p>配置JAVA_HOME环境变量，以及将$JAVA_HOME/bin文件夹加入PATH环境变量中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑/etc/profile文件</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>生效环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>配置java执行程序的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除系统自带的java程序</span></span><br><span class="line">rm -f /usr/bin/java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接我们自己安装的java程序</span></span><br><span class="line">ln -s /export/server/jdk/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure></li><li><p>执行验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure></li></ol><h3 id="解压并部署Tomcat"><a href="#解压并部署Tomcat" class="headerlink" title="解压并部署Tomcat"></a>解压并部署Tomcat</h3><blockquote><p>Tomcat建议使用非Root用户安装并启动</p><p>可以创建一个用户：tomcat用以部署</p></blockquote><ol><li><p>首先，放行tomcat需要使用的8080端口的外部访问权限</p><blockquote><p>CentOS系统默认开启了防火墙，阻止外部网络流量访问系统内部</p><p>所以，如果想要Tomcat可以正常使用，需要对Tomcat默认使用的8080端口进行放行</p><p>放行有2种操作方式：</p><ol><li>关闭防火墙</li><li>配置防火墙规则，放行端口</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下操作2选一即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭防火墙</span><br><span class="line">systemctl disable firewalld# 停止防火墙开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：放行8080端口的外部访问</span></span><br><span class="line">firewall-cmd --add-port=8080/tcp --permanent# --add-port=8080/tcp表示放行8080端口的tcp访问，--permanent表示永久生效</span><br><span class="line">firewall-cmd --reload# 重新载入防火墙规则使其生效</span><br></pre></td></tr></table></figure><blockquote><p>方便起见，建议同学们选择方式1，直接关闭防火墙一劳永逸</p><p>防火墙的配置非常复杂，后面会视情况独立出一集防火墙配置规则的章节。</p></blockquote></li><li><p>以root用户操作，创建tomcat用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">useradd tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选，为tomcat用户配置密码</span></span><br><span class="line">passwd tomcat</span><br></pre></td></tr></table></figure></li><li><p>下载Tomcat安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果出现https相关错误，可以使用--no-check-certificate选项</span></span><br><span class="line">wget --no-check-certificate https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>如果Linux内下载过慢，可以复制下载链接在Windows系统中使用迅雷等软件加速下载然后上传到Linux内即可</p><p>或者使用课程资料中提供的安装包</p></blockquote></li><li><p>解压Tomcat安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，否则无权限解压到/export/server内，除非修改此文件夹权限</span></span><br><span class="line">tar -zxvf apache-tomcat-10.0.27.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>创建Tomcat软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">ln -s /export/server/apache-tomcat-10.0.27 /export/server/tomcat</span><br></pre></td></tr></table></figure></li><li><p>修改tomcat安装目录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，同时对软链接和tomcat安装文件夹进行修改，使用通配符*进行匹配</span></span><br><span class="line">chown -R tomcat:tomcat /export/server/*tomcat*</span><br></pre></td></tr></table></figure></li><li><p>切换到tomcat用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - tomcat</span><br></pre></td></tr></table></figure></li><li><p>启动tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure></li><li><p>tomcat启动在8080端口，可以检查是否正常启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017223814.png" alt="image-20221017223814737"></p></li><li><p>打开浏览器，输入：</p><p><a href="http://centos:8080或http://192.168.88.130:8080">http://centos:8080或http://192.168.88.130:8080</a></p><p>使用主机名（需配置好本地的主机名映射）或IP地址访问Tomcat的WEB页面</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017223915.png" alt="image-20221017223915498"></p></li></ol><p>至此，Tomcat安装配置完成。</p><h1 id="Nginx安装部署【简单】"><a href="#Nginx安装部署【简单】" class="headerlink" title="Nginx安装部署【简单】"></a>Nginx安装部署【简单】</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。</p><p>同Tomcat一样，Nginx可以托管用户编写的WEB应用程序成为可访问的网页服务，同时也可以作为流量代理服务器，控制流量的中转。</p><p>Nginx在WEB开发领域，基本上也是必备组件之一了。</p><h2 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h2><p>Nginx同样需要配置额外的yum仓库，才可以使用yum安装</p><blockquote><p>安装Nginx的操作需要root身份</p></blockquote><ol><li><p>安装yum依赖程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure></li><li><p>手动添加，nginx的yum仓库</p><p>yum程序使用的仓库配置文件，存放在：<code>/etc/yum.repo.d</code>内。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件使用vim编辑</span></span><br><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容并保存退出</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure><blockquote><p>通过如上操作，我们手动添加了nginx的yum仓库</p></blockquote></li><li><p>通过yum安装最新稳定版的nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx自动注册了systemctl系统服务</span></span><br><span class="line">systemctl start nginx# 启动</span><br><span class="line">systemctl stop nginx# 停止</span><br><span class="line">systemctl status nginx# 运行状态</span><br><span class="line">systemctl enable nginx# 开机自启</span><br><span class="line">systemctl disable nginx# 关闭开机自启</span><br></pre></td></tr></table></figure></li><li><p>配置防火墙放行</p><p>nginx默认绑定80端口，需要关闭防火墙或放行80端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent# 放行tcp规则下的80端口，永久生效</span><br><span class="line">firewall-cmd --reload# 重新加载防火墙规则</span><br></pre></td></tr></table></figure></li><li><p>启动后浏览器输入Linux服务器的IP地址或主机名即可访问</p><p><a href="http://192.168.88.130">http://192.168.88.130</a> 或 <a href="http://centos">http://centos</a></p><blockquote><p>ps：80端口是访问网站的默认端口，所以后面无需跟随端口号</p><p>显示的指定端口也是可以的比如：</p><ul><li><a href="http://192.168.88.130:80">http://192.168.88.130:80</a></li><li><a href="http://centos:80">http://centos:80</a></li></ul></blockquote></li></ol><p>至此，Nginx安装配置完成。</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221018143113.png" alt="image-20221018143113053"></p><h1 id="RabbitMQ安装部署【简单】"><a href="#RabbitMQ安装部署【简单】" class="headerlink" title="RabbitMQ安装部署【简单】"></a>RabbitMQ安装部署【简单】</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>RabbitMQ一款知名的开源消息队列系统，为企业提供消息的发布、订阅、点对点传输等消息服务。</p><p>RabbitMQ在企业开发中十分常见，课程为大家演示快速搭建RabbitMQ环境。</p><h2 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h2><blockquote><p>rabbitmq在yum仓库中的版本比较老，所以我们需要手动构建yum仓库</p></blockquote><ol><li><p>准备yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 准备gpgkey密钥</span></span><br><span class="line">rpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 准备仓库文件</span></span><br><span class="line">vim /etc/yum.repos.d/rabbitmq.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Zero dependency Erlang</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang]</span><br><span class="line">name=rabbitmq_erlang</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang-source]</span><br><span class="line">name=rabbitmq_erlang-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">PackageCloud&#x27;</span>s repository key and RabbitMQ package signing key</span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># RabbitMQ server</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_server]</span><br><span class="line">name=rabbitmq_server</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_server-source]</span><br><span class="line">name=rabbitmq_server-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br></pre></td></tr></table></figure></li><li><p>安装RabbitMQ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install erlang rabbitmq-server -y</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  erlang.x86_64 0:23.3.4.11-1.el7           rabbitmq-server.noarch 0:3.10.0-1.el7</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：rabbitmq-server</span></span><br><span class="line">systemctl enable rabbitmq-server# 开机自启</span><br><span class="line">systemctl disable rabbitmq-server# 关闭开机自启</span><br><span class="line">systemctl start rabbitmq-server# 启动</span><br><span class="line">systemctl stop rabbitmq-server# 关闭</span><br><span class="line">systemctl status rabbitmq-server# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>放行防火墙，RabbitMQ使用5672、15672、25672 3个端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行5672 25672端口</span></span><br><span class="line">firewall-cmd --add-port=5672/tcp --permanent# 放行tcp规则下的5672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=15672/tcp --permanent# 放行tcp规则下的15672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=25672/tcp --permanent# 放行tcp规则下的25672端口，永久生效</span><br><span class="line">firewall-cmd --reload# 重新加载防火墙规则</span><br></pre></td></tr></table></figure></li><li><p>启动RabbitMQ的WEB管理控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></li><li><p>添加admin用户，并赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user admin &#x27;Itheima66^&#x27;</span><br><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; &quot;admin&quot; &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>浏览器打开管理控制台</p><p><a href="http://192.168.88.130:15672">http://192.168.88.130:15672</a></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221018154824.png" alt="image-20221018154823983"></p></li></ol><p>至此，RabbitMQ已经安装完成了。</p><h1 id="Redis安装部署【简单】"><a href="#Redis安装部署【简单】" class="headerlink" title="Redis安装部署【简单】"></a>Redis安装部署【简单】</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><p>redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。</p><p>redis的特点就是：<code>快</code>，可以基于内存存储数据并提供超低延迟、超快的检索速度</p><p>一般用于在系统中提供快速缓存的能力。</p><h2 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h2><ol><li><p>配置<code>EPEL</code>仓库</p><blockquote><p>EPEL 的全称叫 Extra Packages for Enterprise Linux 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。EPEL则为服务器版本提供大量的rpm包(yum程序所使用的程序安装包，类似Windows的exe)，而且大多数rpm包在官方 repository 中是找不到的。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li><li><p>安装redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y redis</span><br></pre></td></tr></table></figure></li><li><p>启动redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：redis</span></span><br><span class="line">systemctl enable redis# 开机自启</span><br><span class="line">systemctl disable redis# 关闭开机自启</span><br><span class="line">systemctl start redis# 启动</span><br><span class="line">systemctl stop redis# 关闭</span><br><span class="line">systemctl status redis# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>放行防火墙，redis使用端口6379</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行6379端口</span></span><br><span class="line">firewall-cmd --add-port=6379/tcp --permanent# 放行tcp规则下的6379端口，永久生效</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>进入redis服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行redis-cli</span></span><br><span class="line">[root@centos ~]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set mykey hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><p>至此，redis安装完成。</p><h1 id="ElasticSearch安装部署"><a href="#ElasticSearch安装部署" class="headerlink" title="ElasticSearch安装部署"></a>ElasticSearch安装部署</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><p><a href="https://baike.baidu.com/item/全文搜索引擎">全文搜索</a>属于最常见的需求，开源的 <a href="https://www.elastic.co/">Elasticsearch</a> （以下简称 es）是目前全文搜索引擎的首选。</p><p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p><p>Elasticsearch简称es，在企业内同样是一款应用非常广泛的搜索引擎服务。</p><p>很多服务中的搜索功能，都是基于es来实现的。</p><h2 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h2><ol><li><p>添加yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入仓库密钥</span></span><br><span class="line">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加yum源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span> </span><br><span class="line">vim /etc/yum.repos.d/elasticsearch.repo</span><br><span class="line"></span><br><span class="line">[elasticsearch-7.x]</span><br><span class="line">name=Elasticsearch repository for 7.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/7.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li><li><p>安装es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>配置es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">17行，设置集群名称</span></span><br><span class="line">cluster.name: my-cluster</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">23行，设置节点名称</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">56行，允许外网访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">74行，配置集群master节点</span></span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br></pre></td></tr></table></figure></li><li><p>启动es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start | stop | status | enable | disable elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li><li><p>测试</p><p>浏览器打开：<a href="http://ip:9200/?pretty">http://ip:9200/?pretty</a></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025085432.png" alt="image-20221025085432335"></p></li></ol><h1 id="集群化环境前置准备"><a href="#集群化环境前置准备" class="headerlink" title="集群化环境前置准备"></a>集群化环境前置准备</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在前面，我们所学习安装的软件，都是以单机模式运行的。</p><p>后续，我们将要学习大数据相关的软件部署，所以后续我们所安装的软件服务，大多数都是以集群化（多台服务器共同工作）模式运行的。</p><p>所以，在当前小节，我们需要完成集群化环境的前置准备，包括创建多台虚拟机，配置主机名映射，SSH免密登录等等。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="配置多台Linux虚拟机"><a href="#配置多台Linux虚拟机" class="headerlink" title="配置多台Linux虚拟机"></a>配置多台Linux虚拟机</h3><p>安装集群化软件，首要条件就是要有多台Linux服务器可用。</p><p>我们可以使用VMware提供的克隆功能，将我们的虚拟机额外克隆出3台来使用。</p><ol><li><p>首先，关机当前CentOS系统虚拟机（可以使用root用户执行<code>init 0</code>来快速关机）</p></li><li><p>新建文件夹</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104157.png" alt="image-20221025104157628"></p><p>文件夹起名为：<code>虚拟机集群</code></p></li><li><p>克隆</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104131.png" alt="image-20221025104131303"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104312.png" alt="image-20221025104312091"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104329.png" alt="image-20221025104329109"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104345.png" alt="image-20221025104345484"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104414.png" alt="image-20221025104414576"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104427.png" alt="image-20221025104427160"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104432.png" alt="image-20221025104432927"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104446.png" alt="image-20221025104446044"></p></li><li><p>同样的操作克隆出：node2和node3</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104825.png" alt="image-20221025104825204"></p></li><li><p>开启node1，修改主机名为node1，并修改固定ip为：192.168.88.131</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改主机名</span></span><br><span class="line">hostnamectl set-hostname node1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改IP地址</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启网卡</span></span><br><span class="line">systemctl stop network</span><br><span class="line">systemctl start network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者直接</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></li><li><p>同样的操作启动node2和node3,</p><p>修改node2主机名为node2，设置ip为192.168.88.132</p><p>修改node2主机名为node3，设置ip为192.168.88.133</p></li><li><p>配置FinalShell，配置连接到node1、node2、node3的连接</p><blockquote><p>为了简单起见，建议配置root用户登录</p></blockquote></li></ol><h3 id="准备主机名映射"><a href="#准备主机名映射" class="headerlink" title="准备主机名映射"></a>准备主机名映射</h3><ol><li><p>在Windows系统中修改hosts文件，填入如下内容：</p><blockquote><p>如果同学们使用MacOS系统，请：</p><ol><li>sudo su -，切换到root</li><li>修改/etc/hosts文件</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure></li><li><p>在3台Linux的/etc/hosts文件中，填入如下内容（==3台都要添加==）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><p>SSH服务是一种用于远程登录的安全认证协议。</p><p>我们通过FinalShell远程连接到Linux，就是使用的SSH服务。</p><p>SSH服务支持：</p><ol><li>通过账户+密码的认证方式来做用户认证</li><li>通过账户+秘钥文件的方式做用户认证</li></ol><p>SSH可以让我们通过SSH命令，远程的登陆到其它的主机上，比如：</p><p>在node1执行：ssh root@node2，将以root用户登录node2服务器，输入密码即可成功登陆</p><p>或者ssh node2，将以当前用户直接登陆到node2服务器。</p><h4 id="SSH免密配置"><a href="#SSH免密配置" class="headerlink" title="SSH免密配置"></a>SSH免密配置</h4><p>后续安装的集群化软件，多数需要远程登录以及远程执行命令，我们可以简单起见，配置三台Linux服务器之间的免密码互相SSH登陆</p><ol><li><p>在每一台机器都执行：<code>ssh-keygen -t rsa -b 4096</code>，一路回车到底即可</p></li><li><p>在每一台机器都执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id node1</span><br><span class="line">ssh-copy-id node2</span><br><span class="line">ssh-copy-id node3</span><br></pre></td></tr></table></figure></li><li><p>执行完毕后，node1、node2、node3之间将完成root用户之间的免密互通</p></li></ol><h3 id="配置JDK环境"><a href="#配置JDK环境" class="headerlink" title="配置JDK环境"></a>配置JDK环境</h3><p>后续的大数据集群软件，多数是需要Java运行环境的，所以我们为==每一台==机器都配置JDK环境。</p><p>JDK配置参阅：<code>Tomcat</code>安装部署环节。</p><h3 id="关闭防火墙和SELinux"><a href="#关闭防火墙和SELinux" class="headerlink" title="关闭防火墙和SELinux"></a>关闭防火墙和SELinux</h3><p>集群化软件之间需要通过端口互相通讯，为了避免出现网络不通的问题，我们可以简单的在集群内部关闭防火墙。</p><p>==在每一台机器都执行==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>Linux有一个安全模块：SELinux，用以限制用户和程序的相关权限，来确保系统的安全稳定。</p><p>SELinux的配置同防火墙一样，非常复杂，课程中不多涉及，后续视情况可以出一章SELinux的配置课程。</p><p>在当前，我们只需要关闭SELinux功能，避免导致后面的软件运行出现问题即可，</p><p>==在每一台机器都执行==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将第七行，SELINUX=enforcing 改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出后，重启虚拟机即可，千万要注意disabled单词不要写错，不然无法启动系统</span></span><br></pre></td></tr></table></figure><h3 id="添加快照"><a href="#添加快照" class="headerlink" title="添加快照"></a>添加快照</h3><p>为了避免后续出现问题，在完成上述设置后，为==每一台虚拟机==都制作快照，留待使用。</p><h2 id="补充命令-scp"><a href="#补充命令-scp" class="headerlink" title="补充命令 - scp"></a>补充命令 - scp</h2><p>后续的安装部署操作，我们将会频繁的在多台服务器之间相互传输数据。</p><p>为了更加方面的互相传输，我们补充一个命令：scp</p><p>scp命令是cp命令的升级版，即：ssh cp，通过SSH协议完成文件的复制。</p><p>其主要的功能就是：在不同的Linux服务器之间，通过<code>SSH</code>协议互相传输文件。</p><p>只要知晓服务器的账户和密码（或密钥），即可通过SCP互传文件。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">scp [-r] 参数1 参数2</span><br><span class="line">- -r选项用于复制文件夹使用，如果复制文件夹，必须使用-r</span><br><span class="line">- 参数1：本机路径 或 远程目标路径</span><br><span class="line">- 参数2：远程目标路径 或 本机路径</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r /export/server/jdk root@node2:/export/server/</span><br><span class="line">将本机上的jdk文件夹， 以root的身份复制到node2的/export/server/内</span><br><span class="line">同SSH登陆一样，账户名可以省略（使用本机当前的同名账户登陆）</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r node2:/export/server/jdk /export/server/</span><br><span class="line">将远程node2的jdk文件夹，复制到本机的/export/server/内</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scp命令的高级用法</span></span><br><span class="line">cd /export/server</span><br><span class="line">scp -r jdk node2:`pwd`/    # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br><span class="line">scp -r jdk node2:$PWD      # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br></pre></td></tr></table></figure><h1 id="Zookeeper集群安装部署"><a href="#Zookeeper集群安装部署" class="headerlink" title="Zookeeper集群安装部署"></a>Zookeeper集群安装部署</h1><h2 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h2><p>ZooKeeper是一个<a href="https://baike.baidu.com/item/分布式/19276232?fromModule=lemma_inlink">分布式</a>的，开放源码的<a href="https://baike.baidu.com/item/分布式应用程序/9854429?fromModule=lemma_inlink">分布式应用程序</a>协调服务，是Hadoop和<a href="https://baike.baidu.com/item/Hbase/7670213?fromModule=lemma_inlink">Hbase</a>的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><p>除了为Hadoop和HBase提供协调服务外，Zookeeper也被其它许多软件采用作为其分布式状态一致性的依赖，比如Kafka，又或者一些软件项目中，也经常能见到Zookeeper作为一致性协调服务存在。</p><p>Zookeeper不论是大数据领域亦或是其它服务器开发领域，涉及到分布式状态一致性的场景，总有它的身影存在。</p><h2 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h2><p>Zookeeper是一款分布式的集群化软件，可以在多台服务器上部署，并协同组成分布式集群一起工作。</p><ol><li><p>首先，要确保已经完成了<code>集群化环境前置准备</code>环节的全部内容</p></li><li><p>【node1上操作】下载Zookeeper安装包，并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保如下目录存在，不存在就创建</span></span><br><span class="line">mkdir -p /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf apache-zookeeper-3.5.9-bin.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】创建软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /export/server/zookeeper/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper数据存储目录</span></span><br><span class="line">dataDir=/export/server/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">server.1=node1:2888:3888</span><br><span class="line">server.2=node2:2888:3888</span><br><span class="line">server.3=node3:2888:3888</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】配置<code>myid</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建Zookeeper的数据目录</span></span><br><span class="line">mkdir /export/server/zookeeper/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 创建文件，并填入1</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件内填入1即可</span></span><br></pre></td></tr></table></figure></li><li><p>【在node2和node3上操作】，创建文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】将Zookeeper 复制到node2和node3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r apache-zookeeper-3.5.9 node2:`pwd`/</span><br><span class="line">scp -r apache-zookeeper-3.5.9 node3:`pwd`/</span><br></pre></td></tr></table></figure></li><li><p>【在node2上操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为2</span></span><br></pre></td></tr></table></figure></li><li><p>【在node3上操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为3</span></span><br></pre></td></tr></table></figure></li><li><p>【在node1、node2、node3上分别执行】启动Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令</span></span><br><span class="line">/export/server/zookeeper/bin/zkServer.sh start# 启动Zookeeper</span><br></pre></td></tr></table></figure></li><li><p>【在node1、node2、node3上分别执行】检查Zookeeper进程是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果中找到有：QuorumPeerMain 进程即可</span></span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】验证Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/export/server/zookeeper/zkCli.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到Zookeeper控制台中后，执行</span></span><br><span class="line">ls /</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如无报错即配置成功</span></span><br></pre></td></tr></table></figure></li></ol><p>至此Zookeeper安装完成</p><h1 id="Kafka集群安装部署"><a href="#Kafka集群安装部署" class="headerlink" title="Kafka集群安装部署"></a>Kafka集群安装部署</h1><h2 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h2><p>Kafka是一款<code>分布式的、去中心化的、高吞吐低延迟、订阅模式</code>的消息队列系统。</p><p>同RabbitMQ一样，Kafka也是消息队列。不过RabbitMQ多用于后端系统，因其更加专注于消息的延迟和容错。</p><p>Kafka多用于大数据体系，因其更加专注于数据的吞吐能力。</p><p>Kafka多数都是运行在分布式（集群化）模式下，所以课程将以3台服务器，来完成Kafka集群的安装部署。</p><h2 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h2><ol><li><p>确保已经跟随前面的视频，安装并部署了JDK和Zookeeper服务</p><blockquote><p>Kafka的运行依赖JDK环境和Zookeeper请确保已经有了JDK环境和Zookeeper</p></blockquote></li><li><p>【在node1操作】下载并上传Kafka的安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装包</span></span><br><span class="line">wget http://archive.apache.org/dist/kafka/2.4.1/kafka_2.12-2.4.1.tgz</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server# 此文件夹如果不存在需先创建</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf kafka_2.12-2.4.1.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】修改Kafka目录内的config目录内的<code>server.properties</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node1:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】将node1的kafka复制到node2和node3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node2同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node2:`pwd`/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node3同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node3:$PWD</span><br></pre></td></tr></table></figure></li><li><p>【在node2操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node2:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>【在node3操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node3:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>启动kafka</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请先确保Zookeeper已经启动了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：【前台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">/export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：【后台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">nohup /export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties 2&gt;&amp;1 &gt;&gt; /export/server/kafka/kafka-server.log &amp;</span><br></pre></td></tr></table></figure></li><li><p>验证Kafka启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在每一台服务器执行</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025174522.png" alt="image-20221025174522487"></p></li></ol><h2 id="测试Kafka能否正常使用"><a href="#测试Kafka能否正常使用" class="headerlink" title="测试Kafka能否正常使用"></a>测试Kafka能否正常使用</h2><ol><li>创建测试主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行，创建一个主题</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-topics.sh --create --zookeeper node1:2181 --replication-factor 1 --partitions 3 --topic test</span><br></pre></td></tr></table></figure><ol><li>运行测试，请在FinalShell中打开2个node1的终端页面</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开一个终端页面，启动一个模拟的数据生产者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-producer.sh --broker-list node1:9092 --topic test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再打开一个新的终端页面，在启动一个模拟的数据消费者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-consumer.sh --bootstrap-server node1:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure><h1 id="大数据集群（Hadoop生态）安装部署"><a href="#大数据集群（Hadoop生态）安装部署" class="headerlink" title="大数据集群（Hadoop生态）安装部署"></a>大数据集群（Hadoop生态）安装部署</h1><h2 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h2><p>1）Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>2）主要解决，海量数据的存储和海量数据的分析计算问题。</p><p>Hadoop HDFS 提供分布式海量数据存储能力</p><p>Hadoop YARN 提供分布式集群资源管理能力</p><p>Hadoop MapReduce 提供分布式海量数据计算能力</p><h3 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h3><ul><li>请确保完成了集群化环境前置准备章节的内容</li><li>即：JDK、SSH免密、关闭防火墙、配置主机名映射等前置操作</li></ul><h3 id="Hadoop集群角色"><a href="#Hadoop集群角色" class="headerlink" title="Hadoop集群角色"></a>Hadoop集群角色</h3><p>Hadoop生态体系中总共会出现如下进程角色：</p><ol><li>Hadoop HDFS的管理角色：Namenode进程（<code>仅需1个即可（管理者一个就够）</code>）</li><li>Hadoop HDFS的工作角色：Datanode进程（<code>需要多个（工人，越多越好，一个机器启动一个）</code>）</li><li>Hadoop YARN的管理角色：ResourceManager进程（<code>仅需1个即可（管理者一个就够）</code>）</li><li>Hadoop YARN的工作角色：NodeManager进程（<code>需要多个（工人，越多越好，一个机器启动一个）</code>）</li><li>Hadoop 历史记录服务器角色：HistoryServer进程（<code>仅需1个即可（功能进程无需太多1个足够）</code>）</li><li>Hadoop 代理服务器角色：WebProxyServer进程（<code>仅需1个即可（功能进程无需太多1个足够）</code>）</li><li>Zookeeper的进程：QuorumPeerMain进程（<code>仅需1个即可（Zookeeper的工作者，越多越好）</code>）</li></ol><h3 id="角色和节点分配"><a href="#角色和节点分配" class="headerlink" title="角色和节点分配"></a>角色和节点分配</h3><p>角色分配如下：</p><ol><li>node1:Namenode、Datanode、ResourceManager、NodeManager、HistoryServer、WebProxyServer、QuorumPeerMain</li><li>node2:Datanode、NodeManager、QuorumPeerMain</li><li>node3:Datanode、NodeManager、QuorumPeerMain</li></ol><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026202935.png" alt="image-20221026202935745"></p><h2 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h2><h3 id="调整虚拟机内存"><a href="#调整虚拟机内存" class="headerlink" title="调整虚拟机内存"></a>调整虚拟机内存</h3><p>如上图，可以看出node1承载了太多的压力。同时node2和node3也同时运行了不少程序</p><p>为了确保集群的稳定，需要对虚拟机进行内存设置。</p><p>请在VMware中，对：</p><ol><li>node1设置4GB或以上内存</li><li>node2和node3设置2GB或以上内存</li></ol><blockquote><p>大数据的软件本身就是集群化（一堆服务器）一起运行的。</p><p>现在我们在一台电脑中以多台虚拟机来模拟集群，确实会有很大的内存压力哦。</p></blockquote><h3 id="Zookeeper集群部署"><a href="#Zookeeper集群部署" class="headerlink" title="Zookeeper集群部署"></a>Zookeeper集群部署</h3><p>略</p><h3 id="Hadoop集群部署"><a href="#Hadoop集群部署" class="headerlink" title="Hadoop集群部署"></a>Hadoop集群部署</h3><ol><li><p>下载Hadoop安装包、解压、配置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 解压</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请确保目录/export/server存在</span></span><br><span class="line">tar -zxvf hadoop-3.3.0.tar.gz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 构建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：<code>hadoop-env.sh</code></p><blockquote><p>Hadoop的配置文件要修改的地方很多，请细心</p></blockquote><p>cd 进入到/export/server/hadoop/etc/hadoop，文件夹中，配置文件都在这里</p><p>修改hadoop-env.sh文件</p><blockquote><p>此文件是配置一些Hadoop用到的环境变量</p><p>这些是临时变量，在Hadoop运行时有用</p><p>如果要永久生效，需要写到/etc/profile中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件开头加入：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Java安装路径</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Hadoop安装路径</span></span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs配置文件路径</span></span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN配置文件路径</span></span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN 日志文件夹</span></span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs 日志文件夹</span></span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop的使用启动用户配置</span></span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br><span class="line">export YARN_PROXYSERVER_USER=root</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：<code>core-site.xml</code></p><p>如下，清空文件，填入如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>hdfs-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir.perm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>700<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where the NameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1,node2,node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>List of permitted DataNodes.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>268435456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.handler.count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/dn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>mapred-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_JOB_HISTORYSERVER_HEAPSIZE=1000</span><br><span class="line">export HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA</span><br></pre></td></tr></table></figure></li><li><p>配置：<code>mapred-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/done<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>yarn-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br></pre></td></tr></table></figure></li><li><p>配置：<code>yarn-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.web-proxy.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:8089<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>proxy server hostname and port<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where intermediate data is written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where logs are written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Default time (in seconds) to retain log files on the NodeManager Only applicable if log-aggregation is disabled.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Shuffle service that needs to be set for Map Reduce applications.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改workers文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全部内容如下</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>分发hadoop到其它机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行</span></span><br><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br></pre></td></tr></table></figure></li><li><p>在node2、node3执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure></li><li><p>创建所需目录</p><ul><li><p>在node1执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nn</span><br><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li><li><p>在node2执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li><li><p>在node3执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置环境变量</p><p>在node1、node2、node3修改/etc/profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure><p>执行<code>source /etc/profile</code>生效</p></li><li><p>格式化NameNode，在node1执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><blockquote><p>hadoop这个命令来自于：$HADOOP_HOME/bin中的程序</p><p>由于配置了环境变量PATH，所以可以在任意位置执行hadoop命令哦</p></blockquote></li><li><p>启动hadoop的hdfs集群，在node1执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure><blockquote><p>start-dfs.sh这个命令来自于：$HADOOP_HOME/sbin中的程序</p><p>由于配置了环境变量PATH，所以可以在任意位置执行start-dfs.sh命令哦</p></blockquote></li><li><p>启动hadoop的yarn集群，在node1执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-yarn.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-yarn.sh</span><br></pre></td></tr></table></figure></li><li><p>启动历史服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mapred --daemon start historyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure></li><li><p>启动web代理服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn-daemon.sh start proxyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="验证Hadoop集群运行情况"><a href="#验证Hadoop集群运行情况" class="headerlink" title="验证Hadoop集群运行情况"></a>验证Hadoop集群运行情况</h4><ol><li><p>在node1、node2、node3上通过jps验证进程是否都启动成功</p></li><li><p>验证HDFS，浏览器打开：<a href="http://node1:9870">http://node1:9870</a></p><p>创建文件test.txt，随意填入内容，并执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put test.txt /test.txt</span><br><span class="line"></span><br><span class="line">hadoop fs -cat /test.txt</span><br></pre></td></tr></table></figure></li><li><p>验证YARN，浏览器打开：<a href="http://node1:8088">http://node1:8088</a></p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件words.txt，填入如下内容</span></span><br><span class="line">itheima itcast hadoop</span><br><span class="line">itheima hadoop hadoop</span><br><span class="line">itheima itcast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件上传到HDFS中</span></span><br><span class="line">hadoop fs -put words.txt /words.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令验证YARN是否正常</span></span><br><span class="line">hadoop jar /export/server/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.0.jar wordcount -Dmapred.job.queue.name=root.root /words.txt /output</span><br></pre></td></tr></table></figure></li></ol><h1 id="大数据NoSQL数据库HBase集群部署"><a href="#大数据NoSQL数据库HBase集群部署" class="headerlink" title="大数据NoSQL数据库HBase集群部署"></a>大数据NoSQL数据库HBase集群部署</h1><h2 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h2><p>HBase 是一种<a href="https://so.csdn.net/so/search?q=分布式&amp;spm=1001.2101.3001.7020">分布式</a>、可扩展、支持海量数据存储的 NoSQL 数据库。</p><p>和Redis一样，HBase是一款KeyValue型存储的数据库。</p><p>不过和Redis设计方向不同</p><ul><li>Redis设计为少量数据，超快检索</li><li>HBase设计为海量数据，快速检索</li></ul><p>HBase在大数据领域应用十分广泛，现在我们来在node1、node2、node3上部署HBase集群。</p><h2 id="安装-12"><a href="#安装-12" class="headerlink" title="安装"></a>安装</h2><ol><li><p>HBase依赖Zookeeper、JDK、Hadoop（HDFS），请确保已经完成前面</p><ul><li>集群化软件前置准备（JDK）</li><li>Zookeeper</li><li>Hadoop</li><li>这些环节的软件安装</li></ul></li><li><p>【node1执行】下载HBase安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hbase/2.1.0/hbase-2.1.0-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf hbase-2.1.0-bin.tar.gz -C /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/hbase-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在28行配置JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在126行配置：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">意思表示，不使用HBase自带的Zookeeper，而是用独立Zookeeper</span></span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在任意行，比如26行，添加如下内容：</span></span><br><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/hbase-site.xml</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件的全部内容替换成如下内容：</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;!-- HBase数据在HDFS中的存放的路径 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;hdfs://node1:8020/hbase&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- Hbase的运行模式。false是单机模式，true是分布式模式。若为false,Hbase和Zookeeper会运行在同一个JVM里面 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ZooKeeper的地址 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;node1,node2,node3&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ZooKeeper快照的存储位置 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;/export/server/apache-zookeeper-3.6.0-bin/data&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--  V2.1版本，在分布式情况下, 设置为false --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/regionservers</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，分发hbase到其它机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /export/server/hbase-2.1.0 node2:/export/server/</span><br><span class="line">scp -r /export/server/hbase-2.1.0 node3:/export/server/</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3执行】，配置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure></li><li><p>【node1、node2、node3执行】，配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置在/etc/profile内，追加如下两行</span></span><br><span class="line">export HBASE_HOME=/export/server/hbase</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】启动HBase</p><blockquote><p>请确保：Hadoop HDFS、Zookeeper是已经启动了的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可使用</span></span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure><blockquote><p>由于我们配置了环境变量export PATH=$PATH:$HBASE_HOME/bin</p><p>start-hbase.sh即在$HBASE_HOME/bin内，所以可以无论当前目录在哪，均可直接执行</p></blockquote></li><li><p>验证HBase</p><p>浏览器打开：<a href="http://node1:16010，即可看到HBase的WEB">http://node1:16010，即可看到HBase的WEB</a> UI页面</p></li><li><p>简单测试使用HBase</p><p>【node1执行】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建表</span></span><br><span class="line">create &#x27;test&#x27;, &#x27;cf&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插入数据</span></span><br><span class="line">put &#x27;test&#x27;, &#x27;rk001&#x27;, &#x27;cf:info&#x27;, &#x27;itheima&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询数据</span></span><br><span class="line">get &#x27;test&#x27;, &#x27;rk001&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫描表数据</span></span><br><span class="line">scan &#x27;test&#x27;</span><br></pre></td></tr></table></figure></li></ol><h1 id="分布式内存计算Spark环境部署"><a href="#分布式内存计算Spark环境部署" class="headerlink" title="分布式内存计算Spark环境部署"></a>分布式内存计算Spark环境部署</h1><h2 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h2><p>本小节的操作，基于：<code>大数据集群（Hadoop生态）安装部署</code>环节中所构建的Hadoop集群</p><p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p><h2 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h2><p>Spark是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p><p>Spark在大数据体系是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p><p>在大数据领域广泛应用，是目前世界上使用最多的大数据分布式计算引擎。</p><p>我们将基于前面构建的Hadoop集群，部署Spark Standalone集群。</p><h2 id="安装-13"><a href="#安装-13" class="headerlink" title="安装"></a>安装</h2><ol><li><p>【node1执行】下载并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf spark-2.4.5-bin-hadoop2.7.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改名</span></span><br><span class="line">cd /export/server/spark/conf</span><br><span class="line">mv spark-env.sh.template spark-env.sh</span><br><span class="line">mv slaves.template slaves</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件，<code>spark-env.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置JAVA安装目录</span></span></span><br><span class="line">JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</span></span></span><br><span class="line">HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line">YARN_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定spark老大Master的IP和提交任务的通信端口</span></span></span><br><span class="line">export SPARK_MASTER_HOST=node1</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line"></span><br><span class="line">SPARK_MASTER_WEBUI_PORT=8080</span><br><span class="line">SPARK_WORKER_CORES=1</span><br><span class="line">SPARK_WORKER_MEMORY=1g</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件，<code>slaves</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】分发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node2:$PWD</span><br><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node3:$PWD</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3执行】设置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】启动Spark集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/export/server/spark/sbin/start-all.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止，可以</span></span><br><span class="line">/export/server/spark/sbin/stop-all.sh</span><br></pre></td></tr></table></figure></li><li><p>打开Spark监控页面，浏览器打开：<a href="http://node1:8081">http://node1:8081</a></p></li><li><p>【node1执行】提交测试任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/spark/bin/spark-submit --master spark://node1:7077 --class org.apache.spark.examples.SparkPi /export/server/spark/examples/jars/spark-examples_2.11-2.4.5.jar</span><br></pre></td></tr></table></figure></li></ol><h1 id="分布式内存计算Flink环境部署"><a href="#分布式内存计算Flink环境部署" class="headerlink" title="分布式内存计算Flink环境部署"></a>分布式内存计算Flink环境部署</h1><h2 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h2><p>本小节的操作，基于：<code>大数据集群（Hadoop生态）安装部署</code>环节中所构建的Hadoop集群</p><p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p><h2 id="简介-12"><a href="#简介-12" class="headerlink" title="简介"></a>简介</h2><p>Flink同Spark一样，是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p><p>Flink在大数据体系同样是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p><p>在大数据领域广泛应用，是目前世界上除去Spark以外，应用最为广泛的分布式计算引擎。</p><p>我们将基于前面构建的Hadoop集群，部署Flink Standalone集群</p><p>Spark更加偏向于离线计算而Flink更加偏向于实时计算。</p><h2 id="安装-14"><a href="#安装-14" class="headerlink" title="安装"></a>安装</h2><ol><li><p>【node1操作】下载安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/flink/flink-1.10.0/flink-1.10.0-bin-scala_2.11.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf flink-1.10.0-bin-scala_2.11.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】修改配置文件，<code>conf/flink-conf.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jobManager 的IP地址</span></span><br><span class="line"><span class="attr">jobmanager.rpc.address:</span> <span class="string">node1</span></span><br><span class="line"><span class="comment"># JobManager 的端口号</span></span><br><span class="line"><span class="attr">jobmanager.rpc.port:</span> <span class="number">6123</span></span><br><span class="line"><span class="comment"># JobManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">jobmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"><span class="comment"># TaskManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">taskmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"><span class="comment"># 每个 TaskManager 提供的任务 slots 数量大小</span></span><br><span class="line"><span class="attr">taskmanager.numberOfTaskSlots:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#是否进行预分配内存，默认不进行预分配，这样在我们不使用flink集群时候不会占用集群资源</span></span><br><span class="line"><span class="attr">taskmanager.memory.preallocate:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 程序默认并行计算的个数</span></span><br><span class="line"><span class="attr">parallelism.default:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#JobManager的Web界面的端口（默认：8081）</span></span><br><span class="line"><span class="attr">jobmanager.web.port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></li><li><p>【node1操作】，修改配置文件，<code>conf/slaves</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】分发Flink安装包到其它机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line">scp -r flink-1.10.0 node2:`pwd`/</span><br><span class="line">scp -r flink-1.10.0 node3:`pwd`/</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】，启动Flink</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/flink/bin/start-cluster.sh</span><br></pre></td></tr></table></figure></li><li><p>验证Flink启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器打开</span></span><br><span class="line">http://node1:8081</span><br></pre></td></tr></table></figure></li><li><p>提交测试任务</p><p>【node1执行】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/flink/bin/flink run /export/server/flink-1.10.0/examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure></li></ol><h1 id="运维监控Zabbix部署"><a href="#运维监控Zabbix部署" class="headerlink" title="运维监控Zabbix部署"></a>运维监控Zabbix部署</h1><h2 id="简介-13"><a href="#简介-13" class="headerlink" title="简介"></a>简介</h2><p>Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。</p><p>Zabbix 是一个==企业级分布式开源监控解决方案==。</p><p>Zabbix 软件能够==监控==众多网络参数和服务器的==健康度、完整性==。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</p><h2 id="安装-15"><a href="#安装-15" class="headerlink" title="安装"></a>安装</h2><blockquote><p> 安装整体步骤:</p></blockquote><ol><li>准备Linux 服务器(虚拟机)</li><li>安装Mysql</li><li>安装zabbix( 包含 server  agent  web)</li><li>配置 mysql, 为zabbix创建表结构</li><li>配置zabbix server</li><li>启动并开启开机自启动</li></ol><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175324.png" alt="1574338996145"></p><h3 id="安装前准备-Mysql"><a href="#安装前准备-Mysql" class="headerlink" title="安装前准备 - Mysql"></a>安装前准备 - Mysql</h3><p>安装ZabbixServer需要先安装好<code>Mysql</code>数据库</p><p>课程使用<code>Mysql 5.7</code></p><p>安装步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Mysql设置开机启动</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查Mysql服务状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次启动mysql，会在日志文件中生成root用户的一个随机密码，使用下面命令查看该密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改root用户密码</span></span><br><span class="line">mysql -u root -p -h localhost</span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Root!@#$&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你想设置简单密码，需要降低Mysql的密码安全级别</span></span><br><span class="line">set global validate_password_policy=LOW; # 密码安全级别低</span><br><span class="line">set global validate_password_length=4; # 密码长度最低4位即可</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;root&#x27;</span>;</span></span><br></pre></td></tr></table></figure><h3 id="安装Zabbix-Server-和-Zabbix-Agent"><a href="#安装Zabbix-Server-和-Zabbix-Agent" class="headerlink" title="安装Zabbix Server 和 Zabbix Agent"></a>安装Zabbix Server 和 Zabbix Agent</h3><blockquote><p>初始安装，我们先安装ZabbixServer以及在Server本机安装Agent。</p></blockquote><p>打开官网下载页面：<a href="https://www.zabbix.com/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql">https://www.zabbix.com/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql</a></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175330.png" alt="1571981197131"></p><p>选择对应的版本，然后再下面官网给出了具体的安装命令，使用<code>rpm</code>和<code>yum</code>来进行安装。</p><p>需要有网络。</p><p><code>以下内容来自官方页面</code></p><h4 id="a-安装Zabbix-yum库"><a href="#a-安装Zabbix-yum库" class="headerlink" title="a. 安装Zabbix yum库"></a>a. 安装Zabbix yum库</h4><p><a href="https://www.zabbix.com/documentation/4.0/manual/installation/install_from_packages">documentation</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure><h4 id="b-安装Zabbix-Server、前端、Agent"><a href="#b-安装Zabbix-Server、前端、Agent" class="headerlink" title="b. 安装Zabbix Server、前端、Agent"></a>b. 安装Zabbix Server、前端、Agent</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只需要安装Agent的话</span></span><br><span class="line">yum -y install zabbix-agent</span><br></pre></td></tr></table></figure><h4 id="c-初始化Mysql数据库"><a href="#c-初始化Mysql数据库" class="headerlink" title="c. 初始化Mysql数据库"></a>c. 初始化Mysql数据库</h4><p><a href="https://www.zabbix.com/documentation/4.0/manual/appendix/install/db_scripts">documentation</a></p><blockquote><p>在Mysql中操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录Mysql 数据库</span></span><br><span class="line">mysql -uroot -pYourPassword</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者: grant all privileges on zabbix.* to zabbix@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit;</span></span><br></pre></td></tr></table></figure><p>测试在Zabbix Server服务器上能否远程登录Mysql，如果可以登录继续向下走。</p><p>Import initial schema and data. You will be prompted to enter your newly created password.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span></span><br></pre></td></tr></table></figure><h4 id="d-为Zabbix-Server配置数据库"><a href="#d-为Zabbix-Server配置数据库" class="headerlink" title="d. 为Zabbix Server配置数据库"></a>d. 为Zabbix Server配置数据库</h4><p>Edit file /etc/zabbix/zabbix_server.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DBPassword=password</span><br><span class="line">DBHost=mysql-host-ip-or-hostname</span><br></pre></td></tr></table></figure><h4 id="e-配置Zabbix的PHP前端"><a href="#e-配置Zabbix的PHP前端" class="headerlink" title="e. 配置Zabbix的PHP前端"></a>e. 配置Zabbix的PHP前端</h4><p>Edit file <code>/etc/httpd/conf.d/zabbix.conf</code>, uncomment and set the right timezone for you.<code># php_value date.timezone Asia/Shanghai</code></p><p>Start Zabbix server and agent processes and make it start at system boot:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent httpd # 启动、重启</span><br><span class="line">systemctl enable zabbix-server zabbix-agent httpd  # 开机自启</span><br></pre></td></tr></table></figure><p>Now your Zabbix server is up and running!</p><h3 id="配置zabbix-前端（WEB-UI）"><a href="#配置zabbix-前端（WEB-UI）" class="headerlink" title="配置zabbix 前端（WEB UI）"></a>配置zabbix 前端（WEB UI）</h3><p><strong>打开:<code>http://192.168.88.131/zabbix</code></strong></p><p>即可进入Zabbix页面，在首次打开的时候，会进入设置页面，如图：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175338.png" alt="1571993951841"></p><p><strong>点击下一步，会检查相应的设置是否都正常</strong></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175341.png" alt="1571994018126"></p><p>如果一切正常，点击下一步。</p><p><strong>配置DB连接</strong></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175344.png" alt="1571994069689"></p><p>按具体情况填写即可</p><p><strong>配置Server细节</strong></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175347.png" alt="1571994111921"></p><p>具体配置即可，Name表示这个Zabbix服务的名字，这里起名叫<code>ITHEIMA-TEST</code></p><p><strong>安装前总结预览</strong></p><p>检查确认没有问题就下一步</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175349.png" alt="1571994206902"></p><p><strong>配置完成</strong></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175351.png" alt="1571994221531"></p><p><strong>初始管理员账户Admin密码zabbix</strong></p><p>输入账户密码后，就能进入zabbix页面了。</p><p>如下图：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175354.png" alt="1571994287036"></p><p>现在是一个崭新的zabbix等待我们去探索。</p><h1 id="运维监控Grafana部署"><a href="#运维监控Grafana部署" class="headerlink" title="运维监控Grafana部署"></a>运维监控Grafana部署</h1><h2 id="简介-14"><a href="#简介-14" class="headerlink" title="简介"></a>简介</h2><h2 id="安装-16"><a href="#安装-16" class="headerlink" title="安装"></a>安装</h2><h3 id="部署形式"><a href="#部署形式" class="headerlink" title="部署形式"></a>部署形式</h3><p><code>Grafana</code>支持两种部署形式</p><ol><li>自行部署, 可以部署在操作系统之上. 自行提供服务器, 域名等.</li><li><code>Grafana</code>官方托管. 无需安装, 在线注册即可得到一个专属于自己的<code>Grafana</code>, 但是要花钱的. 是一种<code>SaaS</code>服务</li></ol><p>我们课程选择方式1</p><h3 id="安装-17"><a href="#安装-17" class="headerlink" title="安装"></a>安装</h3><p><code>Grafana</code>支持常见的绝大多数操作系统, 如<code>windows</code> <code>mac</code> <code>linux</code> 同时也支持部署在<code>docker</code>中.</p><p>大多数情况下, <code>Grafana</code>都是部署在<code>linux</code>服务器之上. 所以本课程也是基于<code>Linux</code>系统来讲解.</p><p>对<code>windows</code> <code>mac</code>系统 或 <code>docker</code>部署有兴趣的同学, 请参考:  <a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></p><p>我们部署<code>Grafana</code>可以使用<code>YUM</code>来进行部署.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件</span></span><br><span class="line">vim /etc/yum.repos.d/grafana.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下面的内容复制进去</span></span><br><span class="line">[grafana]</span><br><span class="line">name=grafana</span><br><span class="line">baseurl=https://packages.grafana.com/oss/rpm</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.grafana.com/gpg.key</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后安装</span></span><br><span class="line">yum install grafana</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p><code>grafana-server</code>具有许多配置选项，这些选项可以在<code>.ini</code>配置文件中指定，也可以使用环境变量指定。</p><blockquote><p> <strong>Note.</strong> <code>Grafana</code> needs to be restarted for any configuration changes to take effect. </p></blockquote><h4 id="配置文件注释"><a href="#配置文件注释" class="headerlink" title="配置文件注释"></a>配置文件注释</h4><p><code>;</code>符号在<code>.ini</code>文件中全局表示注释 ()</p><h4 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h4><p>如果是自己解压安装, 或者自行编译的方式安装, 配置文件在:</p><ul><li>默认: <code>$WORKING_DIR/conf/defaults.ini</code></li><li>自定义:<code>$WORKING_DIR/conf/custom.ini</code></li><li>自定义配置文件路径可以被参数<code>--config</code>覆盖</li></ul><blockquote><p>对于<code>YUM</code> <code>RPM</code> 安装的方式, 配置文件在: <code>/etc/grafana/grafana.ini</code></p></blockquote><h4 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h4><p>可以使用以下语法使用环境变量来覆盖配置文件中的所有选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GF_&lt;SectionName&gt;_&lt;KeyName&gt;</span><br></pre></td></tr></table></figure><p>其中<code>SectionName</code>是方括号内的文本。一切都应为大写，<code>.</code>应替换为<code>_</code> 例如，给定以下配置设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default section</span></span><br><span class="line">instance_name = <span class="variable">$&#123;HOSTNAME&#125;</span></span><br><span class="line"></span><br><span class="line">[security]</span><br><span class="line">admin_user = admin</span><br><span class="line"></span><br><span class="line">[auth.google]</span><br><span class="line">client_secret = 0ldS3cretKey</span><br></pre></td></tr></table></figure><p>Then you can override them using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GF_DEFAULT_INSTANCE_NAME=my-instance</span><br><span class="line"><span class="built_in">export</span> GF_SECURITY_ADMIN_USER=<span class="literal">true</span><span class="comment"># GF_ 固定 SECURITY 是SectionName ADMIN_USER 是配置的key 转大写 . 转 _</span></span><br><span class="line"><span class="built_in">export</span> GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey</span><br></pre></td></tr></table></figure><h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><p><code>Grafana</code>支持使用<code>Sqlite3</code> <code>Postgresql</code> <code>Mysql</code>这三种数据库作为其<code>元数据</code>的存储.</p><p>我们课程使用<code>Mysql</code>. 和<code>zabbix</code>的元数据mysql共用一个实例</p><p>只需要配置如下内容即可:</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175713.png" alt="1573635500521"></p><p>并登陆mysql, 执行:</p><p><code>create database grafana CHARACTER SET utf8 COLLATE utf8_general_ci;</code></p><p>创建<code>Grafana</code>使用的数据库作为元数据存储.</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start grafana-server</span><br><span class="line">systemctl <span class="built_in">enable</span> grafana-server</span><br></pre></td></tr></table></figure><p>浏览器打开：<a href="http://node1:3000">http://node1:3000</a></p><p>默认账户密码：admin/admin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在Linux上部署各类软件&quot;&gt;&lt;a href=&quot;#在Linux上部署各类软件&quot; class=&quot;headerlink&quot; title=&quot;在Linux上部署各类软件&quot;&gt;&lt;/a&gt;在Linux上部署各类软件&lt;/h1&gt;&lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; cla</summary>
      
    
    
    
    <category term="linux" scheme="https://bangwu2001.github.io/categories/linux/"/>
    
    
    <category term="计算机基础" scheme="https://bangwu2001.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>六、会员基础功能实现</title>
    <link href="https://bangwu2001.github.io/2023/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/06%2012306%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%91%98%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://bangwu2001.github.io/2023/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/06%2012306%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%91%98%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-12-13T14:58:00.000Z</published>
    <updated>2023-12-13T14:57:09.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12306会员基础功能实现"><a href="#12306会员基础功能实现" class="headerlink" title="12306会员基础功能实现"></a>12306会员基础功能实现</h1><p>主要目的：完成前后端，单表增删改查功能的开发</p><h2 id="乘车人-数据库表的设计"><a href="#乘车人-数据库表的设计" class="headerlink" title="乘车人 数据库表的设计"></a>乘车人 数据库表的设计</h2><h3 id="乘客表的设计"><a href="#乘客表的设计" class="headerlink" title="乘客表的设计"></a>乘客表的设计</h3><p><code>member</code>表代表系统登录用户的信息，对于乘车系统，同一个用户不仅可以为自己，也可以为其他人购买车票</p><p>所以设计一张新表<code>passenger</code>表示对应乘客信息，与车票对应</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `passenger` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `member_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;会员id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `id_card` <span class="type">varchar</span>(<span class="number">18</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;身份证&#x27;</span>,</span><br><span class="line">  `type` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;旅客类型|枚举[PassengerTypeEnum]&#x27;</span>,</span><br><span class="line">  `create_time` datetime(<span class="number">3</span>) comment <span class="string">&#x27;新增时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime(<span class="number">3</span>) comment <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (`id`),</span><br><span class="line">  index `member_id_index` (`member_id`)</span><br><span class="line">) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;乘车人&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="利用Mybatis生成器生成乘车人表对应持久层代码"><a href="#利用Mybatis生成器生成乘车人表对应持久层代码" class="headerlink" title="利用Mybatis生成器生成乘车人表对应持久层代码"></a>利用Mybatis生成器生成乘车人表对应持久层代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;Mysql&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--覆盖生成XML文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的实体类添加toString()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不生成注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据源，需要根据自己的项目修改 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/train_member?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;train_member&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;wu123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- domain类的位置 targetProject是相对pom.xml的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.domain&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper xml的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/resources&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper类的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;table tableName=&quot;member&quot; domainObjectName=&quot;Member&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;passenger&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Passenger&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;table tableName=&quot;ticket&quot; domainObjectName=&quot;Ticket&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="乘客类型枚举类的设计"><a href="#乘客类型枚举类的设计" class="headerlink" title="乘客类型枚举类的设计"></a>乘客类型枚举类的设计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PassengerTypeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    ADULT(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;成人&quot;</span>),</span><br><span class="line">    CHILD(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;儿童&quot;</span>),</span><br><span class="line">    STUDENT(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;学生&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    PassengerTypeEnum(String code, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;HashMap&lt;String,String&gt;&gt; <span class="title function_">getEnumList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;HashMap&lt;String, String&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (PassengerTypeEnum anEnum : EnumSet.allOf(PassengerTypeEnum.class)) &#123;</span><br><span class="line">            HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>,anEnum.code);</span><br><span class="line">            map.put(<span class="string">&quot;desc&quot;</span>,anEnum.desc);</span><br><span class="line">            list.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增乘车人接口设计"><a href="#新增乘车人接口设计" class="headerlink" title="新增乘车人接口设计"></a>新增乘车人接口设计</h2><h3 id="设计接口请求类"><a href="#设计接口请求类" class="headerlink" title="设计接口请求类"></a>设计接口请求类</h3><p>请求实体类与数据库对应的Po实体类一致，并利用Validation进行参数校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增乘车人接口对应请求实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerSaveReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//@NotBlank不能用来修饰long类型数据</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;【会员ID】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【乘客姓名】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【乘客身份证号】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【乘客类型】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务层代码"><a href="#服务层代码" class="headerlink" title="服务层代码"></a>服务层代码</h3><p>新增<code>IPassengerService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPassengerService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增<code>PassengerServiceImpl</code>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IPassengerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PassengerMapper passengerMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span> &#123;</span><br><span class="line">        <span class="comment">//1.将请求类转换为po对象</span></span><br><span class="line">        <span class="type">Passenger</span> <span class="variable">savePassenger</span> <span class="operator">=</span> BeanUtil.copyProperties(passenger, Passenger.class);</span><br><span class="line">        <span class="comment">//2.设置相关字段</span></span><br><span class="line">        <span class="comment">//乘车人ID，以及记录创建时间和更新时间,ID利用雪花算法生成</span></span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line">        savePassenger.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">        savePassenger.setCreateTime(now);</span><br><span class="line">        savePassenger.setUpdateTime(now);</span><br><span class="line">        <span class="comment">//3.存入数据库</span></span><br><span class="line">        passengerMapper.insert(savePassenger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层代码"><a href="#控制层代码" class="headerlink" title="控制层代码"></a>控制层代码</h3><p>新增<code>PassengerController</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/passenger&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IPassengerService passengerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> PassengerSaveReq req)</span>&#123;</span><br><span class="line">        passengerService.save(req);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpClient测试"><a href="#HttpClient测试" class="headerlink" title="HttpClient测试"></a>HttpClient测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">###新增乘车人</span><br><span class="line">POST http://localhost:8001/member/passenger/save</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;memberId&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;张飞&quot;,</span><br><span class="line">  &quot;idCard&quot;: &quot;33456789&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用HttpClient保存登录用户信息"><a href="#使用HttpClient保存登录用户信息" class="headerlink" title="使用HttpClient保存登录用户信息"></a>使用HttpClient保存登录用户信息</h2><p>在进行网关<code>gateway</code>请求时，由于有<code>JWT</code>登录校验过滤器，所以其他接口测试时，若请求头不带上<code>token</code>字段，则会被拦截</p><p>可以在HttpClient中，登录请求之后，为整个文件中所有其他请求的请求头加上<code>token</code>字段</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">###登录</span><br><span class="line">POST http://localhost:8000/member/member/login</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;mobile&quot;:&quot;12345678908&quot;,</span><br><span class="line">  &quot;code&quot;:&quot;8888&quot;</span><br><span class="line">&#125;</span><br><span class="line">//以下语句将token数据进行全局缓存</span><br><span class="line">&gt; &#123;%</span><br><span class="line">  client.log(JSON.stringify(response.body));</span><br><span class="line">  client.log(JSON.stringify(response.body.content.token));</span><br><span class="line">  client.global.set(&quot;token&quot;,response.body.content.token)</span><br><span class="line">%&#125;</span><br></pre></td></tr></table></figure><p>在其他http请求中可以直接通过<code>&#123;&#123;token&#125;&#125;</code>引用缓存中的token`值</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">###其他测试</span><br><span class="line">GET http://localhost:8000/member/member/count</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br><span class="line"></span><br><span class="line">###新增乘车人</span><br><span class="line">POST http://localhost:8000/member/passenger/save</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;memberId&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;张飞&quot;,</span><br><span class="line">  &quot;idCard&quot;: &quot;33456789&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用线程本地变量存储会员信息"><a href="#使用线程本地变量存储会员信息" class="headerlink" title="使用线程本地变量存储会员信息"></a>使用线程本地变量存储会员信息</h2><p><strong>背景:</strong>新增乘车人记录时，实体类里面有个属性是当前登录的会员ID，如何将当前登录用户的信息保存在本地？</p><p><strong>方案</strong>：在接口入口处获取会员信息，并放在线程本地变量，则在controller、service中都可以直接从线程本地变量获取会员信息</p><p><strong>考点</strong>：此处可能面试会涉及到<code>ThreadLocal</code>线程本地变量的概念和理解</p><h3 id="ThreadLocal存储登录会员信息"><a href="#ThreadLocal存储登录会员信息" class="headerlink" title="ThreadLocal存储登录会员信息"></a>ThreadLocal存储登录会员信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginMemberContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LoginMemberContext.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;MemberLoginResp&gt; member = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MemberLoginResp <span class="title function_">getMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> member.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setMember</span><span class="params">(MemberLoginResp member)</span> &#123;</span><br><span class="line">        LoginMemberContext.member.set(member);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//memberId频繁使用，单独抽象成一个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> member.get().getId();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;获取登录会员信息异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC过滤器将会员信息存入线程本地变量"><a href="#SpringMVC过滤器将会员信息存入线程本地变量" class="headerlink" title="SpringMVC过滤器将会员信息存入线程本地变量"></a>SpringMVC过滤器将会员信息存入线程本地变量</h3><p>请求通过网关过滤器之后，经过网关路由，进入其他微服务时，其他微服务内部应该将JWT解析得到payloads，获取当前登录会员信息，并存储到对应的线程本地变量中，以便后续代码逻辑使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器：Spring框架特有的，常用于登录校验，权限校验，请求日志打印</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(MemberInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;MemberInterceptor开始&quot;</span>);</span><br><span class="line">        <span class="comment">//获取header的token参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(token)) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;获取会员登录token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">loginMember</span> <span class="operator">=</span> JwtUtil.getJSONObject(token);</span><br><span class="line">            LOG.info(<span class="string">&quot;当前登录会员：&#123;&#125;&quot;</span>, loginMember);</span><br><span class="line">            <span class="type">MemberLoginResp</span> <span class="variable">member</span> <span class="operator">=</span> JSONUtil.toBean(loginMember, MemberLoginResp.class);</span><br><span class="line">            <span class="comment">//会员信息存储在线程本地变量</span></span><br><span class="line">            LoginMemberContext.setMember(member);</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">&quot;MemberInterceptor结束&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC注册对应过滤器"><a href="#SpringMVC注册对应过滤器" class="headerlink" title="SpringMVC注册对应过滤器"></a>SpringMVC注册对应过滤器</h3><p>在<code>member</code>模块下编写<code>SpringMVC</code>的配置类，配置登录拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Resource</span></span><br><span class="line">   MemberInterceptor memberInterceptor;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 路径不要包含context-path,添加白名单</span></span><br><span class="line">       registry.addInterceptor(memberInterceptor)</span><br><span class="line">               .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">               .excludePathPatterns(</span><br><span class="line">                       <span class="string">&quot;/hello&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/member/send-code&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/member/login&quot;</span></span><br><span class="line">               );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改新增乘客服务层方法"><a href="#修改新增乘客服务层方法" class="headerlink" title="修改新增乘客服务层方法"></a>修改新增乘客服务层方法</h3><p><code>memeberID</code>此时无需从前端传入，直接从线程本地变量读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span> &#123;</span><br><span class="line">    <span class="comment">//1.将请求类转换为po对象</span></span><br><span class="line">    <span class="type">Passenger</span> <span class="variable">savePassenger</span> <span class="operator">=</span> BeanUtil.copyProperties(passenger, Passenger.class);</span><br><span class="line">    <span class="comment">//2.会员ID通过线程本地变量获取</span></span><br><span class="line">    savePassenger.setMemberId(LoginMemberContext.getId());</span><br><span class="line">    <span class="comment">//3.设置相关字段</span></span><br><span class="line">    <span class="comment">//乘车人ID，以及记录创建时间和更新时间,ID利用雪花算法生成</span></span><br><span class="line">    <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line">    savePassenger.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">    savePassenger.setCreateTime(now);</span><br><span class="line">    savePassenger.setUpdateTime(now);</span><br><span class="line">    <span class="comment">//4.存入数据库</span></span><br><span class="line">    passengerMapper.insert(savePassenger);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘车人列表查询后端接口"><a href="#乘车人列表查询后端接口" class="headerlink" title="乘车人列表查询后端接口"></a>乘车人列表查询后端接口</h2><h3 id="新增查询请求参数对应实体类"><a href="#新增查询请求参数对应实体类" class="headerlink" title="新增查询请求参数对应实体类"></a>新增查询请求参数对应实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定会员对应的乘车人列表请求实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增响应结果对应实体类"><a href="#新增响应结果对应实体类" class="headerlink" title="新增响应结果对应实体类"></a>新增响应结果对应实体类</h3><p>对于规范而言，domain中的po对象一般最好只在持久层使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryResp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询乘车人列表服务层开发"><a href="#查询乘车人列表服务层开发" class="headerlink" title="查询乘车人列表服务层开发"></a>查询乘车人列表服务层开发</h3><p><code>IPassengerService</code>中新增抽象方法<code>queryList</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span>;</span><br></pre></td></tr></table></figure><p><code>PassengerServiceImpl</code>中新增抽象方法重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//1.条件查询</span></span><br><span class="line">    <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">    PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">        criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">    <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充说明：</strong></p><p>这个位置之所以写的比较复杂，是为了让服务层代码能够更加通用，对于用户界面而言，是查询当前登录用户对应的所有乘车人列表；但是，对于控台管理系统管理员而言，其需要查询所有的乘车人列表</p><h3 id="控制层开发"><a href="#控制层开发" class="headerlink" title="控制层开发"></a>控制层开发</h3><p>前端无需传入任何参数，会员ID通过线程本地变量获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;List&lt;PassengerQueryResp&gt;&gt; <span class="title function_">queryList</span><span class="params">(<span class="meta">@Valid</span> PassengerQueryReq req)</span>&#123;</span><br><span class="line">        req.setMemberId(LoginMemberContext.getId());</span><br><span class="line">        List&lt;PassengerQueryResp&gt; passengerQueryRespList = passengerService.queryList(req);</span><br><span class="line">        CommonResp&lt;List&lt;PassengerQueryResp&gt;&gt; commonResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commonResp.setContent(passengerQueryRespList);</span><br><span class="line">        <span class="keyword">return</span> commonResp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="http测试"><a href="#http测试" class="headerlink" title="http测试"></a>http测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###乘车人列表查询</span><br><span class="line">GET http://localhost:8000/member/passenger/query-list</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis分页插件PageHelper的使用"><a href="#Mybatis分页插件PageHelper的使用" class="headerlink" title="Mybatis分页插件PageHelper的使用"></a>Mybatis分页插件PageHelper的使用</h2><h3 id="引入PageHelper依赖"><a href="#引入PageHelper依赖" class="headerlink" title="引入PageHelper依赖"></a>引入PageHelper依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PageHelper的用法"><a href="#PageHelper的用法" class="headerlink" title="PageHelper的用法"></a>PageHelper的用法</h3><p>在SQL查询语句之前的上一行加上如下语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PageHelper分页</span></span><br><span class="line">PageHelper.startPage(页码,分页大小);</span><br></pre></td></tr></table></figure><h3 id="PassengerService代码变化"><a href="#PassengerService代码变化" class="headerlink" title="PassengerService代码变化"></a>PassengerService代码变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//1.条件查询</span></span><br><span class="line">    <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">    PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">        criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// PageHelper分页</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">    <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集成PageHelper实现后端分页"><a href="#集成PageHelper实现后端分页" class="headerlink" title="集成PageHelper实现后端分页"></a>集成PageHelper实现后端分页</h2><h3 id="分页查询请求实体类的创建"><a href="#分页查询请求实体类的创建" class="headerlink" title="分页查询请求实体类的创建"></a>分页查询请求实体类的创建</h3><p>整个项目中，可能后续会有很多地方会用到分页查询，为了方便扩展，我们将分页参数单独抽象成一个实体类，让其他有分页查询需求的请求对应实体类继承自分页实体类，实现其他查询的分页功能</p><p>在<code>common</code>模块下的<code>com.bang.train.common.req</code>下新建<code>PageReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageReq</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;【页码】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;【每页条数】不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 100, message = &quot;【每页条数】不能超过100&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乘客请求实体类继承自分页实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定会员对应的乘车人列表请求实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryReq</span> <span class="keyword">extends</span> <span class="title class_">PageReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改PassengerServiceImpl"><a href="#修改PassengerServiceImpl" class="headerlink" title="修改PassengerServiceImpl"></a>修改PassengerServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//1.条件查询</span></span><br><span class="line">    <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">    PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">        criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// PageHelper分页</span></span><br><span class="line">    PageHelper.startPage(req.getPage(),req.getSize());</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">    <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写分页查询结果实体类"><a href="#编写分页查询结果实体类" class="headerlink" title="编写分页查询结果实体类"></a>编写分页查询结果实体类</h3><p>实体类应该包含总条数以及当前页数据列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResp</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页的列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PassengerServiceImpl修改"><a href="#PassengerServiceImpl修改" class="headerlink" title="PassengerServiceImpl修改"></a>PassengerServiceImpl修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResp&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">        <span class="comment">//1.条件查询</span></span><br><span class="line">        <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">        PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">            criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.PageHelper分页</span></span><br><span class="line">        PageHelper.startPage(req.getPage(),req.getSize());</span><br><span class="line">        <span class="comment">//3.查询</span></span><br><span class="line">        List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">        <span class="comment">//4.获取总页数和总条数</span></span><br><span class="line">        PageInfo&lt;Passenger&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(passengerList);</span><br><span class="line">        LOG.info(<span class="string">&quot;总行数:&#123;&#125;&quot;</span>,pageInfo.getTotal());</span><br><span class="line">        LOG.info(<span class="string">&quot;总页数:&#123;&#125;&quot;</span>,pageInfo.getPages());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">        List&lt;PassengerQueryResp&gt; passengerQueryRespList = BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">        <span class="comment">//4.封装成分页查询结果</span></span><br><span class="line">        PageResp&lt;PassengerQueryResp&gt; pageResp = <span class="keyword">new</span> <span class="title class_">PageResp</span>&lt;&gt;();</span><br><span class="line">        pageResp.setTotal(pageInfo.getTotal());</span><br><span class="line">        pageResp.setList(passengerQueryRespList);</span><br><span class="line">        <span class="keyword">return</span> pageResp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="PassengerController修改"><a href="#PassengerController修改" class="headerlink" title="PassengerController修改"></a>PassengerController修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query-list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;PageResp&lt;PassengerQueryResp&gt;&gt; <span class="title function_">queryList</span><span class="params">(<span class="meta">@Valid</span> PassengerQueryReq req)</span>&#123;</span><br><span class="line">    req.setMemberId(LoginMemberContext.getId());</span><br><span class="line">    PageResp&lt;PassengerQueryResp&gt; pageResp = passengerService.queryList(req);</span><br><span class="line">    CommonResp&lt;PageResp&lt;PassengerQueryResp&gt;&gt; commonResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commonResp.setContent(pageResp);</span><br><span class="line">    <span class="keyword">return</span> commonResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http测试-1"><a href="#http测试-1" class="headerlink" title="http测试"></a>http测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###乘车人列表查询</span><br><span class="line">GET http://localhost:8000/member/passenger/query-list?page=1&amp;size=50</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="解决Long精度丢失的问题"><a href="#解决Long精度丢失的问题" class="headerlink" title="解决Long精度丢失的问题"></a>解决Long精度丢失的问题</h2><p>不同的语言，虽然都有int long等类型，但他们的精度不太一样，在数据传递时需要特别注意精度丢失。</p><p>在本项目中乘车查询数据返回给前端时，乘客id和membertId字段的数据精度会丢失</p><p>解决方法：将long传成string</p><p>在相关的返回结果实体类的对应字段上加上如下注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize(using= ToStringSerializer.class)</span></span><br></pre></td></tr></table></figure><p><strong>乘客数据查询结果返回实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryResp</span> &#123;</span><br><span class="line">    <span class="comment">//对应字段转换为字符串</span></span><br><span class="line">    <span class="meta">@JsonSerialize(using= ToStringSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@JsonSerialize(using= ToStringSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">//日期格式转换</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘车人编辑接口开发"><a href="#乘车人编辑接口开发" class="headerlink" title="乘车人编辑接口开发"></a>乘车人编辑接口开发</h2><p>乘车人编辑和乘车人新增可以向后端同一个接口进行访问，后端可以共用同一套代码，只是对于乘车人新增而言，前端的请求数据中ID为空，对于编辑而言，前端的请求数据中ID不为空，在服务层可以依据此区别做不同的处理</p><p><code>PassengerServiceImpl</code>中代码的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span> &#123;</span><br><span class="line">    <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.将请求类转换为po对象</span></span><br><span class="line">    <span class="type">Passenger</span> <span class="variable">savePassenger</span> <span class="operator">=</span> BeanUtil.copyProperties(passenger, Passenger.class);</span><br><span class="line">    <span class="comment">//2.会员ID通过线程本地变量获取</span></span><br><span class="line">    savePassenger.setMemberId(LoginMemberContext.getId());</span><br><span class="line">    <span class="comment">//3.设置相关字段</span></span><br><span class="line">    <span class="comment">//4.依据请求参数中ID是否为空，判断时乘车人新增业务还是乘车人编辑业务</span></span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(savePassenger.getId()))&#123;<span class="comment">//新增业务</span></span><br><span class="line">        <span class="comment">//乘车人ID，以及记录创建时间和更新时间,ID利用雪花算法生成</span></span><br><span class="line">        savePassenger.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">        savePassenger.setCreateTime(now);</span><br><span class="line">        savePassenger.setUpdateTime(now);</span><br><span class="line">        <span class="comment">//存入数据库</span></span><br><span class="line">        passengerMapper.insert(savePassenger);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">//编辑业务</span></span><br><span class="line">        <span class="comment">//更新乘车人数据,依据主键进行更新</span></span><br><span class="line">        savePassenger.setUpdateTime(now);</span><br><span class="line">        passengerMapper.updateByPrimaryKey(savePassenger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘车人删除接口开发"><a href="#乘车人删除接口开发" class="headerlink" title="乘车人删除接口开发"></a>乘车人删除接口开发</h2><h3 id="服务层代码-1"><a href="#服务层代码-1" class="headerlink" title="服务层代码"></a>服务层代码</h3><p><strong>IPassengerService</strong>j接口新增抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p><strong>PassengerServiceImpl</strong>实现了实现对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    passengerMapper.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层代码-1"><a href="#控制层代码-1" class="headerlink" title="控制层代码"></a>控制层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    passengerService.deleteById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http测试-2"><a href="#http测试-2" class="headerlink" title="http测试"></a>http测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###乘车人删除</span><br><span class="line">DELETE http://localhost:8000/member/passenger/delete/1734597882838913024</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;12306会员基础功能实现&quot;&gt;&lt;a href=&quot;#12306会员基础功能实现&quot; class=&quot;headerlink&quot; title=&quot;12306会员基础功能实现&quot;&gt;&lt;/a&gt;12306会员基础功能实现&lt;/h1&gt;&lt;p&gt;主要目的：完成前后端，单表增删改查功能的开发&lt;/p&gt;</summary>
      
    
    
    
    <category term="12306买票系统" scheme="https://bangwu2001.github.io/categories/12306%E4%B9%B0%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>四、前端系统搭建简介</title>
    <link href="https://bangwu2001.github.io/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://bangwu2001.github.io/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2023-12-09T16:25:00.000Z</published>
    <updated>2023-12-09T16:24:27.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统前端模块的搭建"><a href="#系统前端模块的搭建" class="headerlink" title="系统前端模块的搭建"></a>系统前端模块的搭建</h1><p>本系统使用<code>Vue3</code>+<code>Vue CLI</code>实现系统前端模块的搭建</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><a href="https://cli.vuejs.org/zh/guide/">Vue CLI官方文档</a></p><p>安装<code>node</code>得到<code>npm</code>，使用<code>npm</code>安装<code>vue cli</code>(脚手架)，使用<code>vue cli</code>创建项目</p><p>npm可设置淘宝镜像，<a href="https://blog.csdn.net/zz00008888/article/details/134241558?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-134241558-blog-126960754.235%5Ev39%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-134241558-blog-126960754.235%5Ev39%5Epc_relevant_default_base&amp;utm_relevant_index=3">淘宝镜像的域名换了</a>，加快组件下载速度<code>npm config set registry https://registry.npmmirror.com</code></p><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>依据官方文档，创建项目<code>web-train</code></p><p><a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">vue cli创建项目官方文档</a></p><p><strong>创建的项目目录</strong></p><p><a href="https://blog.csdn.net/weixin_49827467/article/details/129046119?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-129046119-blog-107966840.235%5Ev39%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-129046119-blog-107966840.235%5Ev39%5Epc_relevant_default_base&amp;utm_relevant_index=1">项目目录各个文件介绍 参考资料</a></p><p><img src="/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/image-20231206231748676.png" alt="image-20231206231748676"></p><p>进入项目目录，执行<code>npm run serve</code>即可启动前端项目</p><p><a href="https://blog.csdn.net/qq_45594237/article/details/115302876">vue项目启动端口号的修改方法</a>，默认采用8080端口，如果8080被占用，则自动加1</p><h2 id="前端模块集成Ant-Design-Vue"><a href="#前端模块集成Ant-Design-Vue" class="headerlink" title="前端模块集成Ant Design Vue"></a>前端模块集成Ant Design Vue</h2><p>UI组件有很多选择，一种是基于CSS的Bootstrap，适用于各种前端框架；另一种是基于Vue的UI组件，只能用于Vue框架</p><p><a href="https://3x.antdv.com/docs/vue/getting-started-cn">Ant Design Vue官方文档教程</a></p><h3 id="Ant-Design-Vue使用流程"><a href="#Ant-Design-Vue使用流程" class="headerlink" title="Ant Design Vue使用流程"></a><strong>Ant Design Vue</strong>使用流程</h3><ul><li>下载资源，安装依赖</li><li>全局注册或者部分注册</li><li>在vue中即可直接使用相关组件</li></ul><h3 id="小插曲：关于Ant-Design-Vue图标组件的使用"><a href="#小插曲：关于Ant-Design-Vue图标组件的使用" class="headerlink" title="小插曲：关于Ant Design Vue图标组件的使用"></a><strong>小插曲：关于Ant Design Vue图标组件的使用</strong></h3><p><a href="https://3x.antdv.com/components/icon-cn">icon组件官方文档</a></p><ul><li><p>需要手动再次下载依赖</p><ul><li><code>npm install --save @ant-design/icons-vue</code></li></ul></li><li><p>在<code>main.js</code>中全局注册(官方文档只讲解了局部注册)</p><ul><li><p>全局注册方法</p><ul><li><p>```javascript<br>import { createApp } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’<br>import Antd from ‘ant-design-vue’<br>import ‘ant-design-vue/dist/reset.css’<br>import * as Icons from ‘@ant-design/icons-vue’</p><p>const app = createApp(App)<br>app.use(store).use(router).use(Antd).mount(‘#app’);</p><p>//全局使用图标<br>const icons = Icons;<br>for(const i in icons){</p><pre><code>app.component(i,icons[i]);</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 短信验证码登录流程</span><br><span class="line"></span><br><span class="line">使用手机号+验证码的方式进行用户的登录注册</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;04 系统前端模块的搭建/image-20231207001544054.png&quot; alt=&quot;image-20231207001544054&quot; style=&quot;zoom:33%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">登录和注册共用同一个页面，如果手机号存在直接登录，否则后台自动进行注册</span><br><span class="line"></span><br><span class="line">流程：用户输入手机号-&gt;点击获取验证码按钮-&gt;输入用户码-&gt;点击登录</span><br><span class="line"></span><br><span class="line">**补充说明：**</span><br><span class="line"></span><br><span class="line">该登录注册流程容易受到黑客攻击</span><br><span class="line"></span><br><span class="line">- 同一手机号重复请求验证码</span><br><span class="line">  - 后台可以将对应手机号加入黑名单或者单个手机号当天验证码请求次数设置上限</span><br><span class="line">- 大量不同手机号请求验证码</span><br><span class="line">  - 设置图像验证码，增大被攻击难度</span><br><span class="line">    - &lt;img src=&quot;04 系统前端模块的搭建/image-20231207002409475.png&quot; alt=&quot;image-20231207002409475&quot; style=&quot;zoom:33%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不带图像验证码的登录注册流程</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;04 系统前端模块的搭建/640bfc3c0994a1fb07522184-1701880296038-2.jpg&quot; alt=&quot;640bfc3c0994a1fb07522184&quot; style=&quot;zoom: 25%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">带图像验证码的登录注册流程</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;04 系统前端模块的搭建/640bfc7609fdf6fb12562184.jpg&quot; alt=&quot;640bfc7609fdf6fb12562184&quot; style=&quot;zoom: 25%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">## 登陆注册二合一界面开发</span><br><span class="line"></span><br><span class="line">新增登录注册页面，同时在`web-train/src/router/index.js`中添加对应的路由(router)配置</span><br><span class="line"></span><br><span class="line">```tex</span><br><span class="line">对于router配置，大型项目，页面多，80%页面不常用，可以用懒加载的方式，减少编译后文件的大小，提高初始访问速度；小型目，页面少，可以用静态导入的方式，对编译后的文件大小影响不大</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><strong>Vue页面的编写</strong></p><p>一个vue页面，由三个部分组件，都不是必须的</p><ul><li>template，相当于html</li><li>script，JS脚本</li><li>style，CSS样式</li></ul><h2 id="发送短信验证码端口开发"><a href="#发送短信验证码端口开发" class="headerlink" title="发送短信验证码端口开发"></a>发送短信验证码端口开发</h2><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p><code>mapper</code>直接使用以前<code>mybatis generator</code>生成的代码</p><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><p><strong>新建发送验证码对应请求的实体类</strong><code>com.bang.train.member.req.MemberSendCodeReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberSendCodeReq</span> &#123;</span><br><span class="line">    <span class="comment">//@NotBlank:该参数不能为空，为空返回message，不能进入对应请求</span></span><br><span class="line">    <span class="comment">//@Pattern:校验手机号格式，用正则表达式，第一位是1，后十位是数字</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【手机号】不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1\\d&#123;10&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在服务层接口中定义新的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">sendCode</span><span class="params">(MemberSendCodeReq req)</span>;</span><br></pre></td></tr></table></figure><p><strong>服务层实现类中编写新增方法的具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送验证码接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sendCode</span><span class="params">(MemberSendCodeReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> getMembersByMobile(mobile);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(member))&#123;<span class="comment">//2.手机号为空，将用户数据插入数据库</span></span><br><span class="line">        <span class="type">Member</span> <span class="variable">newMember</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">        <span class="comment">//采用雪花算法生成注册用户在数据库中对应的ID</span></span><br><span class="line">        newMember.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">        newMember.setMobile(mobile);</span><br><span class="line">        memberMapper.insert(newMember);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.生成验证码，随机4为字符串</span></span><br><span class="line">    <span class="comment">//        String code = RandomUtil.randomString(4);</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;8888&quot;</span>;</span><br><span class="line">    <span class="comment">//4.将验证码保存短信记录，用于后续用户输入的验证码进行验证</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        一般可以建立一个专门数据库，该数据库包含字段:</span></span><br><span class="line"><span class="comment">            手机号</span></span><br><span class="line"><span class="comment">            短信验证码</span></span><br><span class="line"><span class="comment">            有效期</span></span><br><span class="line"><span class="comment">            是否已使用：避免单个验证码重复使用</span></span><br><span class="line"><span class="comment">            业务类型：可能多个业务需要验证码，比如找回密码，避免用户用验证码攻击其他业务</span></span><br><span class="line"><span class="comment">            发送时间：便于分析，比如统计一段时间内某个手机号请求的次数</span></span><br><span class="line"><span class="comment">            使用时间：</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">//5.对接第三方短信通道(比如阿里云等)，将验证码发送用户</span></span><br><span class="line">    <span class="comment">//6.返回生成的验证码</span></span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四要素:</span><br><span class="line">请求地址url: localhost:8080/member/send-code</span><br><span class="line">请求方法: post</span><br><span class="line">请求参数: MemberSendCodeReq req</span><br><span class="line">响应结果: CommonResp&lt;String&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/send-code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;String&gt; <span class="title function_">sendCode</span><span class="params">(<span class="meta">@Valid</span> MemberSendCodeReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;String&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.sendCode(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="短信验证码登录接口开发"><a href="#短信验证码登录接口开发" class="headerlink" title="短信验证码登录接口开发"></a>短信验证码登录接口开发</h2><h3 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h3><p><code>mapper</code>直接使用以前<code>mybatis generator</code>生成的代码</p><h3 id="业务层-1"><a href="#业务层-1" class="headerlink" title="业务层"></a>业务层</h3><p><strong>新建登录对应请求的实体类</strong><code>com.bang.train.member.req.MemberLoginReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberLoginReq</span> &#123;</span><br><span class="line">    <span class="comment">//@NotBlank:该参数不能为空，为空返回message，不能进入对应请求</span></span><br><span class="line">    <span class="comment">//@Pattern:校验手机号格式，用正则表达式，第一位是1，后十位是数字</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【手机号】不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1\\d&#123;10&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    String mobile; <span class="comment">//手机号</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【短信验证码】不能为空&quot;)</span></span><br><span class="line">    String code; <span class="comment">//短信验证码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在服务层接口中定义新的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MemberLoginResp <span class="title function_">login</span><span class="params">(MemberLoginReq req)</span>;</span><br></pre></td></tr></table></figure><p><strong>服务层实现类中编写新增方法的具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证码登录接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> MemberLoginResp <span class="title function_">login</span><span class="params">(MemberLoginReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> req.getCode();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> getMembersByMobile(mobile);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(member))&#123;<span class="comment">//2.手机号为空，提示用户需要先获取验证码</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.验证校验，实际应查询验证码短信记录数据库，这里为了测试简便，直接写死</span></span><br><span class="line">    <span class="comment">//实际可能包含验证码正确性、时效性、业务类型匹配等多种校验</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="string">&quot;8888&quot;</span>.equals(code))&#123; <span class="comment">//验证码错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_CODE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.校验通过，返回用户对象</span></span><br><span class="line">    <span class="comment">//对于系统而言，用户只需登录一次，登录对象中可能包含用户昵称、头像等数据信息，所以应该直接返回整个用户对象</span></span><br><span class="line">    <span class="comment">//但是又不能直接将后台数据完整返回前端，所以需要创建一个响应实体类，并将后台数据转换为响应类</span></span><br><span class="line">    <span class="type">MemberLoginResp</span> <span class="variable">memberLoginResp</span> <span class="operator">=</span> BeanUtil.copyProperties(member,MemberLoginResp.class);</span><br><span class="line">    <span class="keyword">return</span> memberLoginResp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层-1"><a href="#控制层-1" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四要素:</span><br><span class="line">请求地址url: localhost:8080/member/login</span><br><span class="line">请求方法: post</span><br><span class="line">请求参数: MemberLoginReq req</span><br><span class="line">响应结果: CommonResp&lt;MemberLoginResp&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;MemberLoginResp&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> MemberLoginReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;MemberLoginResp&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.login(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集成Axios完成登录功能"><a href="#集成Axios完成登录功能" class="headerlink" title="集成Axios完成登录功能"></a>集成Axios完成登录功能</h2><p>下载第三方依赖：</p><ul><li>进入web前端工程目录</li><li><code>npm install axios</code>安装依赖</li></ul><p>使用流程</p><ol><li><p>在对应Vue文件中引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>编写点击发送验证码事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const sendCode = () =&gt; &#123;</span><br><span class="line">      axios.post(&quot;http://localhost:8000/member/send-code&quot;, &#123;</span><br><span class="line">        mobile: loginForm.mobile</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        if (data.success) &#123;</span><br><span class="line">          notification.success(&#123; description: &#x27;发送验证码成功！&#x27; &#125;);</span><br><span class="line">          loginForm.code = &quot;8888&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          notification.error(&#123; description: data.message &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li><li><p>编写点击登录事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const login = () =&gt; &#123;</span><br><span class="line">      axios.post(&quot;http://localhost:8000/member/login&quot;, loginForm).then((response) =&gt; &#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        if (data.success) &#123;</span><br><span class="line">          notification.success(&#123; description: &#x27;登录成功！&#x27; &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          notification.error(&#123; description: data.message &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li><li><p>问题一：解决前后端跨域问题：</p><ul><li><p>问题描述：前后端不在同一个域。IP一样，端口不一样，也算跨域。跨域是前后端分离不可避免的问题</p></li><li><p>问题解决：在后端网关模块<code>applicatio.yaml</code>文件中进行配置，允许跨域访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      globalcors:</span><br><span class="line">        corsConfigurations:</span><br><span class="line">          &#x27;[/**]&#x27;:</span><br><span class="line">            # 允许携带认证信息</span><br><span class="line">            allow-credentials: true</span><br><span class="line">            # 允许跨域的源(网站域名/ip)，设置*为全部</span><br><span class="line">            allowedOriginPatterns: &quot;*&quot;</span><br><span class="line">            # 允许跨域的method， 默认为GET和OPTIONS，设置*为全部</span><br><span class="line">            allowedMethods: &quot;*&quot;</span><br><span class="line">            # 允许跨域请求里的head字段，设置*为全部</span><br><span class="line">            allowedHeaders: &quot;*&quot;</span><br><span class="line">            #跨域检测有效期</span><br><span class="line">            maxAge: 3600</span><br></pre></td></tr></table></figure></li></ul></li><li><p>问题二：解决前后端参数传递问题</p><ul><li><p>前端参数传递是以<code>json</code>形式传递的，后端目前只支持以表单的形式访问，在后端请求参数前加上<code>@RequestBody</code>注解即可改为支持<code>json</code>方式的请求数据，此时就不再支持以表单形式提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/send-code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;String&gt; <span class="title function_">sendCode</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> MemberSendCodeReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;String&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.sendCode(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;MemberLoginResp&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> MemberLoginReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;MemberLoginResp&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.login(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对应的请求格式</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">### 验证码获取</span><br><span class="line">POST http://localhost:8000/member/send-code</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;mobile&quot;: &quot;12345678908&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">###登录</span><br><span class="line">POST http://localhost:8000/member/login</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;mobile&quot;:&quot;12345678908&quot;,</span><br><span class="line">  &quot;code&quot;:&quot;8888&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="增加Axios拦截器配置"><a href="#增加Axios拦截器配置" class="headerlink" title="增加Axios拦截器配置"></a>增加Axios拦截器配置</h2><p><code>axios</code>发送请求获取响应结果，应该能够打印对应日志信息，便于前后端联调</p><p>在<code>main.js</code>中进行<code>axios</code>拦截器配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * axios拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截请求</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求参数：&#x27;</span>, config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//拦截响应</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回结果：&#x27;</span>, response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回错误：&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在浏览器的控制台能够看到每次请求的日志信息</p><p><img src="/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/image-20231209111736666.png" alt="image-20231209111736666" style="zoom:80%;"></p><h2 id="Vue-CLI多环境配置"><a href="#Vue-CLI多环境配置" class="headerlink" title="Vue CLI多环境配置"></a>Vue CLI多环境配置</h2><p>现在前端请求后端接口的<code>url</code>是写死的，但在实际开发过程中，应该让后端接口的域名能够动态配置(开发环境、测试环境、部署环境的接口地址都不一样)</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在前端根目录下增加文件 .env.xxx，xxx表是不同的环境</span><br><span class="line">启动命令里增加 --mode xxx，就启动xxx环境的配置</span><br><span class="line"></span><br><span class="line">.env.xx文件编写:</span><br><span class="line">增加多环境变量：</span><br><span class="line">NODE<span class="built_in">_</span>ENV是内置变量</span><br><span class="line">自定义变量用“VUE<span class="built_in">_</span>APP<span class="built_in">_</span>”开头</span><br><span class="line">使用变量：</span><br><span class="line">process.env. xxx </span><br></pre></td></tr></table></figure><p><strong>编写多个env文件</strong></p><p><code>.env.dev</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE<span class="built_in">_</span>ENV=development</span><br><span class="line">VUE<span class="built_in">_</span>APP<span class="built_in">_</span>SERVER=http://localhost:8000</span><br></pre></td></tr></table></figure><p><code>.env.prod</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE<span class="built_in">_</span>ENV=production</span><br><span class="line">VUE<span class="built_in">_</span>APP<span class="built_in">_</span>SERVER=http://train-server.bang.com</span><br></pre></td></tr></table></figure><p><strong>在main.js中引用对应变量，让其生效</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_SERVER</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;环境：&#x27;</span>, process.<span class="property">env</span>.<span class="property">NODE_ENV</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务端：&#x27;</span>, process.<span class="property">env</span>.<span class="property">VUE_APP_SERVER</span>);</span><br></pre></td></tr></table></figure><p><strong>在各个Vue页面中，可以省略请求前缀URL编写</strong></p><p><img src="/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/image-20231209114124939.png" alt="image-20231209114124939" style="zoom:80%;"></p><p><strong>启动命令中指定对应环境</strong></p><p><code>npm run serve --port 80 --mode xxx</code></p><p>其中<code>xxx</code>为<code>.env</code>文件名后缀</p><h2 id="新增web控台主页面"><a href="#新增web控台主页面" class="headerlink" title="新增web控台主页面"></a>新增web控台主页面</h2><p>可以选择<code>Ant Design Vue</code>中的<a href="https://www.antdv.com/components/layout-cn"><code>Layout</code>布局</a>作为基础进行修改</p><ul><li>新增控台主页面<code>main.vue</code></li><li>在<code>index.js</code>中新增对应路由</li><li>实现跳转，由登录页面登陆成功跳转至主页面</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;系统前端模块的搭建&quot;&gt;&lt;a href=&quot;#系统前端模块的搭建&quot; class=&quot;headerlink&quot; title=&quot;系统前端模块的搭建&quot;&gt;&lt;/a&gt;系统前端模块的搭建&lt;/h1&gt;&lt;p&gt;本系统使用&lt;code&gt;Vue3&lt;/code&gt;+&lt;code&gt;Vue CLI&lt;/code</summary>
      
    
    
    
    <category term="12306买票系统" scheme="https://bangwu2001.github.io/categories/12306%E4%B9%B0%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>五、实现JWT单点登录功能</title>
    <link href="https://bangwu2001.github.io/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/05%20%E5%AE%9E%E7%8E%B0JWT%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <id>https://bangwu2001.github.io/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/05%20%E5%AE%9E%E7%8E%B0JWT%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</id>
    <published>2023-12-09T16:25:00.000Z</published>
    <updated>2023-12-09T16:24:44.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现JWT单点登录功能"><a href="#实现JWT单点登录功能" class="headerlink" title="实现JWT单点登录功能"></a>实现JWT单点登录功能</h1><p>单点登录：直观意义就是对于一个系统，只需登录一次就可以处处访问</p><h2 id="两种单点登录的设计方案"><a href="#两种单点登录的设计方案" class="headerlink" title="两种单点登录的设计方案"></a>两种单点登录的设计方案</h2><h3 id="方案一：redis-token"><a href="#方案一：redis-token" class="headerlink" title="方案一：redis+token"></a>方案一：redis+token</h3><p><strong>登录阶段</strong></p><p><code>登录开始</code>-&gt;<code>校验用户名和密码</code>-&gt;<code>生成随机的token，每次都不一样</code>-&gt;<code>将token放入redis</code>-&gt;<code>结束</code></p><p><strong>校验阶段</strong></p><p><code>从header中获取token</code>-&gt;<code>根据token到redis获取数据</code>-&gt;<code>是否有数据</code>-&gt;<code>有数据登录校验成功，反之校验失败</code></p><h3 id="方案二：JWT"><a href="#方案二：JWT" class="headerlink" title="方案二：JWT"></a>方案二：JWT</h3><p><strong>登录阶段</strong></p><p><code>登陆开始</code>-&gt;<code>校验用户名和密码</code>-&gt;<code>生成JWT Token,每次都不一样</code>-&gt;<code>结束</code></p><p><strong>校验阶段</strong></p><p><code>校验开始</code>-&gt;<code>从header获取token</code>-&gt;<code>使用工具包校验token</code>-&gt;<code>校验是否成功</code></p><h2 id="JWT原理"><a href="#JWT原理" class="headerlink" title="JWT原理"></a>JWT原理</h2><p><a href="https://hutool.cn/docs/#/jwt/%E6%A6%82%E8%BF%B0?id=%e7%94%b1%e6%9d%a5">JWT原理及其用法</a></p><h3 id="JWT存在的问题"><a href="#JWT存在的问题" class="headerlink" title="JWT存在的问题"></a>JWT存在的问题</h3><p><strong>问题一：token被解密破解</strong></p><p>给密钥加盐值，每个项目盐值不一样，减小被破解风险</p><p><strong>问题二：token被第三方使用</strong></p><p>背景：自己的产品，被第三方包装成一个界面，做成他们自己的收费产品</p><p>此类问题无好的解决办法，可以通过限流进行一定程度缓解，如果某个相同的token有大量请求，则可能被第三方利用</p><h2 id="生成JWT单点登录token"><a href="#生成JWT单点登录token" class="headerlink" title="生成JWT单点登录token"></a>生成JWT单点登录token</h2><p>本项目中，我们利用Hutool工具包提供的JWT模块进行单点登录的开发</p><h3 id="将JWT-token生成和校验功能封装为一个工具类"><a href="#将JWT-token生成和校验功能封装为一个工具类" class="headerlink" title="将JWT  token生成和校验功能封装为一个工具类"></a>将JWT  token生成和校验功能封装为一个工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateField;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateTime;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.crypto.GlobalBouncyCastleProvider;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.jwt.JWTPayload;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.jwt.JWTUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(JwtUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 盐值很重要，不能泄漏，且每个项目都应该不一样，可以放到配置文件中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;train-12306&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">(Long id, String mobile)</span> &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;开始生成JWT token，id：&#123;&#125;，mobile：&#123;&#125;&quot;</span>, id, mobile);</span><br><span class="line">        GlobalBouncyCastleProvider.setUseBouncyCastle(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">expTime</span> <span class="operator">=</span> now.offsetNew(DateField.HOUR, <span class="number">24</span>);</span><br><span class="line">        Map&lt;String, Object&gt; payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 签发时间</span></span><br><span class="line">        payload.put(JWTPayload.ISSUED_AT, now);</span><br><span class="line">        <span class="comment">// 过期时间</span></span><br><span class="line">        payload.put(JWTPayload.EXPIRES_AT, expTime);</span><br><span class="line">        <span class="comment">// 生效时间</span></span><br><span class="line">        payload.put(JWTPayload.NOT_BEFORE, now);</span><br><span class="line">        <span class="comment">// 内容</span></span><br><span class="line">        payload.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">        payload.put(<span class="string">&quot;mobile&quot;</span>, mobile);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtil.createToken(payload, key.getBytes());</span><br><span class="line">        LOG.info(<span class="string">&quot;生成JWT token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;开始JWT token校验，token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        GlobalBouncyCastleProvider.setUseBouncyCastle(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">JWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWTUtil.parseToken(token).setKey(key.getBytes());</span><br><span class="line">        <span class="comment">// validate包含了verify</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validate</span> <span class="operator">=</span> jwt.validate(<span class="number">0</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;JWT token校验结果：&#123;&#125;&quot;</span>, validate);</span><br><span class="line">        <span class="keyword">return</span> validate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">getJSONObject</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        GlobalBouncyCastleProvider.setUseBouncyCastle(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">JWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWTUtil.parseToken(token).setKey(key.getBytes());</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">payloads</span> <span class="operator">=</span> jwt.getPayloads();</span><br><span class="line">        payloads.remove(JWTPayload.ISSUED_AT);</span><br><span class="line">        payloads.remove(JWTPayload.EXPIRES_AT);</span><br><span class="line">        payloads.remove(JWTPayload.NOT_BEFORE);</span><br><span class="line">        LOG.info(<span class="string">&quot;根据token获取原始内容：&#123;&#125;&quot;</span>, payloads);</span><br><span class="line">        <span class="keyword">return</span> payloads;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> createToken(<span class="number">1L</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String token = &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYmYiOjE2NzY4OTk4MjcsIm1vYmlsZSI6IjEyMyIsImlkIjoxLCJleHAiOjE2NzY4OTk4MzcsImlhdCI6MTY3Njg5OTgyN30.JbFfdeNHhxKhAeag63kifw9pgYhnNXISJM5bL6hM8eU&quot;;</span></span><br><span class="line">        validate(token);</span><br><span class="line"></span><br><span class="line">        getJSONObject(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改登录功能service层代码"><a href="#修改登录功能service层代码" class="headerlink" title="修改登录功能service层代码"></a>修改登录功能service层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证码登录接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> MemberLoginResp <span class="title function_">login</span><span class="params">(MemberLoginReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> req.getCode();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> getMembersByMobile(mobile);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(member))&#123;<span class="comment">//2.手机号为空，提示用户需要先获取验证码</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.验证校验，实际应查询验证码短信记录数据库，这里为了测试简便，直接写死</span></span><br><span class="line">    <span class="comment">//实际可能包含验证码正确性、时效性、业务类型匹配等多种校验</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="string">&quot;8888&quot;</span>.equals(code))&#123; <span class="comment">//验证码错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_CODE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.校验通过，返回用户对象</span></span><br><span class="line">    <span class="comment">//对于系统而言，用户只需登录一次，登录对象中可能包含用户昵称、头像等数据信息，所以应该直接返回整个用户对象</span></span><br><span class="line">    <span class="comment">//但是又不能直接将后台数据完整返回前端，所以需要创建一个响应实体类，并将后台数据转换为响应类</span></span><br><span class="line">    <span class="type">MemberLoginResp</span> <span class="variable">memberLoginResp</span> <span class="operator">=</span> BeanUtil.copyProperties(member,MemberLoginResp.class);</span><br><span class="line">    <span class="comment">//5.生成对应的JWT token，并返回给前端</span></span><br><span class="line">    <span class="comment">//JWT Token包含信息: header,payload,signature</span></span><br><span class="line">    <span class="comment">//生成token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createToken(memberLoginResp.getId(),memberLoginResp.getMobile());</span><br><span class="line">    memberLoginResp.setToken(token);</span><br><span class="line">    <span class="keyword">return</span> memberLoginResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用vuex保存登录信息"><a href="#使用vuex保存登录信息" class="headerlink" title="使用vuex保存登录信息"></a>使用vuex保存登录信息</h2><p><strong>在store index.js中定义登录信息对应的全局变量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; <span class="comment">//定义全局变量member</span></span><br><span class="line">    <span class="attr">member</span>:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">setMember</span>(<span class="params">state,_member</span>)&#123;</span><br><span class="line">      state.<span class="property">member</span> = _member;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>修改login.vue</strong></p><p>登录成功之后，将后端数据存储至全部变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const login = () =&gt; &#123;</span><br><span class="line">      axios.post(&quot;/member/login&quot;, loginForm).then((response) =&gt; &#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        if (data.success) &#123;</span><br><span class="line">          notification.success(&#123; description: &#x27;登录成功！&#x27; &#125;);</span><br><span class="line">          // 登录成功，跳到控台主页</span><br><span class="line">          router.push(&quot;/&quot;);</span><br><span class="line">          //使用vuex保存会员登录信息,里面包含JWT TOKEN</span><br><span class="line">          store.commit(&quot;setMember&quot;, data.content);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          notification.error(&#123; description: data.message &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h2 id="vuex配置后的session解决浏览器刷新问题"><a href="#vuex配置后的session解决浏览器刷新问题" class="headerlink" title="vuex配置后的session解决浏览器刷新问题"></a>vuex配置后的session解决浏览器刷新问题</h2><h2 id="gateway拦截器的简单使用使用"><a href="#gateway拦截器的简单使用使用" class="headerlink" title="gateway拦截器的简单使用使用"></a>gateway拦截器的简单使用使用</h2><ul><li>自定义过滤器<ul><li>继承接口<code>GlobalFilter</code>，实现<code>filter</code>方法</li></ul></li><li>多个过滤器存在时，如何确定执行的先后顺序<ul><li>继承<code>Ordered</code>接口，实现<code>getOrder</code>方法，按照返回数值由小到大执行</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在网关增加登录校验过滤器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(AuthGlobalFilter.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;网关登录校验拦截器:&#123;&#125;&quot;</span>,<span class="string">&quot;AuthGlobalFilter&quot;</span>);</span><br><span class="line">        <span class="comment">//网关校验链，进入下一个校验器</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当存在多个过滤器时，按照getOrder的顺序从小到大去执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写会员登录校验拦截器"><a href="#编写会员登录校验拦截器" class="headerlink" title="编写会员登录校验拦截器"></a>编写会员登录校验拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.train.gateway.util.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GateWay登录校验</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginMemberFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LoginMemberFilter.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequest().getURI().getPath();</span><br><span class="line">        <span class="comment">//2.排除不需要拦截的请求</span></span><br><span class="line">        <span class="keyword">if</span> (path.contains(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">                || path.contains(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line">                || path.contains(<span class="string">&quot;/member/login&quot;</span>)</span><br><span class="line">                || path.contains(<span class="string">&quot;/member/send-code&quot;</span>)) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;不需要登录验证：&#123;&#125;&quot;</span>, path);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;需要登录验证：&#123;&#125;&quot;</span>, path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.获取header的token参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;会员登录验证开始，token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || token.isEmpty()) &#123;</span><br><span class="line">            LOG.info( <span class="string">&quot;token为空，请求被拦截&quot;</span> );</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.校验token是否有效，包括token是否被改过，是否过期</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validate</span> <span class="operator">=</span> JwtUtil.validate(token);</span><br><span class="line">        <span class="keyword">if</span> (validate) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;token有效，放行该请求&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.warn( <span class="string">&quot;token无效，请求被拦截&quot;</span> );</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为axios请求增加统一拦截器"><a href="#为axios请求增加统一拦截器" class="headerlink" title="为axios请求增加统一拦截器"></a>为axios请求增加统一拦截器</h2><p>在<code>main.js</code>中修改拦截器代码，为所有的axios请求头加上token参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截请求</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求参数：&#x27;</span>, config);</span><br><span class="line">    <span class="comment">//为所有的axios请求加上token</span></span><br><span class="line">    <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">member</span>.<span class="property">token</span>;</span><br><span class="line">    <span class="keyword">if</span>(token)&#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">token</span> = token;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;为请求header增加token:&quot;</span>,token);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了增加用户请求，在token失效之后(后端返货401)时，应该让页面自动跳转到登录页面，并提示用户登录超时</p><p>修改<code>main.js</code>中响应拦截器代码，对401做出特定动作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截响应</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回结果：&#x27;</span>, response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回错误：&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">const</span> response = error.<span class="property">response</span>;</span><br><span class="line">    <span class="keyword">const</span> status = response.<span class="property">status</span>;</span><br><span class="line">    <span class="keyword">if</span>(status === <span class="number">401</span>)&#123;</span><br><span class="line">        <span class="comment">//提示用户登录超时，并跳转至登陆页面</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未登录或者登录超时，跳转至登录页面&quot;</span>);</span><br><span class="line">        <span class="comment">//清空缓存中用户登录历史数据</span></span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&quot;setMember&quot;</span>,&#123;&#125;);</span><br><span class="line">        <span class="comment">//异常提醒窗口</span></span><br><span class="line">        notification.<span class="title function_">error</span>(&#123;<span class="attr">description</span>: <span class="string">&quot;未登录或登录超时&quot;</span>&#125;);</span><br><span class="line">        <span class="comment">//跳转登录页面</span></span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="为路由页面添加拦截器"><a href="#为路由页面添加拦截器" class="headerlink" title="为路由页面添加拦截器"></a>为路由页面添加拦截器</h2><p><strong>背景</strong></p><p>通过axios发送请求，可以通过后端jwt校验验证用户权限，未登录或者登录超时会直接跳转至登录页面</p><p>但是系统中可能存在一些其他静态页面，比如帮助文档等页面，这类页面不用于后端进行交互，无法根据后端响应进行拦截,所以需要增加<strong>路由跳转拦截器</strong></p><p>在<code>router/index.js</code>中增加拦截器代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;notification&#125; <span class="keyword">from</span> <span class="string">&quot;ant-design-vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/LoginView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/main.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">loginRequire</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由登录拦截</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 要不要对meta.loginRequire属性做监控拦截</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">matched</span>.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item, <span class="string">&quot;是否需要登录校验：&quot;</span>, item.<span class="property">meta</span>.<span class="property">loginRequire</span> || <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">meta</span>.<span class="property">loginRequire</span>;</span><br><span class="line">  &#125;)) &#123;</span><br><span class="line">    <span class="keyword">const</span> _member = store.<span class="property">state</span>.<span class="property">member</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;页面登录校验开始：&quot;</span>, _member);</span><br><span class="line">    <span class="keyword">if</span> (!_member.<span class="property">token</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户未登录或登录超时！&quot;</span>);</span><br><span class="line">      notification.<span class="title function_">error</span>(&#123; <span class="attr">description</span>: <span class="string">&quot;未登录或登录超时&quot;</span> &#125;);</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现JWT单点登录功能&quot;&gt;&lt;a href=&quot;#实现JWT单点登录功能&quot; class=&quot;headerlink&quot; title=&quot;实现JWT单点登录功能&quot;&gt;&lt;/a&gt;实现JWT单点登录功能&lt;/h1&gt;&lt;p&gt;单点登录：直观意义就是对于一个系统，只需登录一次就可以处处访问&lt;/p</summary>
      
    
    
    
    <category term="12306买票系统" scheme="https://bangwu2001.github.io/categories/12306%E4%B9%B0%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
</feed>
