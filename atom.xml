<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bang&#39;s Blog</title>
  
  
  <link href="https://bangwu2001.github.io/atom.xml" rel="self"/>
  
  <link href="https://bangwu2001.github.io/"/>
  <updated>2023-08-11T17:11:28.529Z</updated>
  <id>https://bangwu2001.github.io/</id>
  
  <author>
    <name>Bang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>十一、热销商品和商品详情展示功能实现</title>
    <link href="https://bangwu2001.github.io/2023/08/13/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/"/>
    <id>https://bangwu2001.github.io/2023/08/13/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/</id>
    <published>2023-08-12T16:23:00.000Z</published>
    <updated>2023-08-11T17:11:28.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="热销商品排行"><a href="#热销商品排行" class="headerlink" title="热销商品排行"></a>热销商品排行</h1><p><img src="/2023/08/13/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/image-20230811225640333.png" alt="image-20230811225640333" style="zoom:80%;"></p><p><img src="/2023/08/13/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/image-20230811225700167.png" alt="image-20230811225700167" style="zoom:80%;"></p><h2 id="商品数据库创建"><a href="#商品数据库创建" class="headerlink" title="商品数据库创建"></a>商品数据库创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_product (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  category_id <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类id&#x27;</span>,</span><br><span class="line">  item_type <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品系列&#x27;</span>,</span><br><span class="line">  title <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品标题&#x27;</span>,</span><br><span class="line">  sell_point <span class="type">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品卖点&#x27;</span>,</span><br><span class="line">  price <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品单价&#x27;</span>,</span><br><span class="line">  num <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存数量&#x27;</span>,</span><br><span class="line">  image <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图片路径&#x27;</span>,</span><br><span class="line">  status <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;商品状态  1：上架   2：下架   3：删除&#x27;</span>,</span><br><span class="line">  priority <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;显示优先级&#x27;</span>,</span><br><span class="line">  created_time datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  modified_time datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  created_user <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">  modified_user <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后修改人&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h2 id="商品实体类的创建"><a href="#商品实体类的创建" class="headerlink" title="商品实体类的创建"></a>商品实体类的创建</h2><p>在<code>com.bang.store.pojo</code>包下新建<code>Product</code>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品对应实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    Integer category_id;</span><br><span class="line">    String item_type;</span><br><span class="line">    String title;</span><br><span class="line">    String sell_point;</span><br><span class="line">    Long price;</span><br><span class="line">    Integer num;</span><br><span class="line">    String image;</span><br><span class="line">    Integer status;</span><br><span class="line">    Integer priority;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>热销商品展示，本质是查询语句，根据优先级对所有已上架的商品进行排序，选取优先级最高的四条记录在页面进行展示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_product <span class="keyword">where</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> priority <span class="keyword">DESC</span> limit <span class="number">0</span>,<span class="number">4</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>新建商品持久层接口<code>ProductMapper</code>，在其中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询热销商品前四位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 前四位热销商品数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Product&gt; <span class="title function_">findHotProductList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>在<code>resource/mapper</code>文件夹下创建映射文件<code>ProductMapper.xml</code>，编写对应SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;productPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Product&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;categoryId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;item_type&quot;</span> <span class="attr">property</span>=<span class="string">&quot;itemType&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sell_point&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sellPoint&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findHotProductList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;productPojoMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_product where status=1 order by priority DESC limit 0,4;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ProductMapper productMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHotProductList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Product&gt; productList = productMapper.findHotProductList();</span><br><span class="line">        <span class="keyword">for</span> (Product product : productList) &#123;</span><br><span class="line">            System.out.println(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>无明显异常</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>新建商品业务层接口<code>IProductService</code>，在其中申明对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IProductService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询返回热销商品的前四条数据列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Product&gt; <span class="title function_">findHotProducts</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IProductService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IProductService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ProductMapper productMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">findHotProducts</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Product&gt; hotProductList = productMapper.findHotProductList();</span><br><span class="line">        <span class="comment">//前端页面只需要id、title、price和image四个字段，</span></span><br><span class="line">        <span class="comment">//为了减小数据传输带宽消耗，可以将其他字段设置为null</span></span><br><span class="line">        <span class="comment">//这里为了便利，我们不做此处理</span></span><br><span class="line">        <span class="keyword">return</span> hotProductList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IProductService productService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hotProductList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Product&gt; hotProducts = productService.findHotProducts();</span><br><span class="line">        <span class="keyword">for</span> (Product hotProduct : hotProducts) &#123;</span><br><span class="line">            System.out.println(hotProduct);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层无新增异常，所以控制层无新增异常处理逻辑</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /product</span><br><span class="line">request method: GET</span><br><span class="line">request params: null</span><br><span class="line">response data: new JsonResult&lt;List&lt;Product&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>创建商品控制层类<code>ProductController</code>，继承于控制层基类<code>BaseController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IProductService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IProductService productService;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;Product&gt;&gt; <span class="title function_">findHotProducts</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Product&gt; hotProducts = productService.findHotProducts();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;热销商品数据获取成功&quot;</span>,hotProducts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p><code>index.html</code>页面一加载，就像后端发送请求，获取热销商品数据并展示在前端页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(document).ready(function ()&#123;</span><br><span class="line">    showHotList();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function <span class="title function_">showHotList</span><span class="params">()</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">&quot;/product/&quot;</span></span><br><span class="line">            ,type: <span class="string">&quot;GET&quot;</span></span><br><span class="line">                ,success: function (data)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(data.state == <span class="number">200</span>)&#123;</span><br><span class="line">                        alert(<span class="string">&quot;热销商品数据获取成功&quot;</span>);</span><br><span class="line">                        <span class="comment">//将数据展示在对应的页面</span></span><br><span class="line">                        <span class="comment">//清空原始页面</span></span><br><span class="line">                        $(<span class="string">&quot;#hot-list&quot;</span>).empty();</span><br><span class="line">                        <span class="type">let</span> <span class="variable">hotProducts</span> <span class="operator">=</span> data.data;</span><br><span class="line">                        <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;hotProducts.length;i++)&#123;</span><br><span class="line">                            <span class="type">let</span> <span class="variable">htmlContent</span> <span class="operator">=</span> <span class="string">&quot;&lt;div class=\&quot;col-md-12\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;div class=\&quot;col-md-7 text-row-2\&quot;&gt;&lt;a href=\&quot;product.html？id#&#123;id&#125;\&quot;&gt;#&#123;title&#125;&lt;/a&gt;&lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;div class=\&quot;col-md-2\&quot;&gt;¥#&#123;price&#125;&lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;div class=\&quot;col-md-3\&quot;&gt;&lt;img src=../#&#123;image&#125;/collect.png class=\&quot;img-responsive\&quot; /&gt;&lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/div&gt;&quot;</span></span><br><span class="line">                                htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;title&#125;&quot;</span>,hotProducts[i].title);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;price&#125;&quot;</span>,hotProducts[i].price);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;image&#125;&quot;</span>,<span class="string">&quot;../&quot;</span>+hotProducts[i].image);</span><br><span class="line">                            $(<span class="string">&quot;#hot-list&quot;</span>).append(htmlContent);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        alert(<span class="string">&quot;热销商品数据获取失败 &quot;</span>+data.message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        ,error:function (xmh)&#123;</span><br><span class="line">            alert(<span class="string">&quot;热销商品数据获取发生未知错误&quot;</span>+xmh.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="热销商品详情展示"><a href="#热销商品详情展示" class="headerlink" title="热销商品详情展示"></a>热销商品详情展示</h1><p>用户点击热销商品列表中的某个商品名，即跳转到对应的商品详情页</p><p>热销商品列表页和商品详情页之间的关联,通过<code>&lt;a href=\&quot;product.html？id#&#123;id&#125;\&quot;&gt;#&#123;title&#125;&lt;/a&gt;</code>进行关联</p><h2 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句-1"><a href="#规划执行的SQL语句-1" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>根据用户点击商品<code>id</code>查询对应的商品信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_product <span class="keyword">where</span> id<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-2"><a href="#接口和抽象方法-2" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>ProductMapper</code>接口中编写对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商品信息数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Product <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置-1"><a href="#SQL映射文件配置-1" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;productPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_product where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试-2"><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findById(<span class="number">10000017</span>);</span><br><span class="line">    System.out.println(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层-1"><a href="#业务层-1" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常-1"><a href="#规划异常-1" class="headerlink" title="规划异常"></a>规划异常</h3><p>查询时，数据库中可能不存在该商品信息，此时应触发<code>ProductNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ProductNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-3"><a href="#接口和抽象方法-3" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>IProductAddress</code>中编写对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Product <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现-1"><a href="#抽象方法实现-1" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Product <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findById(id);</span><br><span class="line">    <span class="keyword">if</span>(product==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProductNotFoundException</span>(<span class="string">&quot;商品不存在异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-3"><a href="#单元测试-3" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.getById(<span class="number">10000017</span>);</span><br><span class="line">    System.out.println(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层-1"><a href="#控制层-1" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理-1"><a href="#异常处理-1" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层新增<code>ProductNotFound</code>异常，需要在控制层基类<code>BaseController</code>中添加对应的异常处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ProductNotFoundException) &#123;</span><br><span class="line">    result.setState(<span class="number">8000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;商品不存在&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求-1"><a href="#设计请求-1" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/&#123;id&#125;</span><br><span class="line">request method: GET</span><br><span class="line">request params: Integer id</span><br><span class="line">response data: new JsonResult&lt;Product&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求-1"><a href="#处理请求-1" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Product&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;商品数据获取成功&quot;</span>,product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面-1"><a href="#前端页面-1" class="headerlink" title="前端页面"></a>前端页面</h2><p>通过<code>$.getUrlParam(&quot;id&quot;)</code>获取传递的参数值(商品堵塞<code>id</code>)</p><p>需要引入相关的库文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/jquery-getUrlParam.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id =$.<span class="title function_">getUrlParam</span>(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>编写商品数据加载代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//解析url传递的参数值</span></span><br><span class="line">    <span class="keyword">let</span> id =$.<span class="title function_">getUrlParam</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="title function_">showProduct</span>(id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showProduct</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/product/&quot;</span>+id</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;商品数据获取成功&quot;</span>);</span><br><span class="line">                <span class="comment">//将数据展示在对应的页面</span></span><br><span class="line">                $(<span class="string">&quot;#product-title&quot;</span>).<span class="title function_">html</span>(data.<span class="property">data</span>.<span class="property">title</span>);</span><br><span class="line">                $(<span class="string">&quot;#product-sell-point&quot;</span>).<span class="title function_">html</span>(data.<span class="property">data</span>.<span class="property">sellPoint</span>);</span><br><span class="line">                $(<span class="string">&quot;#product-price&quot;</span>).<span class="title function_">html</span>(data.<span class="property">data</span>.<span class="property">price</span>);</span><br><span class="line">                <span class="comment">//图片属性</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#product-image-&quot;</span>+i).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;..&quot;</span>+data.<span class="property">data</span>.<span class="property">image</span>+i+<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">                    $(<span class="string">&quot;#product-image-&quot;</span>+i+<span class="string">&quot;-big&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;..&quot;</span>+data.<span class="property">data</span>.<span class="property">image</span>+i+<span class="string">&quot;_big.png&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;商品数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;商品数据获取发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;热销商品排行&quot;&gt;&lt;a href=&quot;#热销商品排行&quot; class=&quot;headerlink&quot; title=&quot;热销商品排行&quot;&gt;&lt;/a&gt;热销商品排行&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2023/08/13/B%E7%AB%99%E7%94%B5%E8%84%91%E5%</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>十、收货地址删除功能的实现</title>
    <link href="https://bangwu2001.github.io/2023/08/12/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%A0%E9%99%A4/"/>
    <id>https://bangwu2001.github.io/2023/08/12/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%A0%E9%99%A4/</id>
    <published>2023-08-12T08:23:00.000Z</published>
    <updated>2023-08-11T08:58:43.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="收货地址删除"><a href="#收货地址删除" class="headerlink" title="收货地址删除"></a>收货地址删除</h1><p>用户点击删除按钮，向后端发送请求，删除用户该条地址记录，同时前端页面该地址删除</p><p><img src="/2023/08/12/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%A0%E9%99%A4/image-20230811152159496.png" alt="image-20230811152159496"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>1.删除该地址之前需要判断该数据在数据库中是否存在，此功能在设置默认地址模块已经实现</p><p>2.判断该条地址是否与当前登录用户相匹配，此功能在设置默认地址模块也已经实现</p><p>3.删除对应的地址数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> aid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>4.如果用户删除的是默认收货地址，则将剩下的地址中的某一条设置为新的默认地址，规则可以自定义：将最新修改时间的收货地址设置为默认的收货地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> uid<span class="operator">=</span>? <span class="keyword">order</span> <span class="keyword">by</span> modified_time <span class="keyword">DESC</span> limit <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>5.如果用户本身只有一条收货地址，删除之后，不用进行后续操作；查询用户地址数目语句在前面新增地址功能模块已经实现过了</p><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>AddressMapper</code>类中定义对应抽象方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对应的地址记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">deleteByAid</span><span class="params">(Integer aid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询某个用户最新修改的地址记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询的最新修改地址数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Address <span class="title function_">findLastModified</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>在<code>AddressMapper.xml</code>中编写对应的SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByAid&quot;</span>&gt;</span></span><br><span class="line">    delete from t_address where aid=#&#123;aid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findLastModified&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;addressPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_address where uid=#&#123;uid&#125; order by modified_time DESC limit 0,1;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">aid</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.deleteByAid(aid);</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findLastModified</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findLastModified(<span class="number">3</span>);</span><br><span class="line">    System.out.println(address);</span><br><span class="line">    System.out.println(address.getModifiedTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p> 当前数据不存在异常；地址数据与用户不匹配异常在之前功能模块中已经定义过了</p><p>删除过程中可能发生未知错误引发异常，定义对应的异常类<code>DeleteException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">DeleteException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p><code>在IAddressService</code>接口中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户指定的地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址数据id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer aid,Integer uid,String username)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer aid, Integer uid, String username)</span> &#123;</span><br><span class="line">    <span class="comment">//1.删除地址数据是否存在</span></span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findByAid(aid);</span><br><span class="line">    <span class="keyword">if</span>(address==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressNotFoundException</span>(<span class="string">&quot;地址数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断当前地址数据是否属于登陆的用户</span></span><br><span class="line">    <span class="keyword">if</span>(!address.getUid().equals(uid))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;非法数据访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.删除指定地址数据</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.deleteByAid(aid);</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeleteException</span>(<span class="string">&quot;删除过程发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果删除是非默认地址，则无需进行后续操作</span></span><br><span class="line">    <span class="keyword">if</span>(address.getIsDefault()==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//4.查询用户所剩地址数目</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//5.查询最新修改记录的数据</span></span><br><span class="line">        <span class="type">Address</span> <span class="variable">lastModifiedAddress</span> <span class="operator">=</span> addressMapper.findLastModified(uid);</span><br><span class="line">        <span class="comment">//6.将最新修改的地址数据设置为默认收货地址</span></span><br><span class="line">        rows = addressMapper.updateDefaultByAid(lastModifiedAddress.getAid(), username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;数据更新发生未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">aid</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">    Integer uid=<span class="number">3</span>;</span><br><span class="line">    String username=<span class="string">&quot;管理员二号&quot;</span>;</span><br><span class="line">    addressService.delete(aid,uid,username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层新增<code>DeleteException</code>，在控制基类<code>BaseController</code>中添加对应的异常处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DeleteException)&#123;</span><br><span class="line">    result.setState(<span class="number">7003</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;数据删除过程发生未知错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/delete/&#123;aid&#125;  <span class="params">#</span>restful风格数据请求</span><br><span class="line">request method: GET</span><br><span class="line">request params: Integer aid,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;()</span><br></pre></td></tr></table></figure><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/delete/&#123;aid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;aid&quot;)</span> Integer aid,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    addressService.delete(aid,uid,username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;地址数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在<code>address.html</code>编写对应的页面逻辑</p><p>在删除按钮组件添加<code>onclick</code>属性，绑定对应删除逻辑函数</p><p>组件添加<code>onclick</code>属性，绑定事件处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="comment">//清空原始内容</span></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> trContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">tag</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">address</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">phone</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-edit\&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a onclick=&#x27;del(#&#123;aid&#125;)&#x27; class=\&quot;btn btn-xs add-del btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-trash-o\&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a onclick=&#x27;setDefault(#&#123;aid&#125;)&#x27; class=\&quot;btn btn-xs add-def btn-default\&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    trContent = trContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;aid&#125;&quot;</span>,addressList[i].<span class="property">aid</span>);</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(trContent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第一个地址默认为默认地址，所以其所在的默认地址按钮需要隐藏</span></span><br><span class="line">                <span class="comment">//某个元素隐藏，采用hide()方法</span></span><br><span class="line">                $(<span class="string">&quot;.add-def:eq(0)&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>编写删除按钮事件处理函数<code>del</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">del</span>(<span class="params">aid</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/delete/&quot;</span>+aid</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;删除地址成功&quot;</span>);</span><br><span class="line">                <span class="comment">//刷新页面，展示地址列表</span></span><br><span class="line">                <span class="title function_">showAddress</span>()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;删除地址失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;删除地址发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;收货地址删除&quot;&gt;&lt;a href=&quot;#收货地址删除&quot; class=&quot;headerlink&quot; title=&quot;收货地址删除&quot;&gt;&lt;/a&gt;收货地址删除&lt;/h1&gt;&lt;p&gt;用户点击删除按钮，向后端发送请求，删除用户该条地址记录，同时前端页面该地址删除&lt;/p&gt;
&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>九、设置默认收货地址功能的实现</title>
    <link href="https://bangwu2001.github.io/2023/08/11/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/09%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/"/>
    <id>https://bangwu2001.github.io/2023/08/11/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/09%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/</id>
    <published>2023-08-11T13:13:00.000Z</published>
    <updated>2023-08-10T16:50:30.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置默认收货地址"><a href="#设置默认收货地址" class="headerlink" title="设置默认收货地址"></a>设置默认收货地址</h1><p>点击<strong>设为默认</strong>按钮，当前地址设置为默认，后面的按钮隐藏，其他的地址全部显示该按钮</p><p><img src="/2023/08/11/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/09%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/image-20230810231339259.png" alt="image-20230810231339259"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>1.检测用户想设置为默认地址的数据在数据库中是否存在，本质是一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> aid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>2.将用户选择的地址设为默认地址之前，先将该用户所有的收货地址全部设置为非默认</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_address <span class="keyword">set</span> is_default<span class="operator">=</span><span class="number">0</span> <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>3.将用户选择的该条地址设置为默认</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_address <span class="keyword">set</span> is_default<span class="operator">=</span><span class="number">1</span>,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> aid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>AddressMapper</code>接口中申明对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid查询收货地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 记录存在则返回对应地址数据，反之返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Address <span class="title function_">findByAid</span><span class="params">(Integer aid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将某个用户所有地址均设置为非默认</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateNoneDefaulit</span><span class="params">(Integer uid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将用户某条地址设置为默认</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 修改者名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 记录修改时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateDefaultByAid</span><span class="params">(Integer aid, String modifiedUser, Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射"><a href="#配置SQL映射" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><p>在<code>AddressMapper.xml</code>中编写对应的映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByAid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;addressPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_address where aid=#&#123;aid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateNoneDefaulit&quot;</span>&gt;</span></span><br><span class="line">    update t_address set is_default=0 where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateDefaultByAid&quot;</span>&gt;</span></span><br><span class="line">    update t_address set is_default=1,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125; where aid=#&#123;aid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findByAid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(address);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNoneDefaulit</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.updateNoneDefaulit(<span class="number">2</span>);</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDefaultByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.updateDefaultByAid(<span class="number">3</span>, <span class="string">&quot;管理员&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>1.数据更新过程中可能发生未知异常，<code>UpdateException</code>，此异常类在其他功能中已经定义过了</p><p>2.访问的收货地址不属于当前登录的用户，非法访问异常<code>AccessDeniedException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非法访问异常:</span></span><br><span class="line"><span class="comment"> *      可能由于其他模块存在BUG，导致展示的数据不属于当前登录用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AccessDeniedException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.当前收货地址在数据库不存在所引发的异常，<code>AddressNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前地址数据在数据库中不存在所引发的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AddressNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>IAddressService</code>接口中定义对应的抽象方法</p><p>业务逻辑：根据<code>aid</code>查询当前地址记录是否存在，不存在触发<code>AddressNotFoundException</code>；判断当前地址是否属于当前登录的用户，不属于触发<code>AccessDeniedExcption</code>;否则，首先将当前用户所有收获地址全部设为非默认，然后再将当前用户选择的地址设置为默认</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更改当前用户的默认地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 操作者姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDefault</span><span class="params">(Integer aid,Integer uid,String username)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDefault</span><span class="params">(Integer aid, Integer uid, String username)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询当前地址记录是否存在</span></span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findByAid(aid);</span><br><span class="line">    <span class="keyword">if</span>(address==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressNotFoundException</span>(<span class="string">&quot;当前地址不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断当前地址是否属于该用户</span></span><br><span class="line">    <span class="keyword">if</span>(!address.getUid().equals(uid))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;拒绝访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.将该用户所有地址设置为非默认</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.updateNoneDefaulit(uid);</span><br><span class="line">    <span class="keyword">if</span>(rows==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;数据更新发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.将用户选择的收货地址设置为默认</span></span><br><span class="line">    rows = addressMapper.updateDefaultByAid(aid, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;数据更新发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">setDefault</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">aid</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;管理员&quot;</span>;</span><br><span class="line">    addressService.setDefault(aid,uid,username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>在控制层基类<code>BaseController</code>中增加新的异常处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AddressNotFoundException)&#123;</span><br><span class="line">    result.setState(<span class="number">7001</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;收货地址不存在&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccessDeniedException)&#123;</span><br><span class="line">    result.setState(<span class="number">7002</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;非法数据访问&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/set<span class="built_in">_</span>default/&#123;aid&#125;   //采用RestFul风格进行访问  </span><br><span class="line">request method: GET</span><br><span class="line">request params: @PathVariable(&quot;aid&quot;) Integer aid,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;()</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//采用restful风格进行数据传输</span></span><br><span class="line"><span class="comment">//采用注解 @PathVariable进行参数和数据之间的映射</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/set_default/&#123;aid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@PathVariable(&quot;aid&quot;)</span> Integer aid, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    addressService.setDefault(aid,uid,username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;地址设置默认成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>用户点击<code>Address.html</code>页面中的设置默认按钮，会向后端服务器发送请求</p><p>给页面中的设置默认组件添加<code>onclick()</code>函数，然后绑定对应的事件处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">showAddress</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="comment">//清空原始内容</span></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> trContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">tag</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">address</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">phone</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-edit\&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs add-del btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-trash-o\&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a onclick=&#x27;setDefault(#&#123;aid&#125;)&#x27; class=\&quot;btn btn-xs add-def btn-default\&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    trContent = trContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;aid&#125;&quot;</span>,addressList[i].<span class="property">aid</span>);</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(trContent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第一个地址默认为默认地址，所以其所在的默认地址按钮需要隐藏</span></span><br><span class="line">                <span class="comment">//某个元素隐藏，采用hide()方法</span></span><br><span class="line">                $(<span class="string">&quot;.add-def:eq(0)&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认按钮点击事件响应函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setDefault</span>(<span class="params">aid</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/set_default/&quot;</span>+aid</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;默认地址设置成功&quot;</span>);</span><br><span class="line">                <span class="comment">//刷新页面，展示地址列表</span></span><br><span class="line">                <span class="title function_">showAddress</span>()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;默认地址设置失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;默认地址设置失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设置默认收货地址&quot;&gt;&lt;a href=&quot;#设置默认收货地址&quot; class=&quot;headerlink&quot; title=&quot;设置默认收货地址&quot;&gt;&lt;/a&gt;设置默认收货地址&lt;/h1&gt;&lt;p&gt;点击&lt;strong&gt;设为默认&lt;/strong&gt;按钮，当前地址设置为默认，后面的按钮隐藏，其他</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>八、收获地址列表展示功能的实现</title>
    <link href="https://bangwu2001.github.io/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/08%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/"/>
    <id>https://bangwu2001.github.io/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/08%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/</id>
    <published>2023-08-10T15:13:00.000Z</published>
    <updated>2023-08-09T16:47:31.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="收获地址列表展示"><a href="#收获地址列表展示" class="headerlink" title="收获地址列表展示"></a>收获地址列表展示</h1><p>用户收货地址展示页面</p><p><img src="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/08%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/image-20230809233924765.png" alt="image-20230809233924765" style="zoom: 80%;"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>用户收货地址页面展示，本质上是SQL查询语句，按照<code>is_default</code>字段进行排序，因为按照逻辑默认收货地址应该排在第一个;其余地址按照创建时间进行排序，最近创建的排在前面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> uid<span class="operator">=</span>? <span class="keyword">order</span> <span class="keyword">by</span> is_default <span class="keyword">DESC</span>,created_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>AddressMapper</code>接口中定义抽象方法<code>findByUid</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询当前用户的收货地址列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户拥有地址列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;Address&gt; <span class="title function_">findByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL关系映射"><a href="#SQL关系映射" class="headerlink" title="SQL关系映射"></a>SQL关系映射</h3><p>在<code>AddressMapper.xml</code>文件中编写抽象方法对应的映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;addressPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_default&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDefault&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 部分属性，实体类与数据库表命名不一致，需要编写映射规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;addressPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_address where uid=#&#123;uid&#125; order by is_default DESC,created_time DESC;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Address&gt; addressList = addressMapper.findByUid(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (Address address : addressList) &#123;</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>无额外的异常发生</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在接口<code>IAddressService</code>中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前用户拥有的所有收货地址列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 收获地址列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;Address&gt; <span class="title function_">getByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>在实现类实现对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">getByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    List&lt;Address&gt; addressList = addressMapper.findByUid(uid);</span><br><span class="line">    <span class="comment">//前端只需展示:地址类型、收货人姓名、详细地址、联系电话、是否默认这几个字段的信息</span></span><br><span class="line">    <span class="comment">//为了节省传输带宽和提高效率，将其他属性值进行清空</span></span><br><span class="line">    <span class="comment">//清空字段太多，其实这里也可以在持久层的SQL语句上进行处理，只查询对应的那几个字段，这样其他字段默认为null,这样可能造成复用困难</span></span><br><span class="line">    <span class="comment">//如果后续其他位置需要address对象其他信息，则不建议在持久层只查询几个字段</span></span><br><span class="line">    <span class="keyword">for</span> (Address address : addressList) &#123;</span><br><span class="line">        address.setAid(<span class="literal">null</span>);</span><br><span class="line">        address.setUid(<span class="literal">null</span>);</span><br><span class="line">        address.setProvinceCode(<span class="literal">null</span>);</span><br><span class="line">        address.setCityCode(<span class="literal">null</span>);</span><br><span class="line">        address.setAreaCode(<span class="literal">null</span>);</span><br><span class="line">        address.setTel(<span class="literal">null</span>);</span><br><span class="line">        address.setCreatedUser(<span class="literal">null</span>);</span><br><span class="line">        address.setCreatedTime(<span class="literal">null</span>);</span><br><span class="line">        address.setModifiedUser(<span class="literal">null</span>);</span><br><span class="line">        address.setModifiedTime(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> addressList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Address&gt; addressList = addressService.getByUid(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (Address address : addressList) &#123;</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>无新增异常</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/get<span class="built_in">_</span>by<span class="built_in">_</span>uid</span><br><span class="line">request method: GET</span><br><span class="line">request params: HttpSession session</span><br><span class="line">response data: new JsonResult&lt;List&lt;Address&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get_by_uid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;Address&gt;&gt; <span class="title function_">getByUid</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//获取当前登录用户id</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    List&lt;Address&gt; addressList = addressService.getByUid(uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户地址列表请求成功&quot;</span>,addressList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>一加载<code>address.html</code>页面，就向后端发送请求，获取当前用户的收货地址列表，并展示在页面对应位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="comment">//清空原始内容</span></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> trContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">tag</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">address</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">phone</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-edit\&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs add-del btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-trash-o\&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs add-def btn-default\&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(trContent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第一个地址默认为默认地址，所以其所在的默认地址按钮需要隐藏</span></span><br><span class="line">                <span class="comment">//某个元素隐藏，采用hide()方法</span></span><br><span class="line">                $(<span class="string">&quot;.add-def:eq(0)&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;收获地址列表展示&quot;&gt;&lt;a href=&quot;#收获地址列表展示&quot; class=&quot;headerlink&quot; title=&quot;收获地址列表展示&quot;&gt;&lt;/a&gt;收获地址列表展示&lt;/h1&gt;&lt;p&gt;用户收货地址展示页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/08/10/B%E7%A</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>七、新增收货地址功能的实现</title>
    <link href="https://bangwu2001.github.io/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://bangwu2001.github.io/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-08-10T15:08:00.000Z</published>
    <updated>2023-08-09T16:50:57.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新增收货地址"><a href="#新增收货地址" class="headerlink" title="新增收货地址"></a>新增收货地址</h1><p>收货地址管理页面</p><p><img src="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230808193330806.png" alt="image-20230808193330806" style="zoom:80%;"></p><p>点击新增收货地址按钮，出现新的页面，地址信息编辑表单</p><p><img src="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230808193413631.png" alt="image-20230808193413631" style="zoom:80%;"></p><h2 id="各功能的开发顺序"><a href="#各功能的开发顺序" class="headerlink" title="各功能的开发顺序"></a>各功能的开发顺序</h2><p>收货地址模块的功能：列表的展示、修改、删除、设置默认、新增收货地址</p><p>功能模块的开发顺序：新增收货地址-》列表展示-》设置默认收货地址-》删除收货地址-》修改收货地址</p><h2 id="数据库表的创建"><a href="#数据库表的创建" class="headerlink" title="数据库表的创建"></a>数据库表的创建</h2><p><img src="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230808194228462.png" alt="image-20230808194228462" style="zoom: 50%;"></p><h2 id="收货地址实体类的创建"><a href="#收货地址实体类的创建" class="headerlink" title="收货地址实体类的创建"></a>收货地址实体类的创建</h2><p>创建收货地址实体类<code>com.bang.store.pojo.Address</code>,继承自<code>BasePojo</code>基类，因为其同样含有四个公共字段 </p><p>属性名与数据表名一致，只是注意数据库字段一般命名方式为<code>xx_xx</code>，而java采用驼峰命名法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer aid;</span><br><span class="line">    Integer uid;</span><br><span class="line">    String name;</span><br><span class="line">    String provinceName;</span><br><span class="line">    String provinceCode;</span><br><span class="line">    String cityName;</span><br><span class="line">    String cityCode;</span><br><span class="line">    String areaName;</span><br><span class="line">    String areaCode;</span><br><span class="line">    String zip;</span><br><span class="line">    String address;</span><br><span class="line">    String phone;</span><br><span class="line">    String tel;</span><br><span class="line">    String tag;</span><br><span class="line">    Integer isDefault;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>新增收货地址本质上是将表单数据插入对应数据库表中，对应插入语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address(uid,name,province_name,province_code,city_name,city_code,area_name,area_code,zip,address,phone,tel,tag,is_default,created_user,created_time,modified_user,modified_time) <span class="keyword">values</span>(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);</span><br></pre></td></tr></table></figure><p>各个平台用户收货地址的保存是有上限的，在这里我们规定每个用户最多只能有3条(便于测试，实际上允许的地址数据会多很多)地址数据， 所以总体逻辑发生改变，即插入数据之前都需判断当前用户地址数目</p><p>本质上为依据用户id(uid)查询对应数据条数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> t_address <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建一个新的接口<code>AddressMapper</code>，在该接口中定义上述两个<code>sql</code>语句对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址模块的mapper接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入用户收货地址到数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 用户地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(Address address)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询当前用户收货地址条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户收货地址条数 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">countByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射"><a href="#配置SQL映射" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><p>在<code>resource/mapper</code>下创建地址映射文件<code>Address.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.AddressMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;addressPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_default&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDefault&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from t_address where uid=#&#123;uid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- useGeneratedKeys=&quot;true&quot; keyProperty=&quot;uid&quot; 开启某个字段作为主键并值自动递增，并指明字段名称  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;aid&quot;</span>&gt;</span></span><br><span class="line">        insert into t_address(uid,name,province_name,province_code,city_name,city_code,</span><br><span class="line">        area_name,area_code,zip,address,phone,tel,tag,is_default,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values(#&#123;uid&#125;,#&#123;name&#125;,#&#123;provinceName&#125;,#&#123;provinceCode&#125;,#&#123;cityName&#125;,#&#123;cityCode&#125;,</span><br><span class="line">        #&#123;areaName&#125;,#&#123;areaCode&#125;,#&#123;zip&#125;,#&#123;address&#125;,#&#123;phone&#125;,#&#123;tel&#125;,#&#123;tag&#125;,#&#123;isDefault&#125;</span><br><span class="line">        ,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>在<code>test/java</code>下创建<code>com.bang.store.mapper.AddressMapperTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AddressMapper addressMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countByUid</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前用户地址数目:&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address.setUid(<span class="number">1</span>);</span><br><span class="line">        address.setProvinceName(<span class="string">&quot;安徽省&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.insert(address);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>如果用户插入的是第一条收货地址，需要将当前地址设置为默认的收货地址(即当前地址的<code>is_default</code>字段设置为1)。如果查询到的结果大于3，这是需要抛出业务层的异常<code>AddressCountLimit</code>表明单个用户插入地址数据已达上限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单个用户地址数目超过上限异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressCountLimitException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AddressCountLimit</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>地址数据插入过程的异常，<code>InsertException</code>在之前用户信息的功能模块中已经定义过了</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建地址业务逻辑接口<code>IAddressService</code>，在其中定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增收货地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 用户地址数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Integer uid, String username, Address address)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>创建接口实现类，<code>AddressServiceImpl</code>，在其中实现接口抽象方法</p><p>在配置文件<code>application.properties</code>文件中定义收货地址数量上限</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user.address.max-count</span>:<span class="string">3</span></span><br></pre></td></tr></table></figure><p><code>Spring</code>读取配置文件数据方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer maxCount;</span><br></pre></td></tr></table></figure><p>业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AddressMapper addressMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址上限设置在application.properties配置文件里</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxCount;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Integer uid, String username, Address address)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询当前用户拥有地址数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">        <span class="comment">//超出地址上限，报异常</span></span><br><span class="line">        <span class="keyword">if</span>(count&gt;maxCount)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressCountLimitException</span>(<span class="string">&quot;收货地址数目超出规定上限&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首条收货地址设置为默认收货地址</span></span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">            address.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        address.setCreatedUser(username);</span><br><span class="line">        address.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        address.setModifiedUser(username);</span><br><span class="line">        address.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//插入地址数据</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.insert(address);</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;地址数据插入未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IAddressService addressService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;孙权&quot;</span>;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        address.setName(<span class="string">&quot;王伟&quot;</span>);</span><br><span class="line"></span><br><span class="line">        addressService.addAddress(uid,username,address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层抛出的收货地址数目大于规定最大阈值的异常处理,在控制层基类<code>BaseController</code>中定义对应的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AddressCountLimitException) &#123;</span><br><span class="line">    result.setState(<span class="number">7000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;收获地址数目超出上限&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/add<span class="built_in">_</span>new<span class="built_in">_</span>address</span><br><span class="line">request method: POST</span><br><span class="line">request params: Address address,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>新建收货地址控制层类<code>AddressController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/address&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IAddressService addressService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add_new_address&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">addAddress</span><span class="params">(Address address, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//获取uid和用户名</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        <span class="comment">//调用业务层,插入地址数据</span></span><br><span class="line">        addressService.addAddress(uid,username,address);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;新增收货地址成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-add-new-address&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/add_new_address&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-add-new-address&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="获取省市区列表"><a href="#获取省市区列表" class="headerlink" title="获取省市区列表"></a>获取省市区列表</h1><h2 id="省市区列表数据库表的创建"><a href="#省市区列表数据库表的创建" class="headerlink" title="省市区列表数据库表的创建"></a>省市区列表数据库表的创建</h2><p>创建数据库存储省市区列表数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_dict_district (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  parent <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  code <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230809192240718.png" alt="image-20230809192240718"></p><p>数据库字段说明</p><ul><li><code>parent</code>表示父区域代码号</li><li><code>code</code>表示区域自己的代码号</li><li><code>name</code>区域名称</li></ul><h2 id="省市区列表实体类的创建"><a href="#省市区列表实体类的创建" class="headerlink" title="省市区列表实体类的创建"></a>省市区列表实体类的创建</h2><p>创建对应的实体类<code>com.bang.store.pojo.district</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省市区地址实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">District</span> &#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String parent;</span><br><span class="line">    String code;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表持久层"><a href="#省市区列表持久层" class="headerlink" title="省市区列表持久层"></a>省市区列表持久层</h2><h3 id="规划执行的SQL语句-1"><a href="#规划执行的SQL语句-1" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>查询语句，根据父代号进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_dict_district <span class="keyword">where</span> parent<span class="operator">=</span>? <span class="keyword">order</span> <span class="keyword">by</span> code <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-2"><a href="#接口和抽象方法-2" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建新的接口<code>DistrictMapper</code>，在其中定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省市区地址持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DistrictMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父代号查询所有的省市区列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;District&gt; <span class="title function_">findByParent</span><span class="params">(String parent)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射-1"><a href="#配置SQL映射-1" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><p>在<code>resource/mapper</code>文件夹下创建<code>DistrictMappper.xml</code>文件，编写对应的SQL映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.DistrictMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByParent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bang.store.pojo.District&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dict_district where parent=#&#123;parent&#125; order by code ASC;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试-2"><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line">import com.bang.store.pojo.District;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class DistrictMapperTest &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    DistrictMapper districtMapper;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void findByParent()&#123;</span><br><span class="line">        String parent=&quot;86&quot;;</span><br><span class="line">        List&lt;District&gt; districtList = districtMapper.findByParent(parent);</span><br><span class="line">        for (District district : districtList) &#123;</span><br><span class="line">            System.out.println(district);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表持久层-1"><a href="#省市区列表持久层-1" class="headerlink" title="省市区列表持久层"></a>省市区列表持久层</h2><h3 id="规划异常-1"><a href="#规划异常-1" class="headerlink" title="规划异常"></a>规划异常</h3><p>此功能无异常需要处理</p><h3 id="抽象接口和方法"><a href="#抽象接口和方法" class="headerlink" title="抽象接口和方法"></a>抽象接口和方法</h3><p>新建省市区列表业务层接口<code>IDistrictService</code>，在其中创建对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省市区数据业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IDistrictService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父代号查询省市区信息列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区信息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;District&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现-1"><a href="#抽象方法实现-1" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>创建业务层接口实现类<code>DistrictServiceImpl</code>，在其中实现接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IDistrictService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    DistrictMapper districtMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;District&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span> &#123;</span><br><span class="line">        <span class="comment">//调用持久层查询数据列表</span></span><br><span class="line">        List&lt;District&gt; districtList = districtMapper.findByParent(parent);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在进行网络数据传输时，为了避免无效数据的传递，可以将无效数据设置为null，</span></span><br><span class="line"><span class="comment">         * 这样一方面可以节省流量另一方面可以提高效率</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 在此问题中，依据parent代号查询其下的所有省市区信息，真正有效字段其实只有code和name，一次其他字段可以认为i设置为null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (District district : districtList) &#123;</span><br><span class="line">            district.setId(<span class="literal">null</span>);</span><br><span class="line">            district.setParent(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> districtList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-3"><a href="#单元测试-3" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.District;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByParent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="string">&quot;86&quot;</span>;</span><br><span class="line">        List&lt;District&gt; districts = districtService.getByParent(parent);</span><br><span class="line">        <span class="keyword">for</span> (District district : districts) &#123;</span><br><span class="line">            System.out.println(district);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表控制层"><a href="#省市区列表控制层" class="headerlink" title="省市区列表控制层"></a>省市区列表控制层</h2><h3 id="设计请求-1"><a href="#设计请求-1" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /district/</span><br><span class="line">request method: GET</span><br><span class="line">request params: String parent</span><br><span class="line">response data: new JsonResult&lt;Lsit&lt;District&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><p>创建新的控制层类<code>DistrictController</code>，在里面编写对应的请求处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.District;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IDistrictService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/district&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以/district开头的请求url均会被拦截到该方法</span></span><br><span class="line">    <span class="comment">//url=/district或者url=/district/均有效</span></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;District&gt;&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span>&#123;</span><br><span class="line">        List&lt;District&gt; districtList = districtService.getByParent(parent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;省市区信息获取成功&quot;</span>,districtList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表前端页面"><a href="#省市区列表前端页面" class="headerlink" title="省市区列表前端页面"></a>省市区列表前端页面</h2><p>前一个版本省市区信息是保存在前端页面的<code>js</code>文件中，通过<code>js</code>代码获取的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/distpicker.data.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/distpicker.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现将这两行代码注释掉，让省市区数据信息依靠后端接口获取</p><p>检查前端页面在提交表单数据省市区数据时是否有相关的name属性和id属性</p><h1 id="获取省市区名称"><a href="#获取省市区名称" class="headerlink" title="获取省市区名称"></a>获取省市区名称</h1><p>依据省市区代码获取对应的省市区名称</p><h2 id="省市区名称持久层"><a href="#省市区名称持久层" class="headerlink" title="省市区名称持久层"></a>省市区名称持久层</h2><h3 id="规划执行的SQL语句-2"><a href="#规划执行的SQL语句-2" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>依据省市区code查询对应省市区的name，本质为一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> t_dict_district <span class="keyword">where</span> code<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-3"><a href="#接口和抽象方法-3" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据省市区代号查询对应的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 省市区代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">String <span class="title function_">findNameByCode</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射-2"><a href="#配置SQL映射-2" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findNameByCode&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">    select name from t_dict_district where code=#&#123;code&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试-4"><a href="#单元测试-4" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findNameByCode</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> districtMapper.findNameByCode(<span class="string">&quot;110000&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区名称业务层"><a href="#省市区名称业务层" class="headerlink" title="省市区名称业务层"></a>省市区名称业务层</h2><p>无特定的异常需要处理，所以跳过<strong>规划异常</strong></p><h3 id="接口和抽象方法-4"><a href="#接口和抽象方法-4" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依据省市区代码获取对应名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 省市区号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">String <span class="title function_">getNameByCode</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现-2"><a href="#抽象方法实现-2" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> districtMapper.findNameByCode(code);</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-5"><a href="#单元测试-5" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getNameByCode</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> districtService.getNameByCode(<span class="string">&quot;120000&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增收货地址业务层的优化"><a href="#新增收货地址业务层的优化" class="headerlink" title="新增收货地址业务层的优化"></a>新增收货地址业务层的优化</h2><p>用户新增收货地址，前端页面只会向后端传递省市区的代码，所以业务层在调用持久层接口将数据存入数据库时，需要调用<code>IDistrictService</code>接口中的<code>getNameByCode</code>来获取对应省市区名称，再存入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AddressMapper addressMapper;</span><br><span class="line">    <span class="comment">//地址业务层接口需要依赖省市区业务层接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址上限设置在application.properties配置文件里</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxCount;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Integer uid, String username, Address address)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询当前用户拥有地址数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">        <span class="comment">//超出地址上限，报异常</span></span><br><span class="line">        <span class="keyword">if</span>(count&gt;maxCount)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressCountLimitException</span>(<span class="string">&quot;收货地址数目超出规定上限&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首条收货地址设置为默认收货地址</span></span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">            address.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        address.setCreatedUser(username);</span><br><span class="line">        address.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        address.setModifiedUser(username);</span><br><span class="line">        address.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//依据前端反馈的省市区号码获取对应省市区名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">provinceName</span> <span class="operator">=</span> districtService.getNameByCode(address.getProvinceCode());</span><br><span class="line">        <span class="type">String</span> <span class="variable">cityName</span> <span class="operator">=</span> districtService.getNameByCode(address.getCityCode());</span><br><span class="line">        <span class="type">String</span> <span class="variable">areaName</span> <span class="operator">=</span> districtService.getNameByCode(address.getAreaCode());</span><br><span class="line">        address.setProvinceName(provinceName);</span><br><span class="line">        address.setCityName(cityName);</span><br><span class="line">        address.setAreaName(areaName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入地址数据</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.insert(address);</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;地址数据插入未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取省市区前端页面"><a href="#获取省市区前端页面" class="headerlink" title="获取省市区前端页面"></a>获取省市区前端页面</h2><p><code>addAddress.html</code>页面中编写对应的省市区展示，根据用户不同的选择将对应的省市区信息填充到对应的下拉列表</p><h3 id="编写相关事件代码"><a href="#编写相关事件代码" class="headerlink" title="编写相关事件代码"></a>编写相关事件代码</h3><p>整体前端页面的逻辑</p><ol><li>用户点击新增收货地址按钮</li><li>出现地址信息表单页面，触发事件，自动将86(代表中国地区编号)发送后端，请求省份信息列表，填充到省份下拉列表，此时城市和区县下拉列表为只存在默认选项</li><li>省份下拉列表值发生改变，触发事件，自动向后端发送请求(携带当前选中省份号码)，请求该省份的所有城市信息列表，填充到城市下拉列表</li><li>城市下拉列表发生改变，出发事件，自动向后端发送请求(携带当前选中城市号码)，请求该城市的所有区县信息列表，填充到区县下拉列表</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//每个下拉列表的默认选项</span></span><br><span class="line">    <span class="comment">//注意:value属性非常重要,实际传给后端的值就是value属性值,这里将其定义为对应省市区的代码编号</span></span><br><span class="line">    <span class="keyword">let</span> defaultOption = <span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择 ----&lt;/option&gt;&quot;</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">showProvinceList</span>();<span class="comment">//外部定于对应的方法</span></span><br><span class="line">    <span class="comment">//城市下拉列表添加对应子标签 option子标签</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(defaultOption);</span><br><span class="line">    <span class="comment">//区域下拉列表添加对应子标签 option子标签</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(defaultOption);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//省的下拉列表数据展示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showProvinceList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择省/直辖市 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/district/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="string">&quot;parent=86&quot;</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="keyword">let</span> provinceList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;provinceList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+provinceList[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+provinceList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;省份数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;省份数据获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * change()函数用于监听某个空间是否发生改变，一旦发生改变，触发事件，执行对应函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//省的下拉列表如果发生改变,会向后端服务器发送请求查询对应省下的所有市数据列表,并展示在对应的下拉列表</span></span><br><span class="line">$(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//清空城市和区县下拉列表中所有内容</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    <span class="comment">//填充默认值</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择市 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择区县 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">val</span>()==<span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">//默认选项直接返回</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/district/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="string">&quot;parent=&quot;</span>+$(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="keyword">let</span> cityList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;cityList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+cityList[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+cityList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;城市数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;城市数据获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//城市的下拉列表发生改变,会向后端服务器发送请求,查询对应市下面的区县信息列表，并展示在对应的下拉列表</span></span><br><span class="line">$(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//清空区县下拉列表中所有的原始子标签</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    <span class="comment">//填充默认值</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择区县 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    <span class="comment">//选择默认无效项,直接返回</span></span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">val</span>()==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/district/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="string">&quot;parent=&quot;</span>+$(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="keyword">let</span> areaList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;areaList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+areaList[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+areaList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;区县数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;区县数据获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;#btn-add-new-address&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/add_new_address&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-add-new-address&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;新增收货地址&quot;&gt;&lt;a href=&quot;#新增收货地址&quot; class=&quot;headerlink&quot; title=&quot;新增收货地址&quot;&gt;&lt;/a&gt;新增收货地址&lt;/h1&gt;&lt;p&gt;收货地址管理页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/08/10/B%E7%AB%99%E7%94</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>六、上传头像功能的实现</title>
    <link href="https://bangwu2001.github.io/2023/08/06/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/06%E4%B8%8A%E4%BC%A0%E5%A4%B4%E5%83%8F%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://bangwu2001.github.io/2023/08/06/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/06%E4%B8%8A%E4%BC%A0%E5%A4%B4%E5%83%8F%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-08-06T14:08:00.000Z</published>
    <updated>2023-08-06T15:28:18.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上传头像功能的实现"><a href="#上传头像功能的实现" class="headerlink" title="上传头像功能的实现"></a>上传头像功能的实现</h1><p>用户上传头像图片，涉及到的问题：图片在数据库中以何种形式存在？</p><p>文件上传保存在服务器的某个位置，只需要将该位置记录即可，即数据库中对应字段存储的是头像图片在服务器中的存储路径</p><p>在实际应用场景中，一般是将静态资源文件(图片、视频、文本文件等资源文件)存储在一台专门的电脑上，将该电脑作为一个单独的服务器使用</p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划SQL语句"><a href="#规划SQL语句" class="headerlink" title="规划SQL语句"></a>规划SQL语句</h3><p>将用户头像存储路径更新到数据库表中的avatar字段，本质为一条更新语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> avatar<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="抽象接口和方法"><a href="#抽象接口和方法" class="headerlink" title="抽象接口和方法"></a>抽象接口和方法</h3><p>在<code>UserMapper</code>接口定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户图像</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户ide</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> avatar 用户图像存储地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 信息修改者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 信息修改时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateAvatarByUid</span><span class="params">(Integer uid,String avatar,String modifiedUser,Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法配置到映射文件UserMapper-xml"><a href="#抽象方法配置到映射文件UserMapper-xml" class="headerlink" title="抽象方法配置到映射文件UserMapper.xml"></a>抽象方法配置到映射文件<code>UserMapper.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAvatarByUid&quot;</span>&gt;</span></span><br><span class="line">    update t_user set avatar=#&#123;avatar&#125;,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125; where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAvatarByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    String avatar=<span class="string">&quot;/userPhoto/yifei.png&quot;</span>;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">modifiedTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">modifiedUser</span> <span class="operator">=</span> <span class="string">&quot;管理员&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateAvatarByUid(<span class="number">3</span>, avatar, modifiedUser, modifiedTime);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响行数:&quot;</span>+rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><ul><li>打开页面时，可能找不到用户的信息或用户已被删除</li><li>信息插入过程中发生未知错误</li></ul><blockquote><p>前面的功能以前模块已经实现对应代码</p></blockquote><h3 id="抽象接口和方法-1"><a href="#抽象接口和方法-1" class="headerlink" title="抽象接口和方法"></a>抽象接口和方法</h3><p>在 <code>IUserService</code>接口中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户图像信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> avatar 用户图像数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">alertAvatar</span><span class="params">(Integer uid,String avatar)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertAvatar</span><span class="params">(Integer uid, String avatar)</span> &#123;</span><br><span class="line">    <span class="comment">//查询当前用户是否存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新数据库avatar字段</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateAvatarByUid(uid, avatar, user.getUsername(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;图像信息更新过程发生未知异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertAvatar</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/libai.png&quot;</span>;</span><br><span class="line">    iUserService.alertAvatar(uid,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层的两种可能异常，在以前功能模块中，控制层异常处理类中均有对应的逻辑处理</p><p>由于文件上传过程中可能由于大小、格式、类型等错误引发异常，所以需要专门规划文件上传的异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FileUploadException: 泛指文件上传异常，基类，继承自RunTimeException</span><br><span class="line">FileEmptyException: 文件为空异常</span><br><span class="line">FileSizeException: 文件大小超出限制异常</span><br><span class="line">FileTypeException: 文件类型异常</span><br><span class="line">FileUploadIoException: 文件读写异常</span><br></pre></td></tr></table></figure><p>在控制层异常处理基类中定义对应的异常逻辑(不同的异常，基于不同的状态响应码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(&#123;ServiceException.class, FileUploadException.class&#125;)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileEmptyException) &#123;</span><br><span class="line">    result.setState(<span class="number">6000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileSizeException) &#123;</span><br><span class="line">    result.setState(<span class="number">6001</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件大小超出限制异常&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileTypeException)&#123;</span><br><span class="line">    result.setState(<span class="number">6002</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件类型异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileUploadIOException) &#123;</span><br><span class="line">    result.setState(<span class="number">6003</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件读写异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /user/alert_avatar</span><br><span class="line">request method: POST(原因:GET最大允许提交数据量为2K)</span><br><span class="line">request params: HttpSession,MultiPartFile File //(SpringMVC提供的文件上传对象)</span><br><span class="line">response data: JsonResult&lt;String&gt; //(页面切换，需要时刻保存头像路径，否则再次切换头像页面无法显示)</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 设置上传文件的最大值 10MB */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_AVATAR_SIZE</span> <span class="operator">=</span> <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="comment">/** 设置允许接收的文件类型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; AVATAR_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/bmp&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MultiPartFile是SpringMVC提供的一个接口，这个接口为我们包装了获取文件类型的数据，任何类型的File都可以接受</span></span><br><span class="line"><span class="comment">     * SpringBoot整合了SpringMVC,只需要在处理请求的方法参数列表上申明一个MultiPartFile的参数</span></span><br><span class="line"><span class="comment">     * SpringBoot会自定将接受的文件数据赋值给这个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_avatar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">alertAvatar</span><span class="params">(MultipartFile file,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.getSize()&gt;MAX_AVATAR_SIZE)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;文件超出大小限制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!AVATAR_TYPE.contains(file.getContentType()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>(<span class="string">&quot;文件类型错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//规定文件存储路径 .../upload/xxx.xx</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent);</span><br><span class="line">    <span class="comment">//parent文件夹不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    String[] splits = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="comment">//文件后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> splits[splits.length-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//生成随机的文件名(为避免不同用户文件名重复导致数据被覆盖丢失</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> uuid+<span class="string">&quot;.&quot;</span>+suffix; <span class="comment">//新的文件名</span></span><br><span class="line">    System.out.println(newFileName);</span><br><span class="line">    <span class="comment">//存储路径</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,newFileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.transferTo(dest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>(<span class="string">&quot;文件读写错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    System.out.println(dest.getPath());</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>+newFileName;</span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line"></span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户头像修改成功&quot;</span>,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>直接通过表单发送请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--上传头像表单开始--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/user/alert_avatar&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 control-label&quot;</span>&gt;</span>选择头像:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img-avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../images/index/user.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-responsive&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-offset-2 col-md-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-primary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="部分功能优化和Bug解决"><a href="#部分功能优化和Bug解决" class="headerlink" title="部分功能优化和Bug解决"></a>部分功能优化和Bug解决</h2><h3 id="更改SpringMVC默认文件大小"><a href="#更改SpringMVC默认文件大小" class="headerlink" title="更改SpringMVC默认文件大小"></a>更改SpringMVC默认文件大小</h3><p>方式一：在配置文件<code>application.yaml</code>里修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">       <span class="attr">multipart:</span></span><br><span class="line">         <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">         <span class="attr">max-request-size:</span> <span class="string">15MB</span></span><br></pre></td></tr></table></figure><p>方式二：采用Java代码修改上传文件大小限制，在主类中进行配置，可以定义一个方法，用@Bean修饰，在类的前面添加@Configuration修饰，该方法返回值类型`MultiPartConfigElement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//指明当前项目中mapper接口的路径,项目启动会自动加载对应接口文件</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.bang.store.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(StoreApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MultipartConfigElement <span class="title function_">getMultipartConfigElement</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建配置类工厂类对象</span></span><br><span class="line">        <span class="type">MultipartConfigFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultipartConfigFactory</span>();</span><br><span class="line">        <span class="comment">//设置需要创建对象相关信息</span></span><br><span class="line">        <span class="comment">//10MB</span></span><br><span class="line">        factory.setMaxFileSize(DataSize.of(<span class="number">10</span>, DataUnit.MEGABYTES));</span><br><span class="line">        factory.setMaxRequestSize(DataSize.of(<span class="number">15</span>,DataUnit.MEGABYTES));</span><br><span class="line">        <span class="comment">//通过工厂类创建MultiPartConfigElement对象</span></span><br><span class="line">        <span class="keyword">return</span> factory.createMultipartConfig();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面图像显示"><a href="#页面图像显示" class="headerlink" title="页面图像显示"></a>页面图像显示</h3><p>通过ajax发送请求，解析数据，设置到image对应标签进行数据展示</p><p>前端表单数据映射</p><ul><li>$(“#表单id”).serialize()<ul><li>可以将表单数据自动拼接成key=value的结构提交给服务器，一般提交的是普通的空间数据(比如:text\password\radio\checkbox等)</li></ul></li><li><p>new FormData($(“#表单id”)[index])</p><ul><li>FormData类，将表单中数据保持原有结构进行数据的发送</li></ul></li><li><p>ajax默认处理数据时按照字符串的形式进行处理，以及默认采用字符串的形式提交数据，关闭这两个默认功能</p><ul><li>```javascript<br>processData: false //处理数据的形式，false为关闭以字符串的形式处理数据<br>contentType: false // 关闭默认的数据提交格式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&quot;#btn-change-avatar&quot;).click(function ()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &quot;/user/alert_avatar&quot;</span><br><span class="line">        ,type: &quot;POST&quot;</span><br><span class="line">        ,data: new FormData($(&quot;#form-horizontal&quot;)[0])</span><br><span class="line">        ,processData: false //处理数据的形式，false为关闭以字符串的形式处理数据</span><br><span class="line">        ,contentType: false // 关闭默认的数据提交格式</span><br><span class="line">        ,dataType: &quot;JSON&quot;</span><br><span class="line">        ,success: function (data)&#123;</span><br><span class="line">            if(data.state == 200)&#123;</span><br><span class="line">                //图像显示在页面</span><br><span class="line">                //attr(key,val) 给标签对应属性设置对应值</span><br><span class="line">                $(&quot;#img-avatar&quot;).attr(&quot;src&quot;,data.data);</span><br><span class="line">                alert(&quot;图像修改成功&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                alert(&quot;图像上传失败 &quot;+data.message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,error:function (xmh)&#123;</span><br><span class="line">            alert(&quot;图像上传发生未知异常&quot;+xmh.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="页面跳转图像消失解决办法"><a href="#页面跳转图像消失解决办法" class="headerlink" title="页面跳转图像消失解决办法"></a>页面跳转图像消失解决办法</h3><p>从其他页面再次回到当前页面或者登陆时显示图像</p><ul><li><p>图像上传成功后，可以将图像路径保存在cookie对象，然后每次检测用户打开上传图像页面，在该页面中通过<code>$(document).ready()</code>方法自动检测读取cookie中图像并设置到image的src属性</p></li><li><p>此逻辑应该写在登陆页面</p><ul><li><p>前端query中cookie的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入cookie js文件</span></span><br><span class="line">&lt;script src=<span class="string">&quot;../bootstrap3/js/jquery.cookie.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">//2.调用cookie方法</span></span><br><span class="line"><span class="comment">//三个参数,key,avlue为键值对，time为cookie的存活时间,单位为天</span></span><br><span class="line">$.<span class="title function_">cookie</span>(key,value,time); </span><br></pre></td></tr></table></figure></li><li><p>login.html页面新增逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-login&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-login&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                <span class="comment">//图像路径设置到cookie对象</span></span><br><span class="line">                $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>,data.<span class="property">data</span>.<span class="property">avatar</span>, &#123;<span class="attr">expires</span>:<span class="number">1</span>&#125;);</span><br><span class="line">                <span class="comment">//跳转到对应页面</span></span><br><span class="line">                <span class="comment">//相对路径指定对应页面位置</span></span><br><span class="line">                location.<span class="property">href</span>=<span class="string">&quot;index.html&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;登陆失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;登陆失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>upload.html里面检测加载cookie的逻辑代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//获取cookie数据</span></span><br><span class="line">    <span class="keyword">let</span> avatar = $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(avatar);</span><br><span class="line">    $(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,avatar);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>重新上传图像，需要覆盖原始cookie里的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-change-avatar&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/alert_avatar&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>($(<span class="string">&quot;#form-horizontal&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        ,<span class="attr">processData</span>: <span class="literal">false</span> <span class="comment">//处理数据的形式，false为关闭以字符串的形式处理数据</span></span><br><span class="line">        ,<span class="attr">contentType</span>: <span class="literal">false</span> <span class="comment">// 关闭默认的数据提交格式</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//图像显示在页面</span></span><br><span class="line">                <span class="comment">//attr(key,val) 给标签对应属性设置对应值</span></span><br><span class="line">                $(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,data.<span class="property">data</span>);</span><br><span class="line">                <span class="comment">//覆盖原来的cookie</span></span><br><span class="line">                $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>,data.<span class="property">data</span>, &#123;<span class="attr">expires</span>:<span class="number">1</span>&#125;);</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;图像修改成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;图像上传失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;图像上传发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;上传头像功能的实现&quot;&gt;&lt;a href=&quot;#上传头像功能的实现&quot; class=&quot;headerlink&quot; title=&quot;上传头像功能的实现&quot;&gt;&lt;/a&gt;上传头像功能的实现&lt;/h1&gt;&lt;p&gt;用户上传头像图片，涉及到的问题：图片在数据库中以何种形式存在？&lt;/p&gt;
&lt;p&gt;文件上</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>五、个人资料功能的实现</title>
    <link href="https://bangwu2001.github.io/2023/08/06/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/05%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://bangwu2001.github.io/2023/08/06/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/05%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-08-06T14:05:00.000Z</published>
    <updated>2023-08-06T15:28:23.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人资料功能"><a href="#个人资料功能" class="headerlink" title="个人资料功能"></a>个人资料功能</h1><p>用户提交在页面填写个人资料，点击修改按钮提交至后台程序，保存至数据库</p><p><img src="/2023/08/06/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/05%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230806093455640.png" alt="image-20230806093455640"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><h4 id="更新用户信息的SQL语句"><a href="#更新用户信息的SQL语句" class="headerlink" title="更新用户信息的SQL语句"></a>更新用户信息的SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> phone<span class="operator">=</span>?,email<span class="operator">=</span>?,gender<span class="operator">=</span>?，modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h4 id="根据用户名查询用户数据"><a href="#根据用户名查询用户数据" class="headerlink" title="根据用户名查询用户数据"></a>根据用户名查询用户数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>此功能在修改密码功能模块已经实现</p><h3 id="接口和抽象方法的设计"><a href="#接口和抽象方法的设计" class="headerlink" title="接口和抽象方法的设计"></a>接口和抽象方法的设计</h3><p>在<code>UserMapper</code>接口中定义更新用户信息方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据uid更新用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 更新操作受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateInfoByUid</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法配置到映射文件UserMapper-xml中"><a href="#抽象方法配置到映射文件UserMapper-xml中" class="headerlink" title="抽象方法配置到映射文件UserMapper.xml中"></a>抽象方法配置到映射文件<code>UserMapper.xml</code>中</h3><p>采用<code>Mybatis</code>的<code>if</code>标签，只有在各个字段不为空时，才会执行更新操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateInfoByUid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.bang.store.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update t_user</span><br><span class="line">    set</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone!=null&quot;</span>&gt;</span>phone=#&#123;phone&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span>gender=#&#123;gender&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125;</span><br><span class="line">    where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateInfoByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUid(<span class="number">2</span>);</span><br><span class="line">    user.setPhone(<span class="string">&quot;15823209876&quot;</span>);</span><br><span class="line">    user.setGender(<span class="number">1</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;zhangfei@163.com&quot;</span>);</span><br><span class="line">    user.setModifiedUser(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">    user.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateInfoByUid(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响函数:&quot;</span>+rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>业务层主要实现的功能</p><ul><li>用户进入当前页面，系统查询用户信息，并填充到页面对应的文本框</li><li>用户如果点击修改按钮，则执行用户信息更新操作，将对应信息写入数据库</li></ul><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><ul><li>打开页面时，可能找不到用户的信息或用户已被删除</li><li>信息插入过程中发生未知错误</li></ul><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>IUserService</code>接口中，定义对应的抽象方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 根据用户id查询对应用户信息</span><br><span class="line">* @param uid 用户id</span><br><span class="line">* @return 用户信息</span><br><span class="line">*/</span><br><span class="line">User findUserByUid(Integer uid);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 修改更新用户信息</span><br><span class="line">* @param uid 用户id</span><br><span class="line">* @param username 用户姓名</span><br><span class="line">* @param user 用户信息对象</span><br><span class="line">*/</span><br><span class="line">void alertInfo(Integer uid,String username,User user);</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>在<code>`UserServiceImpl</code>中实现上述两个抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findUserByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;当前用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertInfo</span><span class="params">(Integer uid, String username, User user)</span> &#123;</span><br><span class="line">    <span class="comment">//存入信息之前，仍然要判断当前用户是否存在</span></span><br><span class="line">    <span class="comment">//可能用户在此页面停留很久导致用户不存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">curuser</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(curuser==<span class="literal">null</span> || curuser.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;当前用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填充信息</span></span><br><span class="line">    user.setUid(uid);</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setModifiedUser(username);</span><br><span class="line">    user.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据库</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateInfoByUid(user);</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;更新用户信息过程发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUserByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> iUserService.findUserByUid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateInfoByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUid(<span class="number">2</span>);</span><br><span class="line">    user.setPhone(<span class="string">&quot;122&quot;</span>);</span><br><span class="line">    user.setGender(<span class="number">1</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;zhangfei@163.com&quot;</span>);</span><br><span class="line">    user.setModifiedUser(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">    user.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    iUserService.alertInfo(<span class="number">2</span>,<span class="string">&quot;张飞2&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>用户不存在异常和插入过程异常在前面的功能中均已经实现，所以异常处理类中无需增加新的代码逻辑</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><h4 id="打开页面，用户信息展示"><a href="#打开页面，用户信息展示" class="headerlink" title="打开页面，用户信息展示"></a>打开页面，用户信息展示</h4><p>一打开个人资料页面，便向后台发送查询当前用户请求</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /user/get<span class="built_in">_</span>by<span class="built_in">_</span>id</span><br><span class="line">request method: GET</span><br><span class="line">request params: HttpSession session</span><br><span class="line">response data: new JsonResult&lt;User&gt;</span><br></pre></td></tr></table></figure><h4 id="点击修改按钮，更新用户信息"><a href="#点击修改按钮，更新用户信息" class="headerlink" title="点击修改按钮，更新用户信息"></a>点击修改按钮，更新用户信息</h4><p>用户点击修改按钮，向后台发送请求，后台进行数据库更新</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /user/alert<span class="built_in">_</span>info</span><br><span class="line">request method: POST</span><br><span class="line">request params: User user,HttpSession session</span><br><span class="line">response data: JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在<code>UserController</code>里编写对应的请求处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(&quot;/get_by_id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">getById</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findUserByUid(uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;OK&quot;</span>,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">alertInfo</span><span class="params">(User user,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    userService.alertInfo(uid,username,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面修改"><a href="#前端页面修改" class="headerlink" title="前端页面修改"></a>前端页面修改</h2><h3 id="功能1"><a href="#功能1" class="headerlink" title="功能1"></a>功能1</h3><p>打开<code>userdata.html</code>页面，会自动发送<code>ajax</code>请求到<code>\user\get_by_uid</code>，查询对应数据并展示到页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;&#125; );</span><br><span class="line"><span class="comment">//页面加载完成自动执行里面的函数逻辑</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/get_by_id&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//请求成功，数据展示</span></span><br><span class="line">                $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(data.<span class="property">data</span>.<span class="property">username</span>);</span><br><span class="line">                $(<span class="string">&quot;#phone&quot;</span>).<span class="title function_">val</span>(data.<span class="property">data</span>.<span class="property">phone</span>);</span><br><span class="line">                $(<span class="string">&quot;#email&quot;</span>).<span class="title function_">val</span>(data.<span class="property">data</span>.<span class="property">email</span>);</span><br><span class="line">                <span class="keyword">let</span> gender = (data.<span class="property">data</span>.<span class="property">gender</span>==<span class="number">0</span>?$(<span class="string">&quot;#gender-female&quot;</span>):$(<span class="string">&quot;#gender-male&quot;</span>));</span><br><span class="line">                gender.<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>,<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户信息获取失败&quot;</span> +data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户信息获取失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="功能2"><a href="#功能2" class="headerlink" title="功能2"></a>功能2</h3><p>检测用户点击修改按钮，发送请求到<code>\user\alert_info</code>，进行后台数据更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-change-info&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/alert_info&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-change-info&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户信息修改成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户信息修改失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户信息修改失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;个人资料功能&quot;&gt;&lt;a href=&quot;#个人资料功能&quot; class=&quot;headerlink&quot; title=&quot;个人资料功能&quot;&gt;&lt;/a&gt;个人资料功能&lt;/h1&gt;&lt;p&gt;用户提交在页面填写个人资料，点击修改按钮提交至后台程序，保存至数据库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第四章：程序计数器</title>
    <link href="https://bangwu2001.github.io/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>https://bangwu2001.github.io/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</id>
    <published>2023-08-05T14:15:00.000Z</published>
    <updated>2023-08-05T14:29:21.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四章：程序计数器"><a href="#第四章：程序计数器" class="headerlink" title="第四章：程序计数器"></a>第四章：程序计数器</h1><h2 id="程序计数器-PC寄存器-的介绍"><a href="#程序计数器-PC寄存器-的介绍" class="headerlink" title="程序计数器(PC寄存器)的介绍"></a>程序计数器(PC寄存器)的介绍</h2><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805144249787.png" alt="image-20230805144249787" style="zoom:80%;"></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805144642697.png" alt="image-20230805144642697" style="zoom:80%;"></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805145041516.png" alt="image-20230805145041516" style="zoom:80%;"></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805145741710.png" alt="image-20230805145741710" style="zoom:80%;"></p><p>  对于运行时数据区里的每一个内存结构，需要重点关注以下两个部分：GC(垃圾回收)和OOM(OutOfMemoryError)</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805150200250.png" alt="image-20230805150200250" style="zoom:80%;"></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805151257080.png" alt="image-20230805151257080" style="zoom:80%;"></p><h2 id="PC寄存器面试常见问题"><a href="#PC寄存器面试常见问题" class="headerlink" title="PC寄存器面试常见问题"></a>PC寄存器面试常见问题</h2><h3 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h3><ul><li>使用PC寄存器存储字节码指令地址有什么用？</li><li>为什么使用PC寄存器记录当前线程的执行地址呢？</li></ul><p><strong>Ans:</strong></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805151822032.png" alt="image-20230805151822032" style="zoom:80%;"></p><h3 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h3><ul><li>PC寄存器为什么会被设定为线程私有？</li></ul><p><strong>Ans:</strong></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805152201883.png" alt="image-20230805152201883" style="zoom:80%;"></p><h2 id="补充：CPU时间片"><a href="#补充：CPU时间片" class="headerlink" title="补充：CPU时间片"></a>补充：CPU时间片</h2><p><strong>宏观并行，微观并发</strong></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805152647595.png" alt="image-20230805152647595" style="zoom:80%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第四章：程序计数器&quot;&gt;&lt;a href=&quot;#第四章：程序计数器&quot; class=&quot;headerlink&quot; title=&quot;第四章：程序计数器&quot;&gt;&lt;/a&gt;第四章：程序计数器&lt;/h1&gt;&lt;h2 id=&quot;程序计数器-PC寄存器-的介绍&quot;&gt;&lt;a href=&quot;#程序计数器-PC寄存</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第三章：运行时数据区概述及线程</title>
    <link href="https://bangwu2001.github.io/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://bangwu2001.github.io/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-08-05T14:15:00.000Z</published>
    <updated>2023-08-05T14:25:59.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章：运行时数据区概述及线程"><a href="#第三章：运行时数据区概述及线程" class="headerlink" title="第三章：运行时数据区概述及线程"></a>第三章：运行时数据区概述及线程</h1><h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p>java程序执行流程</p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104157210.png" alt="image-20230805104157210" style="zoom:80%;"></p><p> <img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104430286.png" alt="image-20230805104430286" style="zoom:80%;"></p><h3 id="JVM系统概述"><a href="#JVM系统概述" class="headerlink" title="JVM系统概述"></a>JVM系统概述</h3><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104726588.png" alt="image-20230805104726588" style="zoom:80%;"></p><h3 id="运行时数据区内存划分"><a href="#运行时数据区内存划分" class="headerlink" title="运行时数据区内存划分"></a>运行时数据区内存划分</h3><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104944035.png" alt="image-20230805104944035" style="zoom:80%;"></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805105219674.png" alt="image-20230805105219674" style="zoom:80%;"></p><h3 id="线程间共享"><a href="#线程间共享" class="headerlink" title="线程间共享"></a>线程间共享</h3><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805105747129.png" alt="image-20230805105747129" style="zoom:80%;"></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程概述"><a href="#线程概述" class="headerlink" title="线程概述"></a>线程概述</h3><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805105936035.png" alt="image-20230805105936035" style="zoom:80%;"></p><h3 id="JVM系统线程"><a href="#JVM系统线程" class="headerlink" title="JVM系统线程"></a>JVM系统线程</h3><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805110315551.png" alt="image-20230805110315551" style="zoom:80%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第三章：运行时数据区概述及线程&quot;&gt;&lt;a href=&quot;#第三章：运行时数据区概述及线程&quot; class=&quot;headerlink&quot; title=&quot;第三章：运行时数据区概述及线程&quot;&gt;&lt;/a&gt;第三章：运行时数据区概述及线程&lt;/h1&gt;&lt;h2 id=&quot;运行时数据区&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>四、用户密码修改功能的实现</title>
    <link href="https://bangwu2001.github.io/2023/08/04/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/04%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://bangwu2001.github.io/2023/08/04/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/04%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-08-03T16:05:00.000Z</published>
    <updated>2023-08-03T16:23:36.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h1><p>需要用户提交原始密码和新密码，再根据当前登录用户进行信息的修改操作</p><p><img src="/2023/08/04/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/04%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230803224929626.png" alt="image-20230803224929626"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划需要执行的SQL语句"><a href="#规划需要执行的SQL语句" class="headerlink" title="规划需要执行的SQL语句"></a>规划需要执行的SQL语句</h3><p>根据用户uid修改用户的password值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> password<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>根据uid查询用户数据，在修改密码之前，要保证当前用户数据存在，检测当前用户是否被标记删除，检测用户输入的原始密码是否正确</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法"><a href="#设计接口和抽象方法" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p>在接口<code>UserMapper</code>中定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据uid更改用户密码字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password 更改的新密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modifiedUser 更改者用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modifiedDate 更改操作时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 受影响的行数，用于后续判断是否更新成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Integer <span class="title function_">updatePasswordByUid</span><span class="params">(Integer uid, String password, String modifiedUser, Date modifiedDate)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户uid查询用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前用户对象，找不到返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">findByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法配置到映射文件UserMapper-xml中"><a href="#抽象方法配置到映射文件UserMapper-xml中" class="headerlink" title="抽象方法配置到映射文件UserMapper.xml中"></a>抽象方法配置到映射文件<code>UserMapper.xml</code>中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePasswordByUid&quot;</span>&gt;</span></span><br><span class="line">    update t_user set password=#&#123;password&#125;,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedDate&#125;</span><br><span class="line">    where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="功能单元测试"><a href="#功能单元测试" class="headerlink" title="功能单元测试"></a>功能单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePasswordByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> userMapper.updatePasswordByUid(<span class="number">2</span>,<span class="string">&quot;znew&quot;</span>,<span class="string">&quot;张飞&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    System.out.println(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划可能产生的异常"><a href="#规划可能产生的异常" class="headerlink" title="规划可能产生的异常"></a>规划可能产生的异常</h3><p>整个过程可能发生的错误</p><ul><li>用户输入的原始密码错误；用户找不到或者已被删除(is_delete字段为1)</li><li>update执行过程中引发的未知错误</li></ul><p>密码不匹配，用户找不到的异常类在登陆功能中以实现过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户插入数据时产生的未知异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UpdateException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法-1"><a href="#设计接口和抽象方法-1" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p>用户密码修改核心方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改密码和新方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 当前用户名,也可视为密码修改操作的执行者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldPassword 用户输入的原始密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newPassword 用户输入的新密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">alertPassword</span><span class="params">(Integer uid,String username,String oldPassword,String newPassword)</span>;</span><br></pre></td></tr></table></figure><p>实现方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertPassword</span><span class="params">(Integer uid, String username, String oldPassword, String newPassword)</span> &#123;</span><br><span class="line">    <span class="comment">//1.根据uid查询当前用户信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="comment">//2.判断当前用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;当前用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.判断用户输入的原始密码是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> user.getSalt();</span><br><span class="line">    <span class="keyword">if</span>(!user.getPassword().equals(getMD5password(oldPassword,salt)))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordNotMatchException</span>(<span class="string">&quot;用户密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.修改密码</span></span><br><span class="line">    <span class="comment">//计算新密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> getMD5password(newPassword,salt);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updatePasswordByUid(uid, password, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;用户信息插入发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="功能单元测试-1"><a href="#功能单元测试-1" class="headerlink" title="功能单元测试"></a>功能单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertPassword</span><span class="params">()</span>&#123;</span><br><span class="line">    iUserService.alertPassword(<span class="number">1</span>,<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;li123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>在基类<code>BaseController</code>中添加新的异常类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UpdateException)&#123;</span><br><span class="line">            result.setState(<span class="number">5003</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;更新数据时未知异常&quot;</span>);</span><br><span class="line">        &#125; </span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: /user/alert<span class="built_in">_</span>password</span><br><span class="line">method: post</span><br><span class="line">request params: String oldPassword,String newPassword</span><br><span class="line">response data: new JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/alert_password&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">alertPassword</span><span class="params">(String oldPassword,String newPassword,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户名和用户密码</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    userService.alertPassword(uid,username,oldPassword,newPassword);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;密码修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面开发"><a href="#前端页面开发" class="headerlink" title="前端页面开发"></a>前端页面开发</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-change-password&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/alert_password&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-change-password&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;密码修改成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;密码修改失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;密码修改失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;密码修改&quot;&gt;&lt;a href=&quot;#密码修改&quot; class=&quot;headerlink&quot; title=&quot;密码修改&quot;&gt;&lt;/a&gt;密码修改&lt;/h1&gt;&lt;p&gt;需要用户提交原始密码和新密码，再根据当前登录用户进行信息的修改操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/08/04</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第二章：类加载子系统</title>
    <link href="https://bangwu2001.github.io/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://bangwu2001.github.io/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-08-03T16:05:00.000Z</published>
    <updated>2023-08-03T16:35:55.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：类加载子系统"><a href="#第二章：类加载子系统" class="headerlink" title="第二章：类加载子系统"></a>第二章：类加载子系统</h1><h2 id="类加载器与类的加载过程"><a href="#类加载器与类的加载过程" class="headerlink" title="类加载器与类的加载过程"></a>类加载器与类的加载过程</h2><h3 id="JVM的内存结构"><a href="#JVM的内存结构" class="headerlink" title="JVM的内存结构"></a>JVM的内存结构</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803200538663.png" alt="image-20230803200538663" style="zoom:80%;"></p><h3 id="类加载器子系统作用"><a href="#类加载器子系统作用" class="headerlink" title="类加载器子系统作用"></a>类加载器子系统作用</h3><ul><li>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识</li><li>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定</li><li>加载的类信息存放于一块称为方法区的内存空间。除了类信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量(这部分信息是Class文件中常量池部分的内存映射)</li></ul><h3 id="类加载器中ClassLoader的角色"><a href="#类加载器中ClassLoader的角色" class="headerlink" title="类加载器中ClassLoader的角色"></a>类加载器中ClassLoader的角色</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803202014873.png" alt="image-20230803202014873"></p><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803202508503.png" alt="image-20230803202508503" style="zoom:80%;"></p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803202528634.png" alt="image-20230803202528634" style="zoom:80%;"></p><p>整个<strong>类的加载</strong>过程主要包括：</p><ul><li>加载</li><li>链接</li><li>初始化</li></ul><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><ol><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口</li></ol><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803203109097.png" alt="image-20230803203109097" style="zoom:80%;"></p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803203310262.png" alt="image-20230803203310262" style="zoom:80%;"></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>.class文件查看，所需软件：<code>Binary Viewer</code>和<code>jclasslib bytecode viewer</code></p><p>所需软件下载地址</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1YcdprQTBQTGJzp<span class="built_in">_</span>vVBiNFg </span><br><span class="line">提取码：4hmi </span><br></pre></td></tr></table></figure><p>发现所有的<code>.class</code>文件都有一个统一的前缀<code>CA FE BA BE</code>，即相同的前缀标识，验证阶段工作之一就是校验头部标识</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803204637266.png" alt></p><p>  准备阶段：会为每个类变量根据其数据类型，默认初始化为对应的零值，即使显示赋值了，也只在初始化阶段赋值</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803205800679.png" alt></p><p><code>&lt;clinit&gt;()</code>的示例</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803210703082.png" alt></p><p>父类与子类的<code>clinit()</code>执行示例</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803212431043.png" alt="image-20230803212431043" style="zoom:80%;"></p><p>一个类的<code>clinit()</code>方法在对线程下会添加同步锁，只会加载一次，要是加载中断，其他线程就无法执行</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803213639515.png" alt="image-20230803213639515" style="zoom:80%;"></p><h2 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h2><p>JVM支持两种类型的类加载器，分别为<strong>引导类加载器(Bootstrap ClassLoader)</strong>和<strong>自定义类加载器(User-Defined ClassLoader)</strong></p><p>Java虚拟机规范中将所有<strong>派生于抽象类<code>ClassLoader</code>的类加载器都划分为自定义类加载器</strong></p><p>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下图所示</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803214053321.png" alt="image-20230803214053321" style="zoom:80%;"></p><p> 四种类加载查看示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">        <span class="comment">//获取其上层:扩展类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">exClassLoader</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line">        System.out.println(exClassLoader);<span class="comment">//sun.misc.Launcher$ExtClassLoader@4554617c</span></span><br><span class="line">        <span class="comment">//获取其上层,获取不到引导类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">boostrapClassLoader</span> <span class="operator">=</span> exClassLoader.getParent();</span><br><span class="line">        System.out.println(boostrapClassLoader);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户自定义类加载器，m默认使用系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String类使用引导类加载器（Java核心类库都是使用引导类加载器）</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader1</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803215854587.png" alt="image-20230803215854587" style="zoom:80%;"></p><p>B站视频32</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二章：类加载子系统&quot;&gt;&lt;a href=&quot;#第二章：类加载子系统&quot; class=&quot;headerlink&quot; title=&quot;第二章：类加载子系统&quot;&gt;&lt;/a&gt;第二章：类加载子系统&lt;/h1&gt;&lt;h2 id=&quot;类加载器与类的加载过程&quot;&gt;&lt;a href=&quot;#类加载器与类的加载过</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第一章：JVM与Java体系结构</title>
    <link href="https://bangwu2001.github.io/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>https://bangwu2001.github.io/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</id>
    <published>2023-08-03T16:05:00.000Z</published>
    <updated>2023-08-03T16:35:34.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章：JVM与Java体系结构"><a href="#第一章：JVM与Java体系结构" class="headerlink" title="第一章：JVM与Java体系结构"></a>第一章：JVM与Java体系结构</h1><h2 id="虚拟机与Java虚拟机介绍"><a href="#虚拟机与Java虚拟机介绍" class="headerlink" title="虚拟机与Java虚拟机介绍"></a>虚拟机与Java虚拟机介绍</h2><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>虚拟机就是一台虚拟的计算机，本质是一款软件，用来执行一系列虚拟计算机指令。虚拟机可以分为<strong>系统虚拟机</strong>和<strong>程序虚拟机</strong></p><ul><li><p>系统虚拟机</p><p>系统虚拟机完全是对物理计算机的仿真，提供一个可运行完整操作系统的软件平台，比如Visual Box，VMware就属于系统虚拟机</p></li><li><p>程序虚拟机</p><p>程序虚拟机专门为执行单个计算机程序而设计，比较典型的就是Java虚拟机，在Java虚拟机中执行的指令我们称之为Java字节码指令</p></li></ul><p>无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中</p><h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><p>Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细的定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里</p><p>特点：</p><ul><li>一次编译，到处运行</li><li>自动内存管理</li><li>自动垃圾回收功能</li></ul><p>​     </p><h2 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h2><p>JVM运行在操作系统基础之上，与硬件之间没有直接的交互</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190045749.png" alt="image-20230802190045749" style="zoom: 80%;"></p><p> JDK、JRE、JVM三者之间的关系</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190254484.png" alt="image-20230802190254484" style="zoom:80%;"></p><h2 id="JVM的整体结构"><a href="#JVM的整体结构" class="headerlink" title="JVM的整体结构"></a>JVM的整体结构</h2><p><code>HotSpot VM</code>是目前市面上高性能虚拟机代表作之一</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190808090.png" alt="image-20230802190808090"></p><p>JVM结构示意图</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190721731.png" alt="image-20230802190721731" style="zoom:80%;"></p><h2 id="Java代码执行流程"><a href="#Java代码执行流程" class="headerlink" title="Java代码执行流程"></a>Java代码执行流程</h2><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802191815948.png" alt="image-20230802191815948" style="zoom:80%;"></p><p>JVM的架构模型</p><p>Java编译器的输入指令流基本上是一种<strong>基于栈的指令集架构</strong>，另外一种指令集架构则是<strong>基于寄存器的指令集架构</strong></p><p>基于栈式架构的特点</p><ul><li>设计和实现更简单，适用于资源受限的系统</li><li>避开了寄存器的分配难题：使用零地址指令方式分配</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈，指令集更小，编译器容易实现</li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ul><p>基于寄存器架构的特点</p><ul><li>典型应用为X86的二进制指令集：比如传统的PC以及Android的Davik虚拟机</li><li>指令集架构则完全依赖硬件，可以执行差</li><li>性能优秀和执行更高效</li><li>花费更少的时间去完成一系列操作</li><li>在大部分情况下，基于寄存器架构的指令集往往都是以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令集为主</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>查看java文件的字节码文件</p><ul><li><p>编写.java源文件</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802221427828.png" alt="image-20230802221427828"></p></li><li><p>执行<code>javac xxx.java</code>得到对应的字节码文件<code>xxx.class</code></p></li><li><p>执行<code>javap -v xxx.class</code>即可查看对应的汇编指令</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802221540486.png" alt="image-20230802221540486"></p></li></ul><h2 id="JVM生命周期"><a href="#JVM生命周期" class="headerlink" title="JVM生命周期"></a>JVM生命周期</h2><h3 id="虚拟机的启动"><a href="#虚拟机的启动" class="headerlink" title="虚拟机的启动"></a>虚拟机的启动</h3><p>Java虚拟机的启动是通过引导类加载器(bootstrap class loader)创建一个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的</p><h3 id="虚拟机的执行"><a href="#虚拟机的执行" class="headerlink" title="虚拟机的执行"></a>虚拟机的执行</h3><ul><li>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序</li><li>程序开始执行时他才运行，程序结束时他就停止</li><li>执行一个所谓的的Java程序的时候，真真正正在执行的时一个叫做Java虚拟机的进程</li></ul><p>查看运行的进程:在命令行输入<code>jps</code>，显示当前所有java进程pid的命令</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230803192556421.png" alt="image-20230803192556421"></p><h3 id="虚拟机的退出"><a href="#虚拟机的退出" class="headerlink" title="虚拟机的退出"></a>虚拟机的退出</h3><ul><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致Java虚拟机进程终止</li><li>某线程调用Runtime类或System类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作</li><li>除此之外，JNI(Java Native Interface)规范描述了用JNI Invocation API来加载或卸载Java虚拟机时，Java虚拟机的退出情况</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章：JVM与Java体系结构&quot;&gt;&lt;a href=&quot;#第一章：JVM与Java体系结构&quot; class=&quot;headerlink&quot; title=&quot;第一章：JVM与Java体系结构&quot;&gt;&lt;/a&gt;第一章：JVM与Java体系结构&lt;/h1&gt;&lt;h2 id=&quot;虚拟机与Java虚</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二、用户注册功能实现</title>
    <link href="https://bangwu2001.github.io/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://bangwu2001.github.io/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-07-18T16:05:00.000Z</published>
    <updated>2023-07-19T15:28:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a><strong>用户表</strong></h3><p><img src="/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230713225827901.png" alt="image-20230713225827901" style="zoom:67%;"></p><h2 id="创建用户的实体类"><a href="#创建用户的实体类" class="headerlink" title="创建用户的实体类"></a>创建用户的实体类</h2><p>实体类的包名规定:<code>com.bang.store.pojo</code></p><h3 id="数据表公共字段抽取"><a href="#数据表公共字段抽取" class="headerlink" title="数据表公共字段抽取"></a>数据表公共字段抽取</h3><p>数据库设计过程中，多个业务数据表均存在以下公共字段，则可以将公共字段抽象成一个新的基类<code>com.bang.store.BasePojo</code>，供各个数据库表使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">created_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;日志-创建人&#x27;</span>,</span><br><span class="line">created_time DATETIME COMMENT <span class="string">&#x27;日志-创建时间&#x27;</span>,</span><br><span class="line">modified_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;日志-最后修改执行人&#x27;</span>,</span><br><span class="line">modified_time DATETIME COMMENT <span class="string">&#x27;日志-最后修改时间&#x27;</span>,</span><br></pre></td></tr></table></figure><h4 id="java基类"><a href="#java基类" class="headerlink" title="java基类"></a><strong>java基类</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasePojo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String createdUser;</span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="keyword">private</span> String modifiedUser;</span><br><span class="line">    <span class="keyword">private</span> Date modifiedTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">BasePojo</span> <span class="variable">basePojo</span> <span class="operator">=</span> (BasePojo) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(createdUser, basePojo.createdUser) &amp;&amp; Objects.equals(createdTime, basePojo.createdTime) &amp;&amp; Objects.equals(modifiedUser, basePojo.modifiedUser) &amp;&amp; Objects.equals(modifiedTime, basePojo.modifiedTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(createdUser, createdTime, modifiedUser, modifiedTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a><strong>补充说明</strong></h4><ul><li><p>数据库字段中的日期类型对应于<code>java</code>中的<code>java.util.Date</code></p></li><li><p><code>Lombok</code>的注解<code>@Date</code>里面包含了<code>get、set、toString、equals、hashCode</code>等方法</p></li><li><code>Lombok</code>的<code>equals</code>好像不能比较属性，所以最好对<code>equals</code>方法进行重写<ul><li><a href="https://zhuanlan.zhihu.com/p/85906077">参考博客</a></li></ul></li></ul><h3 id="用户实体类创建"><a href="#用户实体类创建" class="headerlink" title="用户实体类创建"></a>用户实体类创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户表实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">super</span>.equals(o)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(uid, user.uid) &amp;&amp; Objects.equals(username, user.username) &amp;&amp; Objects.equals(password, user.password) &amp;&amp; Objects.equals(salt, user.salt) &amp;&amp; Objects.equals(phone, user.phone) &amp;&amp; Objects.equals(email, user.email) &amp;&amp; Objects.equals(gender, user.gender) &amp;&amp; Objects.equals(avatar, user.avatar) &amp;&amp; Objects.equals(isDelete, user.isDelete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(<span class="built_in">super</span>.hashCode(), uid, username, password, salt, phone, email, gender, avatar, isDelete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>数据访问层，主要是通过<code>mybatis</code>操作数据库</p><h3 id="需要执行的SQL语句的设计"><a href="#需要执行的SQL语句的设计" class="headerlink" title="需要执行的SQL语句的设计"></a>需要执行的<code>SQL</code>语句的设计</h3><p>用户注册，通常需要输入<code>用户名</code>和<code>密码</code>这两个字段，相当于数据库的插入过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(username,password) <span class="keyword">values</span>(值列表)</span><br></pre></td></tr></table></figure><p>用户注册时，还应该判断当前用户名是否被注册过了，如果用户名已存在，则无法进行注册，需要用户重新输入用户名，这个过程本质是相当于一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> username<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法"><a href="#设计接口和抽象方法" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p><code>Mapper</code>接口方法</p><p>整个项目存在多个<code>Mapper</code>接口，需要在当前包目录结构下创建一个<code>mapper</code>包，在该<code>包</code>下根据功能模块创建对应的<code>Mapper</code>接口。</p><ol><li>创建<code>UserMapper</code>接口，实现与3.1中两条<code>SQL</code>语句对应的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块的Mapper接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将用户数据插入数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user :用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数，根据受影响函数返回当前操作是否执行成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查找到对应用户数据，返回数据，否则返回null值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>在项目启动类中添加注解<code>@MapperScan</code>，指明<code>Mapper</code>接口路径，避免在每个接口类中都要添加注解<code>@Mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指明当前项目中mapper接口的路径,项目启动会自动加载对应接口文件</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.bang.store.mapper&quot;)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="编写映射"><a href="#编写映射" class="headerlink" title="编写映射"></a>编写映射</h3><p><code>Mybatis</code>的映射文件<code>xxMapper.xml</code>的编写，与对应的接口相关联</p><p>映射文件都需要放置在<code>resources</code>文件夹下，为便于管理，可以新建一个<code>mapper</code>文件夹，在该文件夹下再创建不同功能模块的映射文件，注意各个映射文件的命名要与对应接口的命名保持一致</p><p>创建<code>UserMapper.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace属性，与当前映射文件对应接口的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义映射规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        ResultMap:</span></span><br><span class="line"><span class="comment">            id属性: 映射规则名称，唯一标识</span></span><br><span class="line"><span class="comment">            type属性: 数据库表映射对应的java实体类全类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            将表的字段与Java实体类属性字段一一对应,名称匹配的可以省略</span></span><br><span class="line"><span class="comment">            id标签:主键映射关系，必须保留</span></span><br><span class="line"><span class="comment">            result: 其他字段</span></span><br><span class="line"><span class="comment">                column: 数据库字段名</span></span><br><span class="line"><span class="comment">                property: 实体类属性名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;idDelete&quot;</span> <span class="attr">column</span>=<span class="string">&quot;is_delete&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- id属性值需要与对应接口对应方法名一致 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- useGeneratedKeys=&quot;true&quot; keyProperty=&quot;uid&quot; 开启某个字段作为主键并值自动递增，并指明字段名称  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.bang.store.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user(username,password,salt,phone,email,gender,avatar,is_delete,created_user,created_time,modified_user,modified_time) values(</span><br><span class="line">        #&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,#&#123;phone&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;avatar&#125;,#&#123;isDelete&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        resultType=&quot;com.bang.store.pojo.User&quot;  指明返回值类型，该类中各个字段应该与数据库各个字段名称保持一致</span></span><br><span class="line"><span class="comment">        resultMap: 字段名称不一致时，自定义结果集的映射规则</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserPojoMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username=#&#123;username&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis配置文件"><a href="#Mybatis配置文件" class="headerlink" title="Mybatis配置文件"></a>Mybatis配置文件</h3><p><code>Spring</code>里面会有一个<code>Mybatis Config.xml</code>文件，在配置文件里会指定<code>mapper</code>映射文件的位置，<code>SpringBoot</code>里可以省去这个文件</p><p>但是需要在<code>配置文件application.yml里要指明</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>每一个部分功能模块编写完成之后。都需要进行专门的功能测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="comment">//@MapperScan(&quot;com.bang.store.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;li123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">insert</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUsernameTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUsername(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>业务层与实际应用场景相挂钩</p><p>常见包目录结构</p><ul><li>service<ul><li>ex：异常类</li><li>impl：接口文件对应的实现类</li><li>接口文件</li></ul></li></ul><h3 id="异常规划"><a href="#异常规划" class="headerlink" title="异常规划"></a>异常规划</h3><p>结合用户使用具体场景，设计对应的异常</p><p>在实际项目中，异常要进行分级，各个具体问题要建立自定义的异常</p><p>比如：业务层的异常需定义一个<code>ServiceException</code>基类，继承自<code>RuntimeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层异常基类,继承自运行时异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ServiceException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&gt;<br>&gt;</p><blockquote><p>业务层根据应用场景定义对应具体的异常类，均需继承于<code>ServivceException</code></p></blockquote><h4 id="用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常"><a href="#用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常" class="headerlink" title="用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常"></a>用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常</h4><p>定义名为<code>UsernameOccupiedException</code>来表明用户名占用错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户名被占用异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameOccupiedException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常"><a href="#用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常" class="headerlink" title="用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常"></a>用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常</h4><p>定义名为<code>insertException</code>来表明由于此类问题所引起的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据插入过程引发的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">InsertException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>具体业务逻辑，接口命名建议参考<code>IxxxService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><p>实现业务接口中的业务方法，命名建议<code>xxxSericeImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断用户名是否存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">isOccupied</span> <span class="operator">=</span> userMapper.findByUsername(user.getUsername());</span><br><span class="line">        <span class="comment">//用户名存在，则抛出对应的异常</span></span><br><span class="line">        <span class="keyword">if</span>(isOccupied!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameOccupiedException</span>(<span class="string">&quot;用户名已经被占用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.不存在，将用户信息存入数据库</span></span><br><span class="line">        <span class="comment">//用户密码加密</span></span><br><span class="line">        <span class="comment">//生成盐值,盐值+password+盐值: 送入MD5算法加密三次再存入数据库</span></span><br><span class="line">        <span class="comment">//盐值也要存入数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">        password = getMD5password(password,salt);</span><br><span class="line">        user.setSalt(salt);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户类其他信息的补全操作</span></span><br><span class="line">        user.setIsDelete(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//创建和修改的用户名称</span></span><br><span class="line">        user.setCreatedUser(user.getUsername());</span><br><span class="line">        user.setModifiedUser(user.getUsername());</span><br><span class="line">        <span class="comment">//创建和修改时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        user.setCreatedTime(date);</span><br><span class="line">        user.setModifiedTime(date);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        <span class="comment">//数据插入不一定会成功，此时需检测插入是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;用户注册过程中产生了未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMD5password</span><span class="params">(String password,String salt)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            password = DigestUtils.md5DigestAsHex((salt+password+salt).getBytes()).toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><p>创建对应的测试文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUsername(<span class="string">&quot;刘备&quot;</span>);</span><br><span class="line">            user.setPassword(<span class="string">&quot;liu123456&quot;</span>);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">            iUserService.reg(user);</span><br><span class="line">            System.out.println(<span class="string">&quot;注册成功！！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ServiceException e)&#123;</span><br><span class="line">            System.out.println(e.getClass());</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充项"><a href="#补充项" class="headerlink" title="补充项"></a>补充项</h3><p>密码明文展示存在安全隐患，利用<code>md5</code>加密算法，对密码进行加密再存储在数据库</p><p>常见解决方案: 串+真实password+串 -》MD5算法加密，连续加载三次</p><p>串是指：盐值，一个随机的字符串</p><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="创建响应"><a href="#创建响应" class="headerlink" title="创建响应"></a>创建响应</h3><p> 所有的控制层的响应应该都包含：状态码、状态描述信息、数据</p><p>所以将其分装成一个类，将这个类作为返回值返回给前端浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="comment">//状态描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//请求返回数据,数据类型位置,泛型</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//捕获异常,异常信息的传递</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message=e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state, E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><p>依据具体的业务设计对应的请求，常见请求应该包含以下四个主题：请求地址、请求参数、请求方法、请求响应</p><p>比如针对用户注册功能</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求地址: /user/reg</span><br><span class="line">请求参数： User user</span><br><span class="line">请求方法：Post</span><br><span class="line">请求响应：JsonResult&lt;void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在控制层创建对应的实现类，借助业务层的相关接口方法，对用户的请求做出对应逻辑的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">reg</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            userService.reg(user);</span><br><span class="line">            result.setState(<span class="number">200</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户注册成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UsernameOccupiedException e)&#123;</span><br><span class="line">            result.setState(<span class="number">4000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户名被占用&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InsertException e)&#123;</span><br><span class="line">            result.setState(<span class="number">5000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;注册时未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层代码优化设计"><a href="#控制层代码优化设计" class="headerlink" title="控制层代码优化设计"></a>控制层代码优化设计</h3><p>观察5.3中控制层请求处理代码逻辑，发现异常捕获部分存在较大冗余，对于业务层而言，其代码确定之后，异常类型也就可以确定，所以控制层可能捕获的异常也就可能确定，可以将异常捕获处理这部分代码剥离出来，构建一个基础类，让控制层处理请求类继承至该类</p><p>这么设计的可行性：</p><ul><li>Spring提供了ExceptionHandle注解，该注解可以当某种类型异常发生之后，会统一拦截到对应方法上进行处理</li></ul><h4 id="抽象出的基类"><a href="#抽象出的基类" class="headerlink" title="抽象出的基类"></a><strong>抽象出的基类</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer OK=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandle注解: 项目中如果产生指定类型的异常，会统一拦截到此方法上进行处理</span></span><br><span class="line">    <span class="comment">//                     参数:对应拦截的异常类类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> UsernameOccupiedException)&#123;</span><br><span class="line">            result.setState(<span class="number">4000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户名被占用&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InsertException) &#123;</span><br><span class="line">            result.setState(<span class="number">5000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;注册时未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制层注册逻辑代码简化版本"><a href="#控制层注册逻辑代码简化版本" class="headerlink" title="控制层注册逻辑代码简化版本"></a><strong>控制层注册逻辑代码简化版本</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">reg</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userService.reg(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面的开发"><a href="#前端页面的开发" class="headerlink" title="前端页面的开发"></a>前端页面的开发</h2><ol><li><p>在注册页面编写发送请求的方法，利用事件来完成。首先根据选择器的到对应的按钮对象(比如$(选择器))，对按钮对象绑定对应的点击事件</p><p><img src="/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230718235451253.png" alt="image-20230718235451253" style="zoom:50%;"></p></li><li><p>利用异步请求(<code>ajax</code>技术)，对后端程序发送对应的请求</p><p><code>ajax</code>的使用方法，<code>ajax</code>函数会接受多个参数，参数类似于键值对的形式，用,分割</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">type</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">data</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">dataType</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">success</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    ,<span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">参数功能</th></tr></thead><tbody><tr><td style="text-align:center">url</td><td style="text-align:center">标识请求的地址，不包含参数列表 ，比如：url:<a href="http://localhost:8080/user/reg">http://localhost:8080/user/reg</a></td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">请求方法类型(GET、POST)  ，比如: type:”POST”</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">请求发送的数据，例如: data:”username=张飞&amp;password=123456”</td></tr><tr><td style="text-align:center">dataType</td><td style="text-align:center">请求传送数据数据类型，一般为json类型，比如： dataType:”json”</td></tr><tr><td style="text-align:center">success</td><td style="text-align:center">服务器正常响应客户端时，会自动调用该参数对应的方法，并将服务器返回值自动装填到方法参数上</td></tr><tr><td style="text-align:center">error</td><td style="text-align:center">服务器不能够正常响应客户端时，会自动调用该参数对应的方法，并将服务器返回值自动装填到方法参数上</td></tr></tbody></table></div><ol><li><p>前端核心代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">//1.获取对应按钮对象，绑定点击事件</span></span><br><span class="line">      $(<span class="string">&quot;#btn-reg&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//2.点击之后发送ajax异步请求</span></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>:<span class="string">&quot;/user/reg&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">          <span class="comment">//动态获取对应表单数据,会自动拼接成:表单name1=val1&amp;表单name2=val2&amp;...</span></span><br><span class="line">          <span class="attr">data</span>:$(<span class="string">&quot;#form-reg&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">          <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">          <span class="comment">//服务器返回数据</span></span><br><span class="line">          <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(data.<span class="property">message</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//xhr对象,status对应的状态码</span></span><br><span class="line">          <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;注册时产生未知错误&quot;</span>+ xhr.<span class="property">status</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用户注册&quot;&gt;&lt;a href=&quot;#用户注册&quot; class=&quot;headerlink&quot; title=&quot;用户注册&quot;&gt;&lt;/a&gt;用户注册&lt;/h1&gt;&lt;h2 id=&quot;创建数据库&quot;&gt;&lt;a href=&quot;#创建数据库&quot; class=&quot;headerlink&quot; title=&quot;创建数据库&quot;&gt;</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>三、用户登录功能的实现</title>
    <link href="https://bangwu2001.github.io/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/03%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://bangwu2001.github.io/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/03%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-07-18T16:05:00.000Z</published>
    <updated>2023-07-21T16:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h1><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><p>用户进入登陆页面，输入用户名和密码，点击登录按钮，向后台程序发送请求，后台根据用户信息在数据库中进行查找，如果用户名和密码均正确，则会跳转到对应的主页面，即<code>index.html</code></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划要执行的SQL语句"><a href="#规划要执行的SQL语句" class="headerlink" title="规划要执行的SQL语句"></a>规划要执行的SQL语句</h3><p>分析：一般逻辑是根据用户名查询数据库返回用户记录给业务层，由于密码存储一般是经过加密后的数据，数据库中与用户输入一般不一致，所以密码等其他信息的校验一般放在业务层去进行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> username<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>相关持久层的功能在用户注册模块已经实现</p><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><h4 id="密码错误异常"><a href="#密码错误异常" class="headerlink" title="密码错误异常"></a>密码错误异常</h4><p>用户名正确，密码错误引发的异常，<code>PasswordNotMatchException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordNotMatchException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="用户名不存在异常"><a href="#用户名不存在异常" class="headerlink" title="用户名不存在异常"></a>用户名不存在异常</h4><p>用户名数据库中不存在所引发的异常，<code>UsernameNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法"><a href="#设计接口和抽象方法" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p>直接在<code>IUserService</code>接口中编写登录方法<code>login(String username,String password)</code></p><p>如果登录成功，将用户数据对象需要作为方法返回值返回</p><p>状态管理：将相关数据保存在cookie或者session中，可以避免重复度很好的数据多次频繁操作数据库获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password 用户密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> : 用户对象,因为登陆成功后，各个页面右上角会显示用户信息，需要用到用户对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">login</span><span class="params">(String username,String password)</span>;</span><br></pre></td></tr></table></figure><h3 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">       <span class="comment">//根据用户名称查询用户对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUsername(username);</span><br><span class="line">       <span class="comment">//用户对象不存在，抛出用户名不存在异常</span></span><br><span class="line">       <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//用户密码匹配</span></span><br><span class="line">       <span class="keyword">if</span>(!user.getPassword().equals(getMD5password(password,user.getSalt())))&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordNotMatchException</span>(<span class="string">&quot;用户密码错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断用户是否注销</span></span><br><span class="line">       <span class="keyword">if</span>(user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>根据业务层抛出异常，在统一异常处理基类中做出对应的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UsernameNotFoundException) &#123;</span><br><span class="line">    result.setState(<span class="number">5001</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;用户名不存在异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> PasswordNotMatchException) &#123;</span><br><span class="line">    result.setState(<span class="number">5002</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;用户密码不匹配异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求路径：/user/login</span><br><span class="line">请求方法：POST</span><br><span class="line">请求参数：String username,String password</span><br><span class="line">响应结果：JsonResult&lt;User&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在<code>UserController</code>类中编写对应的请求处理方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">login</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(username, password);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;User&gt;(OK,<span class="string">&quot;登陆成功&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在<code>login.html</code>页面中找到对应表单，在表单中找到登录按钮，将登录按钮与指定时间绑定，按钮点击，向后端指定程序发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     $(<span class="string">&quot;#btn-login&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">       $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">         <span class="attr">url</span>: <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">         ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">         ,<span class="attr">data</span>: $(<span class="string">&quot;#form-login&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">         ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">         ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">              <span class="comment">//跳转到对应页面</span></span><br><span class="line">              <span class="comment">//相对路径指定对应页面位置</span></span><br><span class="line">              location.<span class="property">href</span>=<span class="string">&quot;index.html&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;登陆失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;登陆失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="用户会话Session"><a href="#用户会话Session" class="headerlink" title="用户会话Session"></a>用户会话Session</h2><p>session对象主要存储在服务器端，可以用于保存服务器的临时数据，其在整个项目中都可以被访问，可以在不同模块之间进行数据共享。</p><p>对于用户登录功能，可以将用户当前首次登录输入的信息数据存储在session对象中，供整个会话期间，其他模块共用。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//session对象存储数据</span></span><br><span class="line">session.setAttribute(key,value);</span><br><span class="line"><span class="comment">//从session对象获取数据</span></span><br><span class="line">session.getAttribute(key)</span><br></pre></td></tr></table></figure><p>可能在一个项目中，多次用到session对象存储数据或者从session对象中读取数据，为了减少代码冗余，应该将这两个操作封装到函数中</p><p>可以封装到工具类，但是由于这两个操作只会在控制层使用，而本项目控制层存在基类，所以将该方法定义在控制层基类<code>BaseController</code>中</p><p>由于存储操作要视具体情况而定，所以只封装从session对象读取数据功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从session对象中获取当前登录用户的uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> uid:当前登录用户的uid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">getUidFromSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Integer) session.getAttribute(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从session对象中获取当前用户的username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> username:当前登录用户的username</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getUsernameFromSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (String) session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关位置将数据存取到session对象中"><a href="#相关位置将数据存取到session对象中" class="headerlink" title="相关位置将数据存取到session对象中"></a>相关位置将数据存取到session对象中</h3><p>在<code>UserController</code>类中的<code>login</code>函数中将相关数据存取到session对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">login</span><span class="params">(String username, String password, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(username, password);</span><br><span class="line">    <span class="comment">//数据存取到session对象</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;uid&quot;</span>,user.getUid());</span><br><span class="line">    session.setAttribute(<span class="string">&quot;username&quot;</span>,user.getUsername());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;User&gt;(OK,<span class="string">&quot;登陆成功&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户登录拦截器"><a href="#用户登录拦截器" class="headerlink" title="用户登录拦截器"></a>用户登录拦截器</h2><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>会首先将用户所有请求统一拦截到拦截器中进行处理，所以可以到拦截器中自定义过滤规则，达到拦截请求、过滤响应的目的</p><p>比如：对于当前项目(商城系统)，访问其他页面会全部拦截到拦截器，判断用户是否登录，如果没有则统一会打开<code>login.html</code>用户登录页面，打开其他页面，可以使用<strong>重定向</strong>或者<strong>请求转发</strong>技术来完成</p><p>推荐使用重定向技术，如果两个模块不在同一个服务器上，转发可能会出现错误</p><h3 id="SpringBoot中如何拦截器的使用"><a href="#SpringBoot中如何拦截器的使用" class="headerlink" title="SpringBoot中如何拦截器的使用"></a>SpringBoot中如何拦截器的使用</h3><p>SpringMVC提供了一个<code>HandleInterceptor</code>接口，用于表示拦截器</p><p>使用步骤</p><ol><li><p>自定义一个类，实现<code>HandleInterceptor</code>接口，项目一般会将所有拦截器统一放在一个目录下，本项目中统一放在<code>com.bang.store.interceptor</code>包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义用户登录拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//在所有请求处理方法之前被调用执行，即在请求到达Dispatcher中央处理器之前</span></span><br><span class="line">    <span class="comment">//拦截器的重点关注位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能:检测session对象中是否含有uid数据,如果有则放行请求，否则重定向到用户登录界面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果返回值为true,正常放行;如果为false,则表示拦截，不放行,</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//获取uid数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">uid</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(uid==<span class="literal">null</span>)&#123; <span class="comment">//表明用户没有登录</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/web/login.html&quot;</span>); <span class="comment">//重定向到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//拦截请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//用户登录后则直接放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求执行后被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有关联操作完成之后调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册拦截器</p><p>添加白名单与黑名单，即当前拦截器只对那些请求起作用、对哪些请求不起作用</p><p>比如：注册、登录页面不能够被拦截，否则任何界面都无法进入，造成死循环</p></li><li><p>拦截器注册操作</p><p>借助<code>WebMVCConfigure</code>接口，可以将用户定义的拦截器进行注册，才能使拦截器生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.configure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解，让SpringBoot识别</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptorConfigure</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//实例化自定义拦截器</span></span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">loginInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">        <span class="comment">//配置白名单</span></span><br><span class="line">        List&lt;String&gt; whiteList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        whiteList.add(<span class="string">&quot;/web/login.html&quot;</span>);</span><br><span class="line">        whiteList.add(<span class="string">&quot;/web/register.html&quot;</span>);</span><br><span class="line">        whiteList.add(<span class="string">&quot;/web/product.html&quot;</span>);</span><br><span class="line">        whiteList.add(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">        <span class="comment">//注册拦截器</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/web/**&quot;</span>)  <span class="comment">//配置黑名单,即拦截器要拦截的路径</span></span><br><span class="line">                .excludePathPatterns(whiteList); <span class="comment">//配置白名单,即拦截器不拦截的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用户登录&quot;&gt;&lt;a href=&quot;#用户登录&quot; class=&quot;headerlink&quot; title=&quot;用户登录&quot;&gt;&lt;/a&gt;用户登录&lt;/h1&gt;&lt;h2 id=&quot;功能分析&quot;&gt;&lt;a href=&quot;#功能分析&quot; class=&quot;headerlink&quot; title=&quot;功能分析&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>一、项目环境搭建</title>
    <link href="https://bangwu2001.github.io/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/01%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://bangwu2001.github.io/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/01%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2023-07-18T16:00:00.000Z</published>
    <updated>2023-07-19T15:11:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h1><h2 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h2><p>项目 功能包括:登录、注册、热销产品、用户管理(密码、个人信息、头像、收货地址)、购物车（商品展示、增加、删除）、订单模块</p><h2 id="开发顺序"><a href="#开发顺序" class="headerlink" title="开发顺序"></a>开发顺序</h2><p>注册、登录、用户管理、购物车、商品、订单模块</p><h2 id="某个模块的开发顺序"><a href="#某个模块的开发顺序" class="headerlink" title="某个模块的开发顺序"></a>某个模块的开发顺序</h2><ul><li>持久层开发<ul><li>依据前端页面的设置规划相应的SQL语句，以及进行配置</li></ul></li><li>业务层开发<ul><li>核心功能控制、业务操作以及异常的处理</li></ul></li><li>控制层开发<ul><li>接收请求、处理相应</li></ul></li><li>前端开发<ul><li>简单JS、JQuery、AJAX的代码编写</li></ul></li></ul><h1 id="项目搭建的工具和环境"><a href="#项目搭建的工具和环境" class="headerlink" title="项目搭建的工具和环境"></a>项目搭建的工具和环境</h1><ol><li>JDK：1.8及其以上的版本</li><li>maven：配置到IDEA，要求3.6.1及其以上版本</li><li>数据库: Mysql，5.1及其以上版本</li><li>开发平台：IDEA</li></ol><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><ol><li>项目名称：<code>store</code>，表示商城</li><li>主包名：<code>com.bang.store</code></li><li>资源文件：统一放置在<code>resources</code>文件夹下</li><li>单元测试：<code>test.com.bang.store</code></li></ol><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>导入设计对应的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database store charcater <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>项目的<code>application.yml</code>文件配置数据库相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#数据库相关配置信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/store?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span></span><br></pre></td></tr></table></figure></li><li><p>测试连接</p><ol><li>运行<code>SpringBoot</code>主类</li><li>在单元测试文件中测试数据库连接情况</li></ol></li><li><p>测试项目的静态资源文件是否可以正常访问</p><ol><li>将所有静态资源复制到<code>resources</code>下的<code>static</code>文件</li><li>启动项目，在浏览器访问指定静态资源文件测试是否正常</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目分析&quot;&gt;&lt;a href=&quot;#项目分析&quot; class=&quot;headerlink&quot; title=&quot;项目分析&quot;&gt;&lt;/a&gt;项目分析&lt;/h1&gt;&lt;h2 id=&quot;项目功能&quot;&gt;&lt;a href=&quot;#项目功能&quot; class=&quot;headerlink&quot; title=&quot;项目功能&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="电脑商城项目" scheme="https://bangwu2001.github.io/categories/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>基本概念</title>
    <link href="https://bangwu2001.github.io/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://bangwu2001.github.io/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2023-07-09T15:33:22.000Z</published>
    <updated>2023-07-15T14:37:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络基本概念"><a href="#计算机网络基本概念" class="headerlink" title="计算机网络基本概念"></a>计算机网络基本概念</h1><h2 id="1-因特网"><a href="#1-因特网" class="headerlink" title="1 因特网"></a>1 因特网</h2><h4 id="1-网络、互联网和因特网"><a href="#1-网络、互联网和因特网" class="headerlink" title="1 网络、互联网和因特网"></a>1 网络、互联网和因特网</h4><ul><li>网络<ul><li>若干个节点和连接这些节点的链路组成的即称为网络</li></ul></li><li>互联网<ul><li>多个网络通过路由器互联起来，构成一个覆盖范围更大的网络，即称为互联网</li><li>互联网—-网络的网络</li></ul></li><li>因特网<ul><li>一个专有名词，专指世界上最大的互联网</li></ul></li></ul><h4 id="2-ISP"><a href="#2-ISP" class="headerlink" title="2 ISP"></a>2 ISP</h4><p>因特网服务提供者(<code>Internet Service Provider</code>)</p><p>电信、移动、联通等运营商即可称之为ISP</p><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710001309793.png" alt="image-20230710001309793" style="zoom:50%;"></p><h4 id="3-因特网的组成"><a href="#3-因特网的组成" class="headerlink" title="3 因特网的组成"></a>3 因特网的组成</h4><h5 id="边缘部分-网络边缘"><a href="#边缘部分-网络边缘" class="headerlink" title="边缘部分(网络边缘)"></a>边缘部分(网络边缘)</h5><p>由所有连接在因特网上的主机组成。用户直接使用，用来进行数据通信和资源共享的设备</p><h5 id="核心部分-网络核心"><a href="#核心部分-网络核心" class="headerlink" title="核心部分(网络核心)"></a>核心部分(网络核心)</h5><p>由大量网络和连接这些网络的的路由器组成。网络核心为网络边缘提供服务(连通性和数据交换)</p><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710001702834.png" alt="image-20230710001702834" style="zoom:50%;"></p><h2 id="2-数据交换方式"><a href="#2-数据交换方式" class="headerlink" title="2 数据交换方式"></a>2 数据交换方式</h2><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p>以前的电话机通过连接电话线的方式即为电路交换</p><p>电路交换常见的三个步骤</p><ol><li>建立连接(分配通信资源)</li><li>通话(在此期间，独占通信资源)</li><li>释放连接(归还通信资源)</li></ol><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710002103273.png" alt="image-20230710002103273" style="zoom:50%;"></p><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p>现存的计算机网络体系使用的数据交换方式</p><ul><li>发送方构造分组，发送分组</li><li>分组交换机(路由器等设备)缓存转发分组</li><li>接收方接受分许，还原报文</li></ul><h4 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h4><p>与分组交换类似，只是其传输单位为整个报文，分组交换为单个分组(将一个报文切割为多个分组)</p><h4 id="三者数据交换对比"><a href="#三者数据交换对比" class="headerlink" title="三者数据交换对比"></a>三者数据交换对比</h4><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710002456854.png" alt="image-20230710002456854" style="zoom: 33%;"></p><h2 id="3-计算机网络定义和分类"><a href="#3-计算机网络定义和分类" class="headerlink" title="3 计算机网络定义和分类"></a>3 计算机网络定义和分类</h2><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h4><p>最简单定义：<strong>互联自治</strong>的计算机的集合</p><ul><li>互联<ul><li>强调计算机之间可以通过有线或无线的方式进行数据通信</li></ul></li><li>自治<ul><li>计算机拥有自己的硬件和软件，可以独立单独使用</li></ul></li><li>集合<ul><li>至少含有两台计算机</li></ul></li></ul><h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2 分类"></a>2 分类</h4><p>按照不同的标准可以分为不同的类别</p><h5 id="按交换技术分类"><a href="#按交换技术分类" class="headerlink" title="按交换技术分类"></a>按交换技术分类</h5><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><h5 id="按使用者分类"><a href="#按使用者分类" class="headerlink" title="按使用者分类"></a>按使用者分类</h5><ul><li>公用网</li><li>专用网</li></ul><h5 id="按传输介质分类"><a href="#按传输介质分类" class="headerlink" title="按传输介质分类"></a>按传输介质分类</h5><ul><li>有线网</li><li>无线网</li></ul><h5 id="按覆盖范围分类"><a href="#按覆盖范围分类" class="headerlink" title="按覆盖范围分类"></a>按覆盖范围分类</h5><ul><li>广域网<code>WAN</code></li><li>城域网<code>MAN</code></li><li>局域网<code>LAN</code></li><li>个域网<code>PAN</code></li></ul><h5 id="按拓扑类型分类"><a href="#按拓扑类型分类" class="headerlink" title="按拓扑类型分类"></a>按拓扑类型分类</h5><ul><li>总线型网络</li><li>星型网络</li><li>环形网络</li><li>网状型网络</li></ul><h2 id="4-计算机网络性能指标"><a href="#4-计算机网络性能指标" class="headerlink" title="4 计算机网络性能指标"></a>4 计算机网络性能指标</h2><p>常用评判计算机网络性能主要为以下8个指标</p><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>连接在计算机网络上的主机在数字信道上传送比特的速率，也称之为比特率或者数据率</p><p>单位为：<code>bit/s</code></p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>计算机网络中从一点到另一点所能达到的最高速率</p><p>带宽通常用来表示网络通信线路传送数据的能力</p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>单位时间内通过某个网络的数据量</p><ul><li>吞吐量经常用于对现实世界网络的一种测量，能够衡量实际上到底有多少数据能够通过网络</li><li>受网络带宽或额定速率的限制</li></ul><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>网络时延一般由发送时延、处理时延、传播时延三部分组成</p><ul><li>发送时延<ul><li>分组通过网卡发送到链路所需时间</li><li>$\frac{分组长度(bit)}{发送速率(bit/s)}$</li></ul></li><li>处理时延<ul><li>分组在路由器处排队时间、路由器对其缓存转发的时间</li></ul></li><li>传播时延<ul><li>分组在通信链路上传播所需时间</li><li>$\frac{链路长度}{电磁波传播速率}$</li></ul></li></ul><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710004156154.png" alt="image-20230710004156154" style="zoom:50%;"></p><h4 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h4><h4 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h4><h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><h4 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h4><h2 id="5-计算机网络体系结构"><a href="#5-计算机网络体系结构" class="headerlink" title="5 计算机网络体系结构"></a>5 计算机网络体系结构</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络基本概念&quot;&gt;&lt;a href=&quot;#计算机网络基本概念&quot; class=&quot;headerlink&quot; title=&quot;计算机网络基本概念&quot;&gt;&lt;/a&gt;计算机网络基本概念&lt;/h1&gt;&lt;h2 id=&quot;1-因特网&quot;&gt;&lt;a href=&quot;#1-因特网&quot; class=&quot;header</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://bangwu2001.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机基础" scheme="https://bangwu2001.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JVM 基础知识一</title>
    <link href="https://bangwu2001.github.io/2023/07/08/java/jvm%E5%85%A5%E9%97%A8/"/>
    <id>https://bangwu2001.github.io/2023/07/08/java/jvm%E5%85%A5%E9%97%A8/</id>
    <published>2023-07-08T13:14:15.000Z</published>
    <updated>2023-07-08T13:18:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是JVM基础知识入门的第一篇文章</p><p><img src="/2023/07/08/java/jvm%E5%85%A5%E9%97%A8/3.jpg" alt="3" style="zoom: 33%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是JVM基础知识入门的第一篇文章&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/07/08/java/jvm%E5%85%A5%E9%97%A8/3.jpg&quot; alt=&quot;3&quot; style=&quot;zoom: 33%;&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="JVM" scheme="https://bangwu2001.github.io/categories/JVM/"/>
    
    
    <category term="java" scheme="https://bangwu2001.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>目录结构测试</title>
    <link href="https://bangwu2001.github.io/2023/07/08/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/"/>
    <id>https://bangwu2001.github.io/2023/07/08/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/</id>
    <published>2023-07-08T08:29:42.000Z</published>
    <updated>2023-07-08T13:04:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>ghhjjjkjk</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>hjjkjkkjS</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><script type="math/tex; mode=display">x_2+y_2=32</script><script type="math/tex; mode=display">matrix = x^2+y^2=z^2</script><p>发广告哼哼唧唧</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>GHhjiig</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><img src="/2023/07/08/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/1.png" alt="1"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;ghhjjjkjk&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;</summary>
      
    
    
    
    <category term="测试" scheme="https://bangwu2001.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://bangwu2001.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>代码测试</title>
    <link href="https://bangwu2001.github.io/2023/07/08/%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/"/>
    <id>https://bangwu2001.github.io/2023/07/08/%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/</id>
    <published>2023-07-08T05:17:00.000Z</published>
    <updated>2023-07-08T05:19:50.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://bangwu2001.github.io/2023/07/08/hello-world/"/>
    <id>https://bangwu2001.github.io/2023/07/08/hello-world/</id>
    <published>2023-07-08T02:34:22.000Z</published>
    <updated>2023-07-08T02:34:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
