<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第十七章：垃圾回收器</title>
      <link href="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
      <url>/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h1><h2 id="GC分类与性能指标"><a href="#GC分类与性能指标" class="headerlink" title="GC分类与性能指标"></a>GC分类与性能指标</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206143956293.png" alt="image-20231206143956293" style="zoom:80%;"></p><h3 id="垃圾回收器分类-了解即可"><a href="#垃圾回收器分类-了解即可" class="headerlink" title="垃圾回收器分类(了解即可)"></a>垃圾回收器分类(了解即可)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206144635564.png" alt="image-20231206144635564" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206144809673.png" alt="image-20231206144809673" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206144958334.png" alt="image-20231206144958334" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206145120480.png" alt="image-20231206145120480" style="zoom:80%;"></p><h3 id="评估GC的性能指标"><a href="#评估GC的性能指标" class="headerlink" title="评估GC的性能指标"></a>评估GC的性能指标</h3><p>其中最重要的三个指标：<strong>吞吐量</strong>、<strong>暂停时间</strong>、<strong>内存占用</strong></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206145351204.png" alt="image-20231206145351204" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206150148183.png" alt="image-20231206150148183" style="zoom:80%;"></p><h4 id="吞吐量-throughput"><a href="#吞吐量-throughput" class="headerlink" title="吞吐量(throughput)"></a>吞吐量(throughput)</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206150606217.png" alt="image-20231206150606217" style="zoom:80%;"></p><h4 id="暂停时间-pause-time"><a href="#暂停时间-pause-time" class="headerlink" title="暂停时间(pause time)"></a>暂停时间(pause time)</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206151018571.png" alt="image-20231206151018571" style="zoom:80%;"></p><h4 id="吞吐量-VS-暂停时间"><a href="#吞吐量-VS-暂停时间" class="headerlink" title="吞吐量 VS 暂停时间"></a>吞吐量 VS 暂停时间</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206151342489.png" alt="image-20231206151342489" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206151700030.png" alt="image-20231206151700030" style="zoom:80%;"></p><h2 id="不同垃圾回收器概述-了解即可"><a href="#不同垃圾回收器概述-了解即可" class="headerlink" title="不同垃圾回收器概述(了解即可)"></a>不同垃圾回收器概述(了解即可)</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206152215044.png" alt="image-20231206152215044" style="zoom:80%;"></p><h3 id="七款经典的垃圾回收器"><a href="#七款经典的垃圾回收器" class="headerlink" title="七款经典的垃圾回收器"></a>七款经典的垃圾回收器</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206153005242.png" alt="image-20231206153005242" style="zoom:80%;"></p><h3 id="经典垃圾回收器与垃圾分代之间的关系"><a href="#经典垃圾回收器与垃圾分代之间的关系" class="headerlink" title="经典垃圾回收器与垃圾分代之间的关系"></a>经典垃圾回收器与垃圾分代之间的关系</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206153728847.png" alt="image-20231206153728847" style="zoom:80%;"></p><h3 id="不同垃圾回收器之间的组合关系"><a href="#不同垃圾回收器之间的组合关系" class="headerlink" title="不同垃圾回收器之间的组合关系"></a>不同垃圾回收器之间的组合关系</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206154143439.png" alt="image-20231206154143439" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206154726132.png" alt="image-20231206154726132" style="zoom:80%;"></p><h3 id="不同垃圾回收器概述"><a href="#不同垃圾回收器概述" class="headerlink" title="不同垃圾回收器概述"></a>不同垃圾回收器概述</h3><p>没有最好的，只有最合适的</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206155031988.png" alt="image-20231206155031988" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206155517505.png" alt="image-20231206155517505" style="zoom:80%;"></p><h2 id="Serial回收器：串行回收"><a href="#Serial回收器：串行回收" class="headerlink" title="Serial回收器：串行回收"></a>Serial回收器：串行回收</h2><h3 id="Serial原理"><a href="#Serial原理" class="headerlink" title="Serial原理"></a>Serial原理</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207091551949.png" alt="image-20231207091551949" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207092318930.png" alt="image-20231207092318930" style="zoom:80%;"></p><h3 id="Serial优劣与参数设置"><a href="#Serial优劣与参数设置" class="headerlink" title="Serial优劣与参数设置"></a>Serial优劣与参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207092519220.png" alt="image-20231207092519220" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207092726561.png" alt="image-20231207092726561" style="zoom:80%;"></p><h2 id="ParNew回收器：并行回收"><a href="#ParNew回收器：并行回收" class="headerlink" title="ParNew回收器：并行回收"></a>ParNew回收器：并行回收</h2><h3 id="ParNew原理"><a href="#ParNew原理" class="headerlink" title="ParNew原理"></a>ParNew原理</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207093151404.png" alt="image-20231207093151404" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207093319098.png" alt="image-20231207093319098" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207093551349.png" alt="image-20231207093551349" style="zoom:80%;"></p><h3 id="ParNew参数设置"><a href="#ParNew参数设置" class="headerlink" title="ParNew参数设置"></a>ParNew参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207094226776.png" alt="image-20231207094226776" style="zoom:80%;"></p><h2 id="Parallel回收器：吞吐量优先"><a href="#Parallel回收器：吞吐量优先" class="headerlink" title="Parallel回收器：吞吐量优先"></a>Parallel回收器：吞吐量优先</h2><h3 id="Parallel原理"><a href="#Parallel原理" class="headerlink" title="Parallel原理"></a>Parallel原理</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095130138.png" alt="image-20231207095130138" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095508215.png" alt="image-20231207095508215" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095847753.png" alt="image-20231207095847753" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095911456.png" alt="image-20231207095911456" style="zoom:80%;"></p><h3 id="Parrallel的参数设置"><a href="#Parrallel的参数设置" class="headerlink" title="Parrallel的参数设置"></a>Parrallel的参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207100050770.png" alt="image-20231207100050770" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207102259638.png" alt="image-20231207102259638" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207102709054.png" alt="image-20231207102709054" style="zoom:80%;"></p><h2 id="CMS回收器：低延迟"><a href="#CMS回收器：低延迟" class="headerlink" title="CMS回收器：低延迟"></a>CMS回收器：低延迟</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103202999.png" alt="image-20231207103202999" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103617966.png" alt="image-20231207103617966" style="zoom:80%;"></p><p>CMS与Parallel的底层框架不一致，所以导致二者不兼容</p><h3 id="CMS工作原理"><a href="#CMS工作原理" class="headerlink" title="CMS工作原理"></a><strong>CMS工作原理</strong></h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103822401.png" alt="image-20231207103822401" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103939319.png" alt="image-20231207103939319" style="zoom:80%;"></p><h3 id="CMS的特点与弊端分析"><a href="#CMS的特点与弊端分析" class="headerlink" title="CMS的特点与弊端分析"></a>CMS的特点与弊端分析</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207104703680.png" alt="image-20231207104703680" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207105000297.png" alt="image-20231207105000297" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207105131765.png" alt="image-20231207105131765" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207105343956.png" alt="image-20231207105343956" style="zoom:80%;"></p><h3 id="CMS参数设置"><a href="#CMS参数设置" class="headerlink" title="CMS参数设置"></a>CMS参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207163418544.png" alt="image-20231207163418544" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207162458421.png" alt="image-20231207162458421" style="zoom:80%;"></p><h3 id="CSM总结"><a href="#CSM总结" class="headerlink" title="CSM总结"></a>CSM总结</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207164013003.png" alt="image-20231207164013003" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207164117998.png" alt="image-20231207164117998" style="zoom:80%;"></p><h2 id="G1回收器：区域化分代式"><a href="#G1回收器：区域化分代式" class="headerlink" title="G1回收器：区域化分代式"></a>G1回收器：区域化分代式</h2><h3 id="G1回收器概述"><a href="#G1回收器概述" class="headerlink" title="G1回收器概述"></a>G1回收器概述</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208093158963.png" alt="image-20231208093158963" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208093731562.png" alt="image-20231208093731562" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094125569.png" alt="image-20231208094125569" style="zoom:80%;"></p><h3 id="G1回收器特点"><a href="#G1回收器特点" class="headerlink" title="G1回收器特点"></a>G1回收器特点</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094407616.png" alt="image-20231208094407616" style="zoom:80%;"></p><p><strong>G1分区示意图</strong></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094816879.png" alt="image-20231208094816879" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094918626.png" alt="image-20231208094918626" style="zoom:80%;"></p><p>  <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208095219293.png" alt="image-20231208095219293" style="zoom:80%;"></p><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208095815959.png" alt="image-20231208095815959" style="zoom:80%;"></p><h3 id="G1回收器的参数设置"><a href="#G1回收器的参数设置" class="headerlink" title="G1回收器的参数设置"></a>G1回收器的参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208100128411.png" alt="image-20231208100128411" style="zoom:80%;"></p><h3 id="G1回收器的常见操作步骤"><a href="#G1回收器的常见操作步骤" class="headerlink" title="G1回收器的常见操作步骤"></a>G1回收器的常见操作步骤</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208100931854.png" alt="image-20231208100931854" style="zoom:80%;"></p><h3 id="G1回收器的适用场景"><a href="#G1回收器的适用场景" class="headerlink" title="G1回收器的适用场景"></a>G1回收器的适用场景</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101103639.png" alt="image-20231208101103639" style="zoom:80%;"></p><h3 id="分区Region：化整为零"><a href="#分区Region：化整为零" class="headerlink" title="分区Region：化整为零"></a>分区Region：化整为零</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101448056.png" alt="image-20231208101448056" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101656902.png" alt="image-20231208101656902" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101954513.png" alt="image-20231208101954513" style="zoom:80%;"></p><h3 id="G1回收器垃圾回收过程"><a href="#G1回收器垃圾回收过程" class="headerlink" title="G1回收器垃圾回收过程"></a>G1回收器垃圾回收过程</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208102458335.png" alt="image-20231208102458335" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208103133680.png" alt="image-20231208103133680" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208103258626.png" alt="image-20231208103258626" style="zoom:80%;"></p><h4 id="记忆集-Remembered-Set"><a href="#记忆集-Remembered-Set" class="headerlink" title="记忆集(Remembered Set)"></a>记忆集(Remembered Set)</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208103745705.png" alt="image-20231208103745705" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208104145557.png" alt="image-20231208104145557" style="zoom:80%;"></p><h4 id="G1回收过程一：年轻代GC"><a href="#G1回收过程一：年轻代GC" class="headerlink" title="G1回收过程一：年轻代GC"></a>G1回收过程一：年轻代GC</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208105148788.png" alt="image-20231208105148788" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208110952401.png" alt="image-20231208110952401" style="zoom: 67%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208111017024.png" alt="image-20231208111017024" style="zoom:80%;"></p><h4 id="G1回收过程二：并发标记过程"><a href="#G1回收过程二：并发标记过程" class="headerlink" title="G1回收过程二：并发标记过程"></a>G1回收过程二：并发标记过程</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208111725531.png" alt="image-20231208111725531" style="zoom:80%;"></p><h4 id="G1回收过程三：混合回收"><a href="#G1回收过程三：混合回收" class="headerlink" title="G1回收过程三：混合回收"></a>G1回收过程三：混合回收</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208112026842.png" alt="image-20231208112026842" style="zoom:80%;"></p><h4 id="G1回收过程：补充"><a href="#G1回收过程：补充" class="headerlink" title="G1回收过程：补充"></a>G1回收过程：补充</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208142412341.png" alt="image-20231208142412341" style="zoom:80%;"></p><h3 id="G1回收器优化建议"><a href="#G1回收器优化建议" class="headerlink" title="G1回收器优化建议"></a>G1回收器优化建议</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208142728237.png" alt="image-20231208142728237" style="zoom:80%;"></p><h2 id="垃圾回收器总结"><a href="#垃圾回收器总结" class="headerlink" title="垃圾回收器总结"></a>垃圾回收器总结</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208144344748.png" alt="image-20231208144344748" style="zoom:80%;"></p><h3 id="如何选择合适的垃圾回收器"><a href="#如何选择合适的垃圾回收器" class="headerlink" title="如何选择合适的垃圾回收器"></a>如何选择合适的垃圾回收器</h3><ul><li>没有最好的收集器，更没有万能的收集器</li><li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li></ul><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208145652771.png" alt="image-20231208145652771" style="zoom:80%;"></p><h3 id="面试相关"><a href="#面试相关" class="headerlink" title="面试相关"></a>面试相关</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150040649.png" alt="image-20231208150040649" style="zoom:80%;"></p><h2 id="GC日志分析"><a href="#GC日志分析" class="headerlink" title="GC日志分析"></a>GC日志分析</h2><h3 id="相关参数设置"><a href="#相关参数设置" class="headerlink" title="相关参数设置"></a>相关参数设置</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150246883.png" alt="image-20231208150246883" style="zoom:80%;"></p><h3 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150643372.png" alt="image-20231208150643372" style="zoom:67%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150714092.png" alt="image-20231208150714092" style="zoom:67%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150736336.png" alt="image-20231208150736336" style="zoom:67%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150747770.png" alt="image-20231208150747770" style="zoom:67%;"></p><h3 id="GC日志中垃圾回收数据的分析"><a href="#GC日志中垃圾回收数据的分析" class="headerlink" title="GC日志中垃圾回收数据的分析"></a>GC日志中垃圾回收数据的分析</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208151523258.png" alt="image-20231208151523258" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208152000413.png" alt="image-20231208152000413" style="zoom: 80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208152334594.png" alt="image-20231208152334594" style="zoom:80%;"></p><h4 id="Minor-GC日志分析"><a href="#Minor-GC日志分析" class="headerlink" title="Minor GC日志分析"></a>Minor GC日志分析</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208152536904.png" alt="image-20231208152536904" style="zoom:80%;"></p><h4 id="Full-GC日志分析"><a href="#Full-GC日志分析" class="headerlink" title="Full GC日志分析"></a>Full GC日志分析</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208153026721.png" alt="image-20231208153026721" style="zoom:80%;"></p><h4 id="日志分析工具的使用"><a href="#日志分析工具的使用" class="headerlink" title="日志分析工具的使用"></a>日志分析工具的使用</h4><p>参数:<code>-Xloggc:./logs/gc.log</code>，将GC日志存储到对应的文件</p><p>可以使用一些工具去分析这些gc日志，常用的日志分析工具有：<code>GCViewer</code>、<code>GCEasy</code>、<code>GCHisto</code>、<code>GCLogViewer</code>、<code>Hpjmeter</code>、<code>garbagecat</code>等</p><p>建议GCEasy，在线，可视化更好</p><h2 id="垃圾回收器新发展-了解即可"><a href="#垃圾回收器新发展-了解即可" class="headerlink" title="垃圾回收器新发展(了解即可)"></a>垃圾回收器新发展(了解即可)</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208162923493.png" alt="image-20231208162923493" style="zoom:80%;"></p><h3 id="Shenandoah-GC"><a href="#Shenandoah-GC" class="headerlink" title="Shenandoah GC"></a>Shenandoah GC</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163147442.png" alt="image-20231208163147442" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163239693.png" alt="image-20231208163239693" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163430280.png" alt="image-20231208163430280" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163553376.png" alt="image-20231208163553376" style="zoom:80%;"></p><h3 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163653887.png" alt="image-20231208163653887" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163739444.png" alt="image-20231208163739444" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163913062.png" alt="image-20231208163913062" style="zoom:80%;"></p><h3 id="其他垃圾回收器"><a href="#其他垃圾回收器" class="headerlink" title="其他垃圾回收器"></a>其他垃圾回收器</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163943545.png" alt="image-20231208163943545" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十六章：垃圾回收相关概念</title>
      <link href="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收相关概念"><a href="#垃圾回收相关概念" class="headerlink" title="垃圾回收相关概念"></a>垃圾回收相关概念</h1><h2 id="System-gc-的理解"><a href="#System-gc-的理解" class="headerlink" title="System.gc()的理解"></a>System.gc()的理解</h2><p> <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204093200425.png" alt="image-20231204093200425" style="zoom:80%;"></p><p><strong>实例一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TTest</span>(); <span class="comment">//没有引用的对象</span></span><br><span class="line">            <span class="comment">//垃圾回收,只是显示地提醒系统进行垃圾回收，但是无法保证垃圾回收会百分百进行;</span></span><br><span class="line">            <span class="comment">//其底层是直接调用：Runtime.getRuntime().gc();</span></span><br><span class="line">            System.gc(); </span><br><span class="line">            <span class="comment">//此方法强制调用失去引用对象地finalize方法</span></span><br><span class="line">            System.runFinalization();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TTest 重写了 finalize()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        System.gc(); <span class="comment">//无法进行回收,buffer变量会指向byte数组的引用</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;10728K(76288K)] 15493K-&gt;10960K(251392K), 0.0344941 secs] [Times: user=0.11 sys=0.06, real=0.05 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 10728K-&gt;0K(76288K)] [ParOldGen: 232K-&gt;10889K(175104K)] 10960K-&gt;10889K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0066511 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        buffer=<span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//数组失去引用，可以被垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;888K(76288K)] 15493K-&gt;896K(251392K), 0.0010141 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 888K-&gt;0K(76288K)] [ParOldGen: 8K-&gt;649K(175104K)] 896K-&gt;649K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0039533 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func3</span><span class="params">()</span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分析：代码块中定义变量，在代码块外buffer变量失效，理论上可以进行垃圾回收</span></span><br><span class="line"><span class="comment">            但是分析字节码可知，局部变量表中最少有两个插槽(slot),this占用一个，此时buffer占用另一个，所以无法回收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;10728K(76288K)] 15493K-&gt;10984K(251392K), 0.0058958 secs] [Times: user=0.14 sys=0.05, real=0.01 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 10728K-&gt;0K(76288K)] [ParOldGen: 256K-&gt;10889K(175104K)] 10984K-&gt;10889K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0055648 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func4</span><span class="params">()</span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> value=<span class="number">2</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分析：</span></span><br><span class="line"><span class="comment">            局部变量表中有两个插槽(slot),this占用一个，value占用另一个，数组失去引用，所以可以回收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;904K(76288K)] 15493K-&gt;912K(251392K), 0.0009706 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 904K-&gt;0K(76288K)] [ParOldGen: 8K-&gt;649K(175104K)] 912K-&gt;649K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0037296 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func5</span><span class="params">()</span>&#123;</span><br><span class="line">        func1();</span><br><span class="line">        <span class="comment">//函数调用结束，栈帧弹出，变量销毁，数组失去引用，可以回收</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;10728K(76288K)] 15493K-&gt;10972K(251392K), 0.0055075 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 10728K-&gt;0K(76288K)] [ParOldGen: 244K-&gt;10889K(175104K)] 10972K-&gt;10889K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0064298 secs] [Times: user=0.06 sys=0.14, real=0.01 secs] </span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 0K-&gt;0K(76288K)] 10889K-&gt;10889K(251392K), 0.0003798 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 0K-&gt;0K(76288K)] [ParOldGen: 10889K-&gt;649K(175104K)] 10889K-&gt;649K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0025422 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TTest</span> <span class="variable">tTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TTest</span>();</span><br><span class="line">        tTest.func5();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存溢出与内存泄露"><a href="#内存溢出与内存泄露" class="headerlink" title="内存溢出与内存泄露"></a>内存溢出与内存泄露</h2><h3 id="内存溢出-OOM"><a href="#内存溢出-OOM" class="headerlink" title="内存溢出(OOM)"></a>内存溢出(OOM)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204100603722.png" alt="image-20231204100603722" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204101253072.png" alt="image-20231204101253072" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204101617960.png" alt="image-20231204101617960" style="zoom:80%;"></p><h3 id="内存泄漏-Memory-Leak"><a href="#内存泄漏-Memory-Leak" class="headerlink" title="内存泄漏(Memory Leak)"></a>内存泄漏(Memory Leak)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204101815297.png" alt="image-20231204101815297" style="zoom:80%;"></p><p>宽泛意义上的内存泄漏的例子</p><ul><li>大量类的静态变量<ul><li>静态变量随着类的加载而加载，类的消亡而消亡</li></ul></li><li>web应用中，将大量数据设置成会话(session)或者应用(ApplicationContext)级别，会导致这些数据生成周期变得很长</li></ul><p><strong>内存泄漏示意图</strong></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204103147788.png" alt="image-20231204103147788" style="zoom:80%;"></p><p><strong>内存泄漏举例</strong></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204103357680.png" alt="image-20231204103357680" style="zoom:80%;"></p><h2 id="Stop-The-World"><a href="#Stop-The-World" class="headerlink" title="Stop The World"></a>Stop The World</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204103659921.png" alt="image-20231204103659921" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204104119879.png" alt="image-20231204104119879" style="zoom:80%;"></p><p><strong>STW直观感受的例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">STWTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GCThread</span> <span class="variable">gcThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GCThread</span>();</span><br><span class="line">        <span class="type">PrintThread</span> <span class="variable">printThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintThread</span>();</span><br><span class="line">        printThread.start();</span><br><span class="line">        gcThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GCThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            list.clear();</span><br><span class="line">            System.gc(); <span class="comment">//显示调用gc</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此线程作用:每个1s打印一次时间</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrintThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">t</span> <span class="operator">=</span> System.currentTimeMillis()-startTime;</span><br><span class="line">                System.out.println(t/<span class="number">1000</span>+<span class="string">&quot;.&quot;</span>+t%<span class="number">1000</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垃圾回收的并发与并行"><a href="#垃圾回收的并发与并行" class="headerlink" title="垃圾回收的并发与并行"></a>垃圾回收的并发与并行</h2><h3 id="操作系统中的并发与并行"><a href="#操作系统中的并发与并行" class="headerlink" title="操作系统中的并发与并行"></a>操作系统中的并发与并行</h3><h4 id="并发-concurrent"><a href="#并发-concurrent" class="headerlink" title="并发(concurrent)"></a>并发(concurrent)</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204105303662.png" alt="image-20231204105303662" style="zoom:80%;"></p><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204105623973.png" alt="image-20231204105623973" style="zoom:80%;"></p><h4 id="并发-vs-并行"><a href="#并发-vs-并行" class="headerlink" title="并发 vs 并行"></a>并发 vs 并行</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204105801589.png" alt="image-20231204105801589" style="zoom:80%;"></p><h3 id="垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）"><a href="#垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）" class="headerlink" title="垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）"></a>垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204110005980.png" alt="image-20231204110005980" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204142924507.png" alt="image-20231204142924507" style="zoom:80%;"></p><h2 id="安全点与安全区域"><a href="#安全点与安全区域" class="headerlink" title="安全点与安全区域"></a>安全点与安全区域</h2><h3 id="安全点-safepoint"><a href="#安全点-safepoint" class="headerlink" title="安全点(safepoint)"></a>安全点(safepoint)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204144329268.png" alt="image-20231204144329268" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204144751710.png" alt="image-20231204144751710" style="zoom:80%;"></p><h3 id="安全区域-safe-Region"><a href="#安全区域-safe-Region" class="headerlink" title="安全区域(safe Region)"></a>安全区域(safe Region)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204145215230.png" alt="image-20231204145215230" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204145605854.png" alt="image-20231204145605854" style="zoom:80%;"></p><h2 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204150004345.png" alt="image-20231204150004345" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204150453101.png" alt="image-20231204150453101" style="zoom:80%;"></p><h3 id="再谈引用：强引用"><a href="#再谈引用：强引用" class="headerlink" title="再谈引用：强引用"></a>再谈引用：强引用</h3><p> <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204152905636.png" alt="image-20231204152905636" style="zoom:80%;"></p><p> <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204191125058.png" alt="image-20231204191125058" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204191200081.png" alt="image-20231204191200081" style="zoom:80%;"></p><h3 id="再谈引用：软引用"><a href="#再谈引用：软引用" class="headerlink" title="再谈引用：软引用"></a>再谈引用：软引用</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204191305349.png" alt="image-20231204191305349" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204192056968.png" alt="image-20231204192056968" style="zoom:80%;"></p><p><strong>软引用实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoftReferenceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建软引用</span></span><br><span class="line">        SoftReference&lt;User&gt; user = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;李白&quot;</span>));</span><br><span class="line">        System.out.println(user.get());</span><br><span class="line">        <span class="comment">//垃圾回收，空间充足情况下，不会回收软引用可达对象</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;After GC&quot;</span>);</span><br><span class="line">        <span class="comment">//获取软引用对应对象</span></span><br><span class="line">        System.out.println(user.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内存不足情况下，在OOM之前，会回收所有的软引用的可达对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//7M</span></span><br><span class="line">            <span class="comment">//对空间设置为: -Xms10m -Xmx10m,则新生代：老年代=1:2，两者均不足7m</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">7</span>];</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(user.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line">        User(Integer age,String name)&#123;</span><br><span class="line">            <span class="built_in">this</span>.name=name;</span><br><span class="line">            <span class="built_in">this</span>.age=age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204193451956.png" alt="image-20231204193451956" style="zoom:80%;"></p><h3 id="再谈引用：弱引用"><a href="#再谈引用：弱引用" class="headerlink" title="再谈引用：弱引用"></a>再谈引用：弱引用</h3><p>发现即回收</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204194011334.png" alt="image-20231204194011334" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204194620085.png" alt="image-20231204194620085" style="zoom:80%;"></p><p><strong>弱引用实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoftReferenceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建软引用</span></span><br><span class="line">        WeakReference&lt;User&gt; user = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;李白&quot;</span>));</span><br><span class="line">        System.out.println(user.get());</span><br><span class="line">        <span class="comment">//垃圾回收,直接会将弱引用的可达对象进行回收，不管当前空间是否充足</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;After GC&quot;</span>);</span><br><span class="line">        <span class="comment">//获取弱引用对应对象</span></span><br><span class="line">        System.out.println(user.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line">        User(Integer age,String name)&#123;</span><br><span class="line">            <span class="built_in">this</span>.name=name;</span><br><span class="line">            <span class="built_in">this</span>.age=age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再谈引用：虚引用"><a href="#再谈引用：虚引用" class="headerlink" title="再谈引用：虚引用"></a>再谈引用：虚引用</h3><p>对象回收跟踪</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204195048645.png" alt="image-20231204195048645" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204195315204.png" alt="image-20231204195315204" style="zoom:80%;"></p><h3 id="再谈引用：终结器引用"><a href="#再谈引用：终结器引用" class="headerlink" title="再谈引用：终结器引用"></a>再谈引用：终结器引用</h3><p>了解即可</p><p>  <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204200057416.png" alt="image-20231204200057416" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十五章：垃圾回收相关算法</title>
      <link href="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"/>
      <url>/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收相关算法"><a href="#垃圾回收相关算法" class="headerlink" title="垃圾回收相关算法"></a>垃圾回收相关算法</h1><p>基本思路：</p><ul><li>确定内存中什么是垃圾？</li><li>对这些垃圾如何处理进行回收？</li></ul><h2 id="垃圾标记阶段：对象存活判断"><a href="#垃圾标记阶段：对象存活判断" class="headerlink" title="垃圾标记阶段：对象存活判断"></a>垃圾标记阶段：对象存活判断</h2><p><strong><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130103042521.png" alt="image-20231130103042521"></strong></p><h3 id="垃圾标记阶段算法之引用计数算法"><a href="#垃圾标记阶段算法之引用计数算法" class="headerlink" title="垃圾标记阶段算法之引用计数算法"></a>垃圾标记阶段算法之引用计数算法</h3><h4 id="引用计数算法概述"><a href="#引用计数算法概述" class="headerlink" title="引用计数算法概述"></a>引用计数算法概述</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130103610017.png" alt="image-20231130103610017"></p><h4 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h4><p>如下图所示，为循环引用实例，实际程序中可能变量<code>p</code>不再使用时，其所指向的内存区域也不会再使用，但由于循环引用问题，导致执行的内存区域引用计数器的值非0，从而无法被垃圾回收，即出现内存泄漏问题</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130103938439.png" alt="image-20231130103938439"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130104701315.png" alt="image-20231130104701315"></p><h3 id="垃圾标记阶段算法之可达性分析算法"><a href="#垃圾标记阶段算法之可达性分析算法" class="headerlink" title="垃圾标记阶段算法之可达性分析算法"></a>垃圾标记阶段算法之可达性分析算法</h3><h4 id="可达性分析算法概述"><a href="#可达性分析算法概述" class="headerlink" title="可达性分析算法概述"></a>可达性分析算法概述</h4><p><strong>可达性分析</strong>，又称之为<strong>根搜索算法</strong>或者<strong>追踪性垃圾收集</strong></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130105121100.png" alt="image-20231130105121100"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130105431861.png" alt="image-20231130105431861"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130105740157.png" alt="image-20231130105740157"></p><h4 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h4><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130110122576.png" alt="image-20231130110122576" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130110740489.png" alt="image-20231130110740489" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130110922587.png" alt="image-20231130110922587" style="zoom:80%;"></p><h2 id="对象的finalization机制"><a href="#对象的finalization机制" class="headerlink" title="对象的finalization机制"></a>对象的finalization机制</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130143106038.png" alt="image-20231130143106038"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130143500029.png" alt="image-20231130143500029"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130143819557.png" alt="image-20231130143819557"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130144120914.png" alt="image-20231130144120914"></p><p><strong>finalize方法使得对象存活实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象的Finalization机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalizeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FinalizeTest obj; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;重写finalize方法，企图自救&quot;</span>);</span><br><span class="line">        obj = <span class="built_in">this</span>; <span class="comment">//当前对象与GC roots中的obj(类静态属性)建立联系</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        obj = <span class="keyword">new</span> <span class="title class_">FinalizeTest</span>();</span><br><span class="line"></span><br><span class="line">        obj=<span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行第一次gc&quot;</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">//演示2S，因为finalize线程优先级比较低，主线程阻塞等待finalize线程执行</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象已经死亡&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象仍然存活&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        obj=<span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行第二次gc&quot;</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象已经死亡&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象仍然存活&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130145824079.png" alt="image-20231130145824079"></p><h2 id="MAT与JProfiler的GC-Roots朔源"><a href="#MAT与JProfiler的GC-Roots朔源" class="headerlink" title="MAT与JProfiler的GC Roots朔源"></a>MAT与JProfiler的GC Roots朔源</h2><h3 id="MAT-Memory-Analyzer"><a href="#MAT-Memory-Analyzer" class="headerlink" title="MAT(Memory Analyzer)"></a>MAT(Memory Analyzer)</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130150719600.png" alt="image-20231130150719600"></p><h3 id="dump文件"><a href="#dump文件" class="headerlink" title="dump文件"></a>dump文件</h3><h4 id="什么是dump文件"><a href="#什么是dump文件" class="headerlink" title="什么是dump文件"></a>什么是dump文件</h4><ul><li>dump文件是一个进程或者系统在某一个给定的时间的快照</li><li>dump文件是用来给驱动程序编写人员调试驱动程序用的，这种文件必须用专用工具软件打开。</li><li>dump文件中包含了程序运行的模块信息、线程信息、堆栈调用信息、异常信息等数据。</li><li>在服务器运行我们的Java程序时，是无法跟踪代码的，所以当发生线上事故时，dump文件就成了一个很关键的分析点。</li></ul><h4 id="获取dump文件"><a href="#获取dump文件" class="headerlink" title="获取dump文件"></a>获取dump文件</h4><h5 id="方式1：命令行使用jmap"><a href="#方式1：命令行使用jmap" class="headerlink" title="方式1：命令行使用jmap"></a>方式1：命令行使用jmap</h5><ul><li>首先通过<code>jps</code>获取对应java进程的pid</li><li>使用jmap命令生成对应的dump文件</li></ul><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130151606843.png" alt="image-20231130151606843"></p><h5 id="方式2：使用JVisualVM导出"><a href="#方式2：使用JVisualVM导出" class="headerlink" title="方式2：使用JVisualVM导出"></a>方式2：使用<code>JVisualVM</code>导出</h5><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130153102063.png" alt="image-20231130153102063"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130153914788.png" alt="image-20231130153914788"></p><h5 id="方式3：被动生成"><a href="#方式3：被动生成" class="headerlink" title="方式3：被动生成"></a>方式3：被动生成</h5><p>很多时候需要对程序<code>OOM</code>进行分析，但是不知道程序什么时候会发生<code>OOM</code>，所以需要在程序发生<code>OOM</code>时能够自动生成<code>dump</code>文件</p><p>通过添加<code>VM Options</code>参数，即可实现上述功能</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:<span class="keyword">\tmp</span></span><br></pre></td></tr></table></figure><p>其中HeapDumpPath表示生成dump文件保存的目录</p><h3 id="MAT查看GC-Roots"><a href="#MAT查看GC-Roots" class="headerlink" title="MAT查看GC Roots"></a>MAT查看GC Roots</h3><p>使用MAT打开dump文件，可以查看GC Roots列表</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130155435272.png" alt="image-20231130155435272" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130155520639.png" alt="image-20231130155520639" style="zoom:80%;"></p><h3 id="JProfiler的GC-Roots朔源"><a href="#JProfiler的GC-Roots朔源" class="headerlink" title="JProfiler的GC Roots朔源"></a>JProfiler的GC Roots朔源</h3><p><code>IDEA</code>安装<code>JProfiler</code>插件，可以对当前程序利用<code>JProfiler</code>进行分析</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160245711.png" alt="image-20231130160245711"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160416543.png" alt="image-20231130160416543" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160651932.png" alt="image-20231130160651932" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160740840.png" alt="image-20231130160740840" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160839853.png" alt="image-20231130160839853" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160907272.png" alt="image-20231130160907272" style="zoom:80%;"></p><h3 id="JProfiler分析OOM"><a href="#JProfiler分析OOM" class="headerlink" title="JProfiler分析OOM"></a>JProfiler分析OOM</h3><p><strong>OOM程序示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对空间OMM情况分析</span></span><br><span class="line"><span class="comment"> * -Xms8m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapOOM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        List&lt;HeapOOM&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">HeapOOM</span>());</span><br><span class="line">                count+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;count=&quot;</span>+count);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130162336328.png" alt="image-20231130162336328"></p><p>利用<code>JProfiler</code>打开其自动生成的<code>dump</code>文件</p><p>查看内存中的超大对象，发现<code>ArrayList</code>对象占据了整个内存的<code>89%</code></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130162720129.png" alt="image-20231130162720129"></p><p>查看进程dump，可以发现<code>main</code>线程中存在异常，且异常位于24行</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130162823405.png" alt="image-20231130162823405"></p><h2 id="垃圾清除阶段"><a href="#垃圾清除阶段" class="headerlink" title="垃圾清除阶段"></a>垃圾清除阶段</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201093119873.png" alt="image-20231201093119873"></p><h3 id="垃圾清除阶段之标记-清除-Mark-Sweep-算法"><a href="#垃圾清除阶段之标记-清除-Mark-Sweep-算法" class="headerlink" title="垃圾清除阶段之标记-清除(Mark-Sweep)算法"></a>垃圾清除阶段之标记-清除(Mark-Sweep)算法</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201093524180.png" alt="image-20231201093524180" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201093943267.png" alt="image-20231201093943267" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201094514124.png" alt="image-20231201094514124" style="zoom:80%;"></p><h3 id="垃圾清除阶段之复制算法"><a href="#垃圾清除阶段之复制算法" class="headerlink" title="垃圾清除阶段之复制算法"></a>垃圾清除阶段之复制算法</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201095207972.png" alt="image-20231201095207972" style="zoom:67%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201101020057.png" alt="image-20231201101020057" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201102111776.png" alt="image-20231201102111776" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201103312797.png" alt="image-20231201103312797" style="zoom:80%;"></p><h3 id="垃圾清除阶段之标记-压缩-整理-算法"><a href="#垃圾清除阶段之标记-压缩-整理-算法" class="headerlink" title="垃圾清除阶段之标记-压缩(整理)算法"></a>垃圾清除阶段之标记-压缩(整理)算法</h3><p>标记-压缩(或标记-整理、Mark-Compact)算法</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201103734129.png" alt="image-20231201103734129" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201104011304.png" alt="image-20231201104011304" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201104545349.png" alt="image-20231201104545349" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201104930808.png" alt="image-20231201104930808" style="zoom:80%;"></p><h3 id="垃圾清除阶段总结"><a href="#垃圾清除阶段总结" class="headerlink" title="垃圾清除阶段总结"></a>垃圾清除阶段总结</h3><p>垃圾清除阶段三种算法对比</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201105234751.png" alt="image-20231201105234751" style="zoom:80%;"></p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201111203833.png" alt="image-20231201111203833" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201111627792.png" alt="image-20231201111627792" style="zoom:80%;"></p><p> <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201112244353.png" alt="image-20231201112244353" style="zoom:80%;"></p><h2 id="增量收集算法、分区算法"><a href="#增量收集算法、分区算法" class="headerlink" title="增量收集算法、分区算法"></a>增量收集算法、分区算法</h2><h3 id="增量收集算法"><a href="#增量收集算法" class="headerlink" title="增量收集算法"></a>增量收集算法</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201112505753.png" alt="image-20231201112505753" style="zoom:80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201143437543.png" alt="image-20231201143437543" style="zoom:80%;"></p><h3 id="分区算法"><a href="#分区算法" class="headerlink" title="分区算法"></a>分区算法</h3><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201144454338.png" alt="image-20231201144454338" style="zoom:80%;"></p><p> 根据停顿时间要求，合理规划需要垃圾回收区域的数目和范围</p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201144846213.png" alt="image-20231201144846213" style="zoom:80%;"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述内容只是常见垃圾标记和回收算法的基本思路，实际GC过程远远要比其复杂，目前前沿主流的GC算法大多都是复合算法，并且要同时考虑并发和并行的要求</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十四章：垃圾回收概述</title>
      <link href="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收概述"><a href="#垃圾回收概述" class="headerlink" title="垃圾回收概述"></a>垃圾回收概述</h1><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130094117977.png" alt="image-20231130094117977"></p><h2 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130095050581.png" alt="image-20231130095050581"></p><h2 id="为什么需要GC"><a href="#为什么需要GC" class="headerlink" title="为什么需要GC"></a>为什么需要GC</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130095918432.png" alt="image-20231130095918432"></p><h2 id="早期的垃圾回收"><a href="#早期的垃圾回收" class="headerlink" title="早期的垃圾回收"></a>早期的垃圾回收</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130100531006.png" alt="image-20231130100531006" style="zoom:80%;"></p><p> <img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130100813819.png" alt="image-20231130100813819" style="zoom:80%;"></p><h2 id="Java的垃圾回收机制"><a href="#Java的垃圾回收机制" class="headerlink" title="Java的垃圾回收机制"></a>Java的垃圾回收机制</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101130119.png" alt="image-20231130101130119"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101316294.png" alt="image-20231130101316294" style="zoom:80%;"></p><h2 id="垃圾回收的重点区域"><a href="#垃圾回收的重点区域" class="headerlink" title="垃圾回收的重点区域"></a>垃圾回收的重点区域</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101637771.png" alt="image-20231130101637771"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101722357.png" alt="image-20231130101722357"></p><h2 id="经典大厂面试题"><a href="#经典大厂面试题" class="headerlink" title="经典大厂面试题"></a>经典大厂面试题</h2><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130094709671.png" alt="image-20231130094709671" style="zoom: 80%;"></p><p><img src="/2023/12/09/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130094809137.png" alt="image-20231130094809137" style="zoom: 80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、项目前置配置</title>
      <link href="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/"/>
      <url>/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="项目前置配置"><a href="#项目前置配置" class="headerlink" title="项目前置配置"></a>项目前置配置</h1><h2 id="IDEA设置热部署"><a href="#IDEA设置热部署" class="headerlink" title="IDEA设置热部署"></a>IDEA设置热部署</h2><p><a href="https://blog.csdn.net/qq_19007335/article/details/124069635">2022版本IDEA配置参考博客</a></p><p><strong>step1:</strong> <code>setting-&gt;Compiler</code></p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127231931248.png" alt="image-20231127231931248" style="zoom:67%;"></p><p><strong>step2:</strong><code>setting-Advance Settings</code></p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127232101600.png" alt="image-20231127232101600" style="zoom:67%;"></p><h2 id="实现代码关联远程git仓库"><a href="#实现代码关联远程git仓库" class="headerlink" title="实现代码关联远程git仓库"></a>实现代码关联远程git仓库</h2><p>实际场景中，完成一个小功能应当及时提交远程仓库</p><p><code>vcs-&gt;enable Version Control</code>:相当于<code>git init</code></p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127233059818.png" alt="image-20231127233059818"></p><p>IDEA右上角出现<code>git</code>相关的功能按钮</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127233400586.png" alt="image-20231127233400586"></p><p>左下角<code>git</code>可以查看对应的信息，比如日志、未提交的文件等</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127233536503.png" alt="image-20231127233536503" style="zoom:67%;"></p><p>在<code>Terminal</code>下关联自己的github`执行以下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关联自己的github(以前设置后无需重复设置,ssh key免登录)</span></span><br><span class="line">git config --global user.name xxx</span><br><span class="line">git config --global user.email xxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将其与远程仓库关联起来,其中origin是别名</span></span><br><span class="line">git remote add origin 远程github地址(注意是ssh形式地址)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提交至远程仓库</span></span><br><span class="line">git push -u  origin 分支名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除关联远程仓库</span></span><br><span class="line">git remote remove origin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看关联远程仓库列表</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h2 id="新建子模块"><a href="#新建子模块" class="headerlink" title="新建子模块"></a>新建子模块</h2><p>整个<code>project</code>由不同的子<code>Module</code>组成，<code>project</code>下的<code>pom.xml</code>只做模块管理</p><p>整个项目目录如下：</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231128225726688.png" alt="image-20231128225726688"></p><h2 id="日志的相关配置"><a href="#日志的相关配置" class="headerlink" title="日志的相关配置"></a>日志的相关配置</h2><h3 id="项目启动信息配置"><a href="#项目启动信息配置" class="headerlink" title="项目启动信息配置"></a><strong>项目启动信息配置</strong></h3><p>改写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberApplication</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(MemberApplication.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        SpringApplication.run(MemberApplication.class, args);</span></span><br><span class="line">        <span class="comment">//获取项目启动环境</span></span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(MemberApplication.class);</span><br><span class="line">        <span class="type">Environment</span> <span class="variable">env</span> <span class="operator">=</span> app.run(args).getEnvironment();</span><br><span class="line">        LOG.info(<span class="string">&quot;启动成功&quot;</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;地址:\thttp://127.0.0.1:&#123;&#125;&quot;</span>,env.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231128230602153.png" alt="image-20231128230602153"></p><p><a href="https://www.bootschool.net/ascii-art/search">banner.txt在线生成工具</a></p><h3 id="项目运行日志"><a href="#项目运行日志" class="headerlink" title="项目运行日志"></a>项目运行日志</h3><p>在<code>resource</code>目录下新建日志配置文件<code>loggback-spring.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log日志文件存储路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;./log/memeber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;Pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight(%-5level) %blue(%-50logger&#123;50&#125;:%-4line) %thread %green(%-18X&#123;LOG_ID&#125;) %msg%n&lt;/Pattern&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;hh:mm:ss.SSS&#125; %highlight(%-5level) %blue(%-30logger&#123;30&#125;:%-4line) %thread %green(%-18X&#123;LOG_ID&#125;) %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;TRACE_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;PATH&#125;/trace.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;PATH&#125;/trace.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %-50logger&#123;50&#125;:%-4line %green(%-18X&#123;LOG_ID&#125;) %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;PATH&#125;/error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;PATH&#125;/error.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %-50logger&#123;50&#125;:%-4line %green(%-18X&#123;LOG_ID&#125;) %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;TRACE&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;TRACE_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用Http-Client完成测试接口"><a href="#使用Http-Client完成测试接口" class="headerlink" title="使用Http Client完成测试接口"></a>使用Http Client完成测试接口</h2><p><code>IDEA</code>自带<code>Http Clinet</code>插件，只要新建<code>.http</code>文件，即可发起<code>http</code>请求</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129000739903.png" alt="image-20231129000739903"></p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129000858213.png" alt="image-20231129000858213"></p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129000956969.png" alt="image-20231129000956969" style="zoom:67%;"></p><h2 id="增加AOP打印请求参数和返回结果"><a href="#增加AOP打印请求参数和返回结果" class="headerlink" title="增加AOP打印请求参数和返回结果"></a>增加AOP打印请求参数和返回结果</h2><p><code>AOP</code>和<code>Interceptor</code>都可以实现此功能，但是<code>Interceptor</code>只能处理<code>Controller</code>层的处理结果，</p><p>在<code>memeber</code>模块下新建<code>AOP</code>打印日志类<code>aspect.LogAspect</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.PropertyPreFilters;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogAspect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Common LogAspect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切点:作用于package com.bang下的所有类名中带有Controller的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.bang..*Controller.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">controllerPointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;controllerPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始打印请求日志</span></span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印请求信息</span></span><br><span class="line">        LOG.info(<span class="string">&quot;------------- 开始 -------------&quot;</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;请求地址: &#123;&#125; &#123;&#125;&quot;</span>, request.getRequestURL().toString(), request.getMethod());</span><br><span class="line">        LOG.info(<span class="string">&quot;类名方法: &#123;&#125;.&#123;&#125;&quot;</span>, signature.getDeclaringTypeName(), name);</span><br><span class="line">        LOG.info(<span class="string">&quot;远程地址: &#123;&#125;&quot;</span>, request.getRemoteAddr());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印请求参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="comment">// LOG.info(&quot;请求参数: &#123;&#125;&quot;, JSONObject.toJSONString(args));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排除特殊类型的参数，如文件类型</span></span><br><span class="line">        Object[] arguments = <span class="keyword">new</span> <span class="title class_">Object</span>[args.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> ServletRequest</span><br><span class="line">                    || args[i] <span class="keyword">instanceof</span> ServletResponse</span><br><span class="line">                    || args[i] <span class="keyword">instanceof</span> MultipartFile) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arguments[i] = args[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排除字段，敏感字段或太长的字段不显示：身份证、手机号、邮箱、密码等</span></span><br><span class="line">        String[] excludeProperties = &#123;&#125;;</span><br><span class="line">        <span class="type">PropertyPreFilters</span> <span class="variable">filters</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyPreFilters</span>();</span><br><span class="line">        PropertyPreFilters.<span class="type">MySimplePropertyPreFilter</span> <span class="variable">excludefilter</span> <span class="operator">=</span> filters.addFilter();</span><br><span class="line">        excludefilter.addExcludes(excludeProperties);</span><br><span class="line">        LOG.info(<span class="string">&quot;请求参数: &#123;&#125;&quot;</span>, JSONObject.toJSONString(arguments, excludefilter));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;controllerPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        <span class="comment">// 排除字段，敏感字段或太长的字段不显示：身份证、手机号、邮箱、密码等</span></span><br><span class="line">        String[] excludeProperties = &#123;&#125;;</span><br><span class="line">        <span class="type">PropertyPreFilters</span> <span class="variable">filters</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyPreFilters</span>();</span><br><span class="line">        PropertyPreFilters.<span class="type">MySimplePropertyPreFilter</span> <span class="variable">excludefilter</span> <span class="operator">=</span> filters.addFilter();</span><br><span class="line">        excludefilter.addExcludes(excludeProperties);</span><br><span class="line">        LOG.info(<span class="string">&quot;返回结果: &#123;&#125;&quot;</span>, JSONObject.toJSONString(result, excludefilter));</span><br><span class="line">        LOG.info(<span class="string">&quot;------------- 结束 耗时：&#123;&#125; ms -------------&quot;</span>, System.currentTimeMillis() - startTime);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129233256857.png" alt="image-20231129233256857" style="zoom:67%;"></p><h2 id="新建公共子模块common"><a href="#新建公共子模块common" class="headerlink" title="新建公共子模块common"></a>新建公共子模块common</h2><p>微服务项目一般存在多个模块，每个模块对应一个服务，负责某一项功能，各个模块可能存在许多公共的代码和相同的依赖，此时为了减小代码冗余和代码管理和修改，我们在项目下新建一个子模块<code>common</code></p><ul><li>将公共代码放在此模块下<ul><li>比如：工具类、拦截器、AOP、常量、枚举类、公共配置等</li></ul></li><li>将公共的依赖包放在此模块下的<code>pom</code>文件中<ul><li>根目录下的<code>pom</code>文件负责依赖包的版本管理</li><li>公共模块下的<code>pom</code>文件负责管理需要导入的包</li></ul></li></ul><p>比如：上述AOP实现打印请求和返回结果的日志代码就可以移除到该模块下，但要注意，此时应该修改<code>memeber</code>模块下启动类的扫描范围，即<code>@ComponentScan(&quot;com.bang.train.*&quot;)</code></p><p>增加公共模块后的项目目录</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129235041656.png" alt="image-20231129235041656"></p><h2 id="新建网关模块"><a href="#新建网关模块" class="headerlink" title="新建网关模块"></a>新建网关模块</h2><p>网关模块主要用于：路由转发、请求校验</p><p>网关模块的配置文件<code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">memeber</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8001</span> <span class="comment">#目前项目中未使用注册中心Nacos,所以只能使用ip地址＋端口号的形式表明需要转发的地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/member/**</span></span><br></pre></td></tr></table></figure><h2 id="本地数据库的构建"><a href="#本地数据库的构建" class="headerlink" title="本地数据库的构建"></a>本地数据库的构建</h2><p>对于各个项目而言，最好能够做到配置<strong>专库专用</strong>，对于一个项目，新建对应数据库的同时，创建一个专门的用户，将该用户的权限局限于对本项目对应数据库的增删改查，避免影响服务器中其他数据库里的数据。</p><h2 id="集成Mybatis持久层框架"><a href="#集成Mybatis持久层框架" class="headerlink" title="集成Mybatis持久层框架"></a>集成Mybatis持久层框架</h2><p>引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 集成mysql连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据库连接</p><p>在<code>application.yaml</code>配置文件中进行设置</p><h2 id="集成Mybatis官方生成器"><a href="#集成Mybatis官方生成器" class="headerlink" title="集成Mybatis官方生成器"></a>集成Mybatis官方生成器</h2><p>利用<code>mybatis</code>框架，需要：<code>编写持久层接口</code>-&gt;<code>编写对应的mapper.xml</code>文件(需要手动编写对应的SQL语句)</p><p>以上过程需要耗费较多经历，为简化开发可以使用以下两种替代方案</p><ul><li><code>Mybatis-Plus</code>第三方框架</li><li><code>Mybatis</code>＋官方生成器</li></ul><p>这里我们采用第二种方案<code>Mybatis</code>+官方生成器</p><p>使用<code>Mybatis</code>官方生成器步骤</p><ol><li><p>新建一个新的<code>maven</code>项目<code>generator</code></p></li><li><p>在<code>generator</code>项目的<code>pom</code>文件中引入<code>mybatis generator</code>自动生成代码插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置文件申明，为什么数据库、什么表生成代码，都需要在该配置文件中定义--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;configurationFile&gt;src/main/resources/generator-config-member.xml&lt;/configurationFile&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generator-config-business.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;configurationFile&gt;src/main/resources/generator-config-batch.xml&lt;/configurationFile&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写对应的配置文件<code>src/main/resources/generator-config-member.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;Mysql&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--覆盖生成XML文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的实体类添加toString()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不生成注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据源，需要根据自己的项目修改 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/train_member?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;train_member&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;wu123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- domain类的位置 targetProject是相对pom.xml的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.domain&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper xml的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/resources&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper类的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;member&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Member&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;table tableName=&quot;passenger&quot; domainObjectName=&quot;Passenger&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;table tableName=&quot;ticket&quot; domainObjectName=&quot;Ticket&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>点击<code>mybatis generator</code>对应maven插件，会生成对应的代码文件</p><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231203231111219.png" alt="image-20231203231111219" style="zoom:80%;"></p></li><li><p>生成的代码文件</p><ul><li><code>com.bang.train.member.domain.Member</code>：数据库<code>train_member</code>的<code>member</code>表对应的<code>java实体类</code>（PO）</li><li><code>com.bang.train.member.domain.MemberExample</code>:组装SQL语句中<code>where</code>后面的条件对应的实体类;条件构建器，用于构建SQL语句中的各种条件</li><li><code>com.bang.train.member.mapper.MemberMapper</code>:持久层对应的接口</li><li><code>src/main/resources/mapper/memberMapper.xml</code>:对应的<code>mapper.xml</code>文件，里面含有各种<code>SQL</code>语句</li></ul><p><img src="/2023/12/05/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231203231302379.png" alt="image-20231203231302379"></p></li><li><p>注意：</p><p>以上四个文件一定不要去动，每次重新店家genartor maven插件，这四个文件都会被覆盖重写；如果官方生成器对应插件无法满足项目需求，自定义的代码应编写在新的文件里，千万不要直接在这四个文件后面追加。</p></li></ol><h2 id="会员注册接口开发"><a href="#会员注册接口开发" class="headerlink" title="会员注册接口开发"></a>会员注册接口开发</h2><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><p>在<code>com.bang.train.member.IMemberService</code>接口下新建抽象方法<code>register</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile 用户提供的手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">register</span><span class="params">(String mobile)</span>;</span><br></pre></td></tr></table></figure><p>在<code>com.bang.train.member.MemberServiceImpl</code>类下实现对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(String mobile)</span> &#123;</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">MemberExample</span> <span class="variable">memberExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberExample</span>();</span><br><span class="line">    memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">    List&lt;Member&gt; memberList = memberMapper.selectByExample(memberExample);</span><br><span class="line">    <span class="keyword">if</span>(!CollUtil.isEmpty(memberList))&#123;<span class="comment">//非空，说明手机号已被注册</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;手机号已被注册&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">    member.setId(System.currentTimeMillis());</span><br><span class="line">    member.setMobile(mobile);</span><br><span class="line">    memberMapper.insert(member);</span><br><span class="line">    <span class="keyword">return</span> member.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(String mobile)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> memberService.register(mobile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写http文件利用Http-Client进行测试"><a href="#编写http文件利用Http-Client进行测试" class="headerlink" title="编写http文件利用Http Client进行测试"></a>编写http文件利用Http Client进行测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8001/member/register</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">mobile=15823209537</span><br></pre></td></tr></table></figure><h2 id="封装请求参数和结果-此模块的代码个人认为没有电脑商城项目好"><a href="#封装请求参数和结果-此模块的代码个人认为没有电脑商城项目好" class="headerlink" title="封装请求参数和结果(此模块的代码个人认为没有电脑商城项目好))"></a>封装请求参数和结果(此模块的代码个人认为没有电脑商城项目好))</h2><h3 id="封装请求参数"><a href="#封装请求参数" class="headerlink" title="封装请求参数"></a>封装请求参数</h3><p>对于每个功能模块，将对应的请求参数封装成一个实体类，注意实体类的属性名与请求参数名要一致，这样前端请求会自动映射到实体类对应属性值</p><p>新建<code>member</code>模块下用户注册对应的请求参数实体类<code>com.bang.train.member.req.MemberRegReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberRegReq</span> &#123;</span><br><span class="line">    String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装响应结果"><a href="#封装响应结果" class="headerlink" title="封装响应结果"></a>封装响应结果</h3><p>响应结果包含三大基本信息：响应状态、响应状态描述信息、响应数据</p><p>在<code>common</code>模块新建公共响应实体类<code>com.bang.train.common.resp.CommonResp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应公共实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 响应数据类类型，这里用泛型表示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResp</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">//响应状态，true表示成功，false表示失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> success=<span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//响应状态描述信息</span></span><br><span class="line">    <span class="keyword">public</span> String message;</span><br><span class="line">    <span class="comment">//响应数据</span></span><br><span class="line">    <span class="keyword">public</span> T content;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResp</span><span class="params">(T content)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content=content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对应控制层代码修改"><a href="#对应控制层代码修改" class="headerlink" title="对应控制层代码修改"></a>对应控制层代码修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Long&gt; <span class="title function_">register</span><span class="params">(MemberRegReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;Long&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.register(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一异常处理（此模块的代码个人认为没有电脑商城项目好"><a href="#统一异常处理（此模块的代码个人认为没有电脑商城项目好" class="headerlink" title="统一异常处理（此模块的代码个人认为没有电脑商城项目好)"></a>统一异常处理（此模块的代码个人认为没有电脑商城项目好)</h2><p>业务层根据业务逻辑和执行结果，会向上层抛出各种类型异常，控制层需要对异常进行处理，直接将异常抛给前端不友好，需要针对异常，转换成统一的响应结果数据格式，所以需要构建统一异常处理类，借助于<code>Spring</code>的<code>@ExceptionHandler</code>注解来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">controller层统一的异常处理拦截</span></span><br><span class="line"><span class="comment">@ControllerAdvice使得该类对所有的Controller均有效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(ControllerExceptionHandler.class);</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        commResp.setMessage(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> commResp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>根据业务层的业务逻辑，自定义对应的异常类，可以考虑利用枚举类进行异常的管理</p><p><strong>定义枚举类，统一管理自定义异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">BusinessExceptionEnum</span> &#123;</span><br><span class="line">    MEMBER_EXIST_ERROR(<span class="string">&quot;手机号已注册&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    BusinessExceptionEnum(String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BusinessExceptionEnum&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义业务异常类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> BusinessExceptionEnum E;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(BusinessExceptionEnum E)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.E = E;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改统一的异常处理模块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.train.common.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.bang.train.common.resp.CommonResp;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">controller层统一的异常处理拦截</span></span><br><span class="line"><span class="comment">@ControllerAdvice使得该类对所有的Controller均有效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(ControllerExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//未知类型异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException1</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        commResp.setMessage(<span class="string">&quot;未知类型异常,请联系管理员&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> commResp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//业务类型异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException2</span><span class="params">(BusinessException e)</span>&#123;</span><br><span class="line">        CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        commResp.setMessage(e.getE().getDesc());</span><br><span class="line">        <span class="keyword">return</span> commResp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集成校验框架Validation"><a href="#集成校验框架Validation" class="headerlink" title="集成校验框架Validation"></a>集成校验框架Validation</h2><p>在实际生产环境中，大多数情况下需要对用户的输入参数进行校验，比如校验输入是否有特殊字符、手机号位数是否正确等；当然，输入的校验也可在前端进行</p><p>校验框架<code>Validation</code>的使用步骤</p><p><strong>引入对应的pom依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Validation校验框架 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过注解方式进行参数校验</strong></p><p>在<code>member</code>模块中注册功能对应的请求参数实体类进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberRegReq</span> &#123;</span><br><span class="line">    <span class="comment">//@NotBlank:该参数不能为空，为空返回message，不能进入对应请求</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【手机号】不能为空&quot;)</span></span><br><span class="line">    String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在注册功能对应<code>controller</code>类的请求处理方法上加上注解<code>@Valid</code>让校验功能起效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Long&gt; <span class="title function_">register</span><span class="params">(<span class="meta">@Valid</span> MemberRegReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;Long&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.register(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增校验异常处理代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException1</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">    CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span>(e <span class="keyword">instanceof</span> BindException)&#123;</span><br><span class="line">        <span class="type">BindException</span> <span class="variable">be</span> <span class="operator">=</span> (BindException) e;</span><br><span class="line">        <span class="comment">//获取异常提示信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> be.getBindingResult().getAllErrors().get(<span class="number">0</span>).getDefaultMessage();</span><br><span class="line">        commResp.setMessage(message);</span><br><span class="line">        LOG.error(<span class="string">&quot;校验异常:&#123;&#125;&quot;</span>,message);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        commResp.setMessage(<span class="string">&quot;未知类型异常,请联系管理员&quot;</span>);</span><br><span class="line">        LOG.error(<span class="string">&quot;未知类型异常，请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h2><p><code>member</code>模块注册功能业务层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(MemberRegReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">MemberExample</span> <span class="variable">memberExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberExample</span>();</span><br><span class="line">    memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">    List&lt;Member&gt; memberList = memberMapper.selectByExample(memberExample);</span><br><span class="line">    <span class="keyword">if</span>(!CollUtil.isEmpty(memberList))&#123;<span class="comment">//非空，说明手机号已被注册</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_EXIST_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">    member.setId(System.currentTimeMillis());</span><br><span class="line">    member.setMobile(mobile);</span><br><span class="line">    memberMapper.insert(member);</span><br><span class="line">    <span class="keyword">return</span> member.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前，新注册用户的<code>ID</code>是用当前时间戳来表示，在高并发场景下存在非唯一性问题，因为同一时刻存在大量请求</p><p>目前的可采取的其他方法及其对应的问题</p><ul><li><p>采用时间戳+随机数问题：并发数大的情况下，仍然无法保证唯一性</p></li><li><p>ID自增：自增ID不适用于分布式数据库，分表分库场景，只适用于小型项目</p></li><li><p>UUID</p><ul><li>UUID会影响索引效率，因为UUID是无序的，用一堆无序的ID来构建一个有序的索引目录，性能上肯定有问题</li></ul></li><li><p>雪花算法：全局唯一、有序增长、生成效率高</p><ul><li><p>hutool工具内部集成了雪花算法</p><ul><li>```java<br>//参数1为终端ID<br>//参数2为数据中心ID<br>//参数1和参数2保证了每台机器生成ID的唯一性<br>Snowflake snowflake = IdUtil.createSnowflake(1, 1);<br>long id = snowflake.nextId();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - [hutool工具参考链接](https://www.bookstack.cn/read/hutool/bfd2d43bcada297e.md)</span><br><span class="line"></span><br><span class="line">### 雪花算法原理</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;03 项目配置前置工作/image-20231205232621491.png&quot; alt=&quot;image-20231205232621491&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">### 雪花算法使用过程的注意点</span><br><span class="line"></span><br><span class="line">- 数据中心以及机器ID怎么设置？</span><br><span class="line">  - 方法1：利用redis自增序列，这样每台机器启动时，从redis获取一个ID，不重复</span><br><span class="line">  - 方法2：利用数据库，为每台机器分配ID，保存ip和workID的关系</span><br><span class="line">- 时钟回拨</span><br><span class="line">  - [时钟回拨解决方法参考](https://blog.csdn.net/qq_34687559/article/details/115910152)</span><br><span class="line"></span><br><span class="line">### `member`模块`service`层代码变更</span><br><span class="line"></span><br><span class="line">将雪花算法获取ID代码进行封装</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class SnowUtil &#123;</span><br><span class="line">    //workerId和datacenterId两个属性值，在项目启动时，可以通过redis或者数据库读取，读取之后，该值就会固定不变</span><br><span class="line">    private static int workerId = 1;</span><br><span class="line">    private static int datacenterId = 1;</span><br><span class="line">    public static long getSnowflakeId()&#123;</span><br><span class="line">        return IdUtil.getSnowflake(workerId,datacenterId).nextId();</span><br><span class="line">    &#125;</span><br><span class="line">    public static String getSnowflakeStr()&#123;</span><br><span class="line">        return IdUtil.getSnowflake(workerId,datacenterId).nextIdStr();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>更改<code>service</code>层注册功能代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(MemberRegReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">MemberExample</span> <span class="variable">memberExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberExample</span>();</span><br><span class="line">    memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">    List&lt;Member&gt; memberList = memberMapper.selectByExample(memberExample);</span><br><span class="line">    <span class="keyword">if</span>(!CollUtil.isEmpty(memberList))&#123;<span class="comment">//非空，说明手机号已被注册</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_EXIST_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">    <span class="comment">//采用雪花算法生成注册用户在数据库中对应的ID</span></span><br><span class="line">    member.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">    member.setMobile(mobile);</span><br><span class="line">    memberMapper.insert(member);</span><br><span class="line">    <span class="keyword">return</span> member.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 12306买票系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十二章：执行引擎</title>
      <link href="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
      <url>/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h1><h2 id="执行引擎的作用及工作过程概述"><a href="#执行引擎的作用及工作过程概述" class="headerlink" title="执行引擎的作用及工作过程概述"></a>执行引擎的作用及工作过程概述</h2><h3 id="执行引擎概述"><a href="#执行引擎概述" class="headerlink" title="执行引擎概述"></a>执行引擎概述</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127094459845.png" alt="image-20231127094459845"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127095144384.png" alt="image-20231127095144384"></p><h3 id="执行引擎的工作过程"><a href="#执行引擎的工作过程" class="headerlink" title="执行引擎的工作过程"></a>执行引擎的工作过程</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127095630093.png" alt="image-20231127095630093"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127100153350.png" alt="image-20231127100153350"></p><h2 id="Java代码编译和执行的过程"><a href="#Java代码编译和执行的过程" class="headerlink" title="Java代码编译和执行的过程"></a>Java代码编译和执行的过程</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127100342897.png" alt="image-20231127100342897"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101115701.png" alt="image-20231127101115701"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101157223.png" alt="image-20231127101157223"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101253276.png" alt="image-20231127101253276"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101724143.png" alt="image-20231127101724143"></p><h2 id="机器码、指令、汇编语言"><a href="#机器码、指令、汇编语言" class="headerlink" title="机器码、指令、汇编语言"></a>机器码、指令、汇编语言</h2><h3 id="机器码"><a href="#机器码" class="headerlink" title="机器码"></a>机器码</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102308898.png" alt="image-20231127102308898"></p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102505973.png" alt="image-20231127102505973"></p><h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102648186.png" alt="image-20231127102648186"></p><h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102756988.png" alt="image-20231127102756988"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102953222.png" alt="image-20231127102953222"></p><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127103123575.png" alt="image-20231127103123575"></p><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127103522274.png" alt="image-20231127103522274"></p><h3 id="解释器的工作机制-工作任务"><a href="#解释器的工作机制-工作任务" class="headerlink" title="解释器的工作机制(工作任务)"></a>解释器的工作机制(工作任务)</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104215822.png" alt="image-20231127104215822"></p><h3 id="解释器分类"><a href="#解释器分类" class="headerlink" title="解释器分类"></a>解释器分类</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104308534.png" alt="image-20231127104308534"></p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104504559.png" alt="image-20231127104504559"></p><h2 id="JIT编译器"><a href="#JIT编译器" class="headerlink" title="JIT编译器"></a>JIT编译器</h2><h3 id="Java代码的执行分类"><a href="#Java代码的执行分类" class="headerlink" title="Java代码的执行分类"></a>Java代码的执行分类</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104906668.png" alt="image-20231127104906668"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104951399.png" alt="image-20231127104951399"></p><h3 id="为什么需要解释器和编译器并存"><a href="#为什么需要解释器和编译器并存" class="headerlink" title="为什么需要解释器和编译器并存"></a>为什么需要解释器和编译器并存</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127105434082.png" alt="image-20231127105434082"></p><h3 id="HotSpot-JVM的执行方式"><a href="#HotSpot-JVM的执行方式" class="headerlink" title="HotSpot JVM的执行方式"></a>HotSpot JVM的执行方式</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127105629966.png" alt="image-20231127105629966"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127110222170.png" alt="image-20231127110222170"></p><h3 id="JIT编译器概述"><a href="#JIT编译器概述" class="headerlink" title="JIT编译器概述"></a>JIT编译器概述</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127111440086.png" alt="image-20231127111440086"></p><h3 id="啥时候选择JIT-热点代码及探测方式"><a href="#啥时候选择JIT-热点代码及探测方式" class="headerlink" title="啥时候选择JIT(热点代码及探测方式)"></a>啥时候选择JIT(热点代码及探测方式)</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127111952987.png" alt="image-20231127111952987"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127143119261.png" alt="image-20231127143119261"></p><h4 id="方法调用计数器"><a href="#方法调用计数器" class="headerlink" title="方法调用计数器"></a>方法调用计数器</h4><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127143628745.png" alt="image-20231127143628745"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127144131258.png" alt="image-20231127144131258" style="zoom: 80%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127144331908.png" alt="image-20231127144331908"></p><h4 id="回边计数器"><a href="#回边计数器" class="headerlink" title="回边计数器"></a>回边计数器</h4><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127145407140.png" alt="image-20231127145407140"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127145552778.png" alt="image-20231127145552778"></p><h2 id="HotSpot-VM设置模式"><a href="#HotSpot-VM设置模式" class="headerlink" title="HotSpot VM设置模式"></a>HotSpot VM设置模式</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127145732658.png" alt="image-20231127145732658"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127150608208.png" alt="image-20231127150608208"></p><h2 id="HotSpot-VM中JIT分类"><a href="#HotSpot-VM中JIT分类" class="headerlink" title="HotSpot VM中JIT分类"></a>HotSpot VM中JIT分类</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127151358422.png" alt="image-20231127151358422"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152002002.png" alt="image-20231127152002002"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152025530.png" alt="image-20231127152025530"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152421873.png" alt="image-20231127152421873"></p><h2 id="最近的发展-了解即可"><a href="#最近的发展-了解即可" class="headerlink" title="最近的发展(了解即可)"></a>最近的发展(了解即可)</h2><h3 id="Graal编译器"><a href="#Graal编译器" class="headerlink" title="Graal编译器"></a>Graal编译器</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152528812.png" alt="image-20231127152528812"></p><h3 id="AOT"><a href="#AOT" class="headerlink" title="AOT"></a>AOT</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152616643.png" alt="image-20231127152616643"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152830130.png" alt="image-20231127152830130"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三章：String Table</title>
      <link href="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/"/>
      <url>/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/</url>
      
        <content type="html"><![CDATA[<h1 id="String-Table"><a href="#String-Table" class="headerlink" title="String Table"></a>String Table</h1><h2 id="String的基本特性"><a href="#String的基本特性" class="headerlink" title="String的基本特性"></a>String的基本特性</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128094301344.png" alt="image-20231128094301344" style="zoom:67%;"></p><h3 id="String存储结构变更"><a href="#String存储结构变更" class="headerlink" title="String存储结构变更"></a>String存储结构变更</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128094641545.png" alt="image-20231128094641545" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128094736318.png" alt="image-20231128094736318" style="zoom:67%;"></p><h3 id="String-不可变性"><a href="#String-不可变性" class="headerlink" title="String 不可变性"></a>String 不可变性</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128095746523.png" alt="image-20231128095746523" style="zoom:67%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(a==b); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(c==d); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经典面试题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span>[] c = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DemoTest</span> <span class="variable">demoTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DemoTest</span>();</span><br><span class="line">        demoTest.change(demoTest.s, demoTest.c);</span><br><span class="line">        System.out.println(demoTest.s);<span class="comment">// hello</span></span><br><span class="line">        System.out.println(demoTest.c); <span class="comment">//bold</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str,<span class="type">char</span>[] b)</span>&#123;</span><br><span class="line">        str = <span class="string">&quot;we are ok!&quot;</span>;</span><br><span class="line">        b[<span class="number">0</span>]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//string不可变数据类型，传参时，形参与实参之间引用同意内存地址，对形参的改变会导致其指向一个新的内存区域，而实参不会发生改变</span></span><br></pre></td></tr></table></figure><h3 id="字符串常量池特性"><a href="#字符串常量池特性" class="headerlink" title="字符串常量池特性"></a>字符串常量池特性</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128101250198.png" alt="image-20231128101250198" style="zoom:67%;"></p><h2 id="String的内存分配"><a href="#String的内存分配" class="headerlink" title="String的内存分配"></a>String的内存分配</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128102616031.png" alt="image-20231128102616031" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128102713976.png" alt="image-20231128102713976" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128103131148.png" alt="image-20231128103131148" style="zoom:67%;"></p><h2 id="字符串的拼接操作"><a href="#字符串的拼接操作" class="headerlink" title="字符串的拼接操作"></a>字符串的拼接操作</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128105057865.png" alt="image-20231128105057865"></p><h3 id="典型面试题"><a href="#典型面试题" class="headerlink" title="典型面试题"></a><strong>典型面试题</strong></h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128105620269.png" alt="image-20231128105620269" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128110112601.png" alt="image-20231128110112601" style="zoom:67%;"></p><h3 id="字符串拼接底层原理"><a href="#字符串拼接底层原理" class="headerlink" title="字符串拼接底层原理"></a>字符串拼接底层原理</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128111309977.png" alt="image-20231128111309977" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128111523694.png" alt="image-20231128111523694" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128111801056.png" alt="image-20231128111801056"></p><p>字符串的拼接操作不一定使用的是<code>StringBuilder</code>，如果拼接符号左右两边都是字符串常量或常量引用，则仍然使用的是编译器优化</p><h3 id="字符串拼接与append的效率比对"><a href="#字符串拼接与append的效率比对" class="headerlink" title="字符串拼接与append的效率比对"></a>字符串拼接与append的效率比对</h3><p>通过<code>StringBuilder</code>得<code>append</code>方式添加字符串效率远高于字符串拼接方式</p><ul><li><p><code>String</code>拼接操作每次拼接都会创建一个新的<code>StringBuilder</code>和<code>String</code>对象，内存占用也会更大，如果进行<code>GC</code>，需要花费额外的时间</p></li><li><p>而<code>StringBuilder</code>自始至终只会存在唯一一个<code>StringBuilder</code>对象</p><ul><li>改进空间：如果基本确定字符串长度不高于某个限定值，建议使用构造器指定大小方式创建StringBuilder对象<ul><li><code>StringBuilder sb=new StringBuilder(capacity)</code></li></ul></li></ul></li></ul><h2 id="intern-的使用"><a href="#intern-的使用" class="headerlink" title="intern()的使用"></a>intern()的使用</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128160833583.png" alt="image-20231128160833583"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128161149023.png" alt="image-20231128161149023"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128161326620.png" alt="image-20231128161326620"></p><h3 id="典型例题"><a href="#典型例题" class="headerlink" title="典型例题"></a>典型例题</h3><ul><li><code>new String(&quot;ab&quot;)</code>会创建几个对象？<ul><li>如下图字节码所示，两个对象<ul><li>一个对象是: new 关键字在堆空间创建的</li><li>另一个对象是：字符串常量池中的对象</li></ul></li></ul></li></ul><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128162224977.png" alt="image-20231128162224977"></p><ul><li><code>new String(&quot;a&quot;)+new String(&quot;b&quot;)</code>会创建几个对象？<ul><li>六个对象<ul><li><code>StringBuilder</code></li><li><code>new String(&quot;a&quot;)</code></li><li><code>常量池中的a</code></li><li><code>new String(&quot;b&quot;)</code></li><li><code>常量池中的b</code></li><li><code>StringBuilder的toString方法</code></li></ul></li><li>但是常量池中最终不会生成ab</li></ul></li></ul><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128162734386.png" alt="image-20231128162734386"></p><ul><li>例题3</li></ul><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128161441921.png" alt="image-20231128161441921" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129104643177.png" alt="image-20231129104643177" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129104158052.png" alt="image-20231129104158052" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129105020368.png" alt="image-20231129105020368" style="zoom:67%;"></p><h3 id="intern的使用总结"><a href="#intern的使用总结" class="headerlink" title="intern的使用总结"></a>intern的使用总结</h3><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129105059173.png" alt="image-20231129105059173"></p><ul><li>对于程序中大量存在的字符串，尤其其中存在大量重复字符串时，使用intern可以节省内存空间</li><li><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129112401083.png" alt="image-20231129112401083"></p></li><li><p>注意的问题：Q:使用intern的好处？为什么使用inrtern可以大大节省内存空间？</p></li></ul><h2 id="String-Table的垃圾回收"><a href="#String-Table的垃圾回收" class="headerlink" title="String Table的垃圾回收"></a>String Table的垃圾回收</h2><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129113022254.png" alt="image-20231129113022254"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129141941425.png" alt="image-20231129141941425" style="zoom:67%;"></p><p><img src="/2023/12/03/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129142115097.png" alt="image-20231129142115097" style="zoom:67%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、新版本JDK和SpringBoot特性介绍</title>
      <link href="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/"/>
      <url>/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="新版本JDK和SpringBoot特性"><a href="#新版本JDK和SpringBoot特性" class="headerlink" title="新版本JDK和SpringBoot特性"></a>新版本JDK和SpringBoot特性</h1><p>本项目采用<code>JDK17</code>和<code>SpringBoot3</code>，在进行项目开发之前，先要了解<code>JDK9-JDK17</code>的新特性和<code>SpringBoot3</code>的新特性</p><h2 id="JDK9新特性"><a href="#JDK9新特性" class="headerlink" title="JDK9新特性"></a>JDK9新特性</h2><h3 id="jshell交互式工具"><a href="#jshell交互式工具" class="headerlink" title="jshell交互式工具"></a>jshell交互式工具</h3><p><code>JDK9</code>中引入了命令行交互工具<code>jshell</code>，直接可以运行对应<code>Java</code>代码</p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231119233027637.png" alt="image-20231119233027637"></p><h3 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h3><p><code>JDK8</code>及以前将<code>package</code>作为顶级组件，<code>JDK9</code>将模块作为顶级组件</p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231119234445748.png" alt="image-20231119234445748"></p><p>不同模块之间的相互引用问题，可以通过<code>Maven</code>加入依赖的方式引用</p><p>在<code>JDK9</code>之后，可以通过模块化方式引用</p><ol><li>使用<code>module-info.java</code>来申明一个模块，一个模块只能有一个该文件，且该文件在顶层包同目录</li><li>使用<code>exports</code>来申明可以被外部引用的包，可以有多个<code>exports</code>语句<ul><li>一个<code>module</code>中能够被外部调用的包都需要在<code>module-info.java</code>中用<code>exports</code>语句申明<ul><li><code>exports 包名</code></li></ul></li></ul></li><li>使用<code>requires</code>来申明依赖的外部模块，可以有多个<code>requires</code>语句<ul><li>一个<code>module</code>中需要调用外部模块都需要在<code>module-info.java</code>中用<code>requires</code>语句申明<ul><li><code>requires 模块名</code></li></ul></li></ul></li></ol><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231119235341393.png" alt="image-20231119235341393"></p><h2 id="JDK10新特性"><a href="#JDK10新特性" class="headerlink" title="JDK10新特性"></a>JDK10新特性</h2><h3 id="var局部变量推导"><a href="#var局部变量推导" class="headerlink" title="var局部变量推导"></a>var局部变量推导</h3><p>使用var基本要求</p><ul><li>必须能够推导出实际类型</li><li>只能用于局部变量</li></ul><p>该特性一般不推荐使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test1</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        <span class="type">var</span> <span class="variable">test11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        <span class="type">Test2</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK11新特性"><a href="#JDK11新特性" class="headerlink" title="JDK11新特性"></a>JDK11新特性</h2><h3 id="单文件程序"><a href="#单文件程序" class="headerlink" title="单文件程序"></a>单文件程序</h3><p>以前运行<code>.java</code>文件需要：</p><ul><li><code>javac xxx.java</code>编译得到对应的字节码文件<code>xxx.class</code></li><li><code>java xxx.class</code>运行对应java程序</li></ul><p>新特性只需：<code>java xxx.java</code>即可运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JDK11 new property,Single File Program&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120000851511.png" alt="image-20231120000851511"></p><h3 id="shebang脚本"><a href="#shebang脚本" class="headerlink" title="shebang脚本"></a>shebang脚本</h3><ul><li><code>#!</code>符号叫做<code>shebang</code>，音译为<strong>释伴</strong>，即解释伴随行</li><li><code>#!/bin/bash</code>，以此开头的文件，在执行时会实际调用<code>/bin/bash</code>程序来执行</li></ul><p>编写一个非Java文件，文件首行添加shebang语句，在<code>git bash</code>中可以直接执行</p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120001817144.png" alt="image-20231120001817144"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!D:\ProgramTools\java_tools\JDK17\bin\java --source <span class="number">11</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JDK11 new property,Single File Program&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120001952472.png" alt="image-20231120001952472"></p><p>该功能应用场景：用Java语言编写脚本</p><h2 id="JDK14新特性"><a href="#JDK14新特性" class="headerlink" title="JDK14新特性"></a>JDK14新特性</h2><h3 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h3><p>多行字符串：比如<code>json</code>、<code>html</code>、<code>sql</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String json1=<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;name\&quot;:\&quot;张飞\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;age\&quot;:27\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;&quot;</span>;</span><br><span class="line">        <span class="comment">//JDK14新特性：文本块，使得多行字符串定义更美观和可读性</span></span><br><span class="line">        String json2= <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    &quot;name&quot;:&quot;张飞&quot;,</span></span><br><span class="line"><span class="string">                    &quot;age&quot;:27</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(json1);</span><br><span class="line">        System.out.println(json2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="instanceof增强"><a href="#instanceof增强" class="headerlink" title="instanceof增强"></a>instanceof增强</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;we are&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(str1 <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            String str2=(String) str1;</span><br><span class="line">            System.out.println(str2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//JDK14 instanceof写法增强，将判断和赋值写在了一条语句</span></span><br><span class="line">        <span class="keyword">if</span>(str1 <span class="keyword">instanceof</span> String str2)&#123;</span><br><span class="line">            System.out.println(str2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空指针提示"><a href="#空指针提示" class="headerlink" title="空指针提示"></a>空指针提示</h3><p>可以提示空指针异常具体产生的位置和原因</p><p>下面代码在两个不同<code>JDK</code>版本运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">12</span>;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(a+b+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JDK8版本</strong></p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120003842812.png" alt="image-20231120003842812"></p><p><strong>JDK14版本</strong></p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120003753190.png" alt="image-20231120003753190"></p><h2 id="JDK16新特性"><a href="#JDK16新特性" class="headerlink" title="JDK16新特性"></a>JDK16新特性</h2><h3 id="record类"><a href="#record类" class="headerlink" title="record类"></a>record类</h3><ul><li>record是一个final类，初始化后就不能修改属性值</li><li>自动生成toString, hashCode, equals方法</li><li>一般应用场景：数据类，比如<code>MVC</code>机构中的<code>DTO</code>、<code>VO</code>、<code>PO</code>等</li></ul><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120004349675.png" alt="image-20231120004349675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">UserDto</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120004534276.png" alt="image-20231120004534276"></p><h2 id="JDK17新特性"><a href="#JDK17新特性" class="headerlink" title="JDK17新特性"></a>JDK17新特性</h2><h3 id="sealed类"><a href="#sealed类" class="headerlink" title="sealed类"></a>sealed类</h3><p><strong>背景：</strong>类的继承很难管理，使用<code>sealed</code>可以显示管理</p><ul><li>父类如果是<code>sealed</code>类，则其必须至少有一个子类</li><li><code>sealed</code>类的子类，必须是<code>final</code>、<code>sealed</code>、<code>non-sealed</code>之一</li></ul><p>其实实际上没多大用处，只是在如果一个类需要继承其他类，或者一个类需要被其他子类继承，需要强制申明一些关键字，在一定程度上可以避免继承的泛滥</p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120231224546.png" alt="image-20231120231224546"></p><h3 id="Switch增强"><a href="#Switch增强" class="headerlink" title="Switch增强"></a>Switch增强</h3><p>其实没啥用</p><p>下面举个例子简单介绍一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Switch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="number">23F</span>;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> String b)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Sting类型,b=&quot;</span>+b);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Integer b)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Integer类型,b=&quot;</span>+b);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Float b)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Float类型,b=&quot;</span>+b);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;其他类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//switch增强版写法</span></span><br><span class="line">        <span class="keyword">switch</span>(o)&#123;</span><br><span class="line">            <span class="keyword">case</span> String b -&gt; System.out.println(<span class="string">&quot;Sting类型,b=&quot;</span>+b);</span><br><span class="line">            <span class="keyword">case</span> Integer b -&gt; System.out.println(<span class="string">&quot;Integer类型,b=&quot;</span>+b);</span><br><span class="line">            <span class="keyword">case</span> Float b -&gt; System.out.println(<span class="string">&quot;Float类型,b=&quot;</span>+b);</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;其他类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot3新特性"><a href="#SpringBoot3新特性" class="headerlink" title="SpringBoot3新特性"></a>SpringBoot3新特性</h2><h3 id="AOT与JIT介绍"><a href="#AOT与JIT介绍" class="headerlink" title="AOT与JIT介绍"></a>AOT与JIT介绍</h3><p><code>JIT(Just-in-Time，实时编译)</code></p><p><code>AOT（Ahead-of-Time，预编译或提前编译）</code></p><p><strong>AOT的优势</strong></p><ul><li>启动和运行速度快<ul><li>传统<code>SpringBoot</code>空项目启动时间大概是2秒，<code>AOT</code>的启动时间大概是100毫秒</li></ul></li><li>打包体积小</li></ul><p><strong>AOT的缺点</strong></p><ul><li>编译后的程序不支持跨平台</li><li>不支持动态功能，比如AOP</li></ul><p>AOP在正常项目一般用不到，其主要特点是可以将项目打包成exe的模式，在单机应用中可以直接运行，而无需另外的JDK环境</p><h3 id="JIT在高并发场景中的生产问题"><a href="#JIT在高并发场景中的生产问题" class="headerlink" title="JIT在高并发场景中的生产问题"></a>JIT在高并发场景中的生产问题</h3><p>生产问题现象：热点应用重启后，出现业务超时，几分钟后恢复正常，所谓的热点应用只有在并发量超过一定阈值之后才会出现</p><p><strong>原因：</strong><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120233923088.png" alt="image-20231120233923088"></p><p><img src="/2023/11/20/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120233202709.png" alt="image-20231120233202709" style="zoom: 67%;"></p><p><strong>解决办法</strong>：</p><ul><li><p>预热：初始让程序自动运行热点代码几百次</p></li><li><p>流量控制：启动时小流量，运行几分钟后再放到正常流量</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 12306买票系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第九章：方法区</title>
      <link href="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/"/>
      <url>/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><h2 id="栈、堆、方法区的交互关系"><a href="#栈、堆、方法区的交互关系" class="headerlink" title="栈、堆、方法区的交互关系"></a>栈、堆、方法区的交互关系</h2><h3 id="运行时数据区结构图"><a href="#运行时数据区结构图" class="headerlink" title="运行时数据区结构图"></a>运行时数据区结构图</h3><p><strong>从线程共享与否的角度来看</strong></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028093341818.png" alt="image-20231028093341818"></p><h3 id="栈、堆、方法区的交互关系-1"><a href="#栈、堆、方法区的交互关系-1" class="headerlink" title="栈、堆、方法区的交互关系"></a>栈、堆、方法区的交互关系</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028093630090.png" alt="image-20231028093630090"></p><h2 id="方法区的理解"><a href="#方法区的理解" class="headerlink" title="方法区的理解"></a>方法区的理解</h2><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028094033233.png" alt="image-20231028094033233"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028094459160.png" alt="image-20231028094459160"></p><p> <img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028094726523.png" alt="image-20231028094726523"></p><p>定义太多类会导致方法区溢出</p><ul><li>加载大量第三方的jar包</li><li>Tomcat部署工程项目过多</li><li>大量动态生成反射类</li></ul><h3 id="HotSpot中方法区的演进"><a href="#HotSpot中方法区的演进" class="headerlink" title="HotSpot中方法区的演进"></a>HotSpot中方法区的演进</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028095648853.png" alt="image-20231028095648853"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028100036153.png" alt="image-20231028100036153"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028100146185.png" alt="image-20231028100146185"></p><h2 id="设置方法区的大小和OOM"><a href="#设置方法区的大小和OOM" class="headerlink" title="设置方法区的大小和OOM"></a>设置方法区的大小和OOM</h2><h3 id="设置方法区大小"><a href="#设置方法区大小" class="headerlink" title="设置方法区大小"></a>设置方法区大小</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028100524310.png" alt="image-20231028100524310"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028101217453.png" alt="image-20231028101217453"></p><h3 id="如何解决OOM"><a href="#如何解决OOM" class="headerlink" title="如何解决OOM"></a>如何解决OOM</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028101959841.png" alt="image-20231028101959841"></p><h2 id="方法区的内部结构"><a href="#方法区的内部结构" class="headerlink" title="方法区的内部结构"></a>方法区的内部结构</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028102414892.png" alt="image-20231028102414892"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028102616983.png" alt="image-20231028102616983"></p><p>随着JDK版本的更新，方法区内存结构可能会发生变化，上图只代表经典版本</p><h3 id="内部组成信息"><a href="#内部组成信息" class="headerlink" title="内部组成信息"></a>内部组成信息</h3><h4 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h4><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028103150691.png" alt="image-20231028103150691"></p><h4 id="域-Field-信息"><a href="#域-Field-信息" class="headerlink" title="域(Field)信息"></a>域(Field)信息</h4><p>类的成员变量</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028103916522.png" alt="image-20231028103916522"></p><h4 id="方法-Method-信息"><a href="#方法-Method-信息" class="headerlink" title="方法(Method)信息"></a>方法(Method)信息</h4><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028104125782.png" alt="image-20231028104125782"></p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028110729771.png" alt="image-20231028110729771"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111042907.png" alt="image-20231028111042907"></p><h5 id="为什么需要常量池"><a href="#为什么需要常量池" class="headerlink" title="为什么需要常量池"></a>为什么需要常量池</h5><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111153115.png" alt="image-20231028111153115"></p><h5 id="常量池中的信息"><a href="#常量池中的信息" class="headerlink" title="常量池中的信息"></a>常量池中的信息</h5><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111731911.png" alt="image-20231028111731911"></p><h5 id="常量池总结"><a href="#常量池总结" class="headerlink" title="常量池总结"></a>常量池总结</h5><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111837482.png" alt="image-20231028111837482"></p><h5 id="运行时常量池-1"><a href="#运行时常量池-1" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028112002834.png" alt="image-20231028112002834"></p><h3 id="查看-class文件，可以反应方法区结构"><a href="#查看-class文件，可以反应方法区结构" class="headerlink" title="查看.class文件，可以反应方法区结构"></a>查看.class文件，可以反应方法区结构</h3><p><code>javap -v -p xxx.class</code></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="non-final的类变量"><a href="#non-final的类变量" class="headerlink" title="non-final的类变量"></a>non-final的类变量</h4><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028105346681.png" alt="image-20231028105346681"></p><h4 id="final类变量"><a href="#final类变量" class="headerlink" title="final类变量"></a>final类变量</h4><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028105558985.png" alt="image-20231028105558985"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028110557151.png" alt="image-20231028110557151"></p><h2 id="方法区使用举例"><a href="#方法区使用举例" class="headerlink" title="方法区使用举例"></a>方法区使用举例</h2><h2 id="方法区的演进细节"><a href="#方法区的演进细节" class="headerlink" title="方法区的演进细节"></a>方法区的演进细节</h2><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231030124050896.png" alt="image-20231030124050896"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119091844329.png" alt="image-20231119091844329"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119091907686.png" alt="image-20231119091907686"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119091947146.png" alt="image-20231119091947146"></p><h3 id="Q-为什么永久代要被元空间替换？"><a href="#Q-为什么永久代要被元空间替换？" class="headerlink" title="Q:为什么永久代要被元空间替换？"></a>Q:为什么永久代要被元空间替换？</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119092444204.png" alt="image-20231119092444204"></p><h3 id="Q：字符串常量池-StringTable-为什么要调整？"><a href="#Q：字符串常量池-StringTable-为什么要调整？" class="headerlink" title="Q：字符串常量池(StringTable)为什么要调整？"></a>Q：字符串常量池(StringTable)为什么要调整？</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119093345062.png" alt="image-20231119093345062"></p><h3 id="Q：静态变量的存放位置？"><a href="#Q：静态变量的存放位置？" class="headerlink" title="Q：静态变量的存放位置？"></a>Q：静态变量的存放位置？</h3><p>JDK7及其以后的版本的HotSPot虚拟机选择把静态变量与类型在Java语言一端的映射Class对象存放在一起，存储在Java堆中</p><h2 id="方法区的垃圾回收"><a href="#方法区的垃圾回收" class="headerlink" title="方法区的垃圾回收"></a>方法区的垃圾回收</h2><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119094813081.png" alt="image-20231119094813081"></p><h3 id="常量的回收"><a href="#常量的回收" class="headerlink" title="常量的回收"></a>常量的回收</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119095217118.png" alt="image-20231119095217118"></p><h3 id="未使用类的收回"><a href="#未使用类的收回" class="headerlink" title="未使用类的收回"></a>未使用类的收回</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119095416249.png" alt="image-20231119095416249"></p><h2 id="方法去总结"><a href="#方法去总结" class="headerlink" title="方法去总结"></a>方法去总结</h2><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119100152015.png" alt="image-20231119100152015"></p><h2 id="方法区常见面试题"><a href="#方法区常见面试题" class="headerlink" title="方法区常见面试题"></a>方法区常见面试题</h2><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119100523344.png" alt="image-20231119100523344"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119100602356.png" alt="image-20231119100602356"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十一章：直接内存</title>
      <link href="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/"/>
      <url>/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h1><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119144311374.png" alt="image-20231119144311374"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//分配1G内存</span></span><br><span class="line">        System.out.println(<span class="string">&quot;直接分配内存完毕&quot;</span>);</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocateDirect(capacity);</span><br><span class="line">        scanner.next();</span><br><span class="line">        <span class="comment">//释放内存</span></span><br><span class="line">        buffer=<span class="literal">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;释放内存完毕&quot;</span>);</span><br><span class="line">        scanner.next();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放前后占用内存情况：</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119151301334.png" alt="image-20231119151301334"></p><p>IO方式读取过程效率低</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119151646287.png" alt="image-20231119151646287"></p><p>NIO方式读取过程效率更高</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119151744968.png" alt="image-20231119151744968"></p><p>关于IO与NIO的具体细节，后续详细了解</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119152435871.png" alt="image-20231119152435871"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;ByteBuffer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buff</span> <span class="operator">=</span> ByteBuffer.allocateDirect(capacity);</span><br><span class="line">            list.add(buff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119152839490.png" alt="image-20231119152839490"></p><p>总结</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119153508203.png" alt="image-20231119153508203"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十章：对象的实例化、内存布局与访问定位</title>
      <link href="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/"/>
      <url>/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="对象的实例化、内存布局与访问定位"><a href="#对象的实例化、内存布局与访问定位" class="headerlink" title="对象的实例化、内存布局与访问定位"></a>对象的实例化、内存布局与访问定位</h1><h2 id="对象的实例化"><a href="#对象的实例化" class="headerlink" title="对象的实例化"></a>对象的实例化</h2><h3 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119101141798.png" alt="image-20231119101141798"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119101518158.png" alt="image-20231119101518158"></p><h3 id="对象创建的方式"><a href="#对象创建的方式" class="headerlink" title="对象创建的方式"></a>对象创建的方式</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119102103099.png" alt="image-20231119102103099"></p><h3 id="对象创建的步骤"><a href="#对象创建的步骤" class="headerlink" title="对象创建的步骤"></a>对象创建的步骤</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103101386.png" alt="image-20231119103101386"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103117152.png" alt="image-20231119103117152"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103325996.png" alt="image-20231119103325996"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103454016.png" alt="image-20231119103454016"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103741536.png" alt="image-20231119103741536"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119104135836.png" alt="image-20231119104135836"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119104255156.png" alt="image-20231119104255156"></p><p>init方法包含了对象属性的显示赋值、代码块赋值和构造器赋值</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119105425026.png" alt="image-20231119105425026"></p><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119105950211.png" alt="image-20231119105950211"></p><h3 id="内存布局示例"><a href="#内存布局示例" class="headerlink" title="内存布局示例"></a>内存布局示例</h3><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110425270.png" alt="image-20231119110425270"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110347569.png" alt="image-20231119110347569"></p><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>Q：JVM是如何通过栈帧中的对象引用访问到其内部的对象实例的呢？</p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110820562.png" alt="image-20231119110820562"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110930494.png" alt="image-20231119110930494"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119111019580.png" alt="image-20231119111019580"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119111418366.png" alt="image-20231119111418366"></p><p><img src="/2023/11/19/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119111234611.png" alt="image-20231119111234611"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、项目背景和概述</title>
      <link href="/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h1><h2 id="高并发秒杀场景中常见的问题"><a href="#高并发秒杀场景中常见的问题" class="headerlink" title="高并发秒杀场景中常见的问题"></a>高并发秒杀场景中常见的问题</h2><ul><li>秒杀还没开始，页面就崩了</li><li>秒杀刚开始，服务器就崩了</li><li>秒杀结束后，库存崩了(比如商品超卖问题)</li><li>秒杀过程没有问题，但服务器响应很慢</li></ul><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>采用前后端分离架构，前端采用<code>vue</code>，后端采用<code>SpringBoot</code></p><ul><li>千万级流量的大型分布式系统架构设计</li><li>高并发、高性能、高可用场景的解决方案</li></ul><h2 id="项目进度安排"><a href="#项目进度安排" class="headerlink" title="项目进度安排"></a>项目进度安排</h2><ul><li>架构搭建，使用前后端分离架构<ul><li>如何利用<code>SpringBoot</code>和<code>VUE-CLI</code>快速搭建前后端分离项目</li></ul></li><li>业务功能开发，实现基本的选座排队购票功能</li><li>引入高并发技术，实现高性能抢票</li></ul><h2 id="设计到的主要框架及其版本"><a href="#设计到的主要框架及其版本" class="headerlink" title="设计到的主要框架及其版本"></a>设计到的主要框架及其版本</h2><ul><li><p>JDK17</p></li><li><p>SpringBoot 3.0.0</p><ul><li>Spring 3.0.0版本只支持JDK 17及以上</li></ul></li><li><p>SpringCloud Alibaba 2022.0.0.0</p></li><li><p>第三方依赖为适应JDK17，也会做相应版本升级</p></li><li><p>常用的高并发技术解决方案</p><p><img src="/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/image-20231113233116600.png" alt="image-20231113233116600" style="zoom:67%;"></p></li></ul><h1 id="12306系统架构"><a href="#12306系统架构" class="headerlink" title="12306系统架构"></a>12306系统架构</h1><h2 id="生活中常见的高并发场景"><a href="#生活中常见的高并发场景" class="headerlink" title="生活中常见的高并发场景"></a>生活中常见的高并发场景</h2><ul><li>商品秒杀，比如淘宝双11</li><li>微信支付宝等第三方支付平台</li><li>微博突发热点</li><li>用户操作日志</li><li>12306购票平台</li></ul><h2 id="12306系统的特点"><a href="#12306系统的特点" class="headerlink" title="12306系统的特点"></a>12306系统的特点</h2><h3 id="业务复杂度高"><a href="#业务复杂度高" class="headerlink" title="业务复杂度高"></a>业务复杂度高</h3><h4 id="动态库存"><a href="#动态库存" class="headerlink" title="动态库存"></a>动态库存</h4><p>车票途径多站，可能一张座位会对应多张票，你如<code>上海-&gt;南京-&gt;武汉</code>，如果分开卖的话<code>上海-&gt;南京</code>和<code>南京-&gt;武汉</code>两张票</p><h4 id="选座功能"><a href="#选座功能" class="headerlink" title="选座功能"></a>选座功能</h4><p>用户购买的票可以对应不同类型的座位</p><h4 id="线上线下"><a href="#线上线下" class="headerlink" title="线上线下"></a>线上线下</h4><p>票既可以线下购买，也可以线上购买</p><h3 id="高并发设计要求更高"><a href="#高并发设计要求更高" class="headerlink" title="高并发设计要求更高"></a>高并发设计要求更高</h3><h4 id="不停刷票"><a href="#不停刷票" class="headerlink" title="不停刷票"></a>不停刷票</h4><h4 id="绝对不能超卖"><a href="#绝对不能超卖" class="headerlink" title="绝对不能超卖"></a>绝对不能超卖</h4><p>绝不容许一个座位同时卖给多个人，商品系统不用100%保证不超卖，因为可以临时补充库存补救</p><h3 id="如何解决高并发的问题"><a href="#如何解决高并发的问题" class="headerlink" title="如何解决高并发的问题"></a>如何解决高并发的问题</h3><h4 id="提高处理能力：QPS和TPS"><a href="#提高处理能力：QPS和TPS" class="headerlink" title="提高处理能力：QPS和TPS"></a>提高处理能力：QPS和TPS</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">补充：QPS和TPS的介绍</span><br><span class="line">QPS：Queries Per Second</span><br><span class="line">意思是每秒查询率，是一台服务器每秒能够响应的查询次数（数据库中的每秒执行查询sql的次数），显然，这个不够全面，不能描述增删改</span><br><span class="line">QPS = 并发量 / 平均响应时间</span><br><span class="line">并发量 = QPS * 平均响应时间</span><br><span class="line">===============================================================================================================</span><br><span class="line">TPS：Transactions Per Second</span><br><span class="line">即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问</span><br><span class="line">TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</span><br><span class="line">一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。</span><br><span class="line">例如：天猫双十一，一秒完成多少订单</span><br><span class="line">=============================================================================================================</span><br><span class="line">qps每秒接收了多少（流量进来多少）</span><br><span class="line">tps每秒接收后实际能处理多少（我服务端响应了多少）</span><br></pre></td></tr></table></figure><ul><li>堆积硬件</li><li>借用第三方软件，比如Gemfire</li><li>算法：模型、逻辑</li></ul><h4 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h4><ul><li>业务上：验证码、分时段、排队<ul><li>验证码：每个用户破解验证码所用时间不同，从而可以将同一时刻的请求分散开</li><li>分时段：票在一天不同时段放出</li><li>排队：购票等待时间</li></ul></li><li>技术上：限流、异步<ul><li>限流：超过指定数目流量直接快速反馈结果，不会执行后续业务</li><li>异步：请求进来，不会立即处理，会进入队列等待</li></ul></li></ul><h3 id="补充：持续秒杀高并发技术解决方案"><a href="#补充：持续秒杀高并发技术解决方案" class="headerlink" title="补充：持续秒杀高并发技术解决方案"></a>补充：持续秒杀高并发技术解决方案</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul><li>针对静态资源做CDN</li><li>页面静态化</li><li>倒计时&amp;Loading</li><li>使用验证码削峰</li></ul><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><ul><li>微服务-服务拆分</li><li>负载均衡</li><li>限流降级</li><li>缓存</li><li>令牌</li><li>异步处理</li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li>分库：业务分库、读写分离</li><li>分表：横向分表、纵向分表</li><li>冗余设计，反范式，空间换时间</li><li>分布式数据库</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>分时段秒杀</li><li>弹性扩容</li><li>候补+排队</li></ul><h3 id="模型设计和逻辑设计上的优化"><a href="#模型设计和逻辑设计上的优化" class="headerlink" title="模型设计和逻辑设计上的优化"></a>模型设计和逻辑设计上的优化</h3><h4 id="余票查询"><a href="#余票查询" class="headerlink" title="余票查询"></a>余票查询</h4><p>按照车站区间，记录站站余票，提高查询效率</p><p>具体例子如下图所示</p><p><img src="/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/image-20231116225841695.png" alt="image-20231116225841695"></p><h4 id="座位购买"><a href="#座位购买" class="headerlink" title="座位购买"></a>座位购买</h4><p>记录各个座位在对应车站区间的销售详情</p><p>可以借助二进制数据表示，提高效率</p><p>比如：<code>A-E</code>五个车站，共4段区间<code>A-B</code>、<code>B-C</code>、<code>C-D</code>、<code>D-E</code>，即可用4位二进制记录销售详情，比如:<code>1000</code>即代表该座位区间<code>A-B</code>的票已经卖出</p><h3 id="系统功能介绍"><a href="#系统功能介绍" class="headerlink" title="系统功能介绍"></a>系统功能介绍</h3><p> <img src="/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/系统功能.jpg" alt="系统功能" style="zoom:50%;"></p><h3 id="系统微服务模块划分"><a href="#系统微服务模块划分" class="headerlink" title="系统微服务模块划分"></a>系统微服务模块划分</h3><ul><li>gateway 网关模块：路由转发、登录校验</li><li>member 会员模块：会员、乘客、已购买的车票</li><li>business 业务模块：所有的车次数据、余票信息</li><li>batch 跑批模块：所有的定时任务，可通过界面启停</li><li>web 模块：会员相关界面</li><li>admin 模块：管理员相关界面</li></ul><h3 id="系统架构设计"><a href="#系统架构设计" class="headerlink" title="系统架构设计"></a>系统架构设计</h3><p><img src="/2023/11/16/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/系统架构.jpg" alt="系统架构" style="zoom:67%;"></p><h3 id="数据库表的设计"><a href="#数据库表的设计" class="headerlink" title="数据库表的设计"></a>数据库表的设计</h3>]]></content>
      
      
      <categories>
          
          <category> 12306买票系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/"/>
      <url>/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>快速构建、运行、管理应用的工具</p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="Linux环境安装"><a href="#Linux环境安装" class="headerlink" title="Linux环境安装"></a>Linux环境安装</h3><ul><li>利用<code>VMWare</code>搭建<code>CentOS7</code>虚拟机</li><li>修改网络配置，使用固定<code>IP</code>地址</li><li>利用<code>VMWare</code>镜像和克隆，创建多个虚拟机</li><li><code>windows</code>系统使用<code>xshell</code>工具进行远程连接虚拟机</li><li><code>windows</code>系统使用<code>WinScp</code>工具与虚拟机进行文件传输</li></ul><p>虚拟机搭建和网络配置修改参考之前所写的博客:<a href="https://bangwu2001.github.io/2023/09/07/Linux%E5%9F%BA%E7%A1%80/">Linux安装与网络配置</a></p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>虚拟化容器技术。Docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行 环境，容器之间互相隔离</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018193923036.png" alt="image-20231018193923036"></p><p><a href="https://docs.docker.com/engine/install/centos/">官方文档—安装指南</a></p><h4 id="卸载系统旧版本的docker"><a href="#卸载系统旧版本的docker" class="headerlink" title="卸载系统旧版本的docker"></a>卸载系统旧版本的docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="安装docker-1"><a href="#安装docker-1" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker  </span><br></pre></td></tr></table></figure><h4 id="验证docker是否安装成功"><a href="#验证docker是否安装成功" class="headerlink" title="验证docker是否安装成功"></a>验证docker是否安装成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h4 id="设置docker开机自启动"><a href="#设置docker开机自启动" class="headerlink" title="设置docker开机自启动"></a>设置docker开机自启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h4 id="配置docker镜像加速"><a href="#配置docker镜像加速" class="headerlink" title="配置docker镜像加速"></a>配置docker镜像加速</h4><p>阿里云，容器镜像加速服务</p><ol><li><p>登录阿里云，进入控制台</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194502910.png" alt="image-20231018194502910"></p></li><li><p>进入产品与服务列表</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194551471.png" alt="image-20231018194551471"></p></li><li><p>选择<strong>容器镜像服务</strong></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194644155.png" alt="image-20231018194644155"></p></li><li><p>选择镜像加速器</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194719463.png" alt="image-20231018194719463"></p></li><li><p>选择<code>centos</code>，可以查看对应的加速配置命令</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194823560.png" alt="image-20231018194823560"></p></li><li><p>配置命令</p><p>修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://bfswxim9.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><h3 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h3><p><a href="https://hub.docker.com/">docker hub地址</a></p><p>安装<code>mysql 5.7</code></p><h4 id="下载mysql镜像"><a href="#下载mysql镜像" class="headerlink" title="下载mysql镜像"></a>下载mysql镜像</h4><p><code>sudo docker pull mysql:版本号</code></p><p>比如下载<code>mysql 5.7</code>版本</p><p><code>sudo docker pull mysql:5.7</code></p><p>查看<code>docker</code>内部所有镜像</p><p><code>sudo docker images</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018200105123.png" alt="image-20231018200105123"></p><h4 id="创建实例并启动"><a href="#创建实例并启动" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数说明:</span></span><br><span class="line">--name: 给容器命名</span><br><span class="line">-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql/：将数据文件夹挂载到主机</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root：初始化 root 用户的密码</span><br><span class="line">-d 让容器在后台运行</span><br><span class="line">mysql:5.7:镜像名</span><br></pre></td></tr></table></figure><p><strong>镜像命名规范</strong></p><ul><li><p>镜像名称一般分两部分组成：[repository]:[tag]</p><ul><li>其中repository就是镜像名</li><li>tag是镜像的版本</li></ul></li><li><p>在没有指定tag时，默认是latest，代表最新版本的镜像</p></li></ul><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023194311421.png" alt="image-20231023194311421"></p><p><code>docker ps</code>查看运行的容器实例信息</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018201140545.png" alt="image-20231018201140545"></p><h5 id="补充：docker容器文件挂载与端口映射"><a href="#补充：docker容器文件挂载与端口映射" class="headerlink" title="补充：docker容器文件挂载与端口映射"></a>补充：docker容器文件挂载与端口映射</h5><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018201529294.png" alt="image-20231018201529294"></p><ul><li><p><code>docker run</code>会启动一个对应的容器，每个容器都是一个完整的运行环境(对应一个完整的Linux环境)</p></li><li><p><code>docker exec -it 容器名 对应文件或者命令</code>：进入对应容器，与对应容器进行交互</p></li></ul><p>如下图所示：mysql:5.7 的 <code>/bin/bash</code>下的目录结构可以看出其相当于是一个完整的<code>Linux</code>环境</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018201844533.png" alt="image-20231018201844533"></p><ul><li><code>exit</code>可以直接退出对应容器</li><li>文件挂载<ul><li>类似与快捷方式，讲<code>Linux</code>系统中的文件与<code>容器</code>中的文件关联起来，这样可以直接在<code>Linux</code>系统上可以看到<code>mysql</code>的配置文件、数据文件和日志文件</li><li><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018202741744.png" alt="image-20231018202741744"></li></ul></li></ul><h4 id="修改mysql配置文件"><a href="#修改mysql配置文件" class="headerlink" title="修改mysql配置文件"></a>修改mysql配置文件</h4><p><code>vi /mydata/mysql/conf/my.cnf</code></p><p>写入如下内容</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init<span class="built_in">_</span>connect=&#x27;SET collation<span class="built_in">_</span>connection = utf8<span class="built_in">_</span>unicode<span class="built_in">_</span>ci&#x27; </span><br><span class="line">init<span class="built_in">_</span>connect=&#x27;SET NAMES utf8&#x27; </span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8<span class="built_in">_</span>unicode<span class="built_in">_</span>ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><p>写入之后保存，重启mysql容器</p><p><code>docker restart 容器名</code>：重启对应容器</p><h4 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h4><h5 id="方法一：通过容器命令行连接"><a href="#方法一：通过容器命令行连接" class="headerlink" title="方法一：通过容器命令行连接"></a>方法一：通过容器命令行连接</h5><p><code>docker exec -it mysql mysql -uroot -proot</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018205320588.png" alt="image-20231018205320588"></p><h5 id="方法二：远程访问"><a href="#方法二：远程访问" class="headerlink" title="方法二：远程访问"></a>方法二：远程访问</h5><p>如果失败，需要先设置远程用户访问权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option;</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure><p><code>windows</code>远程访问</p><p><code>mysql -h ip地址 -P 端口号 -u 用户名 -p 密码</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018205700141.png" alt="image-20231018205700141"></p><h5 id="方法三：利用可视化工具Navicat连接测试"><a href="#方法三：利用可视化工具Navicat连接测试" class="headerlink" title="方法三：利用可视化工具Navicat连接测试"></a>方法三：利用可视化工具<code>Navicat</code>连接测试</h5><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212807013.png" alt="image-20231018212807013" style="zoom:80%;"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212819188.png" alt="image-20231018212819188" style="zoom:80%;"></p><h3 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h3><p>安装<code>redis 6.2.13</code></p><p>新版本redis默认自动持久化</p><h4 id="下载redis镜像"><a href="#下载redis镜像" class="headerlink" title="下载redis镜像"></a>下载redis镜像</h4><p><code>docker pull redis:6.2.13</code></p><h4 id="创建实例并启动-1"><a href="#创建实例并启动-1" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line">touch /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis:6.2.13 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h4 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h4><h5 id="方式一：通过容器命令行连接"><a href="#方式一：通过容器命令行连接" class="headerlink" title="方式一：通过容器命令行连接"></a>方式一：通过容器命令行连接</h5><p><code>docker exec -it redis redis-cli</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018211411410.png" alt="image-20231018211411410"></p><h5 id="方式二：通过其他主机远程访问"><a href="#方式二：通过其他主机远程访问" class="headerlink" title="方式二：通过其他主机远程访问"></a>方式二：通过其他主机远程访问</h5><p><code>redis-cli -h ip地址</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018211754523.png" alt="image-20231018211754523"></p><h5 id="补充—Redis-Desktop-Manager-Redis可视化工具安装"><a href="#补充—Redis-Desktop-Manager-Redis可视化工具安装" class="headerlink" title="补充—Redis Desktop Manager(Redis可视化工具安装)"></a>补充—Redis Desktop Manager(Redis可视化工具安装)</h5><p><a href="https://blog.csdn.net/JacaCao/article/details/106088148">安装教程和下载地址参考博客</a></p><p>连接示例</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212554795.png" alt="image-20231018212554795" style="zoom:80%;">可以查看数据据库内容</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212623835.png" alt="image-20231018212623835" style="zoom:80%;"></p><h2 id="Docker快速入门"><a href="#Docker快速入门" class="headerlink" title="Docker快速入门"></a>Docker快速入门</h2><h3 id="容器和镜像"><a href="#容器和镜像" class="headerlink" title="容器和镜像"></a>容器和镜像</h3><p>当我们利用Docker安装应用时，Docker会自动搜索并下载应用<strong>镜像（image</strong>）<strong>。镜像不仅包含应用本身，还包含应用运行所需要的环境、配置、系统函数库。Docker会在运行镜像时创建一个隔离环境，称为</strong>容器（<strong>container</strong>）。</p><p><strong>镜像仓库</strong>：存储和管理镜像的平台，Docker官方维护了一个公共仓库：<a href="https://hub.docker.com/">Docker Hub</a>。</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023192849389.png" alt="image-20231023192849389"></p><h2 id="Docker基础"><a href="#Docker基础" class="headerlink" title="Docker基础"></a>Docker基础</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><p>Docker最常见的命令就是操作镜像、容器的命令，详见<a href="https://docs.docker.com/">官方文档</a></p><h4 id="Docker常见命令概览"><a href="#Docker常见命令概览" class="headerlink" title="Docker常见命令概览"></a><strong>Docker常见命令概览</strong></h4><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023195219760.png" alt="image-20231023195219760"></p><h4 id="Doker常见命令列表"><a href="#Doker常见命令列表" class="headerlink" title="Doker常见命令列表"></a><strong>Doker常见命令列表</strong></h4><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">文档地址</th></tr></thead><tbody><tr><td style="text-align:center">docker pull</td><td style="text-align:center">拉取镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td></tr><tr><td style="text-align:center">docker push</td><td style="text-align:center">推送镜像到DockerRegistry</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td></tr><tr><td style="text-align:center">docker images</td><td style="text-align:center">查看本地镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td></tr><tr><td style="text-align:center">docker rmi</td><td style="text-align:center">删除本地镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td></tr><tr><td style="text-align:center">docker run</td><td style="text-align:center">创建并运行容器（不能重复创建）</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td></tr><tr><td style="text-align:center">docker stop</td><td style="text-align:center">停止指定容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td></tr><tr><td style="text-align:center">docker start</td><td style="text-align:center">启动指定容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td></tr><tr><td style="text-align:center">docker restart</td><td style="text-align:center">重新启动容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td></tr><tr><td style="text-align:center">docker rm</td><td style="text-align:center">删除指定容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docker rm</a></td></tr><tr><td style="text-align:center">docker ps</td><td style="text-align:center">查看容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td></tr><tr><td style="text-align:center">docker logs</td><td style="text-align:center">查看容器运行日志</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td></tr><tr><td style="text-align:center">docker exec</td><td style="text-align:center">进入容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td></tr><tr><td style="text-align:center">docker save</td><td style="text-align:center">保存镜像到本地压缩文件</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td></tr><tr><td style="text-align:center">docker load</td><td style="text-align:center">加载本地压缩文件到镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td></tr><tr><td style="text-align:center">docker inspect</td><td style="text-align:center">查看容器详细信息</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td></tr></tbody></table></div><h4 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h4><p>可以给常用的Docker命令起别名，便于我们访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br><span class="line">内容如下：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bashrc</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User specific aliases and <span class="built_in">functions</span></span></span><br><span class="line"></span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line">alias dps=&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class="line">alias dis=&#x27;docker images&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Source global definitions</span></span><br><span class="line">if [ -f /etc/bashrc ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>然后，执行命令使别名生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /root/.bashrc</span><br></pre></td></tr></table></figure><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p><strong>数据卷（volume</strong>）是一个虚拟目录，是<strong>容器内目录</strong>与宿主机目录之间映射的桥梁。</p><p>一定程度上类似于快捷方式，将容器内的文件挂载在宿主机上，这样可以通过对宿主机上对应文件修改达到改变容器内文件的目的</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023203149684.png" alt="image-20231023203149684"></p><h4 id="数据卷的相关命令"><a href="#数据卷的相关命令" class="headerlink" title="数据卷的相关命令"></a>数据卷的相关命令</h4><p>这些命令一般不会使用，容器文件挂载操作一般在容器创建时就已经完成</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">文档地址</th></tr></thead><tbody><tr><td style="text-align:center">docker volume create</td><td style="text-align:center">创建数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td></tr><tr><td style="text-align:center">docker volume ls</td><td style="text-align:center">查看所有数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docker volume ls</a></td></tr><tr><td style="text-align:center">docker volume rm</td><td style="text-align:center">删除指定数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume rm</a></td></tr><tr><td style="text-align:center">docker volume inspect</td><td style="text-align:center">查看某个数据卷的详情</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docker volume inspect</a></td></tr><tr><td style="text-align:center">docker volume prune</td><td style="text-align:center">清除数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td></tr></tbody></table></div><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023205944546.png" alt="image-20231023205944546"></p><h4 id="实例-利用Nginx容器部署静态资源"><a href="#实例-利用Nginx容器部署静态资源" class="headerlink" title="实例:利用Nginx容器部署静态资源"></a>实例:利用Nginx容器部署静态资源</h4><p>需求：</p><ul><li><p>创建Nginx容器，修改nginx容器内的html目录下的index.html文件内容</p></li><li><p>将静态资源部署到nginx的html目录</p></li></ul><p>操作</p><ul><li><p>在执行docker run命令时，使用<code>-v 数据卷:容器内目录</code>可以完成数据卷挂载</p></li><li><p>当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷</p></li></ul><p><strong>创建容器并挂载</strong></p><p><code>docker run -d --name nginx -v html:/usr/share/nginx/html -p 80:80 nginx</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023210627910.png" alt="image-20231023210627910"></p><p><strong>查看数据卷及其位置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls  #查看所有数据卷</span><br><span class="line">docker volume inspect html #查看数据卷html的详细信息，包括在宿主机的位置</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023210839704.png" alt="image-20231023210839704"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023210925071.png" alt="image-20231023210925071"></p><p><strong>修改html目录下文件，即可实现nginx静态部署</strong></p><p>直接访问<code>ip地址/</code>即可访问静态资源</p><p><strong>查看某个容器是否被挂载，以及挂载的数据卷信息</strong></p><p><code>docker inspect 容器名</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023212353220.png" alt="image-20231023212353220" style="zoom:80%;"></p><h4 id="实例-本地目录的挂载"><a href="#实例-本地目录的挂载" class="headerlink" title="实例:本地目录的挂载"></a>实例:本地目录的挂载</h4><ul><li>在执行docker run命令时，使用 <strong>-v</strong> <strong>本地目录</strong> <strong>:</strong> <strong>容器内目录</strong> 可以完成本地目录挂载</li><li>本地目录必须以“<strong>/</strong>”或 “<strong>./</strong>“ 开头，如果直接以名称开头，会被识别为数据卷而非本地目录<ul><li><code>-v mysql : /var/lib/mysql</code>会被识别为一个数据卷叫mysql</li><li><code>-v ./mysql : /var/lib/mysql</code> 会被识别为当前目录下的mysql目录</li></ul></li></ul><h3 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h3><p> 镜像就是包含了应用程序、程序运行的系统函数库、运行配置等文件的文件包。构建镜像的过程其实就是把上述文件打包的过程。</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023212959096.png" alt="image-20231023212959096"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023213143862.png" alt="image-20231023213143862"></p><h4 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h4><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerfile帮我们构建镜像</p><p><strong>DockerFile常用指令</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">说明</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center"><strong>FROM</strong></td><td style="text-align:center">指定基础镜像</td><td style="text-align:center">FROM centos:6</td></tr><tr><td style="text-align:center"><strong>ENV</strong></td><td style="text-align:center">设置环境变量，可在后面指令使用</td><td style="text-align:center">ENV key value</td></tr><tr><td style="text-align:center"><strong>COPY</strong></td><td style="text-align:center">拷贝本地文件到镜像的指定目录</td><td style="text-align:center">COPY ./xx.jar /tmp/app.jar</td></tr><tr><td style="text-align:center"><strong>RUN</strong></td><td style="text-align:center">执行Linux的shell命令，一般是安装过程的命令</td><td style="text-align:center">RUN yum install gcc</td></tr><tr><td style="text-align:center"><strong>EXPOSE</strong></td><td style="text-align:center">指定容器运行时监听的端口，是给镜像使用者看的</td><td style="text-align:center">EXPOSE 8080</td></tr><tr><td style="text-align:center"><strong>ENTRYPOINT</strong></td><td style="text-align:center">镜像中应用的启动命令，容器运行时调用</td><td style="text-align:center">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table></div><p>详细信息，可以参考<a href="https://docs.docker.com/engine/reference/builder/">官方文档</a></p><h4 id="制作Jar包的运行镜像"><a href="#制作Jar包的运行镜像" class="headerlink" title="制作Jar包的运行镜像"></a>制作Jar包的运行镜像</h4><p>我们可以基于Ubuntu基础镜像，利用Dockerfile描述镜像结构，也可以直接基于JDK为基础镜像，省略前面的步骤</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023214453287.png" alt="image-20231023214453287"></p><p>当编写好了Dockerfile，可以利用下面命令来构建镜像</p><p><code>docker build -t myImage:1.0 .</code></p><ul><li><p><code>-t</code>：是给镜像起名，格式依然是repository:tag的格式，不指定tag时，默认为latest</p></li><li><p><code>.</code>：是指定Dockerfile所在目录，如果就在当前目录，则指定为”.”</p></li></ul><p><strong>构建自定义镜像</strong></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023215948740.png" alt="image-20231023215948740"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220024629.png" alt="image-20231023220024629"></p><p><strong>启动并运行镜像</strong></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220115685.png" alt="image-20231023220115685"></p><p><strong>查看容器运行日志</strong></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220201265.png" alt="image-20231023220201265"></p><p>浏览器访问<code>ip地址:8080</code></p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>默认情况下，所有容器都是以bridge方式连接到Docker的一个虚拟网桥上</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220925309.png" alt="image-20231023220925309"></p><p>虽然各个容器之间网络联通，可以相互通信， 但是容器一旦重启，网络地址是动态分配的</p><p>所以需要自定义网络才可以通过<strong>容器名</strong>互相访问</p><p><code>Docker</code>常见的网络操作命令如下</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">文档地址</th></tr></thead><tbody><tr><td style="text-align:center">docker network create</td><td style="text-align:center">创建一个网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td style="text-align:center">docker network ls</td><td style="text-align:center">查看所有网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docker network ls</a></td></tr><tr><td style="text-align:center">docker network rm</td><td style="text-align:center">删除指定网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docker network rm</a></td></tr><tr><td style="text-align:center">docker network prune</td><td style="text-align:center">清除未使用的网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docker network prune</a></td></tr><tr><td style="text-align:center">docker network connect</td><td style="text-align:center">使指定容器连接加入某网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docker network connect</a></td></tr><tr><td style="text-align:center">docker network disconnect</td><td style="text-align:center">使指定容器连接离开某网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td style="text-align:center">docker network inspect</td><td style="text-align:center">查看网络详细信息</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table></div><p>更多详细信息，查看<a href="https://docs.docker.com/engine/reference/commandline/network/">官方文档</a></p><p><code>run 命令</code>中可以通过<code>--network 网络名</code>让创建的容器加入对应的网络</p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="部署Java后端应用"><a href="#部署Java后端应用" class="headerlink" title="部署Java后端应用"></a>部署Java后端应用</h3><h4 id="编写对应的Dockerfile文件"><a href="#编写对应的Dockerfile文件" class="headerlink" title="编写对应的Dockerfile文件"></a>编写对应的<code>Dockerfile</code>文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hm-service.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h4><p><code>maven package</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094249542.png" alt="image-20231024094249542"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094332057.png" alt="image-20231024094332057"></p><h4 id="上传服务器"><a href="#上传服务器" class="headerlink" title="上传服务器"></a>上传服务器</h4><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094728816.png" alt="image-20231024094728816"></p><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094853550.png" alt="image-20231024094853550"></p><h4 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h4><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024095030218.png" alt="image-20231024095030218"></p><h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><p><code>docker logs -f 容器名</code>：持续更新显示容器日志</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024095112971.png" alt="image-20231024095112971"></p><h4 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h4><p><code>192.168.80.130:8080/search/list</code></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024104121270.png" alt="image-20231024104121270"></p><h4 id="注意网络的配置"><a href="#注意网络的配置" class="headerlink" title="注意网络的配置"></a>注意网络的配置</h4><ul><li>自己创建一个网络</li><li>将<code>mysql</code>容器加入该网络</li><li>创建启动后端项目时，将后端项目加入<code>mysql</code>同一网络</li></ul><h3 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h3><p><strong>前端项目上传服务器</strong></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024105040433.png" alt="image-20231024105040433"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024105105757.png" alt="image-20231024105105757"></p><h4 id="容器的创建和启动"><a href="#容器的创建和启动" class="headerlink" title="容器的创建和启动"></a>容器的创建和启动</h4><ul><li>nginx配置文件的挂载</li><li>nginx静态资源文件的挂载</li><li>nginx端口的映射</li></ul><p>文件挂载参考<a href="https://hub.docker.com/_/nginx"><code>docker hub</code>官方文档</a></p><p>创建启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx \</span><br><span class="line">-p 18080:18080 \</span><br><span class="line">-p 18081:18081 \</span><br><span class="line">-v /home/front/html:/usr/share/nginx/html \</span><br><span class="line">-v /home/front/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">--network demo \</span><br><span class="line">nginx:latest</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024105916690.png" alt="image-20231024105916690"></p><h4 id="访问项目-1"><a href="#访问项目-1" class="headerlink" title="访问项目"></a>访问项目</h4><p><code>192.168.80.130:18080</code>和<code>192.168.80.130:18081</code></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>前端、后端和mysql所在容器必须要处于同一网络中，才能进行通信</p><h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><p><strong>Docker Compose</strong>通过一个单独的<strong>docker-compose.yml</strong> 模板文件（YAML 格式）来定义一组相关联的应用容器，帮助我们实现多个相互关联的Docker容器的快速部署。</p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024111846289.png" alt="image-20231024111846289"></p><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024112120132.png" alt="image-20231024112120132"></p><h4 id="docker-compose命令格式"><a href="#docker-compose命令格式" class="headerlink" title="docker compose命令格式"></a>docker compose命令格式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024112524685.png" alt="image-20231024112524685"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus</title>
      <link href="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/"/>
      <url>/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h1><p>mybatis-plus学习笔记，<a href="https://www.bilibili.com/video/BV1Xu411A7tL/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">参考B站视频</a></p><p><a href="https://b11et3un53m.feishu.cn/wiki/PsyawI04ei2FQykqfcPcmd7Dnsc">参考博客</a></p><p><a href="https://baomidou.com/">Mybatis-Plus官方文档</a></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="使用mybatis-plus的基础步骤"><a href="#使用mybatis-plus的基础步骤" class="headerlink" title="使用mybatis-plus的基础步骤"></a>使用mybatis-plus的基础步骤</h3><ol><li><p>引入mybatisPlus的Maven依赖，代替原始Mybatis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义Mapper接口继承自BaseMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承BaseMapper接口，传入数据库对应实体类的泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单元测试即可直接使用</p><p><code>mapper</code>存在一系列增删改查的方法可以直接调用</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021195840724.png" alt="image-20231021195840724"></p></li></ol><p><strong>小插曲</strong></p><p>测试如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryByIds</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一直报错:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java: 找不到符号   符号:   方法 of(long,long,long,long)   位置: 接口 java.util.List</span><br></pre></td></tr></table></figure><p>原因：</p><p><code>List.of()</code>是<code>JDK9</code>之后才有的版本</p><p>解决方法：提升<code>java</code>编译的<code>JDK</code>版本</p><p>修改如下位置(注意：无论修改<code>ProjectStructure</code>还是<code>pom.xml</code>中的<code>java</code>版本均无效)</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021200120027.png" alt="image-20231021200120027" style="zoom:80%;"></p><h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><p><strong>MyBatisPlus</strong>通过扫描实体类，并基于反射获取实体类信息作为数据库表信息。</p><h4 id="基本约定"><a href="#基本约定" class="headerlink" title="基本约定"></a>基本约定</h4><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021200634159.png" alt="image-20231021200634159"></p><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><ul><li><strong>@TableName</strong>：用来指定表名</li><li><strong>@TableId</strong>：用来指定表中的主键字段信息</li><li><strong>@TableField</strong>：用来指定表中的普通字段信息</li></ul><p>注意的点：</p><p>当实体类和数据库不满足既定的约定的话，就必须要使用对应的注解</p><ul><li>对于<code>@TableId</code>是用来指定主键字段，对于数据库中主键存在一些属性(比如自增)，所以注解中有时也要注明主键类型<ul><li>IdType枚举：<ul><li>AUTO：数据库自增长</li><li>INPUT：通过set方法自行输入</li><li>ASSIGN_ID：分配 ID，接口IdentifierGenerator的方法nextId来生成id，默认实现类为DefaultIdentifierGenerator雪花算法</li></ul></li><li>默认采用雪花算法</li></ul></li><li>使用@TableField的常见场景：<ul><li>成员变量名与数据库字段名不一致</li><li>成员变量名以is开头，且是布尔值<ul><li>布尔变量反射时会去掉is</li></ul></li><li>成员变量名与数据库关键字冲突<ul><li>使用转义字符进行说明</li></ul></li><li>成员变量不是数据库字段<ul><li>使用<code>exist</code>说明</li></ul></li></ul></li></ul><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021202134848.png" alt="image-20231021202134848"></p><h3 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h3><p><strong>MyBatisPlus</strong>的配置项继承了MyBatis原生配置和一些自己特有的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">type-aliases-package: com.itheima.mp.domain.po # 别名扫描包</span><br><span class="line">mapper-locations: &quot;classpath*:/mapper/**/*.xml&quot; # Mapper.xml文件地址，默认值</span><br><span class="line">configuration:</span><br><span class="line">map-underscore-to-camel-case: true # 是否开启下划线和驼峰的映射</span><br><span class="line">cache-enabled: false # 是否开启二级缓存</span><br><span class="line"> global-config:</span><br><span class="line">db-config:</span><br><span class="line">id-type: assign_id # id为雪花算法生成</span><br><span class="line">update-strategy: not_null # 更新策略：只更新非空字段</span><br></pre></td></tr></table></figure><p>具体可参考官方文档：<a href="https://www.baomidou.com/pages/56bac0/">使用配置 </a><a href="https://www.baomidou.com/pages/56bac0/">| MyBatis-Plus (baomidou.com)</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>Mybatis-Plus</code>使用的基本流程</p><ul><li>引入起步依赖</li><li>自定义Mapper，继承自<code>BaseMapper</code></li><li>在实体类上添加注解申明信息</li><li>在<code>application.yml</code>中根据需要添加配置</li></ul><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p><code>Mybatis-Plus</code>支持各种复杂的<code>where</code>条件，可以满足日常开发的各种需求</p><p>下图中方法参数中的<code>wrapper</code>其实就是条件构造器</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021205520443.png" alt="image-20231021205520443"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021205627495.png" alt="image-20231021205627495" style="zoom:80%;"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021205819231.png" alt="image-20231021205819231" style="zoom:80%;"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><strong>基于QueryWrapper的查询</strong></p><p>①查询出名字中带o的，存款大于等于1000元的人的id、username、info、balance字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造查询条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;username&quot;</span>,<span class="string">&quot;info&quot;</span>,<span class="string">&quot;balance&quot;</span>)</span><br><span class="line">        .like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">        .ge(<span class="string">&quot;balance&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②更新用户名为jack的用户的余额为2000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateByQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造更新数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setBalance(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//2.构造更新条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .eq(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="comment">//3.更新</span></span><br><span class="line">    userMapper.update(user,wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基于UpdateWrapper的更新</strong></p><p>需求：更新id为1,2,4的用户的余额，扣200</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造upadteWrapper</span></span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">4L</span>);</span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">        .setSql(<span class="string">&quot;balance=balance-200&quot;</span>)</span><br><span class="line">        .in(<span class="string">&quot;id&quot;</span>,ids);</span><br><span class="line">    <span class="comment">//2.更细</span></span><br><span class="line">    userMapper.update(<span class="literal">null</span>,wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基于LambdaQueryWrapper</strong>的查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLambdaQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .select(User::getId,User::getUsername,User::getInfo,User::getBalance)</span><br><span class="line">        .like(User::getUsername,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">        .ge(User::getBalance,<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>QueryWrapper和LambdaQueryWrapper通常用来构建select、delete、update的where条件部分</li><li>UpdateWrapper和LambdaUpdateWrapper通常只有在set语句比较特殊才使用</li><li>尽量使用LambdaQueryWrapper和LambdaUpdateWrapper，避免硬编码</li></ul><h3 id="自定义SQL"><a href="#自定义SQL" class="headerlink" title="自定义SQL"></a>自定义SQL</h3><p>我们可以利用MyBatisPlus的Wrapper来构建复杂的Where条件，然后自己定义SQL语句中剩下的部分。</p><p>需求：将id在指定范围的用户（例如1、2、4 ）的余额扣减指定值</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h4><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021214903600.png" alt="image-20231021214903600"></p><ul><li>直接写SQL语句，<code>where</code>条件语句比较繁琐</li><li>全部用<code>Wrapper</code>来完成，不符合业务逻辑规范(参数往往只允许在<code>Service</code>层去定义)</li></ul><h4 id="自定义SQL流程"><a href="#自定义SQL流程" class="headerlink" title="自定义SQL流程"></a>自定义SQL流程</h4><p>①基于Wrapper构建where条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; ids = List.of(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">4L</span>);</span><br><span class="line"><span class="type">int</span> amount=-<span class="number">20000</span>;</span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">    .in(User::getId,ids);</span><br><span class="line">userMapper.updateBalanceById(lambdaQueryWrapper,amount);</span><br></pre></td></tr></table></figure><p>②在mapper方法参数中用Param注解声明wrapper变量名称，必须是ew</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateBalanceById</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span>LambdaQueryWrapper&lt;User&gt; wrapper,<span class="meta">@Param(&quot;amount&quot;)</span> <span class="type">int</span> amount)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③自定义SQL，并使用Wrapper条件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBalanceById&quot;</span>&gt;</span></span><br><span class="line">    Update user SET balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h3><p><code>Mybatis-Plus</code>还提供了<code>Service</code>层的接口，有一系列可用的增删改查方法</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022110437139.png" alt="image-20231022110437139" style="zoom:80%;"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022105850973.png" alt="image-20231022105850973" style="zoom:80%;"></p><h4 id="Mybatis-Plus-Service接口使用流程"><a href="#Mybatis-Plus-Service接口使用流程" class="headerlink" title="Mybatis-Plus Service接口使用流程"></a>Mybatis-Plus Service接口使用流程</h4><ol><li><p>自定义Service接口继承IService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义Service实现类，实现自定义接口并继承ServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="实例一：基于Restful风格实现下面的接口"><a href="#实例一：基于Restful风格实现下面的接口" class="headerlink" title="实例一：基于Restful风格实现下面的接口"></a>实例一：基于Restful风格实现下面的接口</h4><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022113118176.png" alt="image-20231022113118176"></p><h5 id="引入对应依赖"><a href="#引入对应依赖" class="headerlink" title="引入对应依赖"></a>引入对应依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="swagger配置信息"><a href="#swagger配置信息" class="headerlink" title="swagger配置信息"></a>swagger配置信息</h5><p>本实例借助<code>Swagger</code>实现接口功能的在线测试</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">用户管理接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;用户管理接口文档&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">bang@bang.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">bang</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.bang.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.itheima.mp.controller</span></span><br></pre></td></tr></table></figure><h5 id="创建对应的实体类"><a href="#创建对应的实体类" class="headerlink" title="创建对应的实体类"></a>创建对应的实体类</h5><ul><li><code>userFormDTO</code>：代表新增用户的表单</li><li><code>UserVO</code>:代表查询的返回结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户表单实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFormDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;注册手机号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息，JSON风格&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户VO实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;使用状态（1正常 2冻结）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建响应结果实体类"><a href="#创建响应结果实体类" class="headerlink" title="创建响应结果实体类"></a>创建响应结果实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//响应数据</span></span><br><span class="line">    <span class="keyword">private</span> Integer status; <span class="comment">//响应状态码</span></span><br><span class="line">    <span class="keyword">private</span> String message; <span class="comment">//响应信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="按照restful风格编写Controller接口方法"><a href="#按照restful风格编写Controller接口方法" class="headerlink" title="按照restful风格编写Controller接口方法"></a>按照<code>restful</code>风格编写<code>Controller</code>接口方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;用户管理接口&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//构造函数注入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> UserFormDTO userFormDTO)</span>&#123;</span><br><span class="line">        <span class="comment">//1.DTO对象转换成PO对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.copyProperties(userFormDTO, User.class);</span><br><span class="line">        <span class="comment">//2.新增</span></span><br><span class="line">        userService.save(user);</span><br><span class="line"></span><br><span class="line">        <span class="type">JsonResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">200</span>,<span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        userService.removeById(id);</span><br><span class="line">        JsonResult&lt;UserVO&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">200</span>,<span class="string">&quot;删除用户成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="comment">//1.查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">        <span class="comment">//对象类型转换</span></span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(user,UserVO.class);</span><br><span class="line">        JsonResult&lt;UserVO&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(userVO,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id批量查询</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id批量查询接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;UserVO&gt;&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id集合&quot;)</span> <span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        <span class="comment">//1.查询用户集合</span></span><br><span class="line">        List&lt;User&gt; userList = userService.listByIds(ids);</span><br><span class="line">        <span class="comment">//2.类型转换</span></span><br><span class="line">        List&lt;UserVO&gt; userVOList = BeanUtil.copyToList(userList, UserVO.class);</span><br><span class="line">        JsonResult&lt;List&lt;UserVO&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOList,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id扣减余额</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id扣减余额接口&quot;)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;/deduction/&#123;money&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">reductionBalanceById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id,<span class="meta">@ApiParam(&quot;扣减金额&quot;)</span> <span class="meta">@PathVariable(&quot;money&quot;)</span> Integer money)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">r</span> <span class="operator">=</span> userService.reductionBalanceById(id,money);</span><br><span class="line">        JsonResult&lt;UserVO&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(r) result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">200</span>,<span class="string">&quot;扣减余额成功&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">500</span>,<span class="string">&quot;扣减余额失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于需求5，删减指定用户金额，业务逻辑无法借助`Mybatis-plus现提供的方法，所以需要自定义方法</p><p><code>UserMapper</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateBalanceById</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span>LambdaQueryWrapper&lt;User&gt; wrapper,<span class="meta">@Param(&quot;amount&quot;)</span> <span class="type">int</span> amount)</span>;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBalanceById&quot;</span>&gt;</span></span><br><span class="line">        Update user SET balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>IUserService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reductionBalanceById</span><span class="params">(Long id,Integer money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IUserService</code>接口实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reductionBalanceById</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询用户余额</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getBalance()&lt;money)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.定义wrapper</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(User::getId,id);</span><br><span class="line">        userMapper.updateBalanceById(lambdaQueryWrapper,money);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>localhost:8080/doc.html</code>即可测试</p><h4 id="实例二：IService的Lambda查询"><a href="#实例二：IService的Lambda查询" class="headerlink" title="实例二：IService的Lambda查询"></a>实例二：IService的Lambda查询</h4><p>需求：实现一个根据复杂条件查询用户的接口，查询条件如下：</p><ul><li><p>name：用户名关键字，可以为空</p></li><li><p>status：用户状态，可以为空</p></li><li><p>minBalance：最小余额，可以为空</p></li><li><p>maxBalance：最大余额，可以为空</p></li></ul><p>上述功能其实就是多条件筛选，如果采用传统自己编写<code>SQL</code>语句的话，会非常繁琐</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022162757090.png" alt="image-20231022162757090" style="zoom:80%;"></p><p>如果采用<code>IService</code>提供的<code>lambdaQuery</code>的话会非常简洁</p><p>在<code>IUserServiceImpl</code>中实现如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUsersByCondition</span><span class="params">(String name, Integer status, Integer minBalance, Integer maxBalance)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lambdaQuery().like(name!=<span class="literal">null</span>,User::getUsername,name)</span><br><span class="line">        .eq(status!=<span class="literal">null</span>,User::getStatus,status)</span><br><span class="line">        .gt(minBalance!=<span class="literal">null</span>,User::getBalance,minBalance)</span><br><span class="line">        .lt(maxBalance!=<span class="literal">null</span>,User::getBalance,maxBalance)</span><br><span class="line">        .list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserController</code>添加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据条件进行用户查询</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据条件查询用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;UserVO&gt;&gt; <span class="title function_">queryUsers</span><span class="params">(UserQuery userQuery)</span>&#123;</span><br><span class="line">        <span class="comment">//1.查询</span></span><br><span class="line">        List&lt;User&gt; userList = userService.queryUsersByCondition(userQuery.getName(), userQuery.getStatus()</span><br><span class="line">                , userQuery.getMinBalance(), userQuery.getMaxBalance());</span><br><span class="line">        <span class="comment">//2.实体类型转换</span></span><br><span class="line">        List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(userList, UserVO.class);</span><br><span class="line">        JsonResult&lt;List&lt;UserVO&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOS, <span class="number">200</span>, <span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="案例三-IService的Lambda更新"><a href="#案例三-IService的Lambda更新" class="headerlink" title="案例三:IService的Lambda更新"></a>案例三:IService的Lambda更新</h4><p>需求：改造根据id修改用户余额的接口，要求如下</p><p>①完成对用户状态校验</p><p>②完成对用户余额校验</p><p>③如果扣减后余额为0，则将用户status修改为冻结状态（2）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reductionBalanceById</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询用户余额</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getBalance()&lt;money)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.计算余额,余额为零则需要将用户账户冻结</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remainBalance</span> <span class="operator">=</span> user.getBalance()-money;</span><br><span class="line">        lambdaUpdate().set(User::getBalance,remainBalance)</span><br><span class="line">                .set(remainBalance==<span class="number">0</span>,User::getStatus,<span class="number">2</span>)</span><br><span class="line">                .eq(User::getId,id)</span><br><span class="line">                .eq(User::getBalance,user.getBalance()) <span class="comment">//添加乐观锁，提高并发安全性</span></span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title=" "></a> </h4><h4 id="案例四：Iservice批量新增"><a href="#案例四：Iservice批量新增" class="headerlink" title="案例四：Iservice批量新增"></a>案例四：Iservice批量新增</h4><p>需求：批量插入10万条用户数据，并作出对比：</p><ul><li><p>普通for循环插入</p></li><li><p>IService的批量插入</p></li><li><p>开启<a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-performance-extensions.html">rewriteBatchedStatements</a><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-performance-extensions.html">=true</a>参数</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试循环插入所需时间</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveByFor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">        userService.save(buildUser(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.printf(<span class="string">&quot;耗费时间:&quot;</span>+(end-start)+<span class="string">&quot; ms&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试批次插入所需时间</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveByBatch</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">        list.add(buildUser(i));</span><br><span class="line">        <span class="comment">//每1000条批次插入一次</span></span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">1000</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            userService.saveBatch(list);</span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.printf(<span class="string">&quot;耗费时间:&quot;</span>+(end-start)+<span class="string">&quot; ms&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环插入所需时间</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184037735.png" alt="image-20231022184037735"></p><p>批次插入所需时间</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184051514.png" alt="image-20231022184051514"></p><p>开启<code>rewriteBatchedStatements</code>参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: jdbc:mysql://localhost:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184434795.png" alt="image-20231022184434795"></p><p><strong>结论</strong></p><p>批处理方案：</p><ul><li><p>普通for循环逐条插入速度极差，不推荐</p></li><li><p>MP的批量新增，基于预编译的批处理，性能不错</p></li><li><p>配置jdbc参数，开rewriteBatchedStatements，性能最好</p></li></ul><h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><p><code>Mybatis-plus</code>使用流程</p><ul><li>定义数据库对应的实体类</li><li>定义<code>mapper</code>接口并继承自<code>BaseMapper</code></li><li>定义<code>xxService</code>接口并继承自<code>IService</code></li><li>定义<code>xxService</code>实现类，并继承自<code>ServiceImpl</code></li></ul><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184909209.png" alt="image-20231022184909209" style="zoom:80%;"></p><p><code>Mybatis-Plus</code>提供了这些代码的自动生成，<a href="https://baomidou.com/pages/ba5b24/#%E5%8A%9F%E8%83%BD">官方文档</a></p><p>利用<code>MybatisPlus</code>插件来生成对应代码</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185434944.png" alt="image-20231022185434944" style="zoom:80%;"></p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185933343.png" alt="image-20231022185933343"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185940369.png" alt="image-20231022185940369"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185915708.png" alt="image-20231022185915708"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185949249.png" alt="image-20231022185949249"></p><h3 id="静态工具"><a href="#静态工具" class="headerlink" title="静态工具"></a>静态工具</h3><p>静态工具中的方法与<code>IService</code>中的方法比较相似，其由于是静态的，不用创建出对象即可调用；但是需要传入数据库对应实体类的<code>class</code>(泛型)</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022202619592.png" alt="image-20231022202619592"></p><h4 id="案例：静态工具查询"><a href="#案例：静态工具查询" class="headerlink" title="案例：静态工具查询"></a>案例：静态工具查询</h4><p>需求：</p><p>①改造根据id查询用户的接口，查询用户的同时，查询出用户对应的所有地址</p><p>②改造根据id批量查询用户的接口，查询用户的同时，查询出用户对应的所有地址</p><p>③实现根据用户id查询收货地址功能，需要验证用户状态，冻结用户抛出异常（练习）</p><p>上次需求的实现如果按照常规实现方式时，就会出现<strong>循环依赖</strong>，<code>UserService</code>中会注入<code>AddressService</code>，<code>AddressService</code>中也会注入<code>UserService</code></p><p>此时如借助静态工具，则无需相互注入，解决循环依赖问题</p><p><strong>创建地址数据表VO类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;收货地址VO&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressVO</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;省&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;市&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;县/区&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;联系人&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contact;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否是默认 1默认 0否&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;备注&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String notes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改写UserVO,新增地址属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户VO实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;使用状态（1正常 2冻结）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;收货地址列表&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AddressVO&gt; addresss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="根据Id查询单个用户信息及其收货地址"><a href="#根据Id查询单个用户信息及其收货地址" class="headerlink" title="根据Id查询单个用户信息及其收货地址"></a>根据Id查询单个用户信息及其收货地址</h5><p><strong>改写UserController</strong>中的<code>queryUserById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询用户接口&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="comment">//        //1.查询用户</span></span><br><span class="line">    <span class="comment">//        User user = userService.getById(id);</span></span><br><span class="line">    <span class="comment">//        //对象类型转换</span></span><br><span class="line">    <span class="comment">//        UserVO userVO = BeanUtil.copyProperties(user,UserVO.class);</span></span><br><span class="line">    <span class="comment">//        JsonResult&lt;UserVO&gt; result = new JsonResult&lt;UserVO&gt;(userVO,200,&quot;查询成功&quot;);</span></span><br><span class="line">    <span class="comment">//        return result;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> userService.queryUserAndAddressById(id);</span><br><span class="line">    <span class="keyword">if</span>(userVO==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="literal">null</span>,<span class="number">600</span>,<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVO,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增IUserService</strong>中的<code>queryUserAndAddressById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserVO <span class="title function_">queryUserAndAddressById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p><strong>新增UserServiceImpl</strong>中的<code>queryUserAndAddressById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserVO <span class="title function_">queryUserAndAddressById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//用户不存在或者用户账户被冻结</span></span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getStatus()==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.用户对象转换</span></span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line">    List&lt;Address&gt; addressList = Db.lambdaQuery(Address.class)</span><br><span class="line">        .eq(Address::getUserId, id)</span><br><span class="line">        .list();</span><br><span class="line">    <span class="comment">//3.地址对象转换</span></span><br><span class="line">    <span class="keyword">if</span>(CollUtil.isNotEmpty(addressList))&#123;</span><br><span class="line">        List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addressList, AddressVO.class);</span><br><span class="line">        userVO.setAddresses(addressVOS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据id列表查询多个用户信息及其收货地址"><a href="#根据id列表查询多个用户信息及其收货地址" class="headerlink" title="根据id列表查询多个用户信息及其收货地址"></a>根据id列表查询多个用户信息及其收货地址</h5><p><strong>改写UserController</strong>中的<code>queryUserByIds</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id批量查询</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id批量查询接口&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;UserVO&gt;&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id集合&quot;)</span> <span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    <span class="comment">//        //1.查询用户集合</span></span><br><span class="line">    <span class="comment">//        List&lt;User&gt; userList = userService.listByIds(ids);</span></span><br><span class="line">    <span class="comment">//        //2.类型转换</span></span><br><span class="line">    <span class="comment">//        List&lt;UserVO&gt; userVOList = BeanUtil.copyToList(userList, UserVO.class);</span></span><br><span class="line">    <span class="comment">//        JsonResult&lt;List&lt;UserVO&gt;&gt; result = new JsonResult&lt;&gt;(userVOList,200,&quot;查询成功&quot;);</span></span><br><span class="line">    <span class="comment">//        return result;</span></span><br><span class="line"></span><br><span class="line">    List&lt;UserVO&gt; userVOS = userService.listUserAndAddressByIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(userVOS==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="literal">null</span>,<span class="number">600</span>,<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOS,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增IUserService</strong>中的<code>queryUserAndAddressByIds</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserVO&gt; <span class="title function_">listUserAndAddressByIds</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p><strong>新增UserServiceImpl</strong>中的<code>queryUserAndAddressByIds</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">listUserAndAddressByIds</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">//1.根据id查询用户</span></span><br><span class="line">    List&lt;User&gt; userList = listByIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(CollUtil.isEmpty(userList))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户id查出所有地址</span></span><br><span class="line">    <span class="comment">//一次性查出所有id比for循环多次查询效率要搞</span></span><br><span class="line">    <span class="comment">//时间主要在于数据库连接通信上</span></span><br><span class="line">    List&lt;Address&gt; addressList = Db.lambdaQuery(Address.class)</span><br><span class="line">        .in(Address::getUserId, ids)</span><br><span class="line">        .list();</span><br><span class="line"></span><br><span class="line">    List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(userList, UserVO.class);</span><br><span class="line">    <span class="keyword">if</span>(CollUtil.isNotEmpty(addressList))&#123;</span><br><span class="line">        List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addressList, AddressVO.class);</span><br><span class="line">        <span class="comment">//按照用户id进行分组</span></span><br><span class="line">        Map&lt;Long, List&lt;AddressVO&gt;&gt; map = addressVOS.stream().collect(Collectors.groupingBy(AddressVO::getUserId));</span><br><span class="line">        <span class="comment">//将用户与其对应地址对应起来</span></span><br><span class="line">        <span class="keyword">for</span> (UserVO userVO : userVOS) &#123;</span><br><span class="line">            userVO.setAddresses(map.get(userVO.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userVOS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//        //用户类型转换</span></span><br><span class="line">    <span class="comment">//        List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(userList, UserVO.class);</span></span><br><span class="line">    <span class="comment">//        //2.查询对应收货地址</span></span><br><span class="line">    <span class="comment">//        for (UserVO userVO : userVOS) &#123;</span></span><br><span class="line">    <span class="comment">//            List&lt;Address&gt; addressList = Db.lambdaQuery(Address.class)</span></span><br><span class="line">    <span class="comment">//                    .eq(Address::getUserId, userVO.getId())</span></span><br><span class="line">    <span class="comment">//                    .list();</span></span><br><span class="line">    <span class="comment">//            //转换地址类型</span></span><br><span class="line">    <span class="comment">//            if(CollUtil.isNotEmpty(addressList))&#123;</span></span><br><span class="line">    <span class="comment">//                List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addressList, AddressVO.class);</span></span><br><span class="line">    <span class="comment">//                userVO.setAddresses(addressVOS);</span></span><br><span class="line">    <span class="comment">//            &#125;</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//        return userVOS;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p><strong>逻辑删除</strong>就是基于代码逻辑模拟删除效果，但并不会真正删除数据。思路如下：</p><ul><li><p>在表中添加一个字段标记数据是否被删除</p></li><li><p>当删除数据时把标记置为1</p></li><li><p>查询时只查询标记为0的数据</p></li></ul><p>背景:淘宝中的购物订单模块，用户点击订单删除按钮，本地会消失，但是实际上数据库中该数据并未被删除，应为对于商家而言，订单数据比较重要；此时采用的就是<strong>逻辑删除</strong>逻辑，用户查询时不会查询该数据，但该数据在数据库中仍然存在</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022213309968.png" alt="image-20231022213309968"></p><p><strong>MybatisPlus</strong>提供了逻辑删除功能，无需改变方法调用的方式，而是在底层帮我们自动修改CRUD的语句。我们要做的就是在application.yaml文件中配置逻辑删除的字段名称和值即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">global-config:</span><br><span class="line">db-config:</span><br><span class="line">logic-delete-field: flag # 全局逻辑删除的实体字段名，字段类型可以是boolean、integer</span><br><span class="line">logic-delete-value: 1 # 逻辑已删除值(默认为 1)</span><br><span class="line">logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>逻辑删除本身也有自己的问题，比如：</p><ul><li><p>会导致数据库表垃圾数据越来越多，影响查询效率</p></li><li><p>SQL中全都需要对逻辑删除字段做判断，影响查询效率</p></li></ul><p>因此，我不太推荐采用逻辑删除功能，如果数据不能删除，可以采用把数据迁移到其它表的办法。</p><h3 id="枚举处理器"><a href="#枚举处理器" class="headerlink" title="枚举处理器"></a>枚举处理器</h3><p><code>Java</code>中的枚举类型与<code>数据库整数</code>类型之间的转换问题</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022215018724.png" alt="image-20231022215018724" style="zoom:80%;"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022214852226.png" alt="image-20231022214852226" style="zoom:80%;"></p><h5 id="实现PO类中的枚举变量与数据库字段的转换"><a href="#实现PO类中的枚举变量与数据库字段的转换" class="headerlink" title="实现PO类中的枚举变量与数据库字段的转换"></a>实现<code>PO</code>类中的枚举变量与数据库字段的转换</h5><p>①给枚举中的与数据库对应value值添加@EnumValue注解</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022215238486.png" alt="image-20231022215238486"></p><p>②在配置文件中配置统一的枚举处理器，实现类型转换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">configuration:</span><br><span class="line">default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span><br></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p><strong>定义Status字段对应的枚举类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    Normal(<span class="number">1</span>,<span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>,<span class="string">&quot;冻结&quot;</span>);</span><br><span class="line">    <span class="comment">//通过注解与数据库字段关联起来</span></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件中定义Mybatis枚举处理器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span><br></pre></td></tr></table></figure><p><strong>将UserPO和UserVO类中的Status属性改成枚举类型</strong></p><p><strong>枚举类型属性返回值的更改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    Normal(<span class="number">1</span>,<span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>,<span class="string">&quot;冻结&quot;</span>);</span><br><span class="line">    <span class="comment">//通过注解与数据库字段关联起来</span></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="comment">//通过注解@JsonValue将该属性作为枚举的返回值</span></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022220514144.png" alt="image-20231022220514144"></p><h3 id="JSON处理器"><a href="#JSON处理器" class="headerlink" title="JSON处理器"></a>JSON处理器</h3><p><code>Java</code>数据类型与<code>数据库中Json</code>数据类型的转换</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022221135194.png" alt="image-20231022221135194" style="zoom:80%;"></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022221311719.png" alt="image-20231022221311719"></p><p><strong>Json处理器使用流程</strong></p><ul><li>在VO/PO实体类的对应属性上添加<code>typeHandler</code>属性，让对应处理器生效</li><li>在实体类的<code>@TableName</code>注解中开启<code>autoResultMap</code>，对象嵌套过程中的自动映射</li></ul><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p><strong>创建数据库Json字段对应的实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改实体类User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;,autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;`username`&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 详细信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JacksonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> UserInfo info;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用状态（1正常 2冻结）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> UserStatus status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更改VO实体类</strong></p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022222341097.png" alt="image-20231022222341097" style="zoom:80%;"></p><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><p>MyBatisPlus基于MyBatis的Interceptor实现了一个基础拦截器，并在内部保存了MyBatisPlus的内置拦截器的集合</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022222800205.png" alt="image-20231022222800205"></p><p>MyBatisPlus提供的内置拦截器有下面这些</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022222545775.png" alt="image-20231022222545775"></p><p>其中最常用的是<strong>分页插件</strong></p><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><h4 id="分页插件的配置"><a href="#分页插件的配置" class="headerlink" title="分页插件的配置"></a>分页插件的配置</h4><p>首先，要在配置类中注册MyBatisPlus的核心插件，同时添加分页插件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.初始化核心插件</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加分页插件</span></span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">pageInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>();</span><br><span class="line">        pageInterceptor.setMaxLimit(<span class="number">1000L</span>); <span class="comment">//设置分页上限</span></span><br><span class="line">        <span class="comment">//加入核心插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(pageInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页API的使用"><a href="#分页API的使用" class="headerlink" title="分页API的使用"></a>分页API的使用</h4><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022223335020.png" alt="image-20231022223335020"></p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试分页插件的使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.查询</span></span><br><span class="line">    <span class="type">int</span> pageNo=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> pageSize=<span class="number">5</span>;</span><br><span class="line">    <span class="comment">//1.1分页参数</span></span><br><span class="line">    Page&lt;User&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line">    <span class="comment">//1.2分页排序参数,通过OrderItem来指定按照某个字段升序(true)或者降序(false)</span></span><br><span class="line">    page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;balance&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">    <span class="comment">//1.3分页查询</span></span><br><span class="line">    Page&lt;User&gt; p = userService.page(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.数据总数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total=&quot;</span>+p.getTotal());</span><br><span class="line">    <span class="comment">//3.总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages=&quot;</span>+p.getPages());</span><br><span class="line">    <span class="comment">//4.分页数据</span></span><br><span class="line">    List&lt;User&gt; records = page.getRecords();</span><br><span class="line">    records.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用分页实体"><a href="#通用分页实体" class="headerlink" title="通用分页实体"></a>通用分页实体</h3><h4 id="实例：简单分页查询"><a href="#实例：简单分页查询" class="headerlink" title="实例：简单分页查询"></a>实例：简单分页查询</h4><p>需求：遵循下面的接口规范，编写一个UserController接口，实现User的分页查询</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231023101326507.png" alt="image-20231023101326507" style="zoom:80%;"></p><p>返回值类</p><p><img src="/2023/10/23/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231023101526797.png" alt="image-20231023101526797"></p><p><strong>创建通用的查询参数实体</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;查询通用实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页大小&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否升序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isAsc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用户查询继承与查询实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">PageQuery</span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建通用的查询结果实体</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;通用查询结果实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;数据总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页面总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;当前页面数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service层编写对应方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> QueryDTO&lt;UserVO&gt; <span class="title function_">queryUsersByPage</span><span class="params">(UserQuery query)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="comment">//1.1构造分页查询条件</span></span><br><span class="line">    Page&lt;User&gt; page = Page.of(query.getPageNo(), query.getPageSize());</span><br><span class="line">    <span class="keyword">if</span>(StrUtil.isNotEmpty(query.getSortBy()))&#123;</span><br><span class="line">        page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(query.getSortBy(),query.isAsc()));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;update_time&quot;</span>,<span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.2构造条件查询</span></span><br><span class="line">    Page&lt;User&gt; pages = lambdaQuery().like(name != <span class="literal">null</span>, User::getUsername, name)</span><br><span class="line">        .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">        .page(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.构造结构实体实例</span></span><br><span class="line">    QueryDTO&lt;UserVO&gt; userVOPageDTO = <span class="keyword">new</span> <span class="title class_">QueryDTO</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(pages.getRecords(), UserVO.class);</span><br><span class="line">    userVOPageDTO.setTotal(pages.getTotal());</span><br><span class="line">    userVOPageDTO.setPages(pages.getPages());</span><br><span class="line">    userVOPageDTO.setData(userVOS);</span><br><span class="line">    <span class="keyword">return</span> userVOPageDTO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写对应的Controller层方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据条件进行分页查询</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据条件分页查询&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;QueryDTO&lt;UserVO&gt;&gt; <span class="title function_">queryUsersByPage</span><span class="params">(UserQuery userQuery)</span>&#123;</span><br><span class="line">    QueryDTO&lt;UserVO&gt; userVOPageDTO = userService.queryUsersByPage(userQuery);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOPageDTO,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化：函数封装"><a href="#优化：函数封装" class="headerlink" title="优化：函数封装"></a>优化：函数封装</h4><p><code>service</code>层中<code>page</code>分页条件的构建和根据查询结果构造分页查询结果实体的代码与业务无关，可以单独抽取出来进行封装</p><ul><li>在PageQuery中定义方法，将PageQuery对象转为MyBatisPlus中的Page对象</li><li>在PageDTO中定义方法，将MyBatisPlus中的Page结果转为PageDTO结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;查询通用实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页大小&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否升序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isAsc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  &lt;PO&gt; Page&lt;PO&gt; <span class="title function_">toMybatisPage</span><span class="params">()</span>&#123;</span><br><span class="line">        Page&lt;PO&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotEmpty(sortBy))&#123;</span><br><span class="line">            page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(sortBy,isAsc));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;update_time&quot;</span>,<span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;通用查询结果实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;数据总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页面总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;当前页面数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;PO,VO&gt; QueryDTO&lt;VO&gt; <span class="title function_">toPageDTO</span><span class="params">(Page&lt;PO&gt; pages,Class&lt;VO&gt; clazz)</span>&#123;</span><br><span class="line">        QueryDTO&lt;VO&gt; userVOPageDTO = <span class="keyword">new</span> <span class="title class_">QueryDTO</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;VO&gt; userVOS = BeanUtil.copyToList(pages.getRecords(),clazz);</span><br><span class="line">        userVOPageDTO.setTotal(pages.getTotal());</span><br><span class="line">        userVOPageDTO.setPages(pages.getPages());</span><br><span class="line">        userVOPageDTO.setData(userVOS);</span><br><span class="line">        <span class="keyword">return</span> userVOPageDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service层方法改写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> QueryDTO&lt;UserVO&gt; <span class="title function_">queryUsersByPage</span><span class="params">(UserQuery query)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="comment">//1.1构造分页查询条件</span></span><br><span class="line">    Page&lt;User&gt; page = query.toMybatisPage();</span><br><span class="line">    <span class="comment">//1.2构造条件查询</span></span><br><span class="line">    Page&lt;User&gt; pages = lambdaQuery().like(name != <span class="literal">null</span>, User::getUsername, name)</span><br><span class="line">        .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">        .page(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.构造结构实体实例</span></span><br><span class="line">    <span class="keyword">return</span> QueryDTO.toPageDTO(pages, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis-Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七章：本地方法栈</title>
      <link href="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/"/>
      <url>/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><h2 id="本地方法栈概述"><a href="#本地方法栈概述" class="headerlink" title="本地方法栈概述"></a>本地方法栈概述</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/image-20230831224231912.png" alt="image-20230831224231912"></p><p>  <img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/image-20230831224433183.png" alt="image-20230831224433183"></p><p> <img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/image-20230831224544933.png" alt="image-20230831224544933"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六章：本地方法接口</title>
      <link href="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/"/>
      <url>/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="本地方法接口"><a href="#本地方法接口" class="headerlink" title="本地方法接口"></a>本地方法接口</h1><h2 id="什么是本地方法"><a href="#什么是本地方法" class="headerlink" title="什么是本地方法"></a>什么是本地方法</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831222814621.png" alt="image-20230831222814621"></p><h2 id="为什么需要本地方法"><a href="#为什么需要本地方法" class="headerlink" title="为什么需要本地方法"></a>为什么需要本地方法</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223159429.png" alt="image-20230831223159429"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223514806.png" alt="image-20230831223514806"></p><h2 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223906690.png" alt="image-20230831223906690"></p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223948957.png" alt="image-20230831223948957"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八章：堆</title>
      <link href="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/"/>
      <url>/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="堆的核心概述"><a href="#堆的核心概述" class="headerlink" title="堆的核心概述"></a>堆的核心概述</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831230658229.png" alt="image-20230831230658229"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831231038739.png" alt="image-20230831231038739"></p><p>  每个Java程序代表一个进程，每个进程会创建一个单独的JVM示例，所以每个线程会有一个专门的堆区，而一个进程中的所有线程则共享一个堆区</p><p>查看堆空间的工具：<code>JDK</code>安装目录的<code>bin</code>目录下的<code>jvisualvm.exe</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831233155362.png" alt="image-20230831233155362"></p><p><strong>软件示例</strong></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831233310566.png" alt="image-20230831233310566"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831233613831.png" alt="image-20230831233613831"></p><p> 栈、堆、方法区之间的关系示例</p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831234101927.png" alt="image-20230831234101927"></p><h2 id="堆的内存细分"><a href="#堆的内存细分" class="headerlink" title="堆的内存细分"></a>堆的内存细分</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831234709080.png" alt="image-20230831234709080"></p><p> <strong>JDK7版本堆内存结构</strong></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230903232946649.png" alt="image-20230903232946649" style="zoom:67%;"></p><p> <strong>JDK8堆内存结构</strong></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230903233627749.png" alt="image-20230903233627749" style="zoom:67%;"></p><h2 id="设置堆内存大小和OOM"><a href="#设置堆内存大小和OOM" class="headerlink" title="设置堆内存大小和OOM"></a>设置堆内存大小和OOM</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230903234114120.png" alt="image-20230903234114120"></p><h3 id="设置和查看堆空间大小"><a href="#设置和查看堆空间大小" class="headerlink" title="设置和查看堆空间大小"></a>设置和查看堆空间大小</h3><p><strong>设置堆空间大小参数</strong></p><ul><li><code>-Xms</code> 用来设置堆空间(年轻代+老年代)的初始内存大小<ul><li><code>-X</code>为<code>jvm</code>运行参数</li><li><code>ms</code>:<code>memory start</code></li></ul></li><li><code>-Xmx</code> 用来设置堆空间(年轻代+老年代)的最大内存大小</li></ul><p><strong>默认堆空间大小</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.jvm.ch8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSizeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//返回Java虚拟机堆内存总量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">initialMemory</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory() /<span class="number">1024</span> /<span class="number">1024</span>;</span><br><span class="line">        <span class="comment">//返回Java虚拟机试图使用的最大堆内存总量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">maxMemory</span> <span class="operator">=</span> Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-Xms: &quot;</span>+initialMemory+<span class="string">&quot;M&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-Xmx: &quot;</span>+maxMemory+<span class="string">&quot;M&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;系统内存大小:&quot;</span>+initialMemory*<span class="number">64</span>/<span class="number">1024</span>+<span class="string">&quot;G&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;系统内存大小:&quot;</span>+maxMemory*<span class="number">4</span>/<span class="number">1024</span>+<span class="string">&quot;G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>设置查看Java进程内存空间</strong></p><p>设置java程序运行内存空间</p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904000217587.png" alt="image-20230904000217587"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001306935.png" alt="image-20230904001306935"></p><p>查看当前进程的堆空间大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回Java虚拟机堆内存总量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">initialMemory</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory() /<span class="number">1024</span> /<span class="number">1024</span>;</span><br><span class="line"><span class="comment">//返回Java虚拟机试图使用的最大堆内存总量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">maxMemory</span> <span class="operator">=</span> Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-Xms: &quot;</span>+initialMemory+<span class="string">&quot;M&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;-Xmx: &quot;</span>+maxMemory+<span class="string">&quot;M&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001325508.png" alt="image-20230904001325508"></p><p>Q:为什么手动设置空间大小为100M，而打印却只有96M</p><p>查看当前进程堆空间的构成方式一</p><ul><li><p>获取当前进程的PID：<code>jps</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001350362.png" alt="image-20230904001350362"></p></li><li><p>根据进程PID查看当前进程堆空间的构成</p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001404255.png" alt="image-20230904001404255"></p></li></ul><p>原因：新生代中的S0和S1区的空间大小只会算一个</p><p>查看当前进程堆空间的构成方式二</p><p>添加<code>jvm</code>运行参数：<code>-XX:+PrintGCDetails</code></p><p>会在控制台打印如下信息</p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001810246.png" alt="image-20230904001810246"></p><h3 id="OutOfMemory-OOM-举例"><a href="#OutOfMemory-OOM-举例" class="headerlink" title="OutOfMemory(OOM)举例"></a>OutOfMemory(OOM)举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.jvm.ch8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapOOM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Object&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            lists.add(<span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1024</span>*<span class="number">1024</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    Animal(<span class="type">int</span> size)&#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904002554837.png" alt="image-20230904002554837"></p><h2 id="年轻代与老年代"><a href="#年轻代与老年代" class="headerlink" title="年轻代与老年代"></a>年轻代与老年代</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230909230316493.png" alt="image-20230909230316493"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021100233287.png" alt="image-20231021100233287"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021101645835.png" alt="image-20231021101645835"></p><p>默认虽然是<code>8:1:1</code>,但是实际情况存在偏差，要想真正的成为<code>8:1:1</code>，则必须要手动显示这只<code>XX:SurvivorRatio=8</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021102417326.png" alt="image-20231021102417326"></p><p>随着对象存活周期的增长，会从一个区转移到另一个区</p><p><strong>实例</strong>  设置<code>NewRatio-4</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021100715037.png" alt="image-20231021100715037"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021100846994.png" alt="image-20231021100846994"></p><p>一般不会更改此参数的设置，如果程序中明确生命周期长的对象比较多，可以将老年区的空间调大一些</p><p><strong>实例</strong>  如何查看<code>jvm</code>的一些参数值</p><p><code>jinfo -flag 参数值 pid</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021101449223.png" alt="image-20231021101449223"></p><h2 id="对象分配过程图解"><a href="#对象分配过程图解" class="headerlink" title="对象分配过程图解"></a>对象分配过程图解</h2><h3 id="对象分配过程概述"><a href="#对象分配过程概述" class="headerlink" title="对象分配过程概述"></a>对象分配过程概述</h3><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021102852030.png" alt="image-20231021102852030"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021104324473.png" alt="image-20231021104324473"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021104458947.png" alt="image-20231021104458947"></p><p>一般对象创建的过程：</p><ol><li>新创建的对象会存放在<code>Eden区</code>，<code>Eden</code>满了之后会触发<code>Young/Minor GC</code>，没有引用对象会被销毁，存活对象会存放在<code>to区</code>，<code>Survivor 0</code>和<code>Survivor 1</code>哪一个此时刻为空，则为<code>to区</code>，同时每个对象会添加一个属性<code>age</code></li><li>下一轮次，<code>eden</code>触发<code>GC</code>之后，执行1中同样操作，于此同时，还会对<code>from</code>区的对象进行<code>GC</code>，<code>from区</code>存活的对象同样也要移动到<code>to区</code>，在整个过程中如果某个对象的<code>age</code>达到了阈值，则会被移入老年区</li><li><code>survivor 0</code>和<code>survivor 1</code>哪一个为空则哪一个为<code>to区</code>，另一个则为<code>from</code>区</li></ol><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021105502296.png" alt="image-20231021105502296"></p><h3 id="对象分配的特殊情况"><a href="#对象分配的特殊情况" class="headerlink" title="对象分配的特殊情况"></a>对象分配的特殊情况</h3><h4 id="对象分配整体流程"><a href="#对象分配整体流程" class="headerlink" title="对象分配整体流程"></a>对象分配整体流程</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021105741662.png" alt="image-20231021105741662"></p><h4 id="常用调优工具"><a href="#常用调优工具" class="headerlink" title="常用调优工具"></a>常用调优工具</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021111912975.png" alt="image-20231021111912975"></p><h2 id="Minor-GC、Major-GC与Full-GC"><a href="#Minor-GC、Major-GC与Full-GC" class="headerlink" title="Minor GC、Major GC与Full GC"></a>Minor GC、Major GC与Full GC</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021142808781.png" alt="image-20231021142808781"></p><h3 id="最简单的分代式GC策略的触发条件"><a href="#最简单的分代式GC策略的触发条件" class="headerlink" title="最简单的分代式GC策略的触发条件"></a>最简单的分代式GC策略的触发条件</h3><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021162334160.png" alt="image-20231021162334160"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021162803064.png" alt="image-20231021162803064"></p><p>  <img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021162843135.png" alt="image-20231021162843135"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021163048893.png" alt="image-20231021163048893"></p><h2 id="堆空间分代思想"><a href="#堆空间分代思想" class="headerlink" title="堆空间分代思想"></a>堆空间分代思想</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021163924381.png" alt="image-20231021163924381"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021164034381.png" alt="image-20231021164034381"></p><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021164659893.png" alt="image-20231021164659893"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021164818236.png" alt="image-20231021164818236"></p><h2 id="为对象分配内存：TLAB"><a href="#为对象分配内存：TLAB" class="headerlink" title="为对象分配内存：TLAB"></a>为对象分配内存：TLAB</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021170441095.png" alt="image-20231021170441095"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021170817967.png" alt="image-20231021170817967"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021171010101.png" alt="image-20231021171010101"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021171322334.png" alt="image-20231021171322334"></p><h2 id="总结：堆空间的参数设置"><a href="#总结：堆空间的参数设置" class="headerlink" title="总结：堆空间的参数设置"></a>总结：堆空间的参数设置</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021171705040.png" alt="image-20231021171705040"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021172740415.png" alt="image-20231021172740415"></p><p> <img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021172834062.png" alt="image-20231021172834062"></p><h2 id="堆是分配对象存储的唯一选择吗？"><a href="#堆是分配对象存储的唯一选择吗？" class="headerlink" title="堆是分配对象存储的唯一选择吗？"></a>堆是分配对象存储的唯一选择吗？</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021173409671.png" alt="image-20231021173409671"></p><h3 id="逃逸分析：概述"><a href="#逃逸分析：概述" class="headerlink" title="逃逸分析：概述"></a>逃逸分析：概述</h3><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021225842468.png" alt="image-20231021225842468"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230005247.png" alt="image-20231021230005247"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230157826.png" alt="image-20231021230157826"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230513461.png" alt="image-20231021230513461"></p><p>如何快速判断是否发生了逃逸分析：看方法内<code>new</code>的对象实体是否有可能在方法外被调用</p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230915451.png" alt="image-20231021230915451"></p><p><strong>结论：</strong>方法中使用局部变量的，就不要在方法外定义</p><h3 id="逃逸分析：代码优化"><a href="#逃逸分析：代码优化" class="headerlink" title="逃逸分析：代码优化"></a>逃逸分析：代码优化</h3><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021231136778.png" alt="image-20231021231136778"></p><h4 id="代码优化之栈上分配"><a href="#代码优化之栈上分配" class="headerlink" title="代码优化之栈上分配"></a>代码优化之栈上分配</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021231339250.png" alt="image-20231021231339250"></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000000</span>;i++)&#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间:&quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//满足逃逸分析，new出来的实例不会在方法外使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不开启逃逸分析:</strong></p><p><code>-Xms1G -Xmx1G -XX:-doEscapeAnalysis -XX:+PrintGCDetails</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232630791.png" alt="image-20231021232630791"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232715545.png" alt="image-20231021232715545"></p><p><strong>开启逃逸分析</strong></p><p><code>-Xms1G -Xmx1G -XX:+doEscapeAnalysis -XX:+PrintGCDetails</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232804323.png" alt="image-20231021232804323"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232833768.png" alt="image-20231021232833768"></p><p><strong>结论</strong></p><ul><li>开启逃逸分析，栈上分配，程序运行会更高效，时间更少</li><li>未开启逃逸分析。内存中<code>User</code>实例个数是<code>10000000</code>，开启逃逸分析后，内存中<code>User</code>实例较少，因为进行了栈上分配</li><li>如果堆空间不足，未开启逃逸分析会进行<code>GC</code>，开启逃逸分析则无<code>GC</code>发生</li></ul><h4 id="代码优化之同步省略"><a href="#代码优化之同步省略" class="headerlink" title="代码优化之同步省略"></a>代码优化之同步省略</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233306833.png" alt="image-20231021233306833"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233420048.png" alt="image-20231021233420048"></p><h4 id="代码优化之标量替换"><a href="#代码优化之标量替换" class="headerlink" title="代码优化之标量替换"></a>代码优化之标量替换</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233745285.png" alt="image-20231021233745285"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233936858.png" alt="image-20231021233936858"></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234020569.png" alt="image-20231021234020569"></p><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000000</span>;i++)&#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间:&quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//满足逃逸分析，new出来的实例不会在方法外使用,可以进行标量替换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.id=<span class="number">100</span>;</span><br><span class="line">        user.name=<span class="string">&quot;com.www.baidu.com&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不开启标量替换</strong></p><p><code>-Xms100m -Xmx100m -XX:+DoEscapeAnalysis -XX:+PrintGCDetails -XX:-EliminateAllocations</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234603826.png" alt="image-20231021234603826"></p><p><strong>开启标量替换</strong></p><p><code>-Xms100m -Xmx100m -XX:+DoEscapeAnalysis -XX:+PrintGCDetails -XX:+EliminateAllocations</code></p><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234617154.png" alt="image-20231021234617154"></p><p><strong>总结</strong></p><ul><li>开启标量替换，在堆空间操作，无需new对象，所以时间更短且无需进行垃圾回收</li></ul><h4 id="逃逸分析总结"><a href="#逃逸分析总结" class="headerlink" title="逃逸分析总结"></a>逃逸分析总结</h4><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234924370.png" alt="image-20231021234924370"></p><h2 id="堆空间总结"><a href="#堆空间总结" class="headerlink" title="堆空间总结"></a>堆空间总结</h2><p><img src="/2023/10/21/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021235150818.png" alt="image-20231021235150818"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis6.0基础</title>
      <link href="/2023/10/12/redis/redis/"/>
      <url>/2023/10/12/redis/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>本文档参考自 <a href="https://www.bilibili.com/video/BV1Rv41177Af/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">B站尚硅谷Redis课程</a></p><h2 id="NoSQL数据库简介"><a href="#NoSQL数据库简介" class="headerlink" title="NoSQL数据库简介"></a>NoSQL数据库简介</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>web1.0时代，数据访问量有限，用高性能单节点服务器就可以解决大部分问题</p><p><img src="/2023/10/12/redis/redis/image-20230906194602576.png" alt="image-20230906194602576"></p><p> web2.0时代，智能移动设备的普及，用户访问量大幅提升，产生大量用户数据，互联网平台面临巨大性能挑战</p><p><img src="/2023/10/12/redis/redis/image-20230906194753722.png" alt="image-20230906194753722"></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><h4 id="解决CPU压力"><a href="#解决CPU压力" class="headerlink" title="解决CPU压力"></a>解决CPU压力</h4><p>解决应用服务器压力，一个最直观的方法就是采用集群，多个应用服务器分摊访问量</p><p><img src="/2023/10/12/redis/redis/image-20230906195209890.png" alt="image-20230906195209890"></p><h5 id="此方案存在的问题："><a href="#此方案存在的问题：" class="headerlink" title="此方案存在的问题："></a>此方案存在的问题：</h5><p>session的问题，对于一个系统而言，用户初次访问，用户的信息会存储在session中，这样用户第二次访问就无需再次重复登陆</p><p>但是如果用集群的方式，session存在于服务器1中，但是下次访问用户可能分配到了服务器2，这样无法获取用户对应的session数据</p><h5 id="对应的解决办法"><a href="#对应的解决办法" class="headerlink" title="对应的解决办法"></a>对应的解决办法</h5><h6 id="方法一：存储到cookie中"><a href="#方法一：存储到cookie中" class="headerlink" title="方法一：存储到cookie中"></a>方法一：存储到cookie中</h6><p>session存储在服务器端、cookie是存储到客户端的，数据存储在cookie中会存在一定的安全性问题</p><h6 id="方法二：session复制"><a href="#方法二：session复制" class="headerlink" title="方法二：session复制"></a>方法二：session复制</h6><p>当前服务器session发生变化，就会复制多份传递给各个其他服务器</p><p>缺点：session数据冗余，节点越多浪费越大</p><h6 id="方案三：存在文件服务器或者数据库里"><a href="#方案三：存在文件服务器或者数据库里" class="headerlink" title="方案三：存在文件服务器或者数据库里"></a>方案三：存在文件服务器或者数据库里</h6><p>缺点：读取存储时大量的IO效率问题</p><h6 id="方案四：缓存数据库-NoSQL数据库"><a href="#方案四：缓存数据库-NoSQL数据库" class="headerlink" title="方案四：缓存数据库(NoSQL数据库)"></a>方案四：缓存数据库(NoSQL数据库)</h6><p>完全在内存中，速度快，数据结构简单</p><h4 id="解决IO的压力"><a href="#解决IO的压力" class="headerlink" title="解决IO的压力"></a>解决IO的压力</h4><p><img src="/2023/10/12/redis/redis/image-20230906211634240.png" alt="image-20230906211634240"></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>NoSQL(Not Only SQL)</code>，不仅仅是SQL，泛指<strong>非关系型数据库</strong>，其不依赖于业务逻辑方式存储，而是简单的以<code>key-value</code>的模式存储</p><h4 id="NoSQL应用场景"><a href="#NoSQL应用场景" class="headerlink" title="NoSQL应用场景"></a>NoSQL应用场景</h4><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高可扩展性的</li></ul><h4 id="NoSQL不适用场景"><a href="#NoSQL不适用场景" class="headerlink" title="NoSQL不适用场景"></a>NoSQL不适用场景</h4><ul><li>需要事务支持</li><li>基于sql的结构化查询存储，处理复杂的关系,需要即席查询</li></ul><h3 id="常见的NoSQL数据库"><a href="#常见的NoSQL数据库" class="headerlink" title="常见的NoSQL数据库"></a>常见的NoSQL数据库</h3><p><img src="/2023/10/12/redis/redis/image-20230906212735090.png" alt="image-20230906212735090"></p><h2 id="Redis概述"><a href="#Redis概述" class="headerlink" title="Redis概述"></a>Redis概述</h2><ul><li>Redis是一个开源的key-value存储系统</li><li>和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set —有序集合)和hash（哈希类型）</li><li>这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的</li><li>在此基础上，Redis支持各种不同方式的排序</li><li>与memcached一样，为了保证效率，数据都是缓存在内存中</li><li>区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件</li><li>并且在此基础上实现了master-slave(主从)同步</li></ul><h3 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h3><h4 id="配合关系型数据库做高速缓存"><a href="#配合关系型数据库做高速缓存" class="headerlink" title="配合关系型数据库做高速缓存"></a><strong>配合关系型数据库做高速缓存</strong></h4><ul><li>高频次，热门访问的数据，降低数据库IO</li><li>分布式架构，做session共享</li></ul><p><img src="/2023/10/12/redis/redis/image-20230906213821080.png" alt="image-20230906213821080"></p><h4 id="多样的数据结构存储持久化数据"><a href="#多样的数据结构存储持久化数据" class="headerlink" title="多样的数据结构存储持久化数据"></a><strong>多样的数据结构存储持久化数据</strong></h4><p><img src="/2023/10/12/redis/redis/image-20230906213919471.png" alt="image-20230906213919471"></p><h2 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h2><p><code>Redis</code><a href="http://redis.io">官网</a>只提供了对<code>Linux</code>环境下的支持，在<code>Windows</code>环境下需要借助<code>WSL</code></p><ul><li><p>需要安装gcc编译器</p><ul><li><code>gcc --version</code>测试系统中是否存在<code>gcc</code></li><li>不存在，执行<code>yum install gcc</code>安装最新版<code>gcc</code></li></ul></li><li><p>下载<code>redis-6.2.1.tar.gz</code>放在<code>/opt</code>目录中</p></li><li><p>解压命令<code>tar -zxvf redis-6.2.1.tar.gz</code></p></li><li><p>解压完成后进入目录：<code>cd redis-6.2.1</code></p></li><li><p>在redis-6.2.1目录下再次执行make命令（只是编译好）</p></li><li><p>执行: make install(安装)</p></li><li><p>默认会安装在<code>/usr/local/bin</code>目录下</p><p><img src="/2023/10/12/redis/redis/image-20230909211905656.png" alt="image-20230909211905656"></p></li></ul><h3 id="Redis安装目录各个文件介绍"><a href="#Redis安装目录各个文件介绍" class="headerlink" title="Redis安装目录各个文件介绍"></a>Redis安装目录各个文件介绍</h3><ul><li><code>redis-benchmark</code>：性能测试工具，可以在自己本子运行，看看自己本子性能如何</li><li><code>redis-check-aof</code>：修复有问题的AOF文件，rdb和aof后面讲</li><li><code>redis-check-rdb</code>：修复有问题的dump.rdb文件</li><li><code>redis-cli</code>：客户端，操作入口</li><li><code>redis-sentinel</code>：Redis集群使用</li><li><code>redis-server</code>：Redis服务器启动命令</li></ul><h3 id="Redis的启动"><a href="#Redis的启动" class="headerlink" title="Redis的启动"></a>Redis的启动</h3><h4 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h4><p>前台启动，命令行窗口不能关闭，否则服务器停止</p><p>终端输入:<code>redis-server</code></p><p><img src="/2023/10/12/redis/redis/image-20230909212448667.png" alt="image-20230909212448667"></p><p>默认占用端口号<code>6379</code></p><h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><ul><li><p>备份redis.conf</p><ul><li>拷贝一份<code>redis.conf</code>到其他目录，此文件存在于redis安装包解压后的文件夹<code>/opt/redis-6.2.1</code></li><li>拷贝命令<code>cp redis.conf /etc/redis.conf</code> </li></ul></li><li><p>配置文件<code>redis.conf</code>修改</p><ul><li><p>修改<code>redis.conf</code>(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动</p><p><img src="/2023/10/12/redis/redis/image-20230910092520248.png" alt="image-20230910092520248"></p></li></ul></li><li><p>Redis 启动</p><ul><li><p>切换到<code>redis</code>安装目录，<code>cd  /usr/local/bin</code></p></li><li><p><code>redis-server /etc/redis.conf</code></p><p><img src="/2023/10/12/redis/redis/image-20230910093022058.png" alt="image-20230910093022058"></p></li></ul></li><li><p>客户端访问</p><ul><li><code>redis-cli</code></li></ul></li><li><p>测试验证是否连接成功</p><p><img src="/2023/10/12/redis/redis/image-20230910093148867.png" alt="image-20230910093148867"></p></li><li><p>redis关闭</p><ol><li><p>进入终端再关闭</p><ul><li><p><code>shutdown</code></p><p><img src="/2023/10/12/redis/redis/image-20230910093524230.png" alt="image-20230910093524230"></p></li></ul></li><li><p>单实例关闭</p><ul><li><p><code>redis-cli shutdown</code></p><p><img src="/2023/10/12/redis/redis/image-20230910093734744.png" alt="image-20230910093734744"></p></li></ul></li><li><p>直接杀死对应的进程</p><ul><li><p><code>kill -9 PID</code></p><p><img src="/2023/10/12/redis/redis/image-20230910093827045.png" alt="image-20230910093827045"></p></li></ul></li></ol></li></ul><h2 id="Redis相关知识"><a href="#Redis相关知识" class="headerlink" title="Redis相关知识"></a>Redis相关知识</h2><h3 id="端口号的来源"><a href="#端口号的来源" class="headerlink" title="端口号的来源"></a>端口号的来源</h3><p>redis端口号默认为6379，人物<code>Alessia Merz</code>中的<code>Merz</code>与非智能手机上的键位对应关系</p><p><a href="https://www.zhihu.com/question/20084750">原因</a></p><p><img src="/2023/10/12/redis/redis/image-20230910095139037.png" alt="image-20230910095139037"></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>默认16个数据库，类似数组下标从0开始，初始默认使用0号库</li><li>使用命令 select  <dbid>来切换数据库。如: select 8</dbid></li><li>统一密码管理，所有库同样密码</li><li>dbsize查看当前数据库的key的数量</li><li>flushdb清空当前库</li><li>flushall通杀全部库</li></ul><p><img src="/2023/10/12/redis/redis/image-20230910095549435.png" alt="image-20230910095549435"></p><h3 id="单线程-多路IO复用技术"><a href="#单线程-多路IO复用技术" class="headerlink" title="单线程+多路IO复用技术"></a>单线程+多路IO复用技术</h3><p>Redis是单线程+多路IO复用技术</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</span><br></pre></td></tr></table></figure><h4 id="Redis与memcached的区别"><a href="#Redis与memcached的区别" class="headerlink" title="Redis与memcached的区别"></a>Redis与memcached的区别</h4><ul><li>redis支持多种类型，既可以内存使用也可以持久化存储</li><li><p>memcached支持单一数据类型，只能在内存使用</p></li><li><p>串行  vs  多线程+锁（memcached） vs  单线程+多路IO复用(Redis)</p><ul><li>redis：串行+多路IO复用</li><li>memcached: 多线程+锁</li></ul></li></ul><p>注意：IO多路复用最好能够充分理解</p><h2 id="Redis常用五大数据类型"><a href="#Redis常用五大数据类型" class="headerlink" title="Redis常用五大数据类型"></a>Redis常用五大数据类型</h2><ul><li>Redis字符串(String)</li><li>Redis列表(List)</li><li>Redis集合(Set)</li><li>Redis哈希(Hash)</li><li>Redis有序集合(Zset)</li></ul><h3 id="Redis键-Key"><a href="#Redis键-Key" class="headerlink" title="Redis键(Key)"></a>Redis键(Key)</h3><ul><li><p>set key value:向数据库中添加键值对</p></li><li><p>keys <em>查看当前库所有key  (匹配：keys </em>1)</p></li><li><p>exists key判断某个key是否存在</p></li><li><p>type key 查看你的key是什么类型</p></li><li><p>del key    删除指定的key数据</p></li><li><p>unlink key  根据value选择非阻塞删除 仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</p></li><li><p>expire key 10  10秒钟：为给定的key设置过期时间</p></li><li><p>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</p></li><li><p>select命令切换数据库</p></li><li><p>dbsize查看当前数据库的key的数量</p></li><li><p>flushdb清空当前库</p></li><li><p>flushall通杀全部库</p></li></ul><h3 id="Redis字符串-String"><a href="#Redis字符串-String" class="headerlink" title="Redis字符串(String)"></a>Redis字符串(String)</h3><ul><li>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value</li><li>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象</li><li>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>set  &lt;key&gt;&lt;value&gt;</code>添加键值对<ul><li><key> 存在则直接覆盖<value>值</value></key></li></ul></li><li><code>get  &lt;key&gt;</code>查询对应键值</li><li><code>append &lt;key&gt;&lt;value&gt;</code>将给定的<value> 追加到原值的末尾</value></li><li><code>strlen &lt;key&gt;</code>获得值的长度</li><li><code>setnx &lt;key&gt;&lt;value&gt;</code>只有在 key 不存在时  设置 key 的值</li><li><code>incr &lt;key&gt;</code>将 key 中储存的数字值增1,只能对数字值操作，如果为空，新增值为1</li><li><code>decr &lt;key&gt;</code>将 key 中储存的数字值减1,只能对数字值操作，如果为空，新增值为-1</li><li><code>incrby / decrby &lt;key&gt;&lt;步长&gt;</code>将 key 中储存的数字值增减。自定义步长</li><li><code>mset &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; .....</code>同时设置一个或多个 key-value对</li><li><code>mget &lt;key1&gt;&lt;key2&gt;&lt;key3&gt; .....</code>同时获取一个或多个 value</li><li><code>msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; .....</code>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</li><li><code>getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</code>获得值的范围，类似java中的substring，左闭右闭区间</li><li><code>setrange &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;</code>用 <value> 覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0开始</strong>)</key></value></li><li><code>setex &lt;key&gt;&lt;过期时间&gt;&lt;value&gt;</code>设置键值的同时，设置过期时间，单位秒</li><li><code>getset &lt;key&gt;&lt;value&gt;</code>以新换旧，设置了新值同时获得旧值</li></ul><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>所谓<strong>原子</strong>操作是指不会被线程调度机制打断的操作</p><p>这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）</p><ul><li>在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间。</li><li><p>在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。Redis单命令的原子性主要得益于Redis的单线程。 </p><p>redis中的<code>incr</code>操作是原子操作</p></li></ul><h4 id="String的数据结构"><a href="#String的数据结构" class="headerlink" title="String的数据结构"></a>String的数据结构</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</span><br></pre></td></tr></table></figure><p><img src="/2023/10/12/redis/redis/image-20230910112035166.png" alt="image-20230910112035166"></p><p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h3 id="Redis列表-List"><a href="#Redis列表-List" class="headerlink" title="Redis列表(List)"></a>Redis列表(List)</h3><ul><li>单键多值</li><li>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</li><li>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差</li></ul><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>lpush/rpush &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt;</code>:从左边/右边插入一个或多个值</li><li><code>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;</code>:按照索引下标获得元素(从左到右)<ul><li><code>lrange mylist 0 -1</code>  0左边第一个，-1右边第一个，（0-1表示获取所有）</li></ul></li><li><code>lpop/rpop &lt;key&gt;</code>:从左边/右边吐出一个值。值在键在，值光键亡。</li><li><code>rpoplpush &lt;key1&gt;&lt;key2&gt;</code>:列表右边吐出一个值，插到<code>&lt;key2&gt;</code>列表左边</li><li><code>lindex &lt;key&gt;&lt;index&gt;</code>按照索引下标获得元素(从左到右)</li><li><code>llen &lt;key&gt;</code>获得列表长度</li><li><code>linsert &lt;key&gt; before(after) &lt;value&gt;&lt;newvalue&gt;</code>在<code>&lt;value&gt;</code>的前面(后面)插入<code>&lt;newvalue&gt;</code></li><li><code>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</code>从左边删除n个value(从左到右)</li><li><code>lset&lt;key&gt;&lt;index&gt;&lt;value&gt;</code>将列表key下标为index的值替换成value</li></ul><h4 id="Redis列表的数据结构"><a href="#Redis列表的数据结构" class="headerlink" title="Redis列表的数据结构"></a>Redis列表的数据结构</h4><p>List的数据结构为快速链表quickList</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成quicklist，因为普通的链表需要的附加指针空间太大，会比较浪费空间，比如列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p><p><img src="/2023/10/12/redis/redis/image-20230911211359820.png" alt="image-20230911211359820"></p><p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余</p><h3 id="Redis集合-Set"><a href="#Redis集合-Set" class="headerlink" title="Redis集合(Set)"></a>Redis集合(Set)</h3><ul><li>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</li><li>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的<strong>复杂度都是O(1)</strong>。</li></ul><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>sadd &lt;key&gt;&lt;value1&gt;&lt;value2&gt; .....</code>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</li><li><code>smembers &lt;key&gt;</code>取出该集合的所有值</li><li><code>sismember &lt;key&gt;&lt;value&gt;</code>判断集合<key>是否为含有该<value>值，有1，没有0</value></key></li><li><code>scard&lt;key&gt;</code>返回该集合的元素个数</li><li><code>srem &lt;key&gt;&lt;value1&gt;&lt;value2&gt; ....</code>删除集合中的某个元素</li><li><code>spop &lt;key&gt;</code>随机从该集合中吐出一个值</li><li><code>srandmember &lt;key&gt;&lt;n&gt;</code>随机从该集合中取出n个值。不会从集合中删除 </li><li><code>smove &lt;source&gt;&lt;destination&gt;value</code>把集合中一个值从一个集合移动到另一个集合</li><li><code>sinter &lt;key1&gt;&lt;key2&gt;</code>返回两个集合的交集元素</li><li><code>sunion &lt;key1&gt;&lt;key2&gt;</code>返回两个集合的并集元素</li><li><code>sdiff &lt;key1&gt;&lt;key2&gt;</code>返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</li></ul><h4 id="Redis集合数据结构"><a href="#Redis集合数据结构" class="headerlink" title="Redis集合数据结构"></a>Redis集合数据结构</h4><p>Set数据结构是dict字典，字典是用哈希表实现的</p><p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值</p><h3 id="Redis哈希-Hash"><a href="#Redis哈希-Hash" class="headerlink" title="Redis哈希(Hash)"></a>Redis哈希(Hash)</h3><ul><li><p>Redis hash 是一个键值对集合</p></li><li><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。类似Java里面的Map<String,Object></String,Object></p></li><li><p>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储,主要有以下2种存储方式：</p><ul><li><p>每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大</p><p><img src="/2023/10/12/redis/redis/image-20230912195005109.png" alt="image-20230912195005109"></p></li><li><p>用户ID数据冗余</p><p><img src="/2023/10/12/redis/redis/image-20230912195027535.png" alt="image-20230912195027535"></p></li></ul></li><li><p>redis中的哈希</p><ul><li><p><strong>通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</strong></p><p><img src="/2023/10/12/redis/redis/image-20230912195116200.png" alt="image-20230912195116200"></p></li></ul></li></ul><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>hset &lt;key&gt;&lt;field&gt;&lt;value&gt;</code>给<code>&lt;key&gt;</code>集合中的 <code>&lt;field&gt;</code>键赋值<code>&lt;value&gt;</code></li><li><code>hget &lt;key1&gt;&lt;field&gt;</code>从<code>&lt;key1&gt;</code>集合<code>&lt;field&gt;</code>取出 value </li><li><code>hmset &lt;key1&gt;&lt;field1&gt;&lt;value1&gt;&lt;field2&gt;&lt;value2&gt;...</code>批量设置hash的值</li><li><code>hexists&lt;key1&gt;&lt;field&gt;</code>查看哈希表 key 中，给定域 field 是否存在</li><li><code>hkeys &lt;key&gt;</code>列出该hash集合的所有field</li><li><code>hvals &lt;key&gt;</code>列出该hash集合的所有value</li><li><code>hincrby &lt;key&gt;&lt;field&gt;&lt;increment&gt;</code>为哈希表 key 中的域 field 的值加上增量</li><li><code>hsetnx &lt;key&gt;&lt;field&gt;&lt;value&gt;</code>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable</p><h3 id="Redis有序集合-Zset-sorted-set"><a href="#Redis有序集合-Zset-sorted-set" class="headerlink" title="Redis有序集合(Zset sorted set)"></a>Redis有序集合(Zset sorted set)</h3><ul><li>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合</li><li>不同之处是有序集合的每个成员都关联了一个评分（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了</li><li>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素</li><li>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表</li></ul><h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>zadd &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;…</code>将一个或多个 member 元素及其 score 值加入到有序集 key 当中</li><li><code>zrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; [WITHSCORES]</code>返回有序集 key 中，下标在<start><stop></stop>之间的元素,带WITHSCORES，可以让分数一起和值返回到结果集</start></li><li><code>zrangebyscore key min max [withscores] [limit offset count]</code>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</li><li><code>zrevrangebyscore key max min [withscores] [limit offset count]</code>同上，改为从大到小排列</li><li><code>zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt;</code> 为元素的score加上增量</li><li><code>zrem &lt;key&gt;&lt;value&gt;</code>删除该集合下，指定值的元素</li><li><code>zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;</code>统计该集合，分数区间内的元素个数</li><li><code>zrank &lt;key&gt;&lt;value&gt;</code>返回该值在集合中的排名，从0开始</li></ul><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map<String, double>，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</String,></p><p>zset底层使用了两个数据结构</p><ul><li>hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值</li><li>跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</li></ul><h4 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h4><p>有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p><h5 id="跳跃表的实例"><a href="#跳跃表的实例" class="headerlink" title="跳跃表的实例"></a>跳跃表的实例</h5><p>对比有序链表和跳跃表，从链表中查询出51</p><ul><li><p>有序链表</p><p><img src="/2023/10/12/redis/redis/image-20230918193057787.png" alt="image-20230918193057787"></p><p>要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。</p></li><li><p>跳跃表</p><p><img src="/2023/10/12/redis/redis/image-20230918193120656.png" alt="image-20230918193120656"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">从第2层开始，1节点比51节点小，向后比较。</span><br><span class="line">21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层</span><br><span class="line">在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下</span><br><span class="line">在第0层，51节点为要查找的节点，节点被找到，共查找4次。</span><br></pre></td></tr></table></figure></li><li><p>由此可以看出跳跃表比有序链表效率要高</p></li></ul><h2 id="Redis配置文件"><a href="#Redis配置文件" class="headerlink" title="Redis配置文件"></a>Redis配置文件</h2><p><code>redis</code>配置文件所在路径<code>/etc/redis.conf</code>(安装时从安装路径复制出来的配置文件路径)</p><p>可以在里面设置相关的配置项，具体含义查看相关文档</p><h2 id="Redis的发布和订阅"><a href="#Redis的发布和订阅" class="headerlink" title="Redis的发布和订阅"></a>Redis的发布和订阅</h2><h3 id="什么是发布和订阅"><a href="#什么是发布和订阅" class="headerlink" title="什么是发布和订阅"></a>什么是发布和订阅</h3><ul><li>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</li><li>Redis 客户端可以订阅任意数量的频道。</li></ul><h4 id="Redis发布和订阅示例"><a href="#Redis发布和订阅示例" class="headerlink" title="Redis发布和订阅示例"></a>Redis发布和订阅示例</h4><p>客户端可以订阅频道如下图</p><p><img src="/2023/10/12/redis/redis/image-20230923150149433.png" alt="image-20230923150149433"></p><p>当给这个频道发布消息后，消息就会发送给订阅的客户端</p><p><img src="/2023/10/12/redis/redis/image-20230923150204033.png" alt="image-20230923150204033"></p><h3 id="发布订阅命令行实现"><a href="#发布订阅命令行实现" class="headerlink" title="发布订阅命令行实现"></a>发布订阅命令行实现</h3><p>1、 打开一个客户端订阅channel1</p><p><code>SUBSCRIBE xxx</code>：订阅<code>某个频道</code></p><p><img src="/2023/10/12/redis/redis/image-20230923150714823.png" alt="image-20230923150714823"></p><p>2、打开另一个客户端，给channel1发布消息hello</p><p><img src="/2023/10/12/redis/redis/image-20230923150814371.png" alt="image-20230923150814371"></p><p>数字1代表订阅者的数量</p><p>3、打开第一个客户端可以看到发送的消息</p><p><img src="/2023/10/12/redis/redis/image-20230923150849381.png" alt="image-20230923150849381"></p><p>注意：发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息</p><h2 id="Redis6新数据类型"><a href="#Redis6新数据类型" class="headerlink" title="Redis6新数据类型"></a>Redis6新数据类型</h2><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图，合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p><img src="/2023/10/12/redis/redis/image-20230923151521635.png" alt="image-20230923151521635"></p><p>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><ul><li><p>Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p></li><li><p>Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p></li></ul><p><img src="/2023/10/12/redis/redis/image-20230923151644324.png" alt="image-20230923151644324"></p><h4 id="常用命令-5"><a href="#常用命令-5" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h5><ol><li><p>格式</p><p><code>setbit&lt;key&gt;&lt;offset&gt;&lt;value&gt;设置Bitmaps中某个偏移量的值（0或1）</code></p><p>offset:偏移量从0开始</p></li><li><p>实例</p><p>  每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p></li></ol><p>​     设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid=1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图</p><p>​    <img src="/2023/10/12/redis/redis/image-20230923152303764.png" alt="image-20230923152303764"></p><p><img src="/2023/10/12/redis/redis/image-20230923152718409.png" alt="image-20230923152718409"></p><p>上图中的unique:users:20230912代表2023-09-12这天访问的用户bitmap记录</p><p>注意:</p><ul><li>很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</li><li>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</li></ul><h5 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h5><ol><li><p>格式</p><p><code>getbit&lt;key&gt;&lt;offset&gt;获取Bitmaps中某个偏移量的值</code>，获取键的第offset位的值（从0开始算）</p></li><li><p>实例</p><p>获取id为13的用户20230912是否访问过，0则表示未访问</p><p><img src="/2023/10/12/redis/redis/image-20230923153310637.png" alt="image-20230923153310637"></p></li></ol><h5 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount"></a>bitcount</h5><p>统计<strong>字符串</strong>被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含</p><ol><li><p>格式</p><p><code>bitcount&lt;key&gt;[start end] 统计字符串从start字节到end字节比特值为1的数量</code></p><p>注意是字节，一个字节八个比特</p></li><li><p>实例</p><p>统计20230912这天访问用户数目</p><p><img src="/2023/10/12/redis/redis/image-20230923153631611.png" alt="image-20230923153631611"></p></li></ol><p><strong>注意</strong>：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置。</p><h5 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h5><p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey(目标key)中。</p><ol><li><p>格式</p><p><code>bitop and(or/not/xor) &lt;destkey&gt; [key…]</code></p></li><li><p>实例</p><p>计算出20230912 和 20230913这两天都访问过网站的用户数量</p></li></ol><p><img src="/2023/10/12/redis/redis/image-20230923154217199.png" alt="image-20230923154217199"></p><h4 id="Bitmaps与set对比"><a href="#Bitmaps与set对比" class="headerlink" title="Bitmaps与set对比"></a>Bitmaps与set对比</h4><p>假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表</p><div class="table-container"><table><thead><tr><th style="text-align:center">set和Bitmaps存储一天活跃用户对比</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">每个用户id占用空间</td><td style="text-align:center">需要存储的用户量</td><td style="text-align:center">全部内存量</td></tr><tr><td style="text-align:center">64位</td><td style="text-align:center">50000000</td><td style="text-align:center">64位*50000000 = 400MB</td></tr><tr><td style="text-align:center">1位</td><td style="text-align:center">100000000</td><td style="text-align:center">1位*100000000 = 12.5MB</td></tr></tbody></table></div><p>很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</p><div class="table-container"><table><thead><tr><th style="text-align:center">set和Bitmaps存储独立用户空间对比</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">数据类型</td><td style="text-align:center">一天</td><td style="text-align:center">一个月</td><td style="text-align:center">一年</td></tr><tr><td style="text-align:center">集合类型</td><td style="text-align:center">400MB</td><td style="text-align:center">12GB</td><td style="text-align:center">144GB</td></tr><tr><td style="text-align:center">Bitmaps</td><td style="text-align:center">12.5MB</td><td style="text-align:center">375MB</td><td style="text-align:center">4.5GB</td></tr></tbody></table></div><p>但Bitmaps并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有10万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps就不太合适了， 因为基本上大部分位都是0。</p><p>原因：set访问用户才会被记录，而bitmaps由于是数组形式，需要时刻为每个注册的用户占用一个bit位</p><div class="table-container"><table><thead><tr><th style="text-align:center">set和Bitmaps存储一天活跃用户对比（独立用户比较少）</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">每个userid占用空间</td><td style="text-align:center">需要存储的用户量</td><td style="text-align:center">全部内存量</td></tr><tr><td style="text-align:center">64位</td><td style="text-align:center">100000</td><td style="text-align:center">64位*100000 = 800KB</td></tr><tr><td style="text-align:center">1位</td><td style="text-align:center">100000000</td><td style="text-align:center">1位*100000000 = 12.5MB</td></tr></tbody></table></div><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>解决基数问题有很多种方案：</p><ul><li>数据存储在MySQL表中，使用distinct count计算不重复个数</li><li>使用Redis提供的hash、set、bitmaps等数据结构来处理</li></ul><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><ul><li><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p></li><li><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p></li><li><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p></li></ul><p>什么是基数：</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><h4 id="常用命令-6"><a href="#常用命令-6" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="pfadd"><a href="#pfadd" class="headerlink" title="pfadd"></a>pfadd</h5><ol><li><p>格式</p><p><code>pfadd &lt;key&gt;&lt; element&gt; [element ...]  添加指定元素到 HyperLogLog 中</code></p></li><li><p>实例</p><p>将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p><p><img src="/2023/10/12/redis/redis/image-20230923162800802.png" alt="image-20230923162800802"></p></li></ol><h5 id="pfcount"><a href="#pfcount" class="headerlink" title="pfcount"></a>pfcount</h5><ol><li><p>格式</p><p><code>pfcount&lt;key&gt; [key ...]</code>计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</p></li><li><p>实例</p></li></ol><p><img src="/2023/10/12/redis/redis/image-20230923163547873.png" alt="image-20230923163547873"></p><h5 id="pfmerge"><a href="#pfmerge" class="headerlink" title="pfmerge"></a>pfmerge</h5><ol><li><p>格式</p><p><code>pfmerge&lt;destkey&gt;&lt;sourcekey&gt; [sourcekey ...]</code></p><p>将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p></li><li><p>实例</p><p><img src="/2023/10/12/redis/redis/image-20230923163810999.png" alt="image-20230923163810999"></p></li></ol><h4 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h4><h5 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h5><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><h5 id="常用命令-7"><a href="#常用命令-7" class="headerlink" title="常用命令"></a>常用命令</h5><h5 id="geoadd"><a href="#geoadd" class="headerlink" title="geoadd"></a>geoadd</h5><ol><li><p>格式</p><p><code>geoadd&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;&lt;member&gt; [longitude latitude member...]</code>添加地理位置（经度，纬度，名称）</p></li><li><p>实例</p></li></ol><p>geoadd china:city 121.47 31.23 shanghai</p><p>geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p><p><img src="/2023/10/12/redis/redis/image-20230923165124867.png" alt="image-20230923165124867"></p><p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>已经添加的数据，是无法再次往里面添加的。</p><h5 id="geopos"><a href="#geopos" class="headerlink" title="geopos"></a>geopos</h5><ol><li><p>格式</p><p><code>geopos &lt;key&gt;&lt;member&gt; [member...]</code>获得指定地区的坐标值</p></li><li><p>实例</p><p><img src="/2023/10/12/redis/redis/image-20230923172253638.png" alt="image-20230923172253638"></p></li></ol><h5 id="geodist"><a href="#geodist" class="headerlink" title="geodist"></a>geodist</h5><ol><li><p>格式</p><p><code>geodist&lt;key&gt;&lt;member1&gt;&lt;member2&gt; [m|km|ft|mi ]</code> 获取两个位置之间的直线距离</p><p>单位：</p><p>m 表示单位为米[默认值]。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p></li><li><p>实例</p><p><img src="/2023/10/12/redis/redis/image-20230923172431604.png" alt="image-20230923172431604"></p></li></ol><h5 id="georadius"><a href="#georadius" class="headerlink" title="georadius"></a>georadius</h5><ol><li><p>格式</p><p><code>georadius&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;radius m|km|ft|mi</code>以给定的经纬度为中心，找出某一半径内的元素</p></li><li><p>实例</p><p><img src="/2023/10/12/redis/redis/image-20230923172520780.png" alt="image-20230923172520780"></p></li></ol><h2 id="Jedis操作Redis6"><a href="#Jedis操作Redis6" class="headerlink" title="Jedis操作Redis6"></a>Jedis操作Redis6</h2><h3 id="Jedis所需要的Jar包"><a href="#Jedis所需要的Jar包" class="headerlink" title="Jedis所需要的Jar包"></a>Jedis所需要的Jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Java连接redis测试"><a href="#Java连接redis测试" class="headerlink" title="Java连接redis测试"></a>Java连接redis测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建jedis对象</span></span><br><span class="line">        <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.测试是否连接成功</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">        System.out.println(<span class="string">&quot;连接成功&quot;</span>+message);</span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项:</strong>远程连接redis需要执行以下操作</p><ol><li><p>将redis配置文件<code>/etc/redis.conf</code>中的<code>bind 127.0.0,1</code>注释掉</p></li><li><p>将redis配置文件中的保护模式设置为：<code>protected-mode no</code></p><p>​    <img src="/2023/10/12/redis/redis/image-20230924193728222.png" alt="image-20230924193728222"></p><p><img src="/2023/10/12/redis/redis/image-20230924193641129.png" alt="image-20230924193641129"></p></li><li><p>关闭Linux的防火墙 <code>systemctl stop/disable firewalld.service</code></p></li></ol><p><img src="/2023/10/12/redis/redis/image-20230924193545830.png" alt="image-20230924193545830"></p><h3 id="Jedis-API"><a href="#Jedis-API" class="headerlink" title="Jedis-API"></a>Jedis-API</h3><p>通过jedis对redis相关数据类型进行操作,下面展示对各个数据类型部分操作(用法与命令行形式类似)，相关API可以去查阅对应文档</p><h4 id="Key的操作"><a href="#Key的操作" class="headerlink" title="Key的操作"></a>Key的操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关于key相关的操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//往redis中添加数据</span></span><br><span class="line">    jedis.set(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;k3&quot;</span>,<span class="string">&quot;v3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有key</span></span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断key是否存在</span></span><br><span class="line">    System.out.println(jedis.exists(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.exists(<span class="string">&quot;k4&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取key的存活时间</span></span><br><span class="line">    System.out.println(jedis.ttl(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对应key的值</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="String类型操作"><a href="#String类型操作" class="headerlink" title="String类型操作"></a>String类型操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空数据库</span></span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    <span class="comment">//同时设置多个键值对</span></span><br><span class="line">    jedis.mset(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;27&quot;</span>,<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;male&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同时获取多个值</span></span><br><span class="line">    List&lt;String&gt; infoList = jedis.mget(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;sex&quot;</span>);</span><br><span class="line">    System.out.println(infoList);</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="List类型操作"><a href="#List类型操作" class="headerlink" title="List类型操作"></a>List类型操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从左往右添加</span></span><br><span class="line">    jedis.lpush(<span class="string">&quot;students&quot;</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Marray&quot;</span>,<span class="string">&quot;David&quot;</span>);</span><br><span class="line">    <span class="comment">//获取列表类型数据</span></span><br><span class="line">    List&lt;String&gt; students = jedis.lrange(<span class="string">&quot;students&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(students);</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Set类型操作"><a href="#Set类型操作" class="headerlink" title="Set类型操作"></a>Set类型操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    jedis.sadd(<span class="string">&quot;users&quot;</span>,<span class="string">&quot;xx1&quot;</span>,<span class="string">&quot;hh1&quot;</span>,<span class="string">&quot;kk1&quot;</span>,<span class="string">&quot;hh1&quot;</span>,<span class="string">&quot;lk1&quot;</span>);</span><br><span class="line">    <span class="comment">//获取所有元素</span></span><br><span class="line">    Set&lt;String&gt; users = jedis.smembers(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">    <span class="comment">//获取集合元素个数</span></span><br><span class="line">    System.out.println(jedis.scard(<span class="string">&quot;users&quot;</span>));</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hash类型操作"><a href="#Hash类型操作" class="headerlink" title="Hash类型操作"></a>Hash类型操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, String&gt; userInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">    userInfo.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;bobo&quot;</span>);</span><br><span class="line">    userInfo.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;27&quot;</span>);</span><br><span class="line">    userInfo.put(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="comment">//添加数据</span></span><br><span class="line">    jedis.hset(<span class="string">&quot;people01&quot;</span>,userInfo);</span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.hget(<span class="string">&quot;people01&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有field</span></span><br><span class="line">    Set&lt;String&gt; fields = jedis.hkeys(<span class="string">&quot;people01&quot;</span>);</span><br><span class="line">    System.out.println(fields);</span><br><span class="line">    <span class="comment">//获取所有value</span></span><br><span class="line">    List&lt;String&gt; values = jedis.hvals(<span class="string">&quot;people01&quot;</span>);</span><br><span class="line">    System.out.println(values);</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Zset数据类型"><a href="#Zset数据类型" class="headerlink" title="Zset数据类型"></a>Zset数据类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset&quot;</span>,<span class="number">23</span>,<span class="string">&quot;b1&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset&quot;</span>,<span class="number">34</span>,<span class="string">&quot;f1&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset&quot;</span>,<span class="number">12</span>,<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset&quot;</span>,<span class="number">67</span>,<span class="string">&quot;k1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元素个数</span></span><br><span class="line">    System.out.println(jedis.zcard(<span class="string">&quot;zset&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元素</span></span><br><span class="line">    Set&lt;String&gt; zset = jedis.zrange(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(zset);</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jedis实例：手机验证码功能"><a href="#Jedis实例：手机验证码功能" class="headerlink" title="Jedis实例：手机验证码功能"></a>Jedis实例：手机验证码功能</h3><p>要求</p><ul><li>输入手机号，点击发送后随机生成6位数字码，2分钟有效</li><li>输入验证码，点击验证，返回成功或失败</li><li>每个手机号每天只能输入3次</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">思路分析</span><br><span class="line">①生成六位数字验证码：借助Random函数实现</span><br><span class="line">②验证码在两分钟内有效，把验证码放在redis中，同时设置key过期时间为120s</span><br><span class="line">③判断验证码是否一致：从redis中获取验证码与用户输入验证码进行比较</span><br><span class="line">④每个手机号每天只能输入3次:每次手机请求验证码时，incr，当次数大于3时，提示不能获取验证码</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JedisDemo02</span> <span class="variable">jedisDemo02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisDemo02</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.用户输入手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="string">&quot;18345469536&quot;</span>;</span><br><span class="line">        <span class="comment">//2.获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> jedisDemo02.getCode(phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.用户输入验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userCode</span> <span class="operator">=</span> code;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.验证是否正确</span></span><br><span class="line">        jedisDemo02.verifyCode(phone,userCode);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成并返回六位验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateCode</span><span class="params">()</span>&#123;</span><br><span class="line">        String code=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            code+=random.nextInt(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *统计当前手机号发送次数以及将对应验证码存入redis,并返回验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="comment">//连接redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key1</span> <span class="operator">=</span> <span class="string">&quot;verify:&quot;</span> + phone + <span class="string">&quot;:count&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> <span class="string">&quot;verify:&quot;</span> + phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        <span class="comment">//1.获取当前手机号使用次数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> jedis.get(key1);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//初次访问，次数设为1，存活时间24小时</span></span><br><span class="line">            jedis.setex(key1, <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Integer.parseInt(count) &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            jedis.incr(key1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前已超过三次，请明天再访问&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取验证码，并存储在redis，设置存活时间2 min</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> generateCode();</span><br><span class="line">        jedis.setex(key2, <span class="number">2</span> * <span class="number">60</span>, code);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verifyCode</span><span class="params">(String phone,String code)</span>&#123;</span><br><span class="line">        <span class="comment">//连接redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从redis中取出验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> <span class="string">&quot;verify:&quot;</span> + phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">redisCode</span> <span class="operator">=</span> jedis.get(key2);</span><br><span class="line">        <span class="keyword">if</span>(redisCode.equals(code))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证码不匹配&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot与Redis整合"><a href="#SpringBoot与Redis整合" class="headerlink" title="SpringBoot与Redis整合"></a>SpringBoot与Redis整合</h3><h4 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h4><h5 id="在pom-xml中引入redis的相关依赖"><a href="#在pom-xml中引入redis的相关依赖" class="headerlink" title="在pom.xml中引入redis的相关依赖"></a>在<code>pom.xml</code>中引入redis的相关依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="在application-properties中进行redis相关配置"><a href="#在application-properties中进行redis相关配置" class="headerlink" title="在application.properties中进行redis相关配置"></a>在application.properties中进行redis相关配置</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis服务器地址</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">192.168.140.136</span></span><br><span class="line"><span class="comment">#Redis服务器连接端口</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="attr">spring.redis.database</span>= <span class="string">0</span></span><br><span class="line"><span class="comment">#连接超时时间（毫秒）</span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">1800000</span></span><br><span class="line"><span class="comment">#连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-active</span>=<span class="string">20</span></span><br><span class="line"><span class="comment">#最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment">#连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#连接池中的最小空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><h5 id="添加redis配置类"><a href="#添加redis配置类" class="headerlink" title="添加redis配置类"></a>添加redis配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line"><span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"><span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line"><span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redisTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置值到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">//从redis获取值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h5><p>启动报错:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with &#x27;debug&#x27; enabled.</span><br><span class="line">2023-09-26 10:22:52.092 ERROR 39304 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : </span><br><span class="line"></span><br><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">An attempt was made to call a method that does not exist. The attempt was made from the following location:</span><br><span class="line"></span><br><span class="line">    org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration<span class="built_in">$</span>PoolBuilderFactory.getPoolConfig(LettuceConnectionConfiguration.java:188)</span><br><span class="line"></span><br><span class="line">The following method did not exist:</span><br><span class="line"></span><br><span class="line">    org.apache.commons.pool2.impl.GenericObjectPoolConfig.setMaxWait(Ljava/time/Duration;)V</span><br><span class="line"></span><br><span class="line">The calling method&#x27;s class, org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration<span class="built_in">$</span>PoolBuilderFactory, was loaded from the following location:</span><br><span class="line"></span><br><span class="line">    jar:file:/C:/Users/admin/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.7.17-SNAPSHOT/spring-boot-autoconfigure-2.7.17-20230925.102852-15.jar!/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration<span class="built_in">$</span>PoolBuilderFactory.class</span><br><span class="line"></span><br><span class="line">The called method&#x27;s class, org.apache.commons.pool2.impl.GenericObjectPoolConfig, is available from the following locations:</span><br><span class="line"></span><br><span class="line">    jar:file:/C:/Users/admin/.m2/repository/org/apache/commons/commons-pool2/2.6.0/commons-pool2-2.6.0.jar!/org/apache/commons/pool2/impl/GenericObjectPoolConfig.class</span><br><span class="line"></span><br><span class="line">The called method&#x27;s class hierarchy was loaded from the following locations:</span><br><span class="line"></span><br><span class="line">    org.apache.commons.pool2.impl.GenericObjectPoolConfig: file:/C:/Users/admin/.m2/repository/org/apache/commons/commons-pool2/2.6.0/commons-pool2-2.6.0.jar</span><br><span class="line">    org.apache.commons.pool2.impl.BaseObjectPoolConfig: file:/C:/Users/admin/.m2/repository/org/apache/commons/commons-pool2/2.6.0/commons-pool2-2.6.0.jar</span><br><span class="line">    org.apache.commons.pool2.BaseObject: file:/C:/Users/admin/.m2/repository/org/apache/commons/commons-pool2/2.6.0/commons-pool2-2.6.0.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Correct the classpath of your application so that it contains compatible versions of the classes org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration<span class="built_in">$</span>PoolBuilderFactory and org.apache.commons.pool2.impl.GenericObjectPoolConfig</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>报错原因</p><p><code>SpringBoot</code>与<code>org.apache.commons.pool2</code>版本不匹配</p><p>原始两者版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.17-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Jedis-demo02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jedis-demo02<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Jedis-demo02<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决办法一：降低<code>SpringBoot</code>版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决办法二：去掉<code>org.apache.commons.pool2</code>的版本限制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;version&gt;2.6.0&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Redis事务操作-锁机制和秒杀"><a href="#Redis事务操作-锁机制和秒杀" class="headerlink" title="Redis事务操作(锁机制和秒杀)"></a>Redis事务操作(锁机制和秒杀)</h2><h4 id="Redis事务定义"><a href="#Redis事务定义" class="headerlink" title="Redis事务定义"></a>Redis事务定义</h4><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是串联多个命令防止别的命令插队。</p><h4 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h4><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p>Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p><img src="/2023/10/12/redis/redis/image-20230926144212297.png" alt="image-20230926144212297"></p><p>与<code>Mysql</code>类比</p><p><code>multi</code>相当于<code>start transaction</code></p><p><code>exec</code>相当于<code>commit</code></p><p><code>discard</code>相当于<code>rollback</code></p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p><code>multi</code>、<code>exec</code></p><p><img src="/2023/10/12/redis/redis/image-20230926144914623.png" alt="image-20230926144914623"></p><p><code>multi</code>、<code>discard</code></p><p><img src="/2023/10/12/redis/redis/image-20230926145012291.png" alt="image-20230926145012291"></p><h4 id="事务中的错误处理"><a href="#事务中的错误处理" class="headerlink" title="事务中的错误处理"></a>事务中的错误处理</h4><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消</p><p><img src="/2023/10/12/redis/redis/image-20230926145453632.png" alt="image-20230926145453632"></p><p><img src="/2023/10/12/redis/redis/image-20230926145653312.png" alt="image-20230926145653312"></p><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><p><img src="/2023/10/12/redis/redis/image-20230926145505899.png" alt="image-20230926145505899"></p><p><img src="/2023/10/12/redis/redis/image-20230926201518755.png" alt="image-20230926201518755"></p><h4 id="事务冲突的问题"><a href="#事务冲突的问题" class="headerlink" title="事务冲突的问题"></a>事务冲突的问题</h4><h5 id="为什么要做成事务？"><a href="#为什么要做成事务？" class="headerlink" title="为什么要做成事务？"></a>为什么要做成事务？</h5><p>场景：有很多人有你的账户，同时去参加双十一抢购</p><p>一个请求想给金额减8000</p><p>一个请求想给金额减5000</p><p>一个请求想给金额减1000</p><p><img src="/2023/10/12/redis/redis/image-20230926202441774.png" alt="image-20230926202441774"></p><h4 id="事务冲突的解决方式"><a href="#事务冲突的解决方式" class="headerlink" title="事务冲突的解决方式"></a>事务冲突的解决方式</h4><h5 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h5><p><strong>悲观锁(Pessimistic Lock)</strong>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁。</p><p><img src="/2023/10/12/redis/redis/image-20230926202904609.png" alt="image-20230926202904609"></p><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p><strong>乐观锁(Optimistic Lock),</strong> 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。</p><p><img src="/2023/10/12/redis/redis/image-20230926202935461.png" alt="image-20230926202935461"></p><h4 id="Redis乐观锁相关的命令"><a href="#Redis乐观锁相关的命令" class="headerlink" title="Redis乐观锁相关的命令"></a>Redis乐观锁相关的命令</h4><h5 id="WATCH-key-key…"><a href="#WATCH-key-key…" class="headerlink" title="WATCH key[key…]"></a>WATCH key[key…]</h5><p>redis中乐观锁的实现示例</p><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key被其他命令所改动，那么事务将被打断。</p><p><img src="/2023/10/12/redis/redis/image-20230926211419279.png" alt="image-20230926211419279"></p><h5 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h5><p>取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p><p><a href="http://doc.redisfans.com/transaction/exec.html">参考文档</a></p><h4 id="Redis事务三特性"><a href="#Redis事务三特性" class="headerlink" title="Redis事务三特性"></a>Redis事务三特性</h4><ul><li>单独的隔离操作<ul><li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li></ul></li><li>没有隔离级别的概念<ul><li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li></ul></li><li>不保证原子性<ul><li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul></li></ul><h3 id="Redis事务秒杀案例"><a href="#Redis事务秒杀案例" class="headerlink" title="Redis事务秒杀案例"></a>Redis事务秒杀案例</h3><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>解决计数器和人员记录的事务操作</p><p><img src="/2023/10/12/redis/redis/image-20230926213001707.png" alt="image-20230926213001707"></p><p>秒杀过程的核心操作其实就是对于商品而言库存数减1，对于成功抢购到的用户而言，其结算清单对应物品加1</p><h4 id="基本功能代码"><a href="#基本功能代码" class="headerlink" title="基本功能代码"></a><strong>基本功能代码</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondKillDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//测试功能</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">SecondKillDemo</span> <span class="variable">secondKillDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecondKillDemo</span>();</span><br><span class="line">        String proId=<span class="string">&quot;iphone15&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        secondKillDemo.doSecKill(proId,userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行秒杀操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proId 用户秒杀的商品ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否秒杀成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String proId,String userId)</span>&#123;</span><br><span class="line">        <span class="comment">//1.判断用户或者商品ID是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(proId==<span class="literal">null</span> || userId==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户或者商品ID无效&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.与jedis建立连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置相关的key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">proKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+proId+<span class="string">&quot;:pd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+proId+<span class="string">&quot;:user&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取商品库存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pdCount</span> <span class="operator">=</span> jedis.get(proKey);</span><br><span class="line">        <span class="keyword">if</span>(pdCount==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前商品还未参与秒杀，尽请期待&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Integer.parseInt(pdCount)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前商品的秒杀活动已经结束&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断当前用户是否已经参与过活动</span></span><br><span class="line">        <span class="keyword">if</span>(jedis.sismember(userKey,userId))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你已经参与过当前次的秒杀活动，不能重复参与&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.执行秒杀</span></span><br><span class="line">        <span class="comment">//商品库存减1</span></span><br><span class="line">        jedis.decr(proKey);</span><br><span class="line">        <span class="comment">//用户加入商品秒杀用户列表</span></span><br><span class="line">        jedis.sadd(userKey,userId);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户 &quot;</span>+userId+<span class="string">&quot;成功秒杀到商品&quot;</span>+proId);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/12/redis/redis/image-20230927155314051.png" alt="image-20230927155314051"></p><p>以上过程和代码只能满足于单个用户操作</p><h4 id="模拟-秒杀并发"><a href="#模拟-秒杀并发" class="headerlink" title="模拟 秒杀并发"></a>模拟 秒杀并发</h4><p>使用工具ab模拟测试</p><p>CentOS6 默认安装</p><p>CentOS7需要手动安装</p><h5 id="CentOS7安装ab"><a href="#CentOS7安装ab" class="headerlink" title="CentOS7安装ab"></a>CentOS7安装ab</h5><p>联网或者无网络条件下均可以安装</p><p>联网安装</p><p><code>yum install httpd-tools</code></p><p>无网络安装</p><p>进入<code>cd /run/media/root/CentOS 7 x86_64/Packages</code>（路径跟centos6不同）</p><p>顺序安装</p><p><code>apr-1.4.8-3.el7.x86_64.rpm</code></p><p><code>apr-util-1.5.2-6.el7.x86_64.rpm</code></p><p><code>httpd-tools-2.4.6-67.el7.centos.x86_64.rpm</code></p><p>测试是否安装成功</p><p><img src="/2023/10/12/redis/redis/image-20230927193843824.png" alt="image-20230927193843824"></p><p><code>ab</code>重要参数</p><ul><li><code>-n</code>：请求数目</li><li><code>-c</code>：并发数目</li><li><code>-p</code>: 包含提交数目的文件</li><li><code>-T</code>：提交数据类型，适用于<code>POST/PUT</code>请求</li></ul><h6 id="构建控制层"><a href="#构建控制层" class="headerlink" title="构建控制层"></a>构建控制层</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecKillController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/doKill&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSecKill</span><span class="params">(String prodId)</span>&#123;</span><br><span class="line">        <span class="type">SecondKillDemo</span> <span class="variable">secondKillDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecondKillDemo</span>();</span><br><span class="line">        <span class="comment">//随机生成用户</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> random.nextInt(<span class="number">100</span>);</span><br><span class="line">        String userId=<span class="string">&quot;user-&quot;</span>+id;</span><br><span class="line">        secondKillDemo.doSecKill(prodId,userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="利用db模拟并发请求"><a href="#利用db模拟并发请求" class="headerlink" title="利用db模拟并发请求"></a>利用db模拟并发请求</h6><p><img src="/2023/10/12/redis/redis/image-20231006160513170.png" alt="image-20231006160513170"></p><p>模拟表单提交参数,以&amp;符号结尾;存放当前目录</p><p>文件内容</p><p><img src="/2023/10/12/redis/redis/image-20231006160549905.png" alt="image-20231006160549905"></p><p>ab请求</p><p><code>ab -n 100 -c 50 -p ./refile -T application/x-www-form-urlencoded http://115.156.245.63:8080/doKill</code></p><p><img src="/2023/10/12/redis/redis/image-20231006161812056.png" alt="image-20231006161812056"></p><p>后台显示</p><p><img src="/2023/10/12/redis/redis/image-20231006161833125.png" alt="image-20231006161833125"></p><p>redis数据库显示</p><p><img src="/2023/10/12/redis/redis/image-20231006161855248.png" alt="image-20231006161855248"></p><p>问题所在</p><ul><li>出现超卖现象，秒杀结束后出现其他用户秒杀成功</li><li>如果请求过多，redis无法处理，可能会出现连接超时的问题</li></ul><h6 id="问题一：连接超时问题"><a href="#问题一：连接超时问题" class="headerlink" title="问题一：连接超时问题"></a>问题一：连接超时问题</h6><p>采用连接池进行解决，节省每次连接redis服务带来的消耗，把连接好的实例反复利用，通过参数管理连接的行为</p><p>连接池常用参数</p><ul><li>MaxTotal：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了MaxTotal个jedis实例，则此时pool的状态为exhausted</li><li>maxIdle：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；</li><li>MaxWaitMillis：表示当borrow一个jedis实例时，最大的等待毫秒数，如果超过等待时间，则直接抛JedisConnectionException；</li><li>testOnBorrow：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；</li></ul><p>redis数据库连接池的构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisPoolUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RedisPoolUtils</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title function_">getJedisPoolInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span>==jedisPool)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RedisPoolUtils.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span>==jedisPool)&#123;</span><br><span class="line">                    <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">                    jedisPoolConfig.setMaxTotal(<span class="number">2000</span>);</span><br><span class="line">                    jedisPoolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">                    jedisPoolConfig.setMaxWaitMillis(<span class="number">100</span>*<span class="number">1000</span>);</span><br><span class="line">                    jedisPoolConfig.setBlockWhenExhausted(<span class="literal">true</span>);</span><br><span class="line">                    jedisPoolConfig.setTestOnBorrow(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig, <span class="string">&quot;192.168.80.129&quot;</span>, <span class="number">6379</span>, <span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis连接示例的获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.与jedis建立连接</span></span><br><span class="line"><span class="comment">// Jedis jedis = new Jedis(&quot;192.168.80.129&quot;, 6379);</span></span><br><span class="line"><span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> RedisPoolUtils.getJedisPoolInstance();</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br></pre></td></tr></table></figure><h6 id="问题二：超卖问题"><a href="#问题二：超卖问题" class="headerlink" title="问题二：超卖问题"></a>问题二：超卖问题</h6><p><img src="/2023/10/12/redis/redis/image-20231007094131835.png" alt="image-20231007094131835"></p><p>解决办法：利用乐观锁淘汰用户，解决超卖问题</p><p><img src="/2023/10/12/redis/redis/image-20231007094207176.png" alt="image-20231007094207176"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加乐观锁，解决超卖问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecSecondKill</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doKill</span><span class="params">(String prodId,String userId)</span>&#123;</span><br><span class="line">        <span class="comment">//1.判断输入是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (prodId==<span class="literal">null</span> || userId==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品ID或者用户ID为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.构造对应的key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prodKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+prodId+<span class="string">&quot;:pd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+prodId+<span class="string">&quot;:user&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通过数据库连接池获取连接</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> RedisPoolUtils.getJedisPoolInstance();</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为商品库存添加乐观锁</span></span><br><span class="line">        jedis.watch(prodKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断商品库存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prodCount</span> <span class="operator">=</span> jedis.get(prodKey);</span><br><span class="line">        <span class="comment">//商品是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(prodCount==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此商品尚未参与秒杀活动&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//商品是否还有库存</span></span><br><span class="line">        <span class="keyword">if</span>(Integer.parseInt(prodCount)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此商品库存不足，此次秒杀结束&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(jedis.sismember(userKey,userId))&#123;</span><br><span class="line">            System.out.println(userId+<span class="string">&quot;你已经参与过当前次的秒杀活动，不能重复参与&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.开启秒杀</span></span><br><span class="line">        <span class="comment">//①开启事务</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line">        <span class="comment">//②命令进入事务队列</span></span><br><span class="line">        transaction.decr(prodKey);<span class="comment">//商品库存减一</span></span><br><span class="line">        transaction.sadd(userKey,userId);</span><br><span class="line">        <span class="comment">//③事务执行</span></span><br><span class="line">        List&lt;Object&gt; results = transaction.exec();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(results==<span class="literal">null</span> || results.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(userId+<span class="string">&quot;秒杀失败&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//秒杀成功</span></span><br><span class="line">        System.out.println(userId+<span class="string">&quot;秒杀成功&quot;</span>);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="问题三：已经秒杀结束，可能还有库存遗留"><a href="#问题三：已经秒杀结束，可能还有库存遗留" class="headerlink" title="问题三：已经秒杀结束，可能还有库存遗留"></a>问题三：已经秒杀结束，可能还有库存遗留</h6><p>已经秒光，可是还有库存。原因，就是乐观锁导致很多请求都失败。先点的没秒到，后点的可能秒到了</p><p><strong>解决方法</strong></p><p>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。</p><p>LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作。</p><p>但是注意redis的lua脚本功能，只有在Redis 2.6以上的版本才可以使用。</p><p>利用lua脚本淘汰用户，解决超卖问题。</p><p>redis 2.6版本以后，通过lua脚本解决<strong>争抢问题</strong>，实际上是<strong>redis</strong> <strong>利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>。</p><p><img src="/2023/10/12/redis/redis/image-20231007143900338.png" alt="image-20231007143900338"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品秒杀</span></span><br><span class="line"><span class="comment"> * ①使用乐观锁解决超卖问题</span></span><br><span class="line"><span class="comment"> * ②使用数据库连接池解决超时连接问题</span></span><br><span class="line"><span class="comment"> * ③使用lua脚本解决商品库存遗留问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecSecondKill_v2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">secKillScript</span> <span class="operator">=</span><span class="string">&quot;local userid=KEYS[1];\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local prodid=KEYS[2];\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local qtkey=&#x27;sk:&#x27;..prodid..\&quot;:pd\&quot;;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local usersKey=&#x27;sk:&#x27;..prodid..\&quot;:user\&quot;;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local userExists=redis.call(\&quot;sismember\&quot;,usersKey,userid);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;if tonumber(userExists)==1 then \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return 2;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;end\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local num= redis.call(\&quot;get\&quot; ,qtkey);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;if tonumber(num)&lt;=0 then \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return 0;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;else \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   redis.call(\&quot;decr\&quot;,qtkey);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   redis.call(\&quot;sadd\&quot;,usersKey,userid);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;end\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;return 1&quot;</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String prodId,String userId)</span>&#123;</span><br><span class="line">        <span class="comment">//1.判断输入是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (prodId==<span class="literal">null</span> || userId==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品ID或者用户ID为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.连接池获取redis</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> RedisPoolUtils.getJedisPoolInstance();</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sha1</span> <span class="operator">=</span> jedis.scriptLoad(secKillScript);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jedis.evalsha(sha1, <span class="number">2</span>, userId, prodId);</span><br><span class="line">        <span class="type">String</span> <span class="variable">reString</span> <span class="operator">=</span> String.valueOf(result);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals( reString )  ) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;已抢空！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals( reString )  )  &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;抢购成功！！！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals( reString )  )  &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;该用户已抢过！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;抢购异常！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis持久化操作"><a href="#Redis持久化操作" class="headerlink" title="Redis持久化操作"></a>Redis持久化操作</h2><p>Redis 提供了2个不同形式的持久化方式</p><ul><li>RDB（Redis DataBase）</li><li>AOF（Append Of File）</li></ul><h3 id="Redis持久化之RDB-Redis-DataBase"><a href="#Redis持久化之RDB-Redis-DataBase" class="headerlink" title="Redis持久化之RDB(Redis DataBase)"></a>Redis持久化之RDB(Redis DataBase)</h3><p>在<strong>指定的时间间隔内</strong>将内存中的<strong>数据集快照</strong>写入磁盘， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</p><h5 id="备份如何执行"><a href="#备份如何执行" class="headerlink" title="备份如何执行"></a>备份如何执行</h5><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<strong>RDB</strong>的缺点是最后一次持久化后的数据可能丢失。</p><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><ul><li>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</li><li>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“<strong>写时复制技术</strong>”</li><li><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li></ul><h4 id="RDB持久化流程"><a href="#RDB持久化流程" class="headerlink" title="RDB持久化流程"></a>RDB持久化流程</h4><p><img src="/2023/10/12/redis/redis/image-20231007155910362.png" alt="image-20231007155910362"></p><h4 id="RDB-redis-database-相关配置"><a href="#RDB-redis-database-相关配置" class="headerlink" title="RDB(redis database)相关配置"></a>RDB(redis database)相关配置</h4><h5 id="dump-rdb文件"><a href="#dump-rdb文件" class="headerlink" title="dump.rdb文件"></a>dump.rdb文件</h5><p>在redis.conf中配置文件名称，默认为dump.rdb</p><p><code>vim /etc/redis.conf</code></p><p><img src="/2023/10/12/redis/redis/image-20231007160058947.png" alt="image-20231007160058947"></p><h5 id="配置位置"><a href="#配置位置" class="headerlink" title="配置位置"></a>配置位置</h5><p>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下</p><p><img src="/2023/10/12/redis/redis/image-20231007170204142.png" alt="image-20231007170204142"></p><p>可以手动修改<code>dir /xx/xx/xx</code></p><h5 id="配置文件中的默认快照配置"><a href="#配置文件中的默认快照配置" class="headerlink" title="配置文件中的默认快照配置"></a>配置文件中的默认快照配置</h5><p>格式：save 秒钟 写操作次数</p><p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，</p><p><strong>默认是1</strong>分钟内改了<strong>1</strong>万次，或<strong>5</strong>分钟内改了<strong>10</strong>次，或1个小时内改了<strong>1</strong>次。</p><p>禁用</p><p>不设置save指令，或者给save传入空字符串</p><p><img src="/2023/10/12/redis/redis/image-20231007170432128.png" alt="image-20231007170432128"></p><h5 id="stop-writes-on-bgsave-error"><a href="#stop-writes-on-bgsave-error" class="headerlink" title="stop-writes-on-bgsave-error"></a>stop-writes-on-bgsave-error</h5><p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes</p><p><img src="/2023/10/12/redis/redis/image-20231007170959768.png" alt="image-20231007170959768"></p><h5 id="rdbcompression-压缩文件"><a href="#rdbcompression-压缩文件" class="headerlink" title="rdbcompression 压缩文件"></a>rdbcompression <strong>压缩文件</strong></h5><p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。</p><p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p><p><img src="/2023/10/12/redis/redis/image-20231007171125850.png" alt="image-20231007171125850"></p><h5 id="rdbchecksum-检查完整性"><a href="#rdbchecksum-检查完整性" class="headerlink" title="rdbchecksum 检查完整性"></a>rdbchecksum <strong>检查完整性</strong></h5><p><img src="/2023/10/12/redis/redis/image-20231007171219016.png" alt="image-20231007171219016"></p><p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，</p><p>但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p><p>推荐yes.</p><h5 id="命令save-VS-bgsave"><a href="#命令save-VS-bgsave" class="headerlink" title="命令save VS bgsave"></a>命令save VS bgsave</h5><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p><p><strong>bgsave：</strong>Redis<strong>会在后台异步进行快照操作，</strong> <strong>快照同时还可以响应客户端请求。</strong></p><p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p><h5 id="flushall命令"><a href="#flushall命令" class="headerlink" title="flushall命令"></a><strong>flushall命令</strong></h5><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p><h4 id="redis优缺点"><a href="#redis优缺点" class="headerlink" title="redis优缺点"></a>redis优缺点</h4><h5 id="redis优势"><a href="#redis优势" class="headerlink" title="redis优势"></a>redis优势</h5><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul><p><img src="/2023/10/12/redis/redis/image-20231007172059740.png" alt="image-20231007172059740"></p><h5 id="redis劣势"><a href="#redis劣势" class="headerlink" title="redis劣势"></a>redis劣势</h5><ul><li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li><li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li><li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改</li></ul><h4 id="redis-rdb的备份"><a href="#redis-rdb的备份" class="headerlink" title="redis rdb的备份"></a>redis rdb的备份</h4><p>先通过config get dir 查询rdb文件的目录 </p><p>将*.rdb的文件拷贝到别的地方</p><p>db的恢复</p><ul><li><p>关闭Redis</p></li><li><p>先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</p></li><li><p>启动Redis, 备份数据会直接加载</p></li></ul><h4 id="redis-rdb的关闭"><a href="#redis-rdb的关闭" class="headerlink" title="redis rdb的关闭"></a>redis rdb的关闭</h4><p>动态停止RDB：redis-cli config set save “”#save后给空值，表示禁用保存策略</p><h4 id="redis-rdb小结"><a href="#redis-rdb小结" class="headerlink" title="redis rdb小结"></a>redis rdb小结</h4><p><img src="/2023/10/12/redis/redis/image-20231007191933012.png" alt="image-20231007191933012"></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><strong>配置修改redis.conf文件</strong></p><p><img src="/2023/10/12/redis/redis/image-20231007192757498.png" alt="image-20231007192757498"></p><p><img src="/2023/10/12/redis/redis/image-20231007192813780.png" alt="image-20231007192813780"></p><p><strong>查看当前目录文件</strong></p><p><img src="/2023/10/12/redis/redis/image-20231007192917151.png" alt="image-20231007192917151"></p><p><strong>修改redis数据库 key</strong></p><p><img src="/2023/10/12/redis/redis/image-20231007193006124.png" alt="image-20231007193006124"></p><p><strong>查看当前目录文件</strong></p><p><img src="/2023/10/12/redis/redis/image-20231007193037909.png" alt="image-20231007193037909"></p><p>出现了备份文件my_dump.rdb</p><p><strong>备份my_dump.rdb并且删除原文件</strong></p><p><img src="/2023/10/12/redis/redis/image-20231007193148129.png" alt="image-20231007193148129"></p><p><img src="/2023/10/12/redis/redis/image-20231007193241071.png" alt="image-20231007193241071"></p><p>删除rdb文件，重启redis会发现此时数据库为空</p><p><strong>恢复备份数据</strong></p><p><img src="/2023/10/12/redis/redis/image-20231007193646448.png" alt="image-20231007193646448"></p><h3 id="Redis持久化之AOF"><a href="#Redis持久化之AOF" class="headerlink" title="Redis持久化之AOF"></a>Redis持久化之AOF</h3><h4 id="AOP-Append-Only-File"><a href="#AOP-Append-Only-File" class="headerlink" title="AOP(Append Only File)"></a>AOP(Append Only File)</h4><p>以<strong>日志</strong>的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><h4 id="AOF持久化流程"><a href="#AOF持久化流程" class="headerlink" title="AOF持久化流程"></a>AOF持久化流程</h4><ol><li>客户端的请求写命令会被append追加到AOF缓冲区内；</li><li>AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</li><li>AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</li><li>Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</li></ol><p><img src="/2023/10/12/redis/redis/image-20231007194411785.png" alt="image-20231007194411785"></p><h4 id="AOF默认不开启"><a href="#AOF默认不开启" class="headerlink" title="AOF默认不开启"></a>AOF默认不开启</h4><p>可以在redis.conf中配置文件名称，默认为 appendonly.aof</p><p>AOF文件的保存路径，同RDB的路径一致。</p><h4 id="AOF和RDB同时开启，redis听谁的？"><a href="#AOF和RDB同时开启，redis听谁的？" class="headerlink" title="AOF和RDB同时开启，redis听谁的？"></a>AOF和RDB同时开启，redis听谁的？</h4><p>AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</p><h4 id="AOF启动-修复-恢复"><a href="#AOF启动-修复-恢复" class="headerlink" title="AOF启动/修复/恢复"></a>AOF启动/修复/恢复</h4><ul><li>AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载</li><li>正常恢复<ul><li>修改默认的appendonly no，改为yes</li><li>将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)</li><li>恢复：重启redis然后重新加载</li></ul></li><li>异常恢复<ul><li>修改默认的appendonly no，改为yes</li><li>如遇到AOF文件损坏，通过<strong>/usr/local/bin/redis-check-aof—fix appendonly.aof</strong>进行恢复</li><li>备份被写坏的AOF文件</li><li>恢复：重启redis，然后重新加载</li></ul></li></ul><h4 id="AOF同步频率设置"><a href="#AOF同步频率设置" class="headerlink" title="AOF同步频率设置"></a>AOF同步频率设置</h4><p><code>appendfsync always</code></p><p>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p><p><code>appendfsync everysec</code></p><p>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p><p><code>appendfsync no</code></p><p>redis不主动进行同步，把同步时机交给操作系统。</p><h4 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="Rewrite压缩"></a>Rewrite压缩</h4><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</p><h5 id="重写原理，如何实现重写"><a href="#重写原理，如何实现重写" class="headerlink" title="重写原理，如何实现重写"></a>重写原理，如何实现重写</h5><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</p><p>no-appendfsync-on-rewrite：</p><p>如果 no-appendfsync-on-rewrite=yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</p><p>如果 no-appendfsync-on-rewrite=no, 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p><p>触发机制，何时重写</p><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</p><p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。 </p><p>auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）</p><p>auto-aof-rewrite-min-size：设置重写的基准值，最小文件64MB。达到这个值开始重写。</p><p>例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB</p><p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,</p><p>如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。 </p><h5 id="重写流程"><a href="#重写流程" class="headerlink" title="重写流程"></a>重写流程</h5><ol><li>bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</li><li>主进程fork出子进程执行重写操作，保证主进程不会阻塞。</li><li>子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</li><li>子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</li><li>使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</li></ol><p><img src="/2023/10/12/redis/redis/image-20231007202103812.png" alt="image-20231007202103812"></p><h4 id="AOF的优缺点"><a href="#AOF的优缺点" class="headerlink" title="AOF的优缺点"></a>AOF的优缺点</h4><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><p><img src="/2023/10/12/redis/redis/image-20231007202135307.png" alt="image-20231007202135307"></p><ul><li>备份机制更稳健，丢失数据概率更低。</li><li>可读的日志文本，通过操作AOF稳健，可以处理误操作。</li></ul><h5 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h5><ul><li>比起RDB占用更多的磁盘空间。</li><li>恢复备份速度要慢。</li><li>每次读写都同步的话，有一定的性能压力。</li><li>存在个别Bug，造成恢复不能。</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="/2023/10/12/redis/redis/image-20231007202253228.png" alt="image-20231007202253228"></p><h3 id="Redis持久化总结"><a href="#Redis持久化总结" class="headerlink" title="Redis持久化总结"></a>Redis持久化总结</h3><h4 id="RDB和AOF用哪个好？"><a href="#RDB和AOF用哪个好？" class="headerlink" title="RDB和AOF用哪个好？"></a>RDB和AOF用哪个好？</h4><p>官方推荐两个都启用。</p><p>如果对数据不敏感，可以选单独用RDB。</p><p>不建议单独用 AOF，因为可能会出现Bug。</p><p>如果只是做纯内存缓存，可以都不用。</p><h4 id="官网建议"><a href="#官网建议" class="headerlink" title="官网建议"></a>官网建议</h4><ul><li><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</p></li><li><p>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾. </p></li><li><p>Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大</p></li><li><p>只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</p></li><li><p>同时开启两种持久化方式</p><ul><li>在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</li></ul></li><li><p>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？ </p><ul><li>建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</li></ul></li><li><p>性能建议</p><ul><li><p>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</p><p>如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。</p><p>代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</p><p>只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。</p><p>默认超过原大小100%大小时重写可以改到适当的数值。</p></li></ul></li></ul><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><h3 id="什么是主从复制"><a href="#什么是主从复制" class="headerlink" title="什么是主从复制"></a>什么是主从复制</h3><p>主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，<strong>Master**</strong>以写为主，<strong><strong>Slave</strong></strong>以读为主**</p><h3 id="主从复制的作用"><a href="#主从复制的作用" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h3><ul><li>读写分离、性能扩展<ul><li>主机专门负责写操作、从机专门负责读操作</li></ul></li><li>容灾快速恢复<ul><li>多台从机，一台从机挂掉，其他从机继续提供服务</li></ul></li></ul><p><img src="/2023/10/12/redis/redis/image-20231007211732330.png" alt="image-20231007211732330"></p><h3 id="搭建一主多从"><a href="#搭建一主多从" class="headerlink" title="搭建一主多从"></a>搭建一主多从</h3><p> 实例：搭建一主两从的环境</p><p>基本设置</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">拷贝多个redis.conf文件include(写绝对路径)</span><br><span class="line">开启daemonize yes</span><br><span class="line">Pid文件名字pidfile</span><br><span class="line">指定端口port</span><br><span class="line">dump.rdb名字dbfilename</span><br><span class="line">Appendonly 关掉或者换名字</span><br></pre></td></tr></table></figure><h4 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h4><p>在当前根目录下新建<code>/myredis</code>文件夹，将<code>/etc/redis.conf</code>拷贝一份到该文件夹下</p><p><img src="/2023/10/12/redis/redis/image-20231007214520521.png" alt="image-20231007214520521"></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>关闭AOF持久化</p><p><img src="/2023/10/12/redis/redis/image-20231007214646835.png" alt="image-20231007214646835"></p><h4 id="新建三个配置文件"><a href="#新建三个配置文件" class="headerlink" title="新建三个配置文件"></a>新建三个配置文件</h4><p>三个redis服务占用不同端口号，分别定为6379，6380，6381</p><p>新建对应的三个配置文件</p><p><code>vim redis6379.conf</code></p><p><img src="/2023/10/12/redis/redis/image-20231007220148451.png" alt="image-20231007220148451"></p><p><code>vim redis6380.conf</code></p><p><img src="/2023/10/12/redis/redis/image-20231007220132529.png" alt="image-20231007220132529"></p><p><code>vim redis6381.conf</code></p><p><img src="/2023/10/12/redis/redis/image-20231007220117270.png" alt="image-20231007220117270"></p><h4 id="分别启动这三个redis服务"><a href="#分别启动这三个redis服务" class="headerlink" title="分别启动这三个redis服务"></a>分别启动这三个redis服务</h4><p><img src="/2023/10/12/redis/redis/image-20231007220035267.png" alt="image-20231007220035267"></p><h4 id="查看三台redis服务器的运行情况"><a href="#查看三台redis服务器的运行情况" class="headerlink" title="查看三台redis服务器的运行情况"></a>查看三台redis服务器的运行情况</h4><p><img src="/2023/10/12/redis/redis/image-20231007220328922.png" alt="image-20231007220328922"></p><p><img src="/2023/10/12/redis/redis/image-20231007220339750.png" alt="image-20231007220339750"></p><p><img src="/2023/10/12/redis/redis/image-20231007220351649.png" alt="image-20231007220351649"></p><h4 id="配置从机"><a href="#配置从机" class="headerlink" title="配置从机"></a>配置从机</h4><p>上述三台redis服务器均默认为主机</p><p>配置其中两台为从机(配置端口6380、6381为从机)</p><p><code>slaveof &lt;ip&gt;&lt;port&gt;</code>成为某个实例的从服务器</p><p><img src="/2023/10/12/redis/redis/image-20231007220608137.png" alt="image-20231007220608137"></p><p><img src="/2023/10/12/redis/redis/image-20231007220631212.png" alt="image-20231007220631212"></p><h4 id="主机上写数据，从机上可读"><a href="#主机上写数据，从机上可读" class="headerlink" title="主机上写数据，从机上可读"></a>主机上写数据，从机上可读</h4><p><img src="/2023/10/12/redis/redis/image-20231007220857275.png" alt="image-20231007220857275"></p><p><img src="/2023/10/12/redis/redis/image-20231007220908612.png" alt="image-20231007220908612"></p><p><img src="/2023/10/12/redis/redis/image-20231007220918387.png" alt="image-20231007220918387"></p><h4 id="从机上写数据会报错"><a href="#从机上写数据会报错" class="headerlink" title="从机上写数据会报错"></a>从机上写数据会报错</h4><p><img src="/2023/10/12/redis/redis/image-20231007220943905.png" alt="image-20231007220943905"></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h4><p><img src="/2023/10/12/redis/redis/image-20231008105716715.png" alt="image-20231008105716715"></p><h6 id="Q：切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制-比如从k4进来，那之前的k1-k2-k3是否也可以复制？"><a href="#Q：切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制-比如从k4进来，那之前的k1-k2-k3是否也可以复制？" class="headerlink" title="Q：切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的k1,k2,k3是否也可以复制？"></a>Q：切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的k1,k2,k3是否也可以复制？</h6><ul><li>从服务器挂掉之后重启，会默认为主服务器，需要手动设置重新加入主服务器</li><li>从服务器断开之后，会重头开始复制，断开之前的数据都会复制</li></ul><p><strong>实例</strong></p><ol><li><p>断开端口号6381的从机</p><p><img src="/2023/10/12/redis/redis/image-20231008110630270.png" alt="image-20231008110630270"></p></li><li><p>在主机中新增内容</p><p><img src="/2023/10/12/redis/redis/image-20231008110807563.png" alt="image-20231008110807563"></p></li><li><p>重启挂掉的端口号6381的从机</p><p><img src="/2023/10/12/redis/redis/image-20231008111024970.png" alt="image-20231008111024970"></p></li><li><p>加重启的6381加入主机，成为6379的从机</p><p><img src="/2023/10/12/redis/redis/image-20231008111137378.png" alt="image-20231008111137378"></p></li></ol><h6 id="Q：从机是否可以写？set可否？"><a href="#Q：从机是否可以写？set可否？" class="headerlink" title="Q：从机是否可以写？set可否？"></a>Q：从机是否可以写？set可否？</h6><p>从机只允许读，不允许写，写会报错</p><h6 id="Q：主机shutdown后情况如何？从机是上位还是原地待命？"><a href="#Q：主机shutdown后情况如何？从机是上位还是原地待命？" class="headerlink" title="Q：主机shutdown后情况如何？从机是上位还是原地待命？"></a>Q：主机shutdown后情况如何？从机是上位还是原地待命？</h6><ul><li>主服务器挂掉之后，从服务器不做任何操作，并能够知悉主服务器挂掉了</li><li>主服务器重启，又会回到主服务器状态，且原始从服务器不变</li></ul><p><strong>实例</strong></p><ol><li><p>挂掉端口号6379的主服务器</p><p><img src="/2023/10/12/redis/redis/image-20231008111732629.png" alt="image-20231008111732629"></p></li><li><p>查看从服务器状态</p><p><img src="/2023/10/12/redis/redis/image-20231008111755713.png" alt="image-20231008111755713"></p><p><img src="/2023/10/12/redis/redis/image-20231008111837454.png" alt="image-20231008111837454"></p></li><li><p>重启6379主服务器，查看状态信息</p><p><img src="/2023/10/12/redis/redis/image-20231008111935927.png" alt="image-20231008111935927"></p><p><img src="/2023/10/12/redis/redis/image-20231008111954792.png" alt="image-20231008111954792"></p><p><img src="/2023/10/12/redis/redis/image-20231008112016451.png" alt="image-20231008112016451"></p></li></ol><h6 id="Q：主机又回来了后，主机新增记录，从机还能否顺利复制？"><a href="#Q：主机又回来了后，主机新增记录，从机还能否顺利复制？" class="headerlink" title="Q：主机又回来了后，主机新增记录，从机还能否顺利复制？"></a>Q：主机又回来了后，主机新增记录，从机还能否顺利复制？</h6><ul><li>从机能顺利复制，主机挂掉过程中，从机不做任何操作</li></ul><p><strong>实例</strong></p><p><img src="/2023/10/12/redis/redis/image-20231008112158235.png" alt="image-20231008112158235"></p><p><img src="/2023/10/12/redis/redis/image-20231008112211450.png" alt="image-20231008112211450"></p><h6 id="Q：其中一台从机down后情况如何？依照原有它能跟上大部队吗？"><a href="#Q：其中一台从机down后情况如何？依照原有它能跟上大部队吗？" class="headerlink" title="Q：其中一台从机down后情况如何？依照原有它能跟上大部队吗？"></a>Q：其中一台从机down后情况如何？依照原有它能跟上大部队吗？</h6><p>从机down掉之后，重启加入主机，会复制主机所有内容</p><h4 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h4><p>背景：从机数目较少时，可以依靠主机直接管理，但是从机数目较多时，主机无法管理，此时就应采取分层分组的模式</p><p>薪火相传：</p><p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用 slaveof  &lt;ip&gt;&lt;port&gt;</span><br><span class="line">中途变更转向:会清除之前的数据，重新建立拷贝最新的</span><br><span class="line">风险是一旦某个slave宕机，后面的slave都没法备份</span><br><span class="line">主机挂了，从机还是从机，无法写数据了</span><br></pre></td></tr></table></figure><p><img src="/2023/10/12/redis/redis/image-20231008142222721.png" alt="image-20231008142222721"></p><p><strong>实例</strong></p><p>6380作为6379的从机，6381作为6380的从机</p><p><img src="/2023/10/12/redis/redis/image-20231008142707933.png" alt="image-20231008142707933"></p><p><img src="/2023/10/12/redis/redis/image-20231008142739230.png" alt="image-20231008142739230"></p><p><img src="/2023/10/12/redis/redis/image-20231008142809123.png" alt="image-20231008142809123"></p><h4 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h4><p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</p><p>用<code>slaveof no one</code>  将从机变为主机。</p><p><img src="/2023/10/12/redis/redis/image-20231008143105500.png" alt="image-20231008143105500"></p><p><img src="/2023/10/12/redis/redis/image-20231008143153298.png" alt="image-20231008143153298"></p><p><img src="/2023/10/12/redis/redis/image-20231008143205287.png" alt="image-20231008143205287"></p><h3 id="主从复制的复制原理"><a href="#主从复制的复制原理" class="headerlink" title="主从复制的复制原理"></a>主从复制的复制原理</h3><ul><li>Slave启动成功连接到master后会发送一个sync命令</li><li>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</li><li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li><li>但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</li></ul><p><img src="/2023/10/12/redis/redis/image-20231008112601208.png" alt="image-20231008112601208"></p><h3 id="哨兵模式-sentinel"><a href="#哨兵模式-sentinel" class="headerlink" title="哨兵模式(sentinel)"></a>哨兵模式(sentinel)</h3><h4 id="什么是哨兵模式"><a href="#什么是哨兵模式" class="headerlink" title="什么是哨兵模式"></a>什么是哨兵模式</h4><p><strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><p><img src="/2023/10/12/redis/redis/image-20231008143524313.png" alt="image-20231008143524313"></p><h4 id="如何开启哨兵模式"><a href="#如何开启哨兵模式" class="headerlink" title="如何开启哨兵模式"></a>如何开启哨兵模式</h4><ol><li><h6 id="启动三台redis主机，端口号分别为6379，6380，6381调整其为一主二从模式，6379作为6380和6381的主机"><a href="#启动三台redis主机，端口号分别为6379，6380，6381调整其为一主二从模式，6379作为6380和6381的主机" class="headerlink" title="启动三台redis主机，端口号分别为6379，6380，6381调整其为一主二从模式，6379作为6380和6381的主机"></a>启动三台redis主机，端口号分别为6379，6380，6381调整其为一主二从模式，6379作为6380和6381的主机</h6><p><img src="/2023/10/12/redis/redis/image-20231008155130842.png" alt="image-20231008155130842"></p></li><li><p>在自定义的文件夹<code>~/myredis</code>中新建文件<code>sentinel.conf</code>，用于哨兵的配置</p></li><li><p>配置哨兵，在<code>~/myredis/sentinel.conf</code>中填写以下内容</p><p><code>sentinel monitor mymaster 127.0.0.1 6379 1</code></p><p>其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。 </p><p><img src="/2023/10/12/redis/redis/image-20231008151210539.png" alt="image-20231008151210539"></p></li><li><p>启动哨兵</p><p>执行<code>redis-sentinel sentinel.conf</code></p><p><img src="/2023/10/12/redis/redis/image-20231008155318530.png" alt="image-20231008155318530"></p></li><li><p>主机挂掉之后，会从从机里面选取新的主机</p><ul><li>(大概10秒左右可以看到哨兵窗口日志，切换了新的主机)</li><li>原主机如果再次重启，会变成从机</li></ul><p><img src="/2023/10/12/redis/redis/image-20231008155606022.png" alt="image-20231008155606022"></p></li><li><p>重启以前的主机，会从成为新选举主机的从机</p><p><img src="/2023/10/12/redis/redis/image-20231008191241413.png" alt="image-20231008191241413"></p></li></ol><h4 id="存在问题：复制延时"><a href="#存在问题：复制延时" class="headerlink" title="存在问题：复制延时"></a>存在问题：复制延时</h4><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><p><img src="/2023/10/12/redis/redis/image-20231008191359973.png" alt="image-20231008191359973"></p><ul><li><p>优先级在redis.conf中默认：replica-priority 100，值越小优先级越高</p><p><img src="/2023/10/12/redis/redis/image-20231008191651799.png" alt="image-20231008191651799"></p></li><li><p>偏移量是指获得原主机数据最全的</p></li><li><p>每个redis实例启动后都会随机生成一个40位的runid</p></li></ul><h4 id="Java代码实现哨兵模式"><a href="#Java代码实现哨兵模式" class="headerlink" title="Java代码实现哨兵模式"></a>Java代码实现哨兵模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> JedisSentinelPool jedisSentinelPool=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedisFromSentinel</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(jedisSentinelPool==<span class="literal">null</span>)&#123;</span><br><span class="line">            Set&lt;String&gt; sentinelSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            sentinelSet.add(<span class="string">&quot;192.168.11.103:26379&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">            jedisPoolConfig.setMaxTotal(<span class="number">10</span>); <span class="comment">//最大可用连接数</span></span><br><span class="line">jedisPoolConfig.setMaxIdle(<span class="number">5</span>); <span class="comment">//最大闲置连接数</span></span><br><span class="line">jedisPoolConfig.setMinIdle(<span class="number">5</span>); <span class="comment">//最小闲置连接数</span></span><br><span class="line">jedisPoolConfig.setBlockWhenExhausted(<span class="literal">true</span>); <span class="comment">//连接耗尽是否等待</span></span><br><span class="line">jedisPoolConfig.setMaxWaitMillis(<span class="number">2000</span>); <span class="comment">//等待时间</span></span><br><span class="line">jedisPoolConfig.setTestOnBorrow(<span class="literal">true</span>); <span class="comment">//取连接的时候进行一下测试 ping pong</span></span><br><span class="line">jedisSentinelPool=<span class="keyword">new</span> <span class="title class_">JedisSentinelPool</span>(<span class="string">&quot;mymaster&quot;</span>,sentinelSet,jedisPoolConfig);</span><br><span class="line"><span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis集群操作"><a href="#Redis集群操作" class="headerlink" title="Redis集群操作"></a>Redis集群操作</h2><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><p>容量不够，redis如何进行扩容？</p><p>并发写操作， redis如何分摊？</p><p>另外，主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</p><p>之前通过<strong>代理主机</strong>来解决，但是redis3.0中提供了解决方案。就是<strong>无中心化集群配置</strong>。</p><p><strong>代理主机</strong></p><p><img src="/2023/10/12/redis/redis/image-20231008205652222.png" alt="image-20231008205652222"></p><p><strong>无中心化集群</strong></p><p><img src="/2023/10/12/redis/redis/image-20231008205740250.png" alt="image-20231008205740250"></p><h3 id="什么是集群"><a href="#什么是集群" class="headerlink" title="什么是集群"></a>什么是集群</h3><p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。</p><p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><h3 id="Redis集群的搭建"><a href="#Redis集群的搭建" class="headerlink" title="Redis集群的搭建"></a>Redis集群的搭建</h3><p>启动6个Redis实例，端口号分别是6379，6380，6381，6389，6390，6391</p><h4 id="配置redis基本信息"><a href="#配置redis基本信息" class="headerlink" title="配置redis基本信息"></a>配置redis基本信息</h4><ul><li><p>开启daemonize yes</p></li><li><p>Pid文件名字</p></li><li><p>指定端口</p></li><li><p>Dump.rdb名字</p></li><li><p>Appendonly 关掉或者换名字</p></li><li><p>cluster-enabled yes  打开集群模式</p></li><li><p>cluster-config-file nodes-6379.conf 设定节点配置文件名</p></li><li><p>cluster-node-timeout 15000  设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</p></li></ul><p>配置信息示例</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">include /home/bigdata/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">pidfile &quot;/var/run/redis<span class="built_in">_</span>6379.pid&quot;</span><br><span class="line">dbfilename &quot;dump6379.rdb&quot;</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><p><img src="/2023/10/12/redis/redis/image-20231009201429852.png" alt="image-20231009201429852"></p><p><img src="/2023/10/12/redis/redis/image-20231009201721949.png" alt="image-20231009201721949"></p><h4 id="启动6个redis服务"><a href="#启动6个redis服务" class="headerlink" title="启动6个redis服务"></a>启动6个redis服务</h4><p><img src="/2023/10/12/redis/redis/image-20231009201851047.png" alt="image-20231009201851047"></p><h4 id="将六个节点合成一个集群"><a href="#将六个节点合成一个集群" class="headerlink" title="将六个节点合成一个集群"></a>将六个节点合成一个集群</h4><p>组合之前，请确保所有redis实例启动后，nodes-xxxx.conf文件都生成正常。</p><p><img src="/2023/10/12/redis/redis/image-20231009201956060.png" alt="image-20231009201956060"></p><p>集群合体</p><p><code>cd /opt/redis-6.2.1/src</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 真实IP地址:6379 真实IP地址:6380 真实IP地址:6381 真实IP地址:6389 真实IP地址:6390 真实IP地址:6391</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis-cli --cluster create --cluster-replicas 1 192.168.80.129:6379 192.168.80.129:6380 192.168.80.129:6381 192.168.80.129:6389 192.168.80.129:6390 192.168.80.129:6391</span><br></pre></td></tr></table></figure><ul><li><p>此处不要用127.0.0.1， 请用真实IP地址</p></li><li><p>—replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组</p></li></ul><p><img src="/2023/10/12/redis/redis/image-20231009202406972.png" alt="image-20231009202406972"></p><p><img src="/2023/10/12/redis/redis/image-20231009202436031.png" alt="image-20231009202436031"></p><h4 id="主机连接"><a href="#主机连接" class="headerlink" title="主机连接"></a>主机连接</h4><p>普通方式登录</p><p>可能直接进入读主机，存储数据时，会出现MOVED重定向操作。所以，应该以集群方式登录。</p><h5 id="c-采用集群策略连接，设置数据会自动切换到相应的写主机"><a href="#c-采用集群策略连接，设置数据会自动切换到相应的写主机" class="headerlink" title="-c  采用集群策略连接，设置数据会自动切换到相应的写主机"></a><strong>-c</strong>  采用集群策略连接，设置数据会自动切换到相应的写主机</h5><p><img src="/2023/10/12/redis/redis/image-20231009203243954.png" alt="image-20231009203243954"></p><h4 id="通过cluster-nodes命令查看集群信息"><a href="#通过cluster-nodes命令查看集群信息" class="headerlink" title="通过cluster nodes命令查看集群信息"></a>通过<code>cluster nodes</code>命令查看集群信息</h4><p><img src="/2023/10/12/redis/redis/image-20231009203408052.png" alt="image-20231009203408052"></p><h4 id="redis-cluster-如何分配这六个节点"><a href="#redis-cluster-如何分配这六个节点" class="headerlink" title="redis cluster 如何分配这六个节点?"></a>redis cluster <strong>如何分配这六个节点?</strong></h4><p>一个集群至少要有三个主节点。</p><p>选项<code>--cluster-replicas 1</code>表示我们希望为集群中的每个主节点创建一个从节点。</p><p>分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。</p><h4 id="什么是slots"><a href="#什么是slots" class="headerlink" title="什么是slots"></a>什么是slots</h4><p><strong><img src="/2023/10/12/redis/redis/image-20231009204457031.png" alt="image-20231009204457031"></strong></p><p>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， </p><p>集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>集群中的每个节点负责处理一部分插槽，插槽编号为0~16383</p><p>比如：下图所示</p><ul><li>6379端口主机负责的插槽：0~5460</li><li>6380端口主机负责的插槽：5461~10922</li><li>6381端口主机负责的插槽：10923~16383</li></ul><p><img src="/2023/10/12/redis/redis/image-20231009205123186.png" alt="image-20231009205123186"></p><p>插槽的作用：</p><p>比如执行命令<code>set k1 v1</code>会根据<code>k1</code>的CRC16计算其所属的插槽编号，来决定其所写入的主机</p><p>目的是为了尽可能平均地将所有值均摊到集群中各个主机，减小压力</p><h4 id="在集群中录入值"><a href="#在集群中录入值" class="headerlink" title="在集群中录入值"></a>在集群中录入值</h4><ul><li><p>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。</p></li><li><p>redis-cli客户端提供了 –c 参数实现自动重定向。</p></li></ul><p><strong>实例</strong></p><p><code>redis-cli -c -p 6379</code>登入，录入值，会自动重定向到插槽对应的主机</p><p><img src="/2023/10/12/redis/redis/image-20231009210641203.png" alt="image-20231009210641203"></p><p>不在一个插槽内下的键值，不能使用<code>mget</code>、<code>mset</code>等多键操作</p><p><img src="/2023/10/12/redis/redis/image-20231009210809303.png" alt="image-20231009210809303"></p><p>可以通过<strong>组</strong>的方式来进行多键操作，通过<code>&#123;&#125;</code>来定义组的概念，此时插槽的计算是根据组名来获取的，同一组下的所有键值对会放入同意插槽</p><p><img src="/2023/10/12/redis/redis/image-20231009211005097.png" alt="image-20231009211005097"></p><h4 id="集群中值的查询"><a href="#集群中值的查询" class="headerlink" title="集群中值的查询"></a>集群中值的查询</h4><ul><li><code>cluster keyslot 键名</code>:查询键所在插槽</li><li><code>cluster countkeysinslot 插槽号</code>：查询对应插槽键的数目</li><li><code>cluster getkeysinslot 插槽号 数目</code>：列出指定插槽下指定数目的键值列表</li></ul><p><img src="/2023/10/12/redis/redis/image-20231009211459946.png" alt="image-20231009211459946"></p><h4 id="故障恢复-1"><a href="#故障恢复-1" class="headerlink" title="故障恢复"></a>故障恢复</h4><h5 id="如果主节点下线-挂掉了-，从节点是否能自动升为主节点？"><a href="#如果主节点下线-挂掉了-，从节点是否能自动升为主节点？" class="headerlink" title="如果主节点下线(挂掉了)，从节点是否能自动升为主节点？"></a>如果主节点下线(挂掉了)，从节点是否能自动升为主节点？</h5><p>Q：从节点会自动升为主节点</p><p>如图，6379挂掉了，它的从机6390会自动升为主机</p><p><img src="/2023/10/12/redis/redis/image-20231009212351701.png" alt="image-20231009212351701"></p><h5 id="主节点恢复之后，从主关系会如何？"><a href="#主节点恢复之后，从主关系会如何？" class="headerlink" title="主节点恢复之后，从主关系会如何？"></a>主节点恢复之后，从主关系会如何？</h5><p>Q：主节点恢复之后，会自动变为从机(与哨兵模式类似)</p><p>如图：6379服务重启，会自动成为6390的从机</p><p><img src="/2023/10/12/redis/redis/image-20231009212741427.png" alt="image-20231009212741427"></p><p><img src="/2023/10/12/redis/redis/image-20231009212815643.png" alt="image-20231009212815643"></p><h5 id="如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续"><a href="#如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续" class="headerlink" title="如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?"></a>如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?</h5><p>redis.conf中的参数 cluster-require-full-coverage</p><ul><li>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为yes ，那么 ，整个集群都挂掉</li><li>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为no ，那么，该插槽数据全都不能使用，也无法存储。</li></ul><p><img src="/2023/10/12/redis/redis/image-20231009212931770.png" alt="image-20231009212931770"></p><h4 id="集群的Jedis开发"><a href="#集群的Jedis开发" class="headerlink" title="集群的Jedis开发"></a>集群的Jedis开发</h4><p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。</p><p>无中心化主从集群。无论从哪台主机写的数据，其他主机上都能读到数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jedis集群操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisClusterDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建JedisCluster对象</span></span><br><span class="line">        <span class="type">HostAndPort</span> <span class="variable">hostAndPort</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.80.129&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="type">JedisCluster</span> <span class="variable">jedisCluster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisCluster</span>(hostAndPort);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.进行相关操作</span></span><br><span class="line">        jedisCluster.set(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;China&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> jedisCluster.get(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Redis集群的优劣"><a href="#Redis集群的优劣" class="headerlink" title="Redis集群的优劣"></a>Redis集群的优劣</h4><h4 id="Redis集群的优势"><a href="#Redis集群的优势" class="headerlink" title="Redis集群的优势"></a>Redis集群的优势</h4><ul><li><p>实现扩容</p></li><li><p>分摊压力</p></li><li><p>无中心配置相对简单</p></li></ul><h4 id="Redis集群的劣势"><a href="#Redis集群的劣势" class="headerlink" title="Redis集群的劣势"></a>Redis集群的劣势</h4><p>多键操作是不被支持的 </p><p>多键的Redis事务是不被支持的。lua脚本不被支持</p><p>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p><h2 id="Redis应用问题及其对应的解决方案"><a href="#Redis应用问题及其对应的解决方案" class="headerlink" title="Redis应用问题及其对应的解决方案"></a>Redis应用问题及其对应的解决方案</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><p><img src="/2023/10/12/redis/redis/image-20231010152950287.png" alt="image-20231010152950287"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p>解决方案</p><h5 id="方案一：对空值缓存"><a href="#方案一：对空值缓存" class="headerlink" title="方案一：对空值缓存"></a>方案一：<strong>对空值缓存</strong></h5><p>如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p><h5 id="方案二：设置可访问的名单（白名单）"><a href="#方案二：设置可访问的名单（白名单）" class="headerlink" title="方案二：设置可访问的名单（白名单）"></a>方案二：<strong>设置可访问的名单（白名单）</strong></h5><p>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p><h5 id="方案三：采用布隆过滤器"><a href="#方案三：采用布隆过滤器" class="headerlink" title="方案三：采用布隆过滤器"></a>方案三：<strong>采用布隆过滤器</strong></h5><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。</p><p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力</p><h5 id="方案四：进行实时监控"><a href="#方案四：进行实时监控" class="headerlink" title="方案四：进行实时监控"></a>方案四：<strong>进行实时监控</strong></h5><p>当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p><img src="/2023/10/12/redis/redis/image-20231010161714173.png" alt="image-20231010161714173"></p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。</p><h5 id="方案一：预先设置热门数据"><a href="#方案一：预先设置热门数据" class="headerlink" title="方案一：预先设置热门数据"></a>方案一：<strong>预先设置热门数据</strong></h5><p>在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p><h5 id="方案二：实时调整"><a href="#方案二：实时调整" class="headerlink" title="方案二：实时调整"></a>方案二：<strong>实时调整</strong></h5><p>现场监控哪些数据热门，实时调整key的过期时长</p><h5 id="方案三：使用锁"><a href="#方案三：使用锁" class="headerlink" title="方案三：使用锁"></a>方案三：<strong>使用锁</strong></h5><ol><li>就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db</li><li>先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key</li><li>当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；</li><li>当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</li></ol><p><img src="/2023/10/12/redis/redis/image-20231010161951828.png" alt="image-20231010161951828"></p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key</p><p>正常访问</p><p><img src="/2023/10/12/redis/redis/image-20231010165116024.png" alt="image-20231010165116024"></p><p>缓存失效瞬间</p><p><img src="/2023/10/12/redis/redis/image-20231010165134933.png" alt="image-20231010165134933"></p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p><h5 id="方案一：构建多级缓存架构"><a href="#方案一：构建多级缓存架构" class="headerlink" title="方案一：构建多级缓存架构"></a>方案一：<strong>构建多级缓存架构</strong></h5><p>nginx缓存 + redis缓存 +其他缓存（ehcache等）</p><h5 id="方案二：使用锁或队列"><a href="#方案二：使用锁或队列" class="headerlink" title="方案二：使用锁或队列"></a>方案二：<strong>使用锁或队列</strong></h5><p>用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</p><h5 id="方案三：设置过期标志更新缓存"><a href="#方案三：设置过期标志更新缓存" class="headerlink" title="方案三：设置过期标志更新缓存"></a>方案三：<strong>设置过期标志更新缓存</strong></h5><p>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</p><h5 id="方案四：将缓存失效时间分散开"><a href="#方案四：将缓存失效时间分散开" class="headerlink" title="方案四：将缓存失效时间分散开"></a>方案四：<strong>将缓存失效时间分散开</strong></h5><p>比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><ol><li><p>基于数据库实现分布式锁</p></li><li><p>基于缓存（Redis等）</p></li><li><p>基于Zookeeper</p></li></ol><p>每一种分布式锁解决方案都有各自的优缺点：</p><ol><li><p>性能：redis最高</p></li><li><p>可靠性：zookeeper最高</p></li></ol><p>这里，我们就基于redis实现分布式锁。</p><h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="使用Redis实现分布锁"><a href="#使用Redis实现分布锁" class="headerlink" title="使用Redis实现分布锁"></a>使用Redis实现分布锁</h5><p>redis命令<code>setnx key value</code>自带锁，只有当key不存在时，才可以进行操作</p><p>因此可以通过<code>setnx</code>对操作进行上锁，通过<code>del key</code>释放锁</p><p>问题1：如果锁长时间无法得到释放，该怎么办？</p><p>A：设置锁之后，对对应的key设置过期时间</p><p><code>setnx key val</code></p><p><code>expire key 过期时间</code></p><p><img src="/2023/10/12/redis/redis/image-20231010172019006.png" alt="image-20231010172019006"></p><p>问题2：设置锁与设置过期时间两者是分散进行的，无法保证原子性，如果加锁之后出现故障，无法设置过期时间怎么办？</p><p>A：<code>set key val nx ex 过期时间</code>：一条命令完成两个功能，保证操作的原子性</p><p><img src="/2023/10/12/redis/redis/image-20231010172217270.png" alt="image-20231010172217270"></p><p><img src="/2023/10/12/redis/redis/image-20231010171400182.png" alt="image-20231010171400182"></p><h4 id="Jedis实现分布式锁"><a href="#Jedis实现分布式锁" class="headerlink" title="Jedis实现分布式锁"></a>Jedis实现分布式锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redisLock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取对应的锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2.如果成功获取锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>+val+<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(val))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span>  <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;&quot;</span>+val);</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line">            <span class="comment">//操作结束，释放锁</span></span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//获取锁失败</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                redisLock();<span class="comment">//再次发送请求</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用ab工具模拟并发测试</p><p><code>ab -n 1000 -c 50 115.156.245.63:8080/redisLock</code></p><p><img src="/2023/10/12/redis/redis/image-20231010191118792.png" alt="image-20231010191118792"></p><p>查看redis数据库</p><p><img src="/2023/10/12/redis/redis/image-20231010191139280.png" alt="image-20231010191139280"></p><p>1000次请求，num值变成了1000，加锁成功</p><h4 id="Jedis实现分布式锁——-设置锁的过期时间"><a href="#Jedis实现分布式锁——-设置锁的过期时间" class="headerlink" title="Jedis实现分布式锁——-设置锁的过期时间"></a>Jedis实现分布式锁——-设置锁的过期时间</h4><p>背景：如果<code>setnx</code>刚好获取到锁，业务逻辑出现异常，导致锁无法释放；如果将<code>setnx</code>与<code>expire</code>分开执行，无法保证原子性操作，中间出现异常，也会导致锁无法释放</p><p>解决方法<code>set key val nx ex 过期时间</code>，设置锁的同时设置过期时间</p><p><img src="/2023/10/12/redis/redis/image-20231010211619148.png" alt="image-20231010211619148"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redisLock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取对应的锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, <span class="number">1</span>,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//2.如果成功获取锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>+val+<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(val))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span>  <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;&quot;</span>+val);</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line">            <span class="comment">//操作结束，释放锁</span></span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//获取锁失败</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                redisLock();<span class="comment">//再次发送请求</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用ab工具模拟并发测试</p><p><img src="/2023/10/12/redis/redis/image-20231010211800069.png" alt="image-20231010211800069"></p><p>查看<code>redis</code>，压力测试同样也没有问题</p><p><img src="/2023/10/12/redis/redis/image-20231010212303310.png" alt="image-20231010212303310"></p><h4 id="设置锁的UUID，防止误删"><a href="#设置锁的UUID，防止误删" class="headerlink" title="设置锁的UUID，防止误删"></a>设置锁的UUID，防止误删</h4><p><strong>背景：</strong></p><p>如果业务逻辑的执行时间是7s。执行流程如下</p><ol><li><p>index1业务逻辑没执行完，3秒后锁被自动释放。</p></li><li><p>index2获取到锁，执行业务逻辑，3秒后锁被自动释放。</p></li><li><p>index3获取到锁，执行业务逻辑</p></li><li><p>index1业务逻辑执行完成，开始调用del释放锁，这时释放的是index3的锁，导致index3的业务只执行1s就被别人释放。</p></li></ol><p>最终等于没锁的情况。 </p><p>解决：setnx获取锁时，设置一个指定的唯一值（例如：uuid）；释放前获取这个值，判断是否自己的锁</p><p><img src="/2023/10/12/redis/redis/image-20231010213117188.png" alt="image-20231010213117188"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redisLock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//0.随机初始化当前用的UUID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//1.获取对应的锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//2.如果成功获取锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>+val+<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(val))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span>  <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;&quot;</span>+val);</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line">            <span class="comment">//操作结束，释放锁</span></span><br><span class="line">            <span class="comment">//释放锁之前，校验uuid的值，防止锁被误删</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">lockId</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(lockId!=<span class="literal">null</span> &amp;&amp; uuid.equals((String) lockId))&#123;</span><br><span class="line">                redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//获取锁失败</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                redisLock();<span class="comment">//再次发送请求</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作缺乏原子性"><a href="#删除操作缺乏原子性" class="headerlink" title="删除操作缺乏原子性"></a>删除操作缺乏原子性</h4><h5 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h5><ol><li><p>index1执行删除时，查询到的lock值确实和uuid相等</p></li><li><p>index1执行删除前，lock刚好过期时间已到，被redis自动释放，在redis中没有了lock，没有了锁。</p></li><li><p>index2获取了lock，index2线程获取到了cpu的资源，开始执行方法</p></li><li><p>index1执行删除，此时会把index2的lock删除</p></li></ol><p>index1 因为已经在方法中了，所以不需要重新上锁。index1有执行的权限。index1已经比较完成了，这个时候，开始执行</p><p>删除的却是index2的锁！</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p><strong>LUA脚本保证删除的原子性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redisLock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//0.随机初始化当前用的UUID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//1.获取对应的锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//2.如果成功获取锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>+val+<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(val))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span>  <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;&quot;</span>+val);</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line">            <span class="comment">//操作结束，释放锁</span></span><br><span class="line">            <span class="comment">// 定义lua 脚本,将uuid值的判断和lock的释放绑定成原子操作</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">            <span class="comment">// 使用redis执行lua执行</span></span><br><span class="line">            DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">            redisScript.setScriptText(script);</span><br><span class="line">            <span class="comment">// 设置一下返回值类型 为Long</span></span><br><span class="line">            <span class="comment">// 因为删除判断的时候，返回的0,给其封装为数据类型。如果不封装那么默认返回String 类型，</span></span><br><span class="line">            <span class="comment">// 那么返回字符串与0 会有发生错误。</span></span><br><span class="line">            redisScript.setResultType(Long.class);</span><br><span class="line">            <span class="comment">// 第一个要是script 脚本 ，第二个需要判断的key，第三个就是key所对应的值。</span></span><br><span class="line">            redisTemplate.execute(redisScript, Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//获取锁失败</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                redisLock();<span class="comment">//再次发送请求</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分布式锁总结"><a href="#分布式锁总结" class="headerlink" title="分布式锁总结"></a>分布式锁总结</h4><p>为了确保分布式锁可用，我们至少要确保锁的实现同时<strong>满足以下四个条件</strong>：</p><ul><li><p>互斥性。在任意时刻，只有一个客户端能持有锁。</p></li><li><p>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p></li><li><p>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p></li><li><p>加锁和解锁必须具有原子性。</p></li></ul><h2 id="Redis6-0的新功能"><a href="#Redis6-0的新功能" class="headerlink" title="Redis6.0的新功能"></a>Redis6.0的新功能</h2><h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>Redis ACL是Access Control List（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p><p>在Redis 5版本之前，Redis 安全规则只有密码控制 还有通过rename 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供ACL的功能对用户进行更细粒度的权限控制 ：</p><p>（1）接入权限:用户名和密码 </p><p>（2）可以执行的命令 </p><p>（3）可以操作的 KEY</p><p>参考官网：<a href="https://redis.io/topics/acl">https://redis.io/topics/acl</a></p><h4 id="常用命令-8"><a href="#常用命令-8" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="使用acl-list命令展现用户权限列表"><a href="#使用acl-list命令展现用户权限列表" class="headerlink" title="使用acl list命令展现用户权限列表"></a>使用acl list命令展现用户权限列表</h5><p><img src="/2023/10/12/redis/redis/image-20231010221420493.png" alt="image-20231010221420493"></p><h5 id="使用acl-cat命令，查看添加权限指令类别"><a href="#使用acl-cat命令，查看添加权限指令类别" class="headerlink" title="使用acl cat命令，查看添加权限指令类别"></a>使用acl cat命令，查看添加权限指令类别</h5><p><img src="/2023/10/12/redis/redis/image-20231010221446730.png" alt="image-20231010221446730"></p><h5 id="加参数类型名可以查看类型下具体命令"><a href="#加参数类型名可以查看类型下具体命令" class="headerlink" title="加参数类型名可以查看类型下具体命令"></a>加参数类型名可以查看类型下具体命令</h5><p><img src="/2023/10/12/redis/redis/image-20231010221515083.png" alt="image-20231010221515083"></p><h5 id="使用acl-whoami命令查看当前用户"><a href="#使用acl-whoami命令查看当前用户" class="headerlink" title="使用acl whoami命令查看当前用户"></a>使用acl whoami命令查看当前用户</h5><p><img src="/2023/10/12/redis/redis/image-20231010221527717.png" alt="image-20231010221527717"></p><h5 id="使用acl-set-user命令创建和编辑用户"><a href="#使用acl-set-user命令创建和编辑用户" class="headerlink" title="使用acl set user命令创建和编辑用户"></a>使用<code>acl set user</code>命令创建和编辑用户</h5><h6 id="通过命令创建新用户默认权限-acl-set-user-user1"><a href="#通过命令创建新用户默认权限-acl-set-user-user1" class="headerlink" title="通过命令创建新用户默认权限:acl set user user1"></a>通过命令创建新用户默认权限:<code>acl set user user1</code></h6><p><img src="/2023/10/12/redis/redis/image-20231010221713248.png" alt="image-20231010221713248"></p><p>在上面的示例中，我根本没有指定任何规则。如果用户不存在，这将使用just created的默认属性来创建用户。如果用户已经存在，则上面的命令将不执行任何操作。</p><h6 id="设置有用户名、密码、ACL权限、并启用的用户"><a href="#设置有用户名、密码、ACL权限、并启用的用户" class="headerlink" title="设置有用户名、密码、ACL权限、并启用的用户"></a>设置有用户名、密码、ACL权限、并启用的用户</h6><p><code>acl set user user2 on &gt;password ~cached:* +get</code></p><p><img src="/2023/10/12/redis/redis/image-20231010221749393.png" alt="image-20231010221749393"></p><h6 id="切换用户，验证权限"><a href="#切换用户，验证权限" class="headerlink" title="切换用户，验证权限"></a>切换用户，验证权限</h6><p><code>auth 用户名 密码</code>切换用户</p><p><img src="/2023/10/12/redis/redis/image-20231010221759407.png" alt="image-20231010221759407"></p><h3 id="IO多线程"><a href="#IO多线程" class="headerlink" title="IO多线程"></a>IO多线程</h3><p>Redis6终于支撑多线程了，告别单线程了吗？</p><p>IO多线程其实指<strong>客户端交互部分</strong>的<strong>网络IO</strong>交互处理模块<strong>多线程</strong>，而非<strong>执行命令多线程</strong>。Redis6执行命令依然是单线程。</p><p> Redis采用：单线程+多路IO复用的形式</p><h3 id="工具支持-Cluster"><a href="#工具支持-Cluster" class="headerlink" title="工具支持 Cluster**"></a>工具支持<strong> </strong>Cluster**</h3><p>之前老版Redis想要搭集群需要单独安装ruby环境，Redis 5 将 redis-trib.rb 的功能集成到 redis-cli 。另外官方 redis-benchmark 工具开始支持 cluster 模式了，通过多线程的方式对多个分片进行压测</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>redis6.0主要知识点</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装与网络配置</title>
      <link href="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/09/07/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h1><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p>基于虚拟机<code>VMWare</code>在<code>windows</code>系统搭建<code>Linux</code>环境</p><h3 id="需要的软件"><a href="#需要的软件" class="headerlink" title="需要的软件"></a>需要的软件</h3><ul><li>虚拟机<code>VMWare</code></li><li><code>Centos镜像文件</code></li><li>SSH客户端<code>SecureCRT</code></li><li>文件传输工具<code>WinScp</code></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以上软件的百度网盘链接:</span><br><span class="line">链接：https://pan.baidu.com/s/1vpmwnmAcQL0rG906wl_NyQ </span><br><span class="line">提取码：oo34 </span><br><span class="line">--来自百度网盘超级会员V6的分享</span><br></pre></td></tr></table></figure><h3 id="虚拟机Linux安装"><a href="#虚拟机Linux安装" class="headerlink" title="虚拟机Linux安装"></a>虚拟机Linux安装</h3><ul><li><p>打开<code>VMWARE</code>软件</p><p><img src="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/image-20230906231148084.png" alt="image-20230906231148084"></p></li><li><p>加载对应的<code>CentOS</code>映像文件，并设置对应磁盘和内存大小</p><p><img src="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/image-20230906231231168.png" alt="image-20230906231231168"></p></li><li><p>配置完一个虚拟机，其他相同环境配置的环境可以借助<strong>快照克隆</strong>技术实现快速创建若干相同配置的虚拟机</p></li></ul><h3 id="虚拟机网络配置"><a href="#虚拟机网络配置" class="headerlink" title="虚拟机网络配置"></a>虚拟机网络配置</h3><p>安装后的虚拟机，进入<code>CentOS</code>，网络是不可用的，无法与宿主机和外部进行网络访问</p><p>我们需要将虚拟机系统的网络ip地址设置为静态，这样当作服务器连接时不会丢失</p><h5 id="网络适配器设置为NAT模式"><a href="#网络适配器设置为NAT模式" class="headerlink" title="网络适配器设置为NAT模式"></a>网络适配器设置为NAT模式</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点击：虚拟机-》设置-》网络适配器</span><br></pre></td></tr></table></figure><p><img src="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/image-20230907232001776.png" alt="image-20230907232001776"></p><h5 id="虚拟机Ip地址和网关设置"><a href="#虚拟机Ip地址和网关设置" class="headerlink" title="虚拟机Ip地址和网关设置"></a>虚拟机Ip地址和网关设置</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点击: 编辑-》虚拟网络编辑器</span><br></pre></td></tr></table></figure><p><img src="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/image-20230907232529388.png" alt="image-20230907232529388"></p><h6 id="更改子网地址"><a href="#更改子网地址" class="headerlink" title="更改子网地址"></a>更改子网地址</h6><p>子网地址前16位应该与主机保持一致，比如图中主机子网地址为<code>192.168.86.0</code>，则虚拟机子网地址可以设置为<code>192.168.xx.xx</code></p><p>本例中我们设置为<code>192.168.134.0</code></p><p><img src="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/image-20230907232603371.png" alt="image-20230907232603371"></p><h6 id="DHCP设置"><a href="#DHCP设置" class="headerlink" title="DHCP设置"></a>DHCP设置</h6><p>点击DHCP设置按钮，可以查看当前子网可以设置的IP地址范围，此虚拟机IP地址可以设置为此范围内的任意一个即可</p><p><img src="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/image-20230907232819056.png" alt="image-20230907232819056"></p><h6 id="网关设置"><a href="#网关设置" class="headerlink" title="网关设置"></a>网关设置</h6><p>点击NAT设置，可以查看网关地址，即<code>192.168.134.2</code></p><p><img src="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/image-20230907232936627.png" alt="image-20230907232936627"></p><h6 id="更改Centos的网络配置文件"><a href="#更改Centos的网络配置文件" class="headerlink" title="更改Centos的网络配置文件"></a>更改Centos的网络配置文件</h6><ul><li><p>切换到<code>/etc/sysconfig/network-scripts/</code>目录下</p><p><img src="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/image-20230907233300541.png" alt="image-20230907233300541"></p></li><li><p>修改网络配置文件<code>ifcfg-ens33</code></p><p><img src="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/image-20230907233644864.png" alt="image-20230907233644864"></p></li><li><p>保存配置文件、重启虚拟机即可</p><p>此时虚拟机IP地址即设置成了指定的值</p><p><img src="/2023/09/07/Linux%E5%9F%BA%E7%A1%80/image-20230907234020651.png" alt="image-20230907234020651"></p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/qq_41311691/article/details/124377318">资料一</a></p><p><a href="https://zhuanlan.zhihu.com/p/145102034">资料二</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="/2023/09/04/java_lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/09/04/java_lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p><code>Lambda</code>表达式是一个匿名函数，可以理解为一段可以传递的代码(将代码像数据一样进行传递)</p><h2 id="Lambda表达式的使用"><a href="#Lambda表达式的使用" class="headerlink" title="Lambda表达式的使用"></a>Lambda表达式的使用</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><code>-&gt;</code>：<code>Lambda</code>操作符或者箭头操作符</li><li><code>-&gt;左边</code>：<code>Lambda</code>形参列表(接口中抽象方法的形参列表)</li><li><code>-&gt;右边</code>：<code>Lambda</code>体(重写抽象方法的方法体)</li><li><code>Lambda</code>表达式本质上是接口的一个实例</li></ul><h2 id="Lambda表达式使用六种场景实例"><a href="#Lambda表达式使用六种场景实例" class="headerlink" title="Lambda表达式使用六种场景实例"></a>Lambda表达式使用六种场景实例</h2><h3 id="场景一：无参、无返回值"><a href="#场景一：无参、无返回值" class="headerlink" title="场景一：无参、无返回值"></a>场景一：无参、无返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建线程实例</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;We are Family&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        r1.run();</span><br><span class="line">        <span class="comment">//使用Lambada表达式进行改写</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;We are family Lambda&quot;</span>);</span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景二：Lambda表达式需要一个参数，但是没有返回值"><a href="#场景二：Lambda表达式需要一个参数，但是没有返回值" class="headerlink" title="场景二：Lambda表达式需要一个参数，但是没有返回值"></a>场景二：Lambda表达式需要一个参数，但是没有返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//lambda表达式有参无返回值</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> (String str) -&gt; System.out.println(str);</span><br><span class="line">        myInterface.func(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景三：数据类型可以省略，因为可由编译器推断得出，称之为类型推断"><a href="#场景三：数据类型可以省略，因为可由编译器推断得出，称之为类型推断" class="headerlink" title="场景三：数据类型可以省略，因为可由编译器推断得出，称之为类型推断"></a>场景三：数据类型可以省略，因为可由编译器推断得出，称之为类型推断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        MyInterface&lt;String&gt; myInterface = (str) -&gt; System.out.println(str);</span><br><span class="line">        myInterface.func(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(T str)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景四：Lambda表达式若只需要一个参数，参数的小括号可以省略"><a href="#场景四：Lambda表达式若只需要一个参数，参数的小括号可以省略" class="headerlink" title="场景四：Lambda表达式若只需要一个参数，参数的小括号可以省略"></a>场景四：Lambda表达式若只需要一个参数，参数的小括号可以省略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        MyInterface&lt;String&gt; myInterface = str -&gt; System.out.println(str);</span><br><span class="line">        myInterface.func(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(T str)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景五：Lambda表达式需要两个或者以上的参数，多条执行语句，并且可以有返回值"><a href="#场景五：Lambda表达式需要两个或者以上的参数，多条执行语句，并且可以有返回值" class="headerlink" title="场景五：Lambda表达式需要两个或者以上的参数，多条执行语句，并且可以有返回值"></a>场景五：Lambda表达式需要两个或者以上的参数，多条执行语句，并且可以有返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> (String s1,String s2,<span class="type">int</span> i) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> s1+s2+i;</span><br><span class="line">          <span class="keyword">return</span>  s;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> myInterface.func(<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;张飞&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    String <span class="title function_">func</span><span class="params">(String str1,String str2,<span class="type">int</span> num)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景六：当Lambda体只有一条语句时，return与大括号都可以省略"><a href="#场景六：当Lambda体只有一条语句时，return与大括号都可以省略" class="headerlink" title="场景六：当Lambda体只有一条语句时，return与大括号都可以省略"></a>场景六：当Lambda体只有一条语句时，return与大括号都可以省略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> (String s1,String s2,<span class="type">int</span> i) -&gt; s1+s2+i;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> myInterface.func(<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;张飞&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    String <span class="title function_">func</span><span class="params">(String str1,String str2,<span class="type">int</span> num)</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章：虚拟机栈</title>
      <link href="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/"/>
      <url>/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章：虚拟机栈"><a href="#第五章：虚拟机栈" class="headerlink" title="第五章：虚拟机栈"></a>第五章：虚拟机栈</h1><h2 id="虚拟机栈概述"><a href="#虚拟机栈概述" class="headerlink" title="虚拟机栈概述"></a>虚拟机栈概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821144552583.png" alt="image-20230821144552583"></p><h3 id="内存中的栈和堆"><a href="#内存中的栈和堆" class="headerlink" title="内存中的栈和堆"></a>内存中的栈和堆</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821145008687.png" alt="image-20230821145008687"></p><h3 id="虚拟机栈基本内容"><a href="#虚拟机栈基本内容" class="headerlink" title="虚拟机栈基本内容"></a>虚拟机栈基本内容<img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821145610045.png" alt="image-20230821145610045"></h3><p>  <img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821150340899.png" alt="image-20230821150340899"></p><p> 对于栈存在<code>OOM(栈溢出)</code>，不存在<code>GC(垃圾回收)</code></p><h3 id="面试题：开发过程中遇到的异常有哪些？"><a href="#面试题：开发过程中遇到的异常有哪些？" class="headerlink" title="面试题：开发过程中遇到的异常有哪些？"></a>面试题：开发过程中遇到的异常有哪些？</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821151030878.png" alt="image-20230821151030878"></p><p><code>java.lang.StackOverFlow</code>异常举例：死递归</p><h3 id="设置栈内存大小"><a href="#设置栈内存大小" class="headerlink" title="设置栈内存大小"></a>设置栈内存大小</h3><p>可以使用参数<code>-Xss</code>来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度</p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821152310563.png" alt="image-20230821152310563"></p><p> <strong>示例</strong><code>IDEA</code>中如何修改<code>JVM</code>的配置</p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821153231288.png" alt="image-20230821153231288" style="zoom:80%;"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821153308462.png" alt="image-20230821153308462" style="zoom:80%;"></p><p>可以通过设置不同的虚拟机栈内存大小，比较<strong>死递归</strong>中调用的次数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackErroTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的存储单位"><a href="#栈的存储单位" class="headerlink" title="栈的存储单位"></a>栈的存储单位</h2><p> <img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821154314842.png" alt="image-20230821154314842"></p><h3 id="栈运行原理"><a href="#栈运行原理" class="headerlink" title="栈运行原理"></a>栈运行原理</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821154729071.png" alt="image-20230821154729071"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821155546010.png" alt="image-20230821155546010"></p><h3 id="栈帧的内部结构"><a href="#栈帧的内部结构" class="headerlink" title="栈帧的内部结构"></a>栈帧的内部结构<img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821160632671.png" alt="image-20230821160632671"></h3><h2 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h2><h3 id="局部变量表基础知识"><a href="#局部变量表基础知识" class="headerlink" title="局部变量表基础知识"></a>局部变量表基础知识</h3><p> <img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821161848966.png" alt="image-20230821161848966"></p><p>为什么是数字数组：因为<code>char</code>、<code>boolean</code>等非数字类型均可以转换成<code>int</code>类型数据<img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826221909484.png" alt="image-20230826221909484"></p><p><strong>局部变量表查看示例</strong></p><p>终端执行<code>javap -v xxx.class</code>即可对<code>.class</code>文件进行反编译</p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826222644929.png" alt="image-20230826222644929"></p><p>也可在<code>IDEA</code>中下载插件<code>jclasslib Bytecode Viewer</code>查看<code>.class</code>文件结构</p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826223355194.png" alt="image-20230826223355194" style="zoom:67%;"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826223450761.png" alt="image-20230826223450761"></p><h3 id="Slot的理解"><a href="#Slot的理解" class="headerlink" title="Slot的理解"></a>Slot的理解</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826224125077.png" alt="image-20230826224125077" style="zoom:67%;"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826224835917.png" alt="image-20230826224835917" style="zoom:80%;"></p><p><strong>数据类型示例</strong></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826225222042.png" alt="image-20230826225222042"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826225534867.png" alt="image-20230826225534867"></p><h3 id="Slot的重复利用"><a href="#Slot的重复利用" class="headerlink" title="Slot的重复利用"></a>Slot的重复利用</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826230220379.png" alt="image-20230826230220379"></p><p><strong>代码示例</strong></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826230835402.png" alt="image-20230826230835402"></p><h3 id="静态变量与局部变量的区别"><a href="#静态变量与局部变量的区别" class="headerlink" title="静态变量与局部变量的区别"></a>静态变量与局部变量的区别</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826231023836.png" alt="image-20230826231023836"></p><p>类变量准备阶段和初始化阶段的操作，具体细节见第二章：类加载子系统</p><p><strong>java中变量的总结</strong></p><p>变量的分类</p><ul><li>按照数据类型分类<ul><li>基本数据类型</li><li>引用数据类型</li></ul></li><li>按照在类中申明的位置进行分类<ul><li>成员变量：使用之前，都经历过默认初始化赋值<ul><li>类变量<ul><li>类加载子系统中链接(linking)的准备阶段(prepare)，给类变量默认复制，在初始化阶段(initial)，给类变量显示赋值</li></ul></li><li>实例变量<ul><li>随着对象创建，会在堆空间中分配实例变量空间，并进行默认赋值</li></ul></li></ul></li><li>局部变量：在使用之前必须显示赋值，否则编译无法通过</li></ul></li></ul><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826232400345.png" alt="image-20230826232400345"></p><h2 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h2><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826234344651.png" alt="image-20230826234344651"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826234749038.png" alt="image-20230826234749038"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826234913080.png" alt="image-20230826234913080"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235258320.png" alt="image-20230826235258320"></p><h2 id="代码追踪"><a href="#代码追踪" class="headerlink" title="代码追踪"></a>代码追踪</h2><p>代码演示指令执行过程中，PC寄存器、局部变量表和操作数栈的变化情况</p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235845034.png" alt="image-20230826235845034"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235901938.png" alt="image-20230826235901938"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235912799.png" alt="image-20230826235912799"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235930674.png" alt="image-20230826235930674"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235956374.png" alt="image-20230826235956374"></p><p><strong>补充</strong>：面试题：<code>i++</code>和<code>++i</code>的区别以及其衍生出来的相关问题</p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230827000941557.png" alt="image-20230827000941557"></p><h2 id="栈顶缓存技术"><a href="#栈顶缓存技术" class="headerlink" title="栈顶缓存技术"></a>栈顶缓存技术</h2><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230827001258000.png" alt="image-20230827001258000"></p><h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230827001845394.png" alt="image-20230827001845394"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230827002512030.png" alt="image-20230827002512030"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230827002854861.png" alt="image-20230827002854861"></p><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829223030480.png" alt="image-20230829223030480"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829223326874.png" alt="image-20230829223326874"></p><p>动态链接或者晚期绑定一个直接的例子就是<code>类的多态</code>，父类的引用指向子类的对象，只有在执行的过程中才能确定调用的是父类的方法或者是某个子类的方法</p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829224955541.png" alt="image-20230829224955541"></p><p><code>final</code>修饰的类方法无法被子类重写，所以这一类方法的引用在编译期就可以确定</p><h3 id="虚方法与非虚方法"><a href="#虚方法与非虚方法" class="headerlink" title="虚方法与非虚方法"></a>虚方法与非虚方法</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829225241570.png" alt="image-20230829225241570"></p><p>  <img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829225913900.png" alt="image-20230829225913900"></p><p> <strong>使用示例</strong></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829233347842.png" alt="image-20230829233347842"></p><h3 id="动态调用指令—invokeddynamic指令"><a href="#动态调用指令—invokeddynamic指令" class="headerlink" title="动态调用指令—invokeddynamic指令"></a>动态调用指令—invokeddynamic指令</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829233556770.png" alt="image-20230829233556770"></p><p>  <img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829233727453.png" alt="image-20230829233727453"></p><p>示例：</p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829234012424.png" alt="image-20230829234012424"></p><h3 id="方法重写的本质"><a href="#方法重写的本质" class="headerlink" title="方法重写的本质"></a>方法重写的本质</h3><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829234523185.png" alt="image-20230829234523185"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829234935811.png" alt="image-20230829234935811"></p><p><strong>示例</strong></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829235321427.png" alt="image-20230829235321427"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829235543303.png" alt="image-20230829235543303"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829235717667.png" alt="image-20230829235717667"></p><h2 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h2><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830000034774.png" alt="image-20230830000034774"></p><p> <img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830000245934.png" alt="image-20230830000245934"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830000528984.png" alt="image-20230830000528984"></p><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830000927188.png" alt="image-20230830000927188"></p><h2 id="一些附加信息"><a href="#一些附加信息" class="headerlink" title="一些附加信息"></a>一些附加信息</h2><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830001254857.png" alt="image-20230830001254857"></p><h2 id="虚拟机栈相关面试题"><a href="#虚拟机栈相关面试题" class="headerlink" title="虚拟机栈相关面试题"></a>虚拟机栈相关面试题</h2><p><img src="/2023/08/29/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830001402476.png" alt="image-20230830001402476"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十九、电脑商城项目总结</title>
      <link href="/2023/08/15/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/19%E7%94%B5%E8%84%91%E5%95%86%E5%9C%BA%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/"/>
      <url>/2023/08/15/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/19%E7%94%B5%E8%84%91%E5%95%86%E5%9C%BA%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="电脑商城项目总结"><a href="#电脑商城项目总结" class="headerlink" title="电脑商城项目总结"></a>电脑商城项目总结</h1><p>本项目来源于B站视频，项目对于新手非常友好</p><ul><li>后端利用<code>SpringBoot</code>+<code>MyBatis</code>+<code>Mysql</code>来实现</li><li>前端利用<code>html+css+javascript</code>来实现</li><li>前后端并未实现分离，是传统的前后端一体的web项目</li></ul><p><a href="https://www.bilibili.com/video/BV1bf4y1V7Bx/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">B站视频链接</a></p><p>项目资源链接:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1M4L1qzjcHCnYvVV00g9VKw </span><br><span class="line">提取码：1wqc </span><br></pre></td></tr></table></figure><h2 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h2><p>整个项目学习下来，对于个人最大的帮助总结如下</p><ul><li><p>了解了一个项目各个业务开发的具体流程，充分体会了web项目的<code>MVC</code>思想</p><ul><li><p>一个项目代码开发的流程</p><ul><li>业务模块整体功能分析</li><li>设计并创建数据库</li><li>数据库表对应实体类创建</li><li>持久层开发<ul><li>规划需要执行的SQL语句</li><li>接口和抽象方法设计</li><li>SQL映射文件配置(<code>Mybatis mapper.xml</code>文件的编写)</li><li>单元测试(每编写一个功能函数，都需要在测试类中进行单元测试，确保功能正常)</li></ul></li><li>业务层开发<ul><li>规划异常(设计对应的异常基类)</li><li>接口和抽象方法(方法名不重要，重要的是方法参数列表的设计，需要前端传递何种参数)</li><li>抽象方法实现</li><li>单元测试</li></ul></li><li>控制层开发<ul><li>异常处理(创建控制层基类，基类中做异常处理拦截，统一进行异常处理，<code>@ExceptionHandler</code>)</li><li>设计请求<ul><li>request url</li><li>request method</li><li>request params</li><li>response data</li></ul></li><li>处理请求，在控制类中编写对应方法</li></ul></li><li>前端页面<ul><li>作为后端人员，只需要关注如何发送<code>ajax</code>请求，如何发送表单请求即可</li></ul></li></ul></li><li><p>一些重要的开发技巧</p><ul><li><p>业务层规划异常，设计异常基类<code>ServiceException</code>，其他新增异常均继承自该基类</p></li><li><p>控制层异常处理，设计控制层基类，利用<code>@ExceptionHandler</code>注解，拦截控制层所有异常进行处理</p></li><li><p>控制层响应数据设计，新建对应数据的类，以<code>JSON</code>形式返回数据，包含<strong>响应状态码、响应状态描述符、响应数据</strong>，响应数据类型未知，采用注解形式；此格式具体应与前端人员进行协商</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="comment">//状态描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//请求返回数据,数据类型位置,泛型</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//捕获异常,异常信息的传递</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message=e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state,String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state, E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state, String message, E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图像上传模块，学会了文件上传前后端之间如何协作，后端存储、前端回显等功能</p></li><li><p>拦截器的实现，对于一个项目安全性考虑，设计对应拦截器，只有登录之后才能访问其他页面</p><ul><li>拦截器如何添加白名单和黑名单</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十八、图像上传功能优化功能实现</title>
      <link href="/2023/08/15/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%9B%BE%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BC%98%E5%8C%96/"/>
      <url>/2023/08/15/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%9B%BE%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="图像上传功能优化"><a href="#图像上传功能优化" class="headerlink" title="图像上传功能优化"></a>图像上传功能优化</h1><h2 id="优化之前的图片上传模块"><a href="#优化之前的图片上传模块" class="headerlink" title="优化之前的图片上传模块"></a>优化之前的图片上传模块</h2><h3 id="控制层代码"><a href="#控制层代码" class="headerlink" title="控制层代码"></a>控制层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 设置上传文件的最大值 10MB */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_AVATAR_SIZE</span> <span class="operator">=</span> <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="comment">/** 设置允许接收的文件类型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; AVATAR_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/bmp&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MultiPartFile是SpringMVC提供的一个接口，这个接口为我们包装了获取文件类型的数据，任何类型的File都可以接受</span></span><br><span class="line"><span class="comment">     * SpringBoot整合了SpringMVC,只需要在处理请求的方法参数列表上申明一个MultiPartFile的参数</span></span><br><span class="line"><span class="comment">     * SpringBoot会自定将接受的文件数据赋值给这个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_avatar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">alertAvatar</span><span class="params">(MultipartFile file,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.getSize()&gt;MAX_AVATAR_SIZE)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;文件超出大小限制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!AVATAR_TYPE.contains(file.getContentType()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>(<span class="string">&quot;文件类型错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//规定文件存储路径 .../upload/xxx.xx</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent);</span><br><span class="line">    <span class="comment">//parent文件夹不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    String[] splits = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="comment">//文件后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> splits[splits.length-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//生成随机的文件名(为避免不同用户文件名重复导致数据被覆盖丢失</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> uuid+<span class="string">&quot;.&quot;</span>+suffix; <span class="comment">//新的文件名</span></span><br><span class="line">    System.out.println(newFileName);</span><br><span class="line">    <span class="comment">//存储路径</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,newFileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.transferTo(dest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>(<span class="string">&quot;文件读写错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    System.out.println(dest.getPath());</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>+newFileName;</span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line"></span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户头像修改成功&quot;</span>,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户图像在数据库中存在的形式"><a href="#用户图像在数据库中存在的形式" class="headerlink" title="用户图像在数据库中存在的形式"></a>用户图像在数据库中存在的形式</h3><p><img src="/2023/08/15/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%9B%BE%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BC%98%E5%8C%96/image-20230815105556661.png" alt="image-20230815105556661"></p><h3 id="获取根目录路径方式"><a href="#获取根目录路径方式" class="headerlink" title="获取根目录路径方式"></a>获取根目录路径方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>通过上面方式获取的图像目录路径在<code>SpringBoot</code>内嵌环境下拿到的是其内嵌<code>Tomcat</code>的临时文件路径，每次启动项目，<code>Tomcat</code>都会创建一个新的临时文件夹，从而导致当前登录无法获取历史上传图像路径</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p><code>SpringBoot</code>启动后，会将<code>COMMON_DOC_ROOTS</code>设置成以下三个位置，如果这三个位置找不到，则会创建临时目录地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] COMMON_DOC_ROOTS = &#123; <span class="string">&quot;src/main/webapp&quot;</span>, <span class="string">&quot;public&quot;</span>,<span class="string">&quot;static&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>SpringBoot 内嵌 Tomcat创建的临时目录</strong></p><p><img src="/2023/08/15/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%9B%BE%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BC%98%E5%8C%96/image-20230815110643974.png" alt="image-20230815110643974"></p><h2 id="解决方法一-手动指定存储路径"><a href="#解决方法一-手动指定存储路径" class="headerlink" title="解决方法一:手动指定存储路径"></a>解决方法一:手动指定存储路径</h2><p>1.手动指定固定磁盘路劲去存储文件，不使用<code>String parent = session.getServletContext().getRealPath(&quot;upload&quot;);</code>而使用固定路径<code>String parent = &quot;G:/upload/&quot;;</code></p><p>2.定制对应的配置类，配置<code>Tomacat</code>虚拟目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.configure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解，让SpringBoot识别</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptorConfigure</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">/** 更改配置SpringBoot文件上传虚拟目录 */</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/upload/**&quot;</span>).addResourceLocations(<span class="string">&quot;file:G:/upload/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li><code>addResourceLocations(&quot;file:G:/upload/&quot;)</code>里面的参数必须要写成<code>&quot;file:+路径&quot;</code>的形式，该路径为你上传图片存储的位置</li><li><code>addResourceLocations(&quot;file:G:/upload/&quot;)</code>路径最后面的斜杠必须加</li></ul><p>3.控制层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 设置上传文件的最大值 10MB */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_AVATAR_SIZE</span> <span class="operator">=</span> <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="comment">/** 设置允许接收的文件类型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; AVATAR_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/bmp&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MultiPartFile是SpringMVC提供的一个接口，这个接口为我们包装了获取文件类型的数据，任何类型的File都可以接受</span></span><br><span class="line"><span class="comment">     * SpringBoot整合了SpringMVC,只需要在处理请求的方法参数列表上申明一个MultiPartFile的参数</span></span><br><span class="line"><span class="comment">     * SpringBoot会自定将接受的文件数据赋值给这个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_avatar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">alertAvatar</span><span class="params">(MultipartFile file,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.getSize()&gt;MAX_AVATAR_SIZE)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;文件超出大小限制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!AVATAR_TYPE.contains(file.getContentType()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>(<span class="string">&quot;文件类型错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//规定文件存储路径 .../upload/xxx.xx</span></span><br><span class="line">    <span class="comment">//        String parent = session.getServletContext().getRealPath(&quot;upload&quot;);</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="string">&quot;G:/upload/&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent);</span><br><span class="line">    <span class="comment">//parent文件夹不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    String[] splits = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="comment">//文件后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> splits[splits.length-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//生成随机的文件名(为避免不同用户文件名重复导致数据被覆盖丢失</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> uuid+<span class="string">&quot;.&quot;</span>+suffix; <span class="comment">//新的文件名</span></span><br><span class="line">    System.out.println(newFileName);</span><br><span class="line">    <span class="comment">//存储路径</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,newFileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.transferTo(dest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>(<span class="string">&quot;文件读写错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    System.out.println(dest.getPath());</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>+newFileName;</span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line"></span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户头像修改成功&quot;</span>,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方法二：新建文件夹"><a href="#解决方法二：新建文件夹" class="headerlink" title="解决方法二：新建文件夹"></a>解决方法二：新建文件夹</h2><p>在项目根目录下新建<code>public</code>文件夹，这样在<code>SpringBoot</code>项目启动时不会去创建临时文件夹</p><p><img src="/2023/08/15/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%9B%BE%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BC%98%E5%8C%96/image-20230815112923608.png" alt="image-20230815112923608"></p><p>此时可以通过<code>String parent = session.getServletContext().getRealPath(&quot;upload&quot;);</code>获取文件存取根路径</p><p>1.定制对应的配置类，配置<code>Tomacat</code>虚拟目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.configure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解，让SpringBoot识别</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptorConfigure</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">/** 更改配置SpringBoot文件上传虚拟目录 */</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/upload/**&quot;</span>).addResourceLocations(<span class="string">&quot;file:G:/store/public/upload/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.控制层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 设置上传文件的最大值 10MB */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_AVATAR_SIZE</span> <span class="operator">=</span> <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="comment">/** 设置允许接收的文件类型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; AVATAR_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/bmp&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MultiPartFile是SpringMVC提供的一个接口，这个接口为我们包装了获取文件类型的数据，任何类型的File都可以接受</span></span><br><span class="line"><span class="comment">     * SpringBoot整合了SpringMVC,只需要在处理请求的方法参数列表上申明一个MultiPartFile的参数</span></span><br><span class="line"><span class="comment">     * SpringBoot会自定将接受的文件数据赋值给这个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_avatar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">alertAvatar</span><span class="params">(MultipartFile file,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.getSize()&gt;MAX_AVATAR_SIZE)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;文件超出大小限制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!AVATAR_TYPE.contains(file.getContentType()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>(<span class="string">&quot;文件类型错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//规定文件存储路径 .../upload/xxx.xx</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">    <span class="comment">//        String parent = &quot;G:/upload/&quot;;</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent);</span><br><span class="line">    <span class="comment">//parent文件夹不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    String[] splits = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="comment">//文件后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> splits[splits.length-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//生成随机的文件名(为避免不同用户文件名重复导致数据被覆盖丢失</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> uuid+<span class="string">&quot;.&quot;</span>+suffix; <span class="comment">//新的文件名</span></span><br><span class="line">    System.out.println(newFileName);</span><br><span class="line">    <span class="comment">//存储路径</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,newFileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.transferTo(dest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>(<span class="string">&quot;文件读写错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    System.out.println(dest.getPath());</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>+newFileName;</span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line"></span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户头像修改成功&quot;</span>,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/weixin_45535665/article/details/124087545">博客1</a></p><p><a href="https://blog.csdn.net/weixin_43272781/article/details/109480082">博客2</a></p><p><a href="https://blog.csdn.net/liuweilong07/article/details/80686998">博客3</a></p><p><a href="https://blog.csdn.net/qq_43290288/article/details/108863221">博客4</a></p>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十三、购物车列表展示功能实现</title>
      <link href="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/"/>
      <url>/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="购物车列表展示"><a href="#购物车列表展示" class="headerlink" title="购物车列表展示"></a>购物车列表展示</h1><p>用户登录之后，进入购物车页面，即将当前用户购物车列表展示在该页面对应位置</p><p><img src="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/image-20230813150844386.png" alt="image-20230813150844386"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>购物车列表展示页面数据来源于<code>t_product</code>和<code>t_cart</code>两张数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line"> cid,</span><br><span class="line"> uid,</span><br><span class="line"> pid,</span><br><span class="line"> t_cart.price <span class="keyword">AS</span> cartPrice,</span><br><span class="line"> t_cart.num <span class="keyword">AS</span> cartNum, </span><br><span class="line"> t_product.title <span class="keyword">AS</span> productTitle,</span><br><span class="line"> t_product.image <span class="keyword">AS</span> productImage,</span><br><span class="line"> t_product.price <span class="keyword">AS</span> productPrice</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">t_cart <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_product <span class="keyword">ON</span> t_cart.pid<span class="operator">=</span>t_product.id </span><br><span class="line"><span class="keyword">WHERE</span> uid<span class="operator">=</span>? </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">t_cart.modified_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>VO: Value Object，值对象，当进行<code>select</code>查询时，查询的结果数据来自于多张表，发现无法使用某个POJO实体类来接收，POJO实体类不能包含多表查询出来的结果，解决方法是：重新构建一个新的对象存储查询结果对应的映射，这种对象称之为<strong>值对象</strong></p><h2 id="值对象创建"><a href="#值对象创建" class="headerlink" title="值对象创建"></a>值对象创建</h2><p>在包<code>com.bang.store.vo</code>中创建值对象类<code>CartProductVO</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车商品两张表对应的值对象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartProductVO</span> &#123;</span><br><span class="line">    Integer cid;</span><br><span class="line">    Integer uid;</span><br><span class="line">    Integer pid;</span><br><span class="line">    Long cartPrice;</span><br><span class="line">    Integer cartNum;</span><br><span class="line">    String productTitle;</span><br><span class="line">    String productImage;</span><br><span class="line">    Long productPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>CartMapper</code>接口中编写对应的抽象方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询当前用户的购物车数据列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;CartProductVO&gt; <span class="title function_">findVOByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>在<code>CartMapper.xml</code>中编写对应的SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findVOByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bang.store.vo.CartProductVO&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    cid,</span><br><span class="line">    uid,</span><br><span class="line">    pid,</span><br><span class="line">    t_cart.price AS cartPrice,</span><br><span class="line">    t_cart.num AS cartNum,</span><br><span class="line">    t_product.title AS productTitle,</span><br><span class="line">    t_product.image AS productImage,</span><br><span class="line">    t_product.price AS productPrice</span><br><span class="line">    FROM</span><br><span class="line">    t_cart LEFT JOIN t_product ON t_cart.pid=t_product.id</span><br><span class="line">    WHERE uid=#&#123;uid&#125;</span><br><span class="line">    ORDER BY</span><br><span class="line">    t_cart.modified_time DESC;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findVOByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartMapper.findVOByUid(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">        System.out.println(cartProductVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>无新增异常</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>ICartService</code>接口中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户购物车列表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户购物车列表数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;CartProductVO&gt; <span class="title function_">getVOByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CartProductVO&gt; <span class="title function_">getVOByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cartMapper.findVOByUid(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getVOByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartService.getVOByUid(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">        System.out.println(cartProductVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层无新增异常</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /cart/</span><br><span class="line">request method: GET</span><br><span class="line">request params: HttpSession session</span><br><span class="line">response data: new JsonResult&lt;List&lt;CartProductVO&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;&quot;&quot;,&quot;/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;CartProductVO&gt;&gt; <span class="title function_">getVOByUid</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartService.getVOByUid(uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;购物车获取数据成功&quot;</span>,cartProductVOList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>购物车页面一加载，就向后端发送请求，获取当前用户购物车列表数据，并展示在购物车页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">//购物车页面一加载就向后端发送请求</span></span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">showCartList</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showCartList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/cart/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;购物车数据获取成功&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                cartList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;cartList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    htmlContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;input name=\&quot;cids\&quot; value=&#x27;#&#123;cid&#125;&#x27; type=\&quot;checkbox\&quot; class=\&quot;ckitem\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;&lt;img src=\&quot;..#&#123;image&#125;collect.png\&quot; class=\&quot;img-responsive\&quot; /&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;#&#123;title&#125;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;¥&lt;span id=\&quot;goodsPrice#&#123;cid&#125;\&quot;&gt;#&#123;price&#125;&lt;/span&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;input id=\&quot;price-#&#123;cid&#125;\&quot; type=\&quot;button\&quot; value=\&quot;-\&quot; class=\&quot;num-btn\&quot; onclick=\&quot;reduceNum(1)\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;input id=\&quot;goodsCount#&#123;cid&#125;\&quot; type=\&quot;text\&quot; size=\&quot;2\&quot; readonly=\&quot;readonly\&quot; class=\&quot;num-text\&quot; value=\&quot;#&#123;num&#125;\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;input id=\&quot;price+#&#123;cid&#125;\&quot; class=\&quot;num-btn\&quot; type=\&quot;button\&quot; value=\&quot;+\&quot; onclick=\&quot;addNum(1)\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;&lt;span id=\&quot;goodsCast#&#123;cid&#125;\&quot;&gt;#&#123;totalPrice&#125;&lt;/span&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;input type=\&quot;button\&quot; onclick=\&quot;delCartItem(this)\&quot; class=\&quot;cart-del btn btn-default btn-xs\&quot; value=\&quot;删除\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;cid&#125;&quot;</span>,cartList[i].<span class="property">cid</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;image&#125;&quot;</span>,cartList[i].<span class="property">productImage</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;title&#125;&quot;</span>,cartList[i].<span class="property">productTitle</span>+(cartList[i].<span class="property">cartPrice</span>-cartList[i].<span class="property">productPrice</span>));</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;num&#125;&quot;</span>,cartList[i].<span class="property">cartNum</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;price&#125;&quot;</span>,cartList[i].<span class="property">cartPrice</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;totalPrice&#125;&quot;</span>,cartList[i].<span class="property">cartNum</span>*cartList[i].<span class="property">cartPrice</span>);</span><br><span class="line">                    $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">append</span>(htmlContent);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;购物车获取数据失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;购物车获取数据发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十五、显示勾选的购物车数据功能实现</title>
      <link href="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E6%98%BE%E7%A4%BA%E5%8B%BE%E9%80%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E6%98%BE%E7%A4%BA%E5%8B%BE%E9%80%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="显示勾选的购物车数据"><a href="#显示勾选的购物车数据" class="headerlink" title="显示勾选的购物车数据"></a>显示勾选的购物车数据</h1><p>用户在购物车页面勾选指定商品，然后点击<strong>结算</strong>按钮，跳转到订单结算页面，展示用户勾选的数据。订单结算页面数据的展示内容还是来自于购物车数据表</p><p><img src="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E6%98%BE%E7%A4%BA%E5%8B%BE%E9%80%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%B0%E6%8D%AE/image-20230814091515399.png" alt="image-20230814091515399" style="zoom:80%;"></p><p><img src="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E6%98%BE%E7%A4%BA%E5%8B%BE%E9%80%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%B0%E6%8D%AE/image-20230814091541864.png" alt="image-20230814091541864" style="zoom:80%;"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划需要执行的SQL语句"><a href="#规划需要执行的SQL语句" class="headerlink" title="规划需要执行的SQL语句"></a>规划需要执行的SQL语句</h3><p>两个页面跳转，传递用户勾选商品的<code>cid</code>列表，然后根据<code>cid</code>查询对应的数据，本质是一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">        cid,</span><br><span class="line">        uid,</span><br><span class="line">        pid,</span><br><span class="line">        t_cart.price <span class="keyword">AS</span> cartPrice,</span><br><span class="line">        t_cart.num <span class="keyword">AS</span> cartNum,</span><br><span class="line">        t_product.title <span class="keyword">AS</span> productTitle,</span><br><span class="line">        t_product.image <span class="keyword">AS</span> productImage,</span><br><span class="line">        t_product.price <span class="keyword">AS</span> productPrice</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">        t_cart <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_product <span class="keyword">ON</span> t_cart.pid<span class="operator">=</span>t_product.id</span><br><span class="line"><span class="keyword">WHERE</span> cid <span class="keyword">in</span> ?</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">        t_cart.modified_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>CartMapper</code>接口中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据cid列表查询对应的购物车数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cids 购物车数据id列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;CartProductVO&gt; <span class="title function_">findByCids</span><span class="params">(Integer[] cids)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>在<code>CartMapper.xml</code>中编写对应的SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCids&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bang.store.vo.CartProductVO&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    cid,</span><br><span class="line">    uid,</span><br><span class="line">    pid,</span><br><span class="line">    t_cart.price AS cartPrice,</span><br><span class="line">    t_cart.num AS cartNum,</span><br><span class="line">    t_product.title AS productTitle,</span><br><span class="line">    t_product.image AS productImage,</span><br><span class="line">    t_product.price AS productPrice</span><br><span class="line">    FROM</span><br><span class="line">    t_cart LEFT JOIN t_product ON t_cart.pid=t_product.id</span><br><span class="line">    WHERE cid in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    ORDER BY</span><br><span class="line">    t_cart.modified_time DESC;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByCids</span><span class="params">()</span>&#123;</span><br><span class="line">    Integer[] cids = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartMapper.findByCids(cids);</span><br><span class="line">    <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">        System.out.println(cartProductVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>没有需要定义的新异常</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>ICartService</code>中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据cid列表查询购物车数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cids 购物车id列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;CartProductVO&gt; <span class="title function_">getVOByCids</span><span class="params">(Integer uid,Integer[] cids)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CartProductVO&gt; <span class="title function_">getVOByCids</span><span class="params">(Integer uid, Integer[] cids)</span> &#123;</span><br><span class="line">    <span class="comment">//查询购物车数据列表</span></span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartMapper.findByCids(cids);</span><br><span class="line">    <span class="comment">//删除不匹配的数据</span></span><br><span class="line">    Iterator&lt;CartProductVO&gt; iterator = cartProductVOList.listIterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="type">CartProductVO</span> <span class="variable">cartProductVO</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        <span class="keyword">if</span>(!cartProductVO.getUid().equals(uid))&#123;</span><br><span class="line">            iterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cartProductVOList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>List</code>列表循环删除不符合条件元素的参考做法:<a href="https://www.cnblogs.com/boboblue/p/14145397.html">参考资料</a></p><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getVOByCids</span><span class="params">()</span>&#123;</span><br><span class="line">    Integer uid=<span class="number">1</span>;</span><br><span class="line">    Integer[] cids = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartService.getVOByCids(uid, cids);</span><br><span class="line">    <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">        System.out.println(cartProductVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层无新增异常，无需进行异常处理</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /cart/list</span><br><span class="line">request method: POST</span><br><span class="line">request params: List&lt;Integer&gt; cids,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;List&lt;CartProductVO&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;CartProductVO&gt;&gt; <span class="title function_">getVOByCids</span><span class="params">(Integer[] cids,HttpSession session)</span>&#123;</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartService.getVOByCids(getUidFromSession(session), cids);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;数据获取成功&quot;</span>,cartProductVOList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-2"><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h3><p>先登录，再访问<code>http://localhost:8080/cart/list?cids=2&amp;cids=3</code>，会进行参数自动映射成整数数组(这里参数cids定义用数组不用列表的原因：url中参数可以自动映射成数组，而无法映射成list)</p><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>1.<code>cart.html</code>页面点击结算按钮，跳转到<code>orderConfirm.html</code>订单确认界面</p><p>2.在<code>orderConfirm.html</code>界面，根据上个界面传过来的<code>cid</code>列表，向后端页面发送请求，获取对应购物车数据列表并展示在页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页面一加载就向后端发送请求</span></span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">showCartList</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showCartList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/cart/list&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>) <span class="comment">//获取表单参数列表</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;购物车数据获取成功&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> cartList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">let</span> totalCount=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">let</span> totalMoney=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;cartList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> htmlContent=<span class="string">&#x27;&lt;tr&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;td&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;td&gt;#&#123;title&#125;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;td&gt;¥&lt;span&gt;#&#123;price&#125;&lt;/span&gt;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;td&gt;#&#123;num&#125;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;td&gt;&lt;span&gt;#&#123;totalprice&#125;&lt;/span&gt;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;/tr&gt;&#x27;</span></span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;image&#125;&quot;</span>,cartList[i].<span class="property">productImage</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;title&#125;&quot;</span>,cartList[i].<span class="property">productTitle</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;price&#125;&quot;</span>,cartList[i].<span class="property">cartPrice</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;num&#125;&quot;</span>,cartList[i].<span class="property">cartNum</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;totalprice&#125;&quot;</span>,cartList[i].<span class="property">cartPrice</span>*cartList[i].<span class="property">cartNum</span>);</span><br><span class="line">                    $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">append</span>(htmlContent);</span><br><span class="line">                    totalCount+=cartList[i].<span class="property">cartNum</span>;</span><br><span class="line">                    totalMoney+=cartList[i].<span class="property">cartNum</span>*cartList[i].<span class="property">cartPrice</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                $(<span class="string">&quot;#all-count&quot;</span>).<span class="title function_">html</span>(totalCount);</span><br><span class="line">                $(<span class="string">&quot;#all-price&quot;</span>).<span class="title function_">html</span>(totalMoney);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;购物车获取数据失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;购物车获取数据发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="订单确认页面用户收货地址列表—前端页面"><a href="#订单确认页面用户收货地址列表—前端页面" class="headerlink" title="订单确认页面用户收货地址列表—前端页面"></a>订单确认页面用户收货地址列表—前端页面</h2><p><img src="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E6%98%BE%E7%A4%BA%E5%8B%BE%E9%80%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%B0%E6%8D%AE/image-20230814111207840.png" alt="image-20230814111207840" style="zoom:80%;"></p><p>根据用户<code>uid</code>查询用户列表，展示在<code>orderConfirm.html</code>的下拉列表中，根据用户<code>uid</code>查询对应的地址列表在后端已有对应的请求接口<code>/address/get_by_uid</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面一加载就向后端发送请求</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">showCartList</span>();</span><br><span class="line">    <span class="title function_">showAddressList</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showAddressList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;收获地址数据获取成功&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> htmlContent=<span class="string">&#x27;&lt;option&gt;#&#123;name&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&#123;tag&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&#123;address&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&#123;phone&#125;&lt;/option&gt;&#x27;</span>;</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;name&#125;&quot;</span>,addressList[i].<span class="property">name</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;tag&#125;&quot;</span>,addressList[i].<span class="property">tag</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;address&#125;&quot;</span>,addressList[i].<span class="property">address</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;phone&#125;&quot;</span>,addressList[i].<span class="property">phone</span>);</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(htmlContent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;收货地址数据获取失败&quot;</span> +data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;收货地址数据获取发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十四、更新购物车商品数量功能实现</title>
      <link href="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E6%9B%B4%E6%96%B0%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%95%86%E5%93%81%E6%95%B0%E9%87%8F/"/>
      <url>/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E6%9B%B4%E6%96%B0%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%95%86%E5%93%81%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="更新购物车商品数量"><a href="#更新购物车商品数量" class="headerlink" title="更新购物车商品数量"></a>更新购物车商品数量</h1><p>用户点击商品数量加减按钮，向后端发送请求，更新购物车数据表</p><p><img src="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E6%9B%B4%E6%96%B0%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%95%86%E5%93%81%E6%95%B0%E9%87%8F/image-20230813194840858.png" alt="image-20230813194840858"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>本质是更新语句，更具cid跟新num字段值，在前面功能模块中已经实现</p><p>在执行更新操作之前，还需要判断当前购物车记录在数据库表中是否存在，本质是查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_cart <span class="keyword">where</span> cid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询对应的购物车记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid 购物车id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Cart <span class="title function_">findByCid</span><span class="params">(Integer cid)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;findByCid&quot;</span> resultMap=<span class="string">&quot;cartPojoMap&quot;</span>&gt;</span><br><span class="line">    select * from t_cart where cid=#&#123;cid&#125;;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByCid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> cartMapper.findByCid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(cart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>1.数据更新过程中会发生异常，此异常类在此前的功能模块中已经定义</p><p>2.查询数据与登录用户不匹配引发的异常，此异常在此前功能模块中也已经定义</p><p>3.查询的购物车记录在数据库中不存在，创建对应的异常类<code>CartNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">CartNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改变购物车商品数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid 购物车记录id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> changeNum 商品数量改变数目,为正则是新增，为负则是减少</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作之后，购物车中该商品的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">alterNum</span><span class="params">(Integer cid,Integer uid,String username,Integer changeNum)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">alterNum</span><span class="params">(Integer cid, Integer uid, String username, Integer changeNum)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询数据库中该购物车记录是否存在</span></span><br><span class="line">    <span class="type">Cart</span> <span class="variable">result</span> <span class="operator">=</span> cartMapper.findByCid(cid);</span><br><span class="line">    <span class="keyword">if</span>(result==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CartNotFoundException</span>(<span class="string">&quot;数据库该数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断该条记录是否属于当前用户</span></span><br><span class="line">    <span class="keyword">if</span>(!result.getUid().equals(uid))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;非法数据访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.改变商品数量</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.updateNumByCid(cid, result.getNum() + changeNum, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;数据更新过程发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.getNum()+changeNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertNum</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> cartService.alterNum(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;admin&quot;</span>, -<span class="number">20</span>);</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>在控制层基类<code>BaseController</code>中添加购物车数据不存在异常<code>CartNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CartNotFoundException) &#123;</span><br><span class="line">    result.setState(<span class="number">9000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;购物车数据不存在&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /cart/alter<span class="built_in">_</span>num/&#123;cid&#125;/&#123;opcode&#125;  //restful数据访问,cid代表购物车数据id,opcode:1代表增加商品数量，0代表较小商品数量</span><br><span class="line">request method: GET</span><br><span class="line">request params: Integer cid,Integr opcode,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Integer&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/alter_num/&#123;cid&#125;/&#123;opcode&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Integer&gt; <span class="title function_">alterNum</span><span class="params">(<span class="meta">@PathVariable</span> Integer cid,<span class="meta">@PathVariable</span> Integer opcode,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(opcode==<span class="number">0</span>)&#123; <span class="comment">//减少商品数量</span></span><br><span class="line">        num = cartService.alterNum(cid,uid,username,-<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opcode==<span class="number">1</span>) &#123; <span class="comment">//增加商品数量</span></span><br><span class="line">        num = cartService.alterNum(cid,uid,username,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;商品数量改变成功&quot;</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在<code>cart.html</code>页面点击增加或者减少按钮，改变购物车中对应商品的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">showCartList</span><span class="params">()</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">&quot;/cart/&quot;</span></span><br><span class="line">            ,type: <span class="string">&quot;GET&quot;</span></span><br><span class="line">                ,success: function (data)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(data.state == <span class="number">200</span>)&#123;</span><br><span class="line">                        alert(<span class="string">&quot;购物车数据获取成功&quot;</span>);</span><br><span class="line">                        $(<span class="string">&quot;#cart-list&quot;</span>).empty();</span><br><span class="line">                        cartList = data.data;</span><br><span class="line">                        <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;cartList.length;i++)&#123;</span><br><span class="line">                            htmlContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;input name=\&quot;cids\&quot; value=&#x27;#&#123;cid&#125;&#x27; type=\&quot;checkbox\&quot; class=\&quot;ckitem\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;&lt;img src=\&quot;..#&#123;image&#125;collect.png\&quot; class=\&quot;img-responsive\&quot; /&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;#&#123;title&#125;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;¥&lt;span id=\&quot;goodsPrice#&#123;cid&#125;\&quot;&gt;#&#123;price&#125;&lt;/span&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&#x27;&lt;input id=\&quot;price-#&#123;cid&#125;\&quot; type=\&quot;button\&quot; value=\&quot;-\&quot; class=\&quot;num-btn\&quot; onclick=&quot;chageNum(#&#123;cid&#125;,0)&quot;/&gt;\n&#x27;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;input id=\&quot;goodsCount#&#123;cid&#125;\&quot; type=\&quot;text\&quot; size=\&quot;2\&quot; readonly=\&quot;readonly\&quot; class=\&quot;num-text\&quot; value=\&quot;#&#123;num&#125;\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;input id=\&quot;price+#&#123;cid&#125;\&quot; class=\&quot;num-btn\&quot; type=\&quot;button\&quot; value=\&quot;+\&quot; onclick=\&quot;chageNum(#&#123;cid&#125;,1)\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;&lt;span id=\&quot;goodsCast#&#123;cid&#125;\&quot;&gt;#&#123;totalPrice&#125;&lt;/span&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;input type=\&quot;button\&quot; class=\&quot;cart-del btn btn-default btn-xs\&quot; value=\&quot;删除\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                            htmlContent = htmlContent.replaceAll(<span class="string">&quot;#&#123;cid&#125;&quot;</span>,cartList[i].cid);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;image&#125;&quot;</span>,cartList[i].productImage);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;title&#125;&quot;</span>,cartList[i].productTitle+(cartList[i].cartPrice-cartList[i].productPrice));</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;num&#125;&quot;</span>,cartList[i].cartNum);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;price&#125;&quot;</span>,cartList[i].cartPrice);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;totalPrice&#125;&quot;</span>,cartList[i].cartNum*cartList[i].cartPrice);</span><br><span class="line">                            $(<span class="string">&quot;#cart-list&quot;</span>).append(htmlContent);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        alert(<span class="string">&quot;购物车获取数据失败 &quot;</span>+data.message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        ,error:function (xmh)&#123;</span><br><span class="line">            alert(<span class="string">&quot;购物车获取数据发生未知异常&quot;</span>+xmh.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">chageNum</span><span class="params">(cid,opcode)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">&quot;/cart/alter_num/&quot;</span>+cid+<span class="string">&quot;/&quot;</span>+opcode</span><br><span class="line">            ,type: <span class="string">&quot;GET&quot;</span></span><br><span class="line">                ,dataType: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">                    ,success: function (data)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(data.state == <span class="number">200</span>)&#123;</span><br><span class="line">                            <span class="comment">//改变页面数值</span></span><br><span class="line">                            $(<span class="string">&quot;#goodsCount&quot;</span>+cid).val(data.data);</span><br><span class="line">                            <span class="type">let</span> <span class="variable">price</span> <span class="operator">=</span> $(<span class="string">&quot;#goodsPrice&quot;</span>+cid).html();</span><br><span class="line">                            <span class="type">let</span> <span class="variable">totalPrice</span> <span class="operator">=</span> price*data.data;</span><br><span class="line">                            $(<span class="string">&quot;#goodsCast&quot;</span>+cid).html(totalPrice);</span><br><span class="line">                            alert(<span class="string">&quot;购物车商品数量修改成功&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            alert(<span class="string">&quot;购物车商品数量修改失败 &quot;</span>+data.message);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">        ,error:function (xmh)&#123;</span><br><span class="line">            alert(<span class="string">&quot;购物车商品数量修改发生未知异常&quot;</span>+xmh.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十六、订单模块功能实现</title>
      <link href="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97/"/>
      <url>/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h1><h2 id="数据库表创建"><a href="#数据库表创建" class="headerlink" title="数据库表创建"></a>数据库表创建</h2><p><img src="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97/image-20230814154832948.png" alt="image-20230814154832948"></p><p><img src="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97/image-20230814154847205.png" alt="image-20230814154847205"></p><h2 id="订单实体类创建"><a href="#订单实体类创建" class="headerlink" title="订单实体类创建"></a>订单实体类创建</h2><p>在<code>com.bang.store.pojo</code>包下新建对应的实体类<code>Order</code>和<code>OrderItem</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer oid;</span><br><span class="line">    Integer uid;</span><br><span class="line">    String recvName;</span><br><span class="line">    String recvPhone;</span><br><span class="line">    String recvProvince;</span><br><span class="line">    String recvCity;</span><br><span class="line">    String recvArea;</span><br><span class="line">    String recvAddress;</span><br><span class="line">    Long totalPrice;</span><br><span class="line">    Integer status;</span><br><span class="line">    Date orderTime;</span><br><span class="line">    Date payTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    Integer oid;</span><br><span class="line">    Integer pid;</span><br><span class="line">    String title;</span><br><span class="line">    String image;</span><br><span class="line">    Long price;</span><br><span class="line">    Integer num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划需要执行的SQL语句"><a href="#规划需要执行的SQL语句" class="headerlink" title="规划需要执行的SQL语句"></a>规划需要执行的SQL语句</h3><p>创建订单的过程本质是一种数据插入的操作，即<code>insert</code>语句</p><p>1.数据插入订单表<code>t_order</code>中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_order(uid,recv_name,recv_phone,recv_province,recv_city,recv_area</span><br><span class="line">                   ,recv_address,recv_price,total_price,status,</span><br><span class="line">                   order_time,pay_time</span><br><span class="line">                   ,created_user,created_time,modified_user,modified_time)</span><br><span class="line">                   <span class="keyword">values</span>(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);</span><br></pre></td></tr></table></figure><p>2.数据插入订单项表<code>t_order_item</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_order_item(oid,pid,title,image,price,num,created_user,created_time,modified_user,modified_time) <span class="keyword">values</span>(?,?,?,?,?,?,?,?,?,?);</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建订单的持久层接口<code>OrderMapper</code>，在其中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.OrderItem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单功能持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据插入订单数据库表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> order 订单数据对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insertOrder</span><span class="params">(Order order)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据插入订单项数据库表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderItem 订单项数据对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insertOrderItem</span><span class="params">(OrderItem orderItem)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>新建映射文件<code>OrderMapper.xml</code>，在其中编写订单相关的SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;oid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_phone&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvPhone&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_province&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvProvince&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_city&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvCity&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_area&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvArea&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvAddress&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total_price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;totalPrice&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pay_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;payTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderItemPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.OrderItem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertOrder&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;oid&quot;</span>&gt;</span></span><br><span class="line">        insert into t_order(uid,recv_name,recv_phone,recv_province,recv_city,recv_area</span><br><span class="line">        ,recv_address,recv_price,total_price,status,</span><br><span class="line">        order_time,pay_time</span><br><span class="line">        ,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values(#&#123;uid&#125;,#&#123;recvName&#125;,#&#123;recvPhone&#125;,#&#123;recvProvince&#125;,#&#123;recvCity&#125;,#&#123;recvArea&#125;,#&#123;recvAddress&#125;,#&#123;recvPrice&#125;</span><br><span class="line">        ,#&#123;totalPrice&#125;,#&#123;status&#125;,#&#123;orderTime&#125;,#&#123;payTime&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertOrderItem&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into t_order_item(oid,pid,title,image,price,num,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values(#&#123;oid&#125;,#&#123;pid&#125;,#&#123;title&#125;,#&#123;image&#125;,#&#123;price&#125;,#&#123;num&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.OrderItem;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUid(<span class="number">2</span>);</span><br><span class="line">        order.setRecvName(<span class="string">&quot;张佳玮&quot;</span>);</span><br><span class="line">        order.setCreatedUser(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        order.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> orderMapper.insertOrder(order);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">        System.out.println(order.getOid()); <span class="comment">//可以获取对应的主键值oid</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOrderItem</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">        orderItem.setOid(<span class="number">1</span>);</span><br><span class="line">        orderItem.setPid(<span class="number">2</span>);</span><br><span class="line">        orderItem.setTitle(<span class="string">&quot;测试用例&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> orderMapper.insertOrderItem(orderItem);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>插入语句异常类，<code>InsertException</code>在前面的功能模块中已经定义过了</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>1.用户收货地址数据，需要依赖于前端页面传递过来的<code>aid</code>，所以首先对于<code>IAddressService</code>接口新增业务方法<code>getByAid</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid查询对应收货地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 收货地址对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Address <span class="title function_">getByAid</span><span class="params">(Integer aid,Integer uid)</span>;</span><br></pre></td></tr></table></figure><p>2.创建订单业务层接口<code>IOrderService</code>，在其中申明对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 用户地址id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cids 用户结算订单购物车商品id列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 订单数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Address <span class="title function_">creatOrder</span><span class="params">(Integer uid,String username,Integer aid,Integer[] cids)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>1.在<code>AddressServiceImpl</code>中编写<code>getByAid</code>抽象方法的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IOrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 用户地址id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cids 用户结算订单购物车商品id列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 订单数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Order <span class="title function_">creatOrder</span><span class="params">(Integer uid, String username, Integer aid, Integer[] cids)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.创建<code>IOrderService</code>的实现类<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.OrderItem;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IAddressService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ICartService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.vo.CartProductVO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IAddressService addressService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ICartService cartService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">creatOrder</span><span class="params">(Integer uid, String username, Integer aid, Integer[] cids)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建order对象</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        <span class="comment">//2.获取地址数据</span></span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressService.getByAid(aid, uid);</span><br><span class="line">        <span class="comment">//3.获取订单商品列表数据</span></span><br><span class="line">        List&lt;CartProductVO&gt; cartProductVOList = cartService.getVOByCids(uid, cids);</span><br><span class="line">        <span class="comment">//4.计算商品总价</span></span><br><span class="line">        Long totalPrice=<span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">            totalPrice+=cartProductVO.getCartNum()*cartProductVO.getCartPrice();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        order.setUid(uid);</span><br><span class="line">        order.setRecvName(address.getName());</span><br><span class="line">        order.setRecvPhone(address.getPhone());</span><br><span class="line">        order.setRecvProvince(address.getProvinceName());</span><br><span class="line">        order.setRecvCity(address.getCityName());</span><br><span class="line">        order.setRecvArea(address.getAreaName());</span><br><span class="line">        order.setRecvAddress(address.getAddress());</span><br><span class="line">        order.setTotalPrice(totalPrice);</span><br><span class="line">        order.setStatus(<span class="number">0</span>);</span><br><span class="line">        order.setOrderTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="comment">//        order.setPayTime(new Date());</span></span><br><span class="line">        order.setCreatedUser(username);</span><br><span class="line">        order.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        order.setModifiedUser(username);</span><br><span class="line">        order.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> orderMapper.insertOrder(order);</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;订单数据插入发生未知错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.为每个结算商品创建一个订单项</span></span><br><span class="line">        <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">            <span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">            orderItem.setOid(order.getOid());</span><br><span class="line">            orderItem.setPid(cartProductVO.getPid());</span><br><span class="line">            orderItem.setTitle(cartProductVO.getProductTitle());</span><br><span class="line">            orderItem.setImage(cartProductVO.getProductImage());</span><br><span class="line">            orderItem.setPrice(cartProductVO.getCartPrice());</span><br><span class="line">            orderItem.setNum(cartProductVO.getCartNum());</span><br><span class="line">            orderItem.setCreatedUser(username);</span><br><span class="line">            orderItem.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            orderItem.setModifiedUser(username);</span><br><span class="line">            orderItem.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            rows = orderMapper.insertOrderItem(orderItem);</span><br><span class="line">            <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;订单详细项数据插入发生未知错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressService.getByAid(<span class="number">8</span>,<span class="number">4</span>);</span><br><span class="line">    System.out.println(address);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.mockito.internal.matchers.Or;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IOrderService orderService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">creatOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        Integer uid=<span class="number">3</span>;</span><br><span class="line">        String username=<span class="string">&quot;adminTest&quot;</span>;</span><br><span class="line">        Integer aid=<span class="number">11</span>;</span><br><span class="line">        Integer[] cids=&#123;<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.creatOrder(uid, username, aid, cids);</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层无新增异常，无需新增异常处理逻辑</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /order/create</span><br><span class="line">request method: POST</span><br><span class="line">request params: Integer aid,Integer[] cids,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Order&gt;()</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在<code>com.bang.store.controller</code>包下新建订单对应的控制层类<code>OrderController</code>，在其中编写对应处理请求方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单功能对应控制层类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IOrderService orderService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Order&gt; <span class="title function_">createOrder</span><span class="params">(Integer aid, Integer[] cids, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.creatOrder(uid, username, aid, cids);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;订单创建成功&quot;</span>,order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在订单确认页面<code>OrderConfirm.html</code>页面点击结算按钮，向后端发送创建订单请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-create-order&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">createOrder</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createOrder</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// alert(&quot;点击结算按钮&quot;);</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/order/create?aid=&quot;</span>+$(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">val</span>()+<span class="string">&quot;&amp;&quot;</span>+location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>)</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;订单创建成功&quot;</span>);</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;订单号:&quot;</span>+data.<span class="property">data</span>.<span class="property">oid</span>+<span class="string">&quot;,支付金额:￥&quot;</span>+data.<span class="property">data</span>.<span class="property">totalPrice</span>+<span class="string">&quot;.收款方圆心电脑商城&quot;</span>)</span><br><span class="line">                location.<span class="property">href</span>=<span class="string">&quot;payment.html&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;订单创建失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;订单创建发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十七、统计业务方法耗时功能实现</title>
      <link href="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E7%BB%9F%E8%AE%A1%E4%B8%9A%E5%8A%A1%E6%96%B9%E6%B3%95%E8%80%97%E6%97%B6/"/>
      <url>/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E7%BB%9F%E8%AE%A1%E4%B8%9A%E5%8A%A1%E6%96%B9%E6%B3%95%E8%80%97%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="统计业务方法耗时"><a href="#统计业务方法耗时" class="headerlink" title="统计业务方法耗时"></a>统计业务方法耗时</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>检测整个项目所有业务层方法的耗时(开始执行时间和结束执行时间之差)，并且不会影响原始所有代码的逻辑</p><p>使用<code>Spring AOP</code>技术来实现，面向切面编程 </p><p><code>AOP</code>使用示例:</p><ul><li>导入对应依赖maven`坐标</li><li>定义一个类，将这个类作为切面类</li><li>在这个类中定义切面方法(5类)<ul><li>切面方法的修饰符必须是<code>public</code></li><li>切面方法的返回值可以是<code>void</code>或者<code>Object</code>，如果这个方法被<code>@Around</code>注解修饰则此方法必须神明为<code>Object</code>类型，反之随意</li><li>切面方法名称可以自定义</li><li>切面方法可以接收参数，参数是<code>ProceedingJoinPoint proceedingJoinPoint</code>，注解<code>@Around</code>修饰的切面方法必须要传递该参数，其他类型切面方法不做此要求</li></ul></li><li>在切面方法中编辑需要执行的功能代码逻辑</li><li>通过连接点来连接目标方法</li></ul><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="导入对应的依赖"><a href="#导入对应的依赖" class="headerlink" title="导入对应的依赖"></a>导入对应的依赖</h3><p>在项目的<code>pom.xml</code>文件中添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义切面类和对应的切面方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务方法计时切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.bang.store.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">timeCount</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//获取目标方法的方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> proceedingJoinPoint.getSignature().getName();</span><br><span class="line">        Object object;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//方法执行前时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            object = proceedingJoinPoint.proceed();</span><br><span class="line">            <span class="comment">//方法执行结束时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;方法&quot;</span>+methodName+<span class="string">&quot;执行耗时:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十二、购物车模块功能实现</title>
      <link href="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A8%A1%E5%9D%97/"/>
      <url>/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h1><h2 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h2><p><img src="/2023/08/14/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A8%A1%E5%9D%97/image-20230813101249386.png" alt="image-20230813101249386" style="zoom:80%;"></p><h2 id="实体类创建"><a href="#实体类创建" class="headerlink" title="实体类创建"></a>实体类创建</h2><p>在<code>com.bang.store.pojo</code>中创建购物车对应的实体类<code>Cart</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cart</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer cid;</span><br><span class="line">    Integer uid;</span><br><span class="line">    Integer pid;</span><br><span class="line">    Long price;</span><br><span class="line">    Integer num;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决实体类<code>tostring</code>无法打印父类属性的问题</p><p><a href="https://blog.csdn.net/m4330187/article/details/118742946?ydreferer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8%3D">资料参考</a></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>1.用户在商品详细页点击<strong>加入购物车</strong>按钮，像后端发送请求，将对应数据插入数据库，本质是<code>insert</code>语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_cart(uid,pid,price,num,created_user,created_time,modified_user,modified_time) <span class="keyword">values</span>(?,?,?,?,?,?,?,?);</span><br></pre></td></tr></table></figure><p> 2.当前商品在数据库中已经存在时，直接更新数据库中属性num的值即可</p><p>为什么根据cid来更新？</p><p>因为在决定执行插入或者更新操作之前，需要先查询商品在数据库中是否存在，如果存在则执行更新操作，查询即可获取当前记录的cid</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_cart <span class="keyword">set</span> num<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> cid<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><p>3.查询当前商品在购物车中是否存在</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_cart <span class="keyword">where</span> uid<span class="operator">=</span>? <span class="keyword">and</span> pid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建购物车模块业务层接口<code>CartMapper</code>，在其中定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Cart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CartMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询某个商品在购物车中是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车商品数据,不存在返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Cart <span class="title function_">findByUidPid</span><span class="params">(Integer uid, Integer pid)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 享购物车中插入商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cart 商品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(Cart cart)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新购物车商品数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid 购物车数据id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 商品数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 修改者用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 修改操作时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">updateNumByCid</span><span class="params">(Integer cid, Integer num, String modifiedUser, Date modifiedTime)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件的配置"><a href="#SQL映射文件的配置" class="headerlink" title="SQL映射文件的配置"></a>SQL映射文件的配置</h3><p>在<code>resource/static/mapper</code>文件夹下新建映射文件<code>CartMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.CartMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;cartPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Cart&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;cid&quot;</span>&gt;</span></span><br><span class="line">        insert into t_cart(uid,pid,price,num,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values(#&#123;uid&#125;,#&#123;pid&#125;,#&#123;price&#125;,#&#123;num&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateNumByCid&quot;</span>&gt;</span></span><br><span class="line">        update t_cart set num=#&#123;num&#125;,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125; where cid=#&#123;cid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUidPid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;cartPojoMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_cart where uid=#&#123;uid&#125; and pid=#&#123;pid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Cart;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    CartMapper cartMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        cart.setUid(<span class="number">1</span>);</span><br><span class="line">        cart.setPid(<span class="number">2</span>);</span><br><span class="line">        cart.setNum(<span class="number">5</span>);</span><br><span class="line">        cart.setPrice(<span class="number">32L</span>);</span><br><span class="line">        cart.setCreatedUser(<span class="string">&quot;管理者&quot;</span>);</span><br><span class="line">        cart.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        cart.setModifiedUser(<span class="string">&quot;管理者&quot;</span>);</span><br><span class="line">        cart.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.insert(cart);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUidPid</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> cartMapper.findByUidPid(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(cart);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNumByCid</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.updateNumByCid(<span class="number">1</span>, <span class="number">15</span>, <span class="string">&quot;管理员&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>插入数据时异常,<code>InsertException</code>在此前模块已经定义过</p><p>更新数据时异常，<code>UpdateException</code>，在此前模块也已经定义过</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>编写购物车业务层接口<code>com.bang.store.service.IAddressService</code>，在其中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将商品添加至购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 商品数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add2Cart</span><span class="params">(Integer uid,String username,Integer pid,Integer num)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.CartMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Cart;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ICartService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.ProductNotFoundException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UpdateException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    CartMapper cartMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ProductMapper productMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add2Cart</span><span class="params">(Integer uid, String username, Integer pid, Integer num)</span> &#123;</span><br><span class="line">        <span class="comment">//查询当前商品记录在数据库中是否存在</span></span><br><span class="line">        <span class="type">Cart</span> <span class="variable">result</span> <span class="operator">=</span> cartMapper.findByUidPid(uid, pid);</span><br><span class="line">        <span class="keyword">if</span>(result==<span class="literal">null</span>)&#123; <span class="comment">//商品不存在执行插入操作</span></span><br><span class="line">            <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">            <span class="comment">//查询商品信息</span></span><br><span class="line">            <span class="comment">//Q:为什么这里价格不从前端页面传回数据?</span></span><br><span class="line">            <span class="comment">//A:这里可以从前端传递,但是如果功能扩展，需要根据pid查询商品信息，查询商品是否下架或者商品数量是否有货等</span></span><br><span class="line">            <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findById(pid);</span><br><span class="line">            <span class="keyword">if</span>(product==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProductNotFoundException</span>(<span class="string">&quot;商品不存在异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            cart.setUid(uid);</span><br><span class="line">            cart.setPid(pid);</span><br><span class="line">            cart.setPrice(product.getPrice());</span><br><span class="line">            cart.setNum(num);</span><br><span class="line">            cart.setCreatedUser(username);</span><br><span class="line">            cart.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            cart.setModifiedUser(username);</span><br><span class="line">            cart.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.insert(cart);</span><br><span class="line">            <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;商品插入未知异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">//商品存在则执行更新操作</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">cid</span> <span class="operator">=</span> result.getCid();</span><br><span class="line">            num+=result.getNum();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.updateNumByCid(cid, num, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;购物车数据更新发生未知异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.CartMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ICartService cartService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add2Cart</span><span class="params">()</span>&#123;</span><br><span class="line">        Integer uid=<span class="number">1</span>;</span><br><span class="line">        String username=<span class="string">&quot;admin1&quot;</span>;</span><br><span class="line">        Integer pid=<span class="number">100000424</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">        cartService.add2Cart(uid,username,pid,num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p><code>InsertException</code>和<code>UpdateExcpetion</code>的异常处理在前面模块中已经编写，业务层无新增异常类型</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /cart/add<span class="built_in">_</span>to<span class="built_in">_</span>cart</span><br><span class="line">request method: GET</span><br><span class="line">request params: Integer pid,Integer num,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>编写购物车控制层接口<code>com.bang.store.controller.CartController</code>并继承控制层基类<code>BaseController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ICartService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ICartService cartService;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;/add_to_cart&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">add2cart</span><span class="params">(Integer pid, Integer num, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        cartService.add2Cart(uid,username,pid,num);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;商品成功添加到购物车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在商品详情页界面<code>product.html</code>中，用户点击添加购物车按钮，则向后端发送请求，将对应商品数据存入购物车数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击加入一样购物车按钮，向后端发送ajax请求</span></span><br><span class="line">$(<span class="string">&quot;#btn-add-to-cart&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">addToCart</span>(pid,$(<span class="string">&quot;#num&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addToCart</span>(<span class="params">pid,num</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/cart/add_to_cart&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="string">&quot;pid&quot;</span>: pid</span><br><span class="line">            ,<span class="string">&quot;num&quot;</span>: num</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(data.<span class="property">data</span>.<span class="property">message</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;商品添加至购物车失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;商品添加至购物车发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、热销商品和商品详情展示功能实现</title>
      <link href="/2023/08/13/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/"/>
      <url>/2023/08/13/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="热销商品排行"><a href="#热销商品排行" class="headerlink" title="热销商品排行"></a>热销商品排行</h1><p><img src="/2023/08/13/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/image-20230811225640333.png" alt="image-20230811225640333" style="zoom:80%;"></p><p><img src="/2023/08/13/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/image-20230811225700167.png" alt="image-20230811225700167" style="zoom:80%;"></p><h2 id="商品数据库创建"><a href="#商品数据库创建" class="headerlink" title="商品数据库创建"></a>商品数据库创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_product (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  category_id <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类id&#x27;</span>,</span><br><span class="line">  item_type <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品系列&#x27;</span>,</span><br><span class="line">  title <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品标题&#x27;</span>,</span><br><span class="line">  sell_point <span class="type">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品卖点&#x27;</span>,</span><br><span class="line">  price <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品单价&#x27;</span>,</span><br><span class="line">  num <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存数量&#x27;</span>,</span><br><span class="line">  image <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图片路径&#x27;</span>,</span><br><span class="line">  status <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;商品状态  1：上架   2：下架   3：删除&#x27;</span>,</span><br><span class="line">  priority <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;显示优先级&#x27;</span>,</span><br><span class="line">  created_time datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  modified_time datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  created_user <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">  modified_user <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后修改人&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h2 id="商品实体类的创建"><a href="#商品实体类的创建" class="headerlink" title="商品实体类的创建"></a>商品实体类的创建</h2><p>在<code>com.bang.store.pojo</code>包下新建<code>Product</code>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品对应实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    Integer category_id;</span><br><span class="line">    String item_type;</span><br><span class="line">    String title;</span><br><span class="line">    String sell_point;</span><br><span class="line">    Long price;</span><br><span class="line">    Integer num;</span><br><span class="line">    String image;</span><br><span class="line">    Integer status;</span><br><span class="line">    Integer priority;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>热销商品展示，本质是查询语句，根据优先级对所有已上架的商品进行排序，选取优先级最高的四条记录在页面进行展示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_product <span class="keyword">where</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> priority <span class="keyword">DESC</span> limit <span class="number">0</span>,<span class="number">4</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>新建商品持久层接口<code>ProductMapper</code>，在其中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询热销商品前四位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 前四位热销商品数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Product&gt; <span class="title function_">findHotProductList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>在<code>resource/mapper</code>文件夹下创建映射文件<code>ProductMapper.xml</code>，编写对应SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;productPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Product&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;categoryId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;item_type&quot;</span> <span class="attr">property</span>=<span class="string">&quot;itemType&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sell_point&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sellPoint&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findHotProductList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;productPojoMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_product where status=1 order by priority DESC limit 0,4;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ProductMapper productMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHotProductList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Product&gt; productList = productMapper.findHotProductList();</span><br><span class="line">        <span class="keyword">for</span> (Product product : productList) &#123;</span><br><span class="line">            System.out.println(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>无明显异常</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>新建商品业务层接口<code>IProductService</code>，在其中申明对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IProductService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询返回热销商品的前四条数据列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Product&gt; <span class="title function_">findHotProducts</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IProductService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IProductService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ProductMapper productMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">findHotProducts</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Product&gt; hotProductList = productMapper.findHotProductList();</span><br><span class="line">        <span class="comment">//前端页面只需要id、title、price和image四个字段，</span></span><br><span class="line">        <span class="comment">//为了减小数据传输带宽消耗，可以将其他字段设置为null</span></span><br><span class="line">        <span class="comment">//这里为了便利，我们不做此处理</span></span><br><span class="line">        <span class="keyword">return</span> hotProductList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IProductService productService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hotProductList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Product&gt; hotProducts = productService.findHotProducts();</span><br><span class="line">        <span class="keyword">for</span> (Product hotProduct : hotProducts) &#123;</span><br><span class="line">            System.out.println(hotProduct);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层无新增异常，所以控制层无新增异常处理逻辑</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /product</span><br><span class="line">request method: GET</span><br><span class="line">request params: null</span><br><span class="line">response data: new JsonResult&lt;List&lt;Product&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>创建商品控制层类<code>ProductController</code>，继承于控制层基类<code>BaseController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IProductService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IProductService productService;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;Product&gt;&gt; <span class="title function_">findHotProducts</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Product&gt; hotProducts = productService.findHotProducts();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;热销商品数据获取成功&quot;</span>,hotProducts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p><code>index.html</code>页面一加载，就像后端发送请求，获取热销商品数据并展示在前端页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(document).ready(function ()&#123;</span><br><span class="line">    showHotList();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function <span class="title function_">showHotList</span><span class="params">()</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">&quot;/product/&quot;</span></span><br><span class="line">            ,type: <span class="string">&quot;GET&quot;</span></span><br><span class="line">                ,success: function (data)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(data.state == <span class="number">200</span>)&#123;</span><br><span class="line">                        alert(<span class="string">&quot;热销商品数据获取成功&quot;</span>);</span><br><span class="line">                        <span class="comment">//将数据展示在对应的页面</span></span><br><span class="line">                        <span class="comment">//清空原始页面</span></span><br><span class="line">                        $(<span class="string">&quot;#hot-list&quot;</span>).empty();</span><br><span class="line">                        <span class="type">let</span> <span class="variable">hotProducts</span> <span class="operator">=</span> data.data;</span><br><span class="line">                        <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;hotProducts.length;i++)&#123;</span><br><span class="line">                            <span class="type">let</span> <span class="variable">htmlContent</span> <span class="operator">=</span> <span class="string">&quot;&lt;div class=\&quot;col-md-12\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;div class=\&quot;col-md-7 text-row-2\&quot;&gt;&lt;a href=\&quot;product.html？id#&#123;id&#125;\&quot;&gt;#&#123;title&#125;&lt;/a&gt;&lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;div class=\&quot;col-md-2\&quot;&gt;¥#&#123;price&#125;&lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;div class=\&quot;col-md-3\&quot;&gt;&lt;img src=../#&#123;image&#125;/collect.png class=\&quot;img-responsive\&quot; /&gt;&lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/div&gt;&quot;</span></span><br><span class="line">                                htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;title&#125;&quot;</span>,hotProducts[i].title);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;price&#125;&quot;</span>,hotProducts[i].price);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;image&#125;&quot;</span>,<span class="string">&quot;../&quot;</span>+hotProducts[i].image);</span><br><span class="line">                            $(<span class="string">&quot;#hot-list&quot;</span>).append(htmlContent);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        alert(<span class="string">&quot;热销商品数据获取失败 &quot;</span>+data.message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        ,error:function (xmh)&#123;</span><br><span class="line">            alert(<span class="string">&quot;热销商品数据获取发生未知错误&quot;</span>+xmh.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="热销商品详情展示"><a href="#热销商品详情展示" class="headerlink" title="热销商品详情展示"></a>热销商品详情展示</h1><p>用户点击热销商品列表中的某个商品名，即跳转到对应的商品详情页</p><p>热销商品列表页和商品详情页之间的关联,通过<code>&lt;a href=\&quot;product.html？id#&#123;id&#125;\&quot;&gt;#&#123;title&#125;&lt;/a&gt;</code>进行关联</p><h2 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句-1"><a href="#规划执行的SQL语句-1" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>根据用户点击商品<code>id</code>查询对应的商品信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_product <span class="keyword">where</span> id<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-2"><a href="#接口和抽象方法-2" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>ProductMapper</code>接口中编写对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商品信息数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Product <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置-1"><a href="#SQL映射文件配置-1" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;productPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_product where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试-2"><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findById(<span class="number">10000017</span>);</span><br><span class="line">    System.out.println(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层-1"><a href="#业务层-1" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常-1"><a href="#规划异常-1" class="headerlink" title="规划异常"></a>规划异常</h3><p>查询时，数据库中可能不存在该商品信息，此时应触发<code>ProductNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ProductNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-3"><a href="#接口和抽象方法-3" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>IProductAddress</code>中编写对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Product <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现-1"><a href="#抽象方法实现-1" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Product <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findById(id);</span><br><span class="line">    <span class="keyword">if</span>(product==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProductNotFoundException</span>(<span class="string">&quot;商品不存在异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-3"><a href="#单元测试-3" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.getById(<span class="number">10000017</span>);</span><br><span class="line">    System.out.println(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层-1"><a href="#控制层-1" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理-1"><a href="#异常处理-1" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层新增<code>ProductNotFound</code>异常，需要在控制层基类<code>BaseController</code>中添加对应的异常处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ProductNotFoundException) &#123;</span><br><span class="line">    result.setState(<span class="number">8000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;商品不存在&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求-1"><a href="#设计请求-1" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/&#123;id&#125;</span><br><span class="line">request method: GET</span><br><span class="line">request params: Integer id</span><br><span class="line">response data: new JsonResult&lt;Product&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求-1"><a href="#处理请求-1" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Product&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;商品数据获取成功&quot;</span>,product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面-1"><a href="#前端页面-1" class="headerlink" title="前端页面"></a>前端页面</h2><p>通过<code>$.getUrlParam(&quot;id&quot;)</code>获取传递的参数值(商品堵塞<code>id</code>)</p><p>需要引入相关的库文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/jquery-getUrlParam.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id =$.<span class="title function_">getUrlParam</span>(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>编写商品数据加载代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//解析url传递的参数值</span></span><br><span class="line">    <span class="keyword">let</span> id =$.<span class="title function_">getUrlParam</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="title function_">showProduct</span>(id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showProduct</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/product/&quot;</span>+id</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;商品数据获取成功&quot;</span>);</span><br><span class="line">                <span class="comment">//将数据展示在对应的页面</span></span><br><span class="line">                $(<span class="string">&quot;#product-title&quot;</span>).<span class="title function_">html</span>(data.<span class="property">data</span>.<span class="property">title</span>);</span><br><span class="line">                $(<span class="string">&quot;#product-sell-point&quot;</span>).<span class="title function_">html</span>(data.<span class="property">data</span>.<span class="property">sellPoint</span>);</span><br><span class="line">                $(<span class="string">&quot;#product-price&quot;</span>).<span class="title function_">html</span>(data.<span class="property">data</span>.<span class="property">price</span>);</span><br><span class="line">                <span class="comment">//图片属性</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#product-image-&quot;</span>+i).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;..&quot;</span>+data.<span class="property">data</span>.<span class="property">image</span>+i+<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">                    $(<span class="string">&quot;#product-image-&quot;</span>+i+<span class="string">&quot;-big&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;..&quot;</span>+data.<span class="property">data</span>.<span class="property">image</span>+i+<span class="string">&quot;_big.png&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;商品数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;商品数据获取发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十、收货地址删除功能的实现</title>
      <link href="/2023/08/12/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%A0%E9%99%A4/"/>
      <url>/2023/08/12/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="收货地址删除"><a href="#收货地址删除" class="headerlink" title="收货地址删除"></a>收货地址删除</h1><p>用户点击删除按钮，向后端发送请求，删除用户该条地址记录，同时前端页面该地址删除</p><p><img src="/2023/08/12/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%A0%E9%99%A4/image-20230811152159496.png" alt="image-20230811152159496"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>1.删除该地址之前需要判断该数据在数据库中是否存在，此功能在设置默认地址模块已经实现</p><p>2.判断该条地址是否与当前登录用户相匹配，此功能在设置默认地址模块也已经实现</p><p>3.删除对应的地址数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> aid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>4.如果用户删除的是默认收货地址，则将剩下的地址中的某一条设置为新的默认地址，规则可以自定义：将最新修改时间的收货地址设置为默认的收货地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> uid<span class="operator">=</span>? <span class="keyword">order</span> <span class="keyword">by</span> modified_time <span class="keyword">DESC</span> limit <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>5.如果用户本身只有一条收货地址，删除之后，不用进行后续操作；查询用户地址数目语句在前面新增地址功能模块已经实现过了</p><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>AddressMapper</code>类中定义对应抽象方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对应的地址记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">deleteByAid</span><span class="params">(Integer aid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询某个用户最新修改的地址记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询的最新修改地址数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Address <span class="title function_">findLastModified</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>在<code>AddressMapper.xml</code>中编写对应的SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByAid&quot;</span>&gt;</span></span><br><span class="line">    delete from t_address where aid=#&#123;aid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findLastModified&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;addressPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_address where uid=#&#123;uid&#125; order by modified_time DESC limit 0,1;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">aid</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.deleteByAid(aid);</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findLastModified</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findLastModified(<span class="number">3</span>);</span><br><span class="line">    System.out.println(address);</span><br><span class="line">    System.out.println(address.getModifiedTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p> 当前数据不存在异常；地址数据与用户不匹配异常在之前功能模块中已经定义过了</p><p>删除过程中可能发生未知错误引发异常，定义对应的异常类<code>DeleteException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">DeleteException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p><code>在IAddressService</code>接口中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户指定的地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址数据id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer aid,Integer uid,String username)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer aid, Integer uid, String username)</span> &#123;</span><br><span class="line">    <span class="comment">//1.删除地址数据是否存在</span></span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findByAid(aid);</span><br><span class="line">    <span class="keyword">if</span>(address==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressNotFoundException</span>(<span class="string">&quot;地址数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断当前地址数据是否属于登陆的用户</span></span><br><span class="line">    <span class="keyword">if</span>(!address.getUid().equals(uid))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;非法数据访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.删除指定地址数据</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.deleteByAid(aid);</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeleteException</span>(<span class="string">&quot;删除过程发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果删除是非默认地址，则无需进行后续操作</span></span><br><span class="line">    <span class="keyword">if</span>(address.getIsDefault()==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//4.查询用户所剩地址数目</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//5.查询最新修改记录的数据</span></span><br><span class="line">        <span class="type">Address</span> <span class="variable">lastModifiedAddress</span> <span class="operator">=</span> addressMapper.findLastModified(uid);</span><br><span class="line">        <span class="comment">//6.将最新修改的地址数据设置为默认收货地址</span></span><br><span class="line">        rows = addressMapper.updateDefaultByAid(lastModifiedAddress.getAid(), username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;数据更新发生未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">aid</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">    Integer uid=<span class="number">3</span>;</span><br><span class="line">    String username=<span class="string">&quot;管理员二号&quot;</span>;</span><br><span class="line">    addressService.delete(aid,uid,username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层新增<code>DeleteException</code>，在控制基类<code>BaseController</code>中添加对应的异常处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DeleteException)&#123;</span><br><span class="line">    result.setState(<span class="number">7003</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;数据删除过程发生未知错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/delete/&#123;aid&#125;  <span class="params">#</span>restful风格数据请求</span><br><span class="line">request method: GET</span><br><span class="line">request params: Integer aid,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;()</span><br></pre></td></tr></table></figure><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/delete/&#123;aid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;aid&quot;)</span> Integer aid,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    addressService.delete(aid,uid,username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;地址数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在<code>address.html</code>编写对应的页面逻辑</p><p>在删除按钮组件添加<code>onclick</code>属性，绑定对应删除逻辑函数</p><p>组件添加<code>onclick</code>属性，绑定事件处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="comment">//清空原始内容</span></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> trContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">tag</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">address</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">phone</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-edit\&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a onclick=&#x27;del(#&#123;aid&#125;)&#x27; class=\&quot;btn btn-xs add-del btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-trash-o\&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a onclick=&#x27;setDefault(#&#123;aid&#125;)&#x27; class=\&quot;btn btn-xs add-def btn-default\&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    trContent = trContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;aid&#125;&quot;</span>,addressList[i].<span class="property">aid</span>);</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(trContent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第一个地址默认为默认地址，所以其所在的默认地址按钮需要隐藏</span></span><br><span class="line">                <span class="comment">//某个元素隐藏，采用hide()方法</span></span><br><span class="line">                $(<span class="string">&quot;.add-def:eq(0)&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>编写删除按钮事件处理函数<code>del</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">del</span>(<span class="params">aid</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/delete/&quot;</span>+aid</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;删除地址成功&quot;</span>);</span><br><span class="line">                <span class="comment">//刷新页面，展示地址列表</span></span><br><span class="line">                <span class="title function_">showAddress</span>()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;删除地址失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;删除地址发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九、设置默认收货地址功能的实现</title>
      <link href="/2023/08/11/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/09%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/"/>
      <url>/2023/08/11/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/09%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="设置默认收货地址"><a href="#设置默认收货地址" class="headerlink" title="设置默认收货地址"></a>设置默认收货地址</h1><p>点击<strong>设为默认</strong>按钮，当前地址设置为默认，后面的按钮隐藏，其他的地址全部显示该按钮</p><p><img src="/2023/08/11/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/09%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/image-20230810231339259.png" alt="image-20230810231339259"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>1.检测用户想设置为默认地址的数据在数据库中是否存在，本质是一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> aid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>2.将用户选择的地址设为默认地址之前，先将该用户所有的收货地址全部设置为非默认</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_address <span class="keyword">set</span> is_default<span class="operator">=</span><span class="number">0</span> <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>3.将用户选择的该条地址设置为默认</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_address <span class="keyword">set</span> is_default<span class="operator">=</span><span class="number">1</span>,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> aid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>AddressMapper</code>接口中申明对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid查询收货地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 记录存在则返回对应地址数据，反之返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Address <span class="title function_">findByAid</span><span class="params">(Integer aid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将某个用户所有地址均设置为非默认</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateNoneDefaulit</span><span class="params">(Integer uid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将用户某条地址设置为默认</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 修改者名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 记录修改时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateDefaultByAid</span><span class="params">(Integer aid, String modifiedUser, Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射"><a href="#配置SQL映射" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><p>在<code>AddressMapper.xml</code>中编写对应的映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByAid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;addressPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_address where aid=#&#123;aid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateNoneDefaulit&quot;</span>&gt;</span></span><br><span class="line">    update t_address set is_default=0 where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateDefaultByAid&quot;</span>&gt;</span></span><br><span class="line">    update t_address set is_default=1,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125; where aid=#&#123;aid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findByAid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(address);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNoneDefaulit</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.updateNoneDefaulit(<span class="number">2</span>);</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDefaultByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.updateDefaultByAid(<span class="number">3</span>, <span class="string">&quot;管理员&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>1.数据更新过程中可能发生未知异常，<code>UpdateException</code>，此异常类在其他功能中已经定义过了</p><p>2.访问的收货地址不属于当前登录的用户，非法访问异常<code>AccessDeniedException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非法访问异常:</span></span><br><span class="line"><span class="comment"> *      可能由于其他模块存在BUG，导致展示的数据不属于当前登录用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AccessDeniedException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.当前收货地址在数据库不存在所引发的异常，<code>AddressNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前地址数据在数据库中不存在所引发的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AddressNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>IAddressService</code>接口中定义对应的抽象方法</p><p>业务逻辑：根据<code>aid</code>查询当前地址记录是否存在，不存在触发<code>AddressNotFoundException</code>；判断当前地址是否属于当前登录的用户，不属于触发<code>AccessDeniedExcption</code>;否则，首先将当前用户所有收获地址全部设为非默认，然后再将当前用户选择的地址设置为默认</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更改当前用户的默认地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 操作者姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDefault</span><span class="params">(Integer aid,Integer uid,String username)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDefault</span><span class="params">(Integer aid, Integer uid, String username)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询当前地址记录是否存在</span></span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findByAid(aid);</span><br><span class="line">    <span class="keyword">if</span>(address==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressNotFoundException</span>(<span class="string">&quot;当前地址不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断当前地址是否属于该用户</span></span><br><span class="line">    <span class="keyword">if</span>(!address.getUid().equals(uid))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;拒绝访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.将该用户所有地址设置为非默认</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.updateNoneDefaulit(uid);</span><br><span class="line">    <span class="keyword">if</span>(rows==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;数据更新发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.将用户选择的收货地址设置为默认</span></span><br><span class="line">    rows = addressMapper.updateDefaultByAid(aid, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;数据更新发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">setDefault</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">aid</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;管理员&quot;</span>;</span><br><span class="line">    addressService.setDefault(aid,uid,username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>在控制层基类<code>BaseController</code>中增加新的异常处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AddressNotFoundException)&#123;</span><br><span class="line">    result.setState(<span class="number">7001</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;收货地址不存在&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccessDeniedException)&#123;</span><br><span class="line">    result.setState(<span class="number">7002</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;非法数据访问&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/set<span class="built_in">_</span>default/&#123;aid&#125;   //采用RestFul风格进行访问  </span><br><span class="line">request method: GET</span><br><span class="line">request params: @PathVariable(&quot;aid&quot;) Integer aid,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;()</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//采用restful风格进行数据传输</span></span><br><span class="line"><span class="comment">//采用注解 @PathVariable进行参数和数据之间的映射</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/set_default/&#123;aid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@PathVariable(&quot;aid&quot;)</span> Integer aid, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    addressService.setDefault(aid,uid,username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;地址设置默认成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>用户点击<code>Address.html</code>页面中的设置默认按钮，会向后端服务器发送请求</p><p>给页面中的设置默认组件添加<code>onclick()</code>函数，然后绑定对应的事件处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">showAddress</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="comment">//清空原始内容</span></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> trContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">tag</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">address</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">phone</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-edit\&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs add-del btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-trash-o\&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a onclick=&#x27;setDefault(#&#123;aid&#125;)&#x27; class=\&quot;btn btn-xs add-def btn-default\&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    trContent = trContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;aid&#125;&quot;</span>,addressList[i].<span class="property">aid</span>);</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(trContent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第一个地址默认为默认地址，所以其所在的默认地址按钮需要隐藏</span></span><br><span class="line">                <span class="comment">//某个元素隐藏，采用hide()方法</span></span><br><span class="line">                $(<span class="string">&quot;.add-def:eq(0)&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认按钮点击事件响应函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setDefault</span>(<span class="params">aid</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/set_default/&quot;</span>+aid</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;默认地址设置成功&quot;</span>);</span><br><span class="line">                <span class="comment">//刷新页面，展示地址列表</span></span><br><span class="line">                <span class="title function_">showAddress</span>()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;默认地址设置失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;默认地址设置失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、收获地址列表展示功能的实现</title>
      <link href="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/08%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/"/>
      <url>/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/08%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="收获地址列表展示"><a href="#收获地址列表展示" class="headerlink" title="收获地址列表展示"></a>收获地址列表展示</h1><p>用户收货地址展示页面</p><p><img src="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/08%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/image-20230809233924765.png" alt="image-20230809233924765" style="zoom: 80%;"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>用户收货地址页面展示，本质上是SQL查询语句，按照<code>is_default</code>字段进行排序，因为按照逻辑默认收货地址应该排在第一个;其余地址按照创建时间进行排序，最近创建的排在前面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> uid<span class="operator">=</span>? <span class="keyword">order</span> <span class="keyword">by</span> is_default <span class="keyword">DESC</span>,created_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>AddressMapper</code>接口中定义抽象方法<code>findByUid</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询当前用户的收货地址列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户拥有地址列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;Address&gt; <span class="title function_">findByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL关系映射"><a href="#SQL关系映射" class="headerlink" title="SQL关系映射"></a>SQL关系映射</h3><p>在<code>AddressMapper.xml</code>文件中编写抽象方法对应的映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;addressPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_default&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDefault&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 部分属性，实体类与数据库表命名不一致，需要编写映射规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;addressPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_address where uid=#&#123;uid&#125; order by is_default DESC,created_time DESC;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Address&gt; addressList = addressMapper.findByUid(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (Address address : addressList) &#123;</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>无额外的异常发生</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在接口<code>IAddressService</code>中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前用户拥有的所有收货地址列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 收获地址列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;Address&gt; <span class="title function_">getByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>在实现类实现对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">getByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    List&lt;Address&gt; addressList = addressMapper.findByUid(uid);</span><br><span class="line">    <span class="comment">//前端只需展示:地址类型、收货人姓名、详细地址、联系电话、是否默认这几个字段的信息</span></span><br><span class="line">    <span class="comment">//为了节省传输带宽和提高效率，将其他属性值进行清空</span></span><br><span class="line">    <span class="comment">//清空字段太多，其实这里也可以在持久层的SQL语句上进行处理，只查询对应的那几个字段，这样其他字段默认为null,这样可能造成复用困难</span></span><br><span class="line">    <span class="comment">//如果后续其他位置需要address对象其他信息，则不建议在持久层只查询几个字段</span></span><br><span class="line">    <span class="keyword">for</span> (Address address : addressList) &#123;</span><br><span class="line">        address.setAid(<span class="literal">null</span>);</span><br><span class="line">        address.setUid(<span class="literal">null</span>);</span><br><span class="line">        address.setProvinceCode(<span class="literal">null</span>);</span><br><span class="line">        address.setCityCode(<span class="literal">null</span>);</span><br><span class="line">        address.setAreaCode(<span class="literal">null</span>);</span><br><span class="line">        address.setTel(<span class="literal">null</span>);</span><br><span class="line">        address.setCreatedUser(<span class="literal">null</span>);</span><br><span class="line">        address.setCreatedTime(<span class="literal">null</span>);</span><br><span class="line">        address.setModifiedUser(<span class="literal">null</span>);</span><br><span class="line">        address.setModifiedTime(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> addressList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Address&gt; addressList = addressService.getByUid(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (Address address : addressList) &#123;</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>无新增异常</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/get<span class="built_in">_</span>by<span class="built_in">_</span>uid</span><br><span class="line">request method: GET</span><br><span class="line">request params: HttpSession session</span><br><span class="line">response data: new JsonResult&lt;List&lt;Address&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get_by_uid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;Address&gt;&gt; <span class="title function_">getByUid</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//获取当前登录用户id</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    List&lt;Address&gt; addressList = addressService.getByUid(uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户地址列表请求成功&quot;</span>,addressList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>一加载<code>address.html</code>页面，就向后端发送请求，获取当前用户的收货地址列表，并展示在页面对应位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="comment">//清空原始内容</span></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> trContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">tag</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">address</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">phone</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-edit\&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs add-del btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-trash-o\&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs add-def btn-default\&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(trContent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第一个地址默认为默认地址，所以其所在的默认地址按钮需要隐藏</span></span><br><span class="line">                <span class="comment">//某个元素隐藏，采用hide()方法</span></span><br><span class="line">                $(<span class="string">&quot;.add-def:eq(0)&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、新增收货地址功能的实现</title>
      <link href="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="新增收货地址"><a href="#新增收货地址" class="headerlink" title="新增收货地址"></a>新增收货地址</h1><p>收货地址管理页面</p><p><img src="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230808193330806.png" alt="image-20230808193330806" style="zoom:80%;"></p><p>点击新增收货地址按钮，出现新的页面，地址信息编辑表单</p><p><img src="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230808193413631.png" alt="image-20230808193413631" style="zoom:80%;"></p><h2 id="各功能的开发顺序"><a href="#各功能的开发顺序" class="headerlink" title="各功能的开发顺序"></a>各功能的开发顺序</h2><p>收货地址模块的功能：列表的展示、修改、删除、设置默认、新增收货地址</p><p>功能模块的开发顺序：新增收货地址-》列表展示-》设置默认收货地址-》删除收货地址-》修改收货地址</p><h2 id="数据库表的创建"><a href="#数据库表的创建" class="headerlink" title="数据库表的创建"></a>数据库表的创建</h2><p><img src="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230808194228462.png" alt="image-20230808194228462" style="zoom: 50%;"></p><h2 id="收货地址实体类的创建"><a href="#收货地址实体类的创建" class="headerlink" title="收货地址实体类的创建"></a>收货地址实体类的创建</h2><p>创建收货地址实体类<code>com.bang.store.pojo.Address</code>,继承自<code>BasePojo</code>基类，因为其同样含有四个公共字段 </p><p>属性名与数据表名一致，只是注意数据库字段一般命名方式为<code>xx_xx</code>，而java采用驼峰命名法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer aid;</span><br><span class="line">    Integer uid;</span><br><span class="line">    String name;</span><br><span class="line">    String provinceName;</span><br><span class="line">    String provinceCode;</span><br><span class="line">    String cityName;</span><br><span class="line">    String cityCode;</span><br><span class="line">    String areaName;</span><br><span class="line">    String areaCode;</span><br><span class="line">    String zip;</span><br><span class="line">    String address;</span><br><span class="line">    String phone;</span><br><span class="line">    String tel;</span><br><span class="line">    String tag;</span><br><span class="line">    Integer isDefault;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>新增收货地址本质上是将表单数据插入对应数据库表中，对应插入语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address(uid,name,province_name,province_code,city_name,city_code,area_name,area_code,zip,address,phone,tel,tag,is_default,created_user,created_time,modified_user,modified_time) <span class="keyword">values</span>(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);</span><br></pre></td></tr></table></figure><p>各个平台用户收货地址的保存是有上限的，在这里我们规定每个用户最多只能有3条(便于测试，实际上允许的地址数据会多很多)地址数据， 所以总体逻辑发生改变，即插入数据之前都需判断当前用户地址数目</p><p>本质上为依据用户id(uid)查询对应数据条数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> t_address <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建一个新的接口<code>AddressMapper</code>，在该接口中定义上述两个<code>sql</code>语句对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址模块的mapper接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入用户收货地址到数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 用户地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(Address address)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询当前用户收货地址条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户收货地址条数 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">countByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射"><a href="#配置SQL映射" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><p>在<code>resource/mapper</code>下创建地址映射文件<code>Address.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.AddressMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;addressPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_default&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDefault&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from t_address where uid=#&#123;uid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- useGeneratedKeys=&quot;true&quot; keyProperty=&quot;uid&quot; 开启某个字段作为主键并值自动递增，并指明字段名称  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;aid&quot;</span>&gt;</span></span><br><span class="line">        insert into t_address(uid,name,province_name,province_code,city_name,city_code,</span><br><span class="line">        area_name,area_code,zip,address,phone,tel,tag,is_default,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values(#&#123;uid&#125;,#&#123;name&#125;,#&#123;provinceName&#125;,#&#123;provinceCode&#125;,#&#123;cityName&#125;,#&#123;cityCode&#125;,</span><br><span class="line">        #&#123;areaName&#125;,#&#123;areaCode&#125;,#&#123;zip&#125;,#&#123;address&#125;,#&#123;phone&#125;,#&#123;tel&#125;,#&#123;tag&#125;,#&#123;isDefault&#125;</span><br><span class="line">        ,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>在<code>test/java</code>下创建<code>com.bang.store.mapper.AddressMapperTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AddressMapper addressMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countByUid</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前用户地址数目:&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address.setUid(<span class="number">1</span>);</span><br><span class="line">        address.setProvinceName(<span class="string">&quot;安徽省&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.insert(address);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>如果用户插入的是第一条收货地址，需要将当前地址设置为默认的收货地址(即当前地址的<code>is_default</code>字段设置为1)。如果查询到的结果大于3，这是需要抛出业务层的异常<code>AddressCountLimit</code>表明单个用户插入地址数据已达上限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单个用户地址数目超过上限异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressCountLimitException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AddressCountLimit</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>地址数据插入过程的异常，<code>InsertException</code>在之前用户信息的功能模块中已经定义过了</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建地址业务逻辑接口<code>IAddressService</code>，在其中定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增收货地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 用户地址数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Integer uid, String username, Address address)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>创建接口实现类，<code>AddressServiceImpl</code>，在其中实现接口抽象方法</p><p>在配置文件<code>application.properties</code>文件中定义收货地址数量上限</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user.address.max-count</span>:<span class="string">3</span></span><br></pre></td></tr></table></figure><p><code>Spring</code>读取配置文件数据方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer maxCount;</span><br></pre></td></tr></table></figure><p>业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AddressMapper addressMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址上限设置在application.properties配置文件里</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxCount;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Integer uid, String username, Address address)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询当前用户拥有地址数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">        <span class="comment">//超出地址上限，报异常</span></span><br><span class="line">        <span class="keyword">if</span>(count&gt;maxCount)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressCountLimitException</span>(<span class="string">&quot;收货地址数目超出规定上限&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首条收货地址设置为默认收货地址</span></span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">            address.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        address.setCreatedUser(username);</span><br><span class="line">        address.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        address.setModifiedUser(username);</span><br><span class="line">        address.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//插入地址数据</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.insert(address);</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;地址数据插入未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IAddressService addressService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;孙权&quot;</span>;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        address.setName(<span class="string">&quot;王伟&quot;</span>);</span><br><span class="line"></span><br><span class="line">        addressService.addAddress(uid,username,address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层抛出的收货地址数目大于规定最大阈值的异常处理,在控制层基类<code>BaseController</code>中定义对应的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AddressCountLimitException) &#123;</span><br><span class="line">    result.setState(<span class="number">7000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;收获地址数目超出上限&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/add<span class="built_in">_</span>new<span class="built_in">_</span>address</span><br><span class="line">request method: POST</span><br><span class="line">request params: Address address,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>新建收货地址控制层类<code>AddressController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/address&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IAddressService addressService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add_new_address&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">addAddress</span><span class="params">(Address address, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//获取uid和用户名</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        <span class="comment">//调用业务层,插入地址数据</span></span><br><span class="line">        addressService.addAddress(uid,username,address);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;新增收货地址成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-add-new-address&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/add_new_address&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-add-new-address&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="获取省市区列表"><a href="#获取省市区列表" class="headerlink" title="获取省市区列表"></a>获取省市区列表</h1><h2 id="省市区列表数据库表的创建"><a href="#省市区列表数据库表的创建" class="headerlink" title="省市区列表数据库表的创建"></a>省市区列表数据库表的创建</h2><p>创建数据库存储省市区列表数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_dict_district (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  parent <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  code <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/10/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230809192240718.png" alt="image-20230809192240718"></p><p>数据库字段说明</p><ul><li><code>parent</code>表示父区域代码号</li><li><code>code</code>表示区域自己的代码号</li><li><code>name</code>区域名称</li></ul><h2 id="省市区列表实体类的创建"><a href="#省市区列表实体类的创建" class="headerlink" title="省市区列表实体类的创建"></a>省市区列表实体类的创建</h2><p>创建对应的实体类<code>com.bang.store.pojo.district</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省市区地址实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">District</span> &#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String parent;</span><br><span class="line">    String code;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表持久层"><a href="#省市区列表持久层" class="headerlink" title="省市区列表持久层"></a>省市区列表持久层</h2><h3 id="规划执行的SQL语句-1"><a href="#规划执行的SQL语句-1" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>查询语句，根据父代号进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_dict_district <span class="keyword">where</span> parent<span class="operator">=</span>? <span class="keyword">order</span> <span class="keyword">by</span> code <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-2"><a href="#接口和抽象方法-2" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建新的接口<code>DistrictMapper</code>，在其中定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省市区地址持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DistrictMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父代号查询所有的省市区列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;District&gt; <span class="title function_">findByParent</span><span class="params">(String parent)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射-1"><a href="#配置SQL映射-1" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><p>在<code>resource/mapper</code>文件夹下创建<code>DistrictMappper.xml</code>文件，编写对应的SQL映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.DistrictMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByParent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bang.store.pojo.District&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dict_district where parent=#&#123;parent&#125; order by code ASC;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试-2"><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line">import com.bang.store.pojo.District;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class DistrictMapperTest &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    DistrictMapper districtMapper;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void findByParent()&#123;</span><br><span class="line">        String parent=&quot;86&quot;;</span><br><span class="line">        List&lt;District&gt; districtList = districtMapper.findByParent(parent);</span><br><span class="line">        for (District district : districtList) &#123;</span><br><span class="line">            System.out.println(district);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表持久层-1"><a href="#省市区列表持久层-1" class="headerlink" title="省市区列表持久层"></a>省市区列表持久层</h2><h3 id="规划异常-1"><a href="#规划异常-1" class="headerlink" title="规划异常"></a>规划异常</h3><p>此功能无异常需要处理</p><h3 id="抽象接口和方法"><a href="#抽象接口和方法" class="headerlink" title="抽象接口和方法"></a>抽象接口和方法</h3><p>新建省市区列表业务层接口<code>IDistrictService</code>，在其中创建对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省市区数据业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IDistrictService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父代号查询省市区信息列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区信息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;District&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现-1"><a href="#抽象方法实现-1" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>创建业务层接口实现类<code>DistrictServiceImpl</code>，在其中实现接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IDistrictService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    DistrictMapper districtMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;District&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span> &#123;</span><br><span class="line">        <span class="comment">//调用持久层查询数据列表</span></span><br><span class="line">        List&lt;District&gt; districtList = districtMapper.findByParent(parent);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在进行网络数据传输时，为了避免无效数据的传递，可以将无效数据设置为null，</span></span><br><span class="line"><span class="comment">         * 这样一方面可以节省流量另一方面可以提高效率</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 在此问题中，依据parent代号查询其下的所有省市区信息，真正有效字段其实只有code和name，一次其他字段可以认为i设置为null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (District district : districtList) &#123;</span><br><span class="line">            district.setId(<span class="literal">null</span>);</span><br><span class="line">            district.setParent(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> districtList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-3"><a href="#单元测试-3" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.District;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByParent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="string">&quot;86&quot;</span>;</span><br><span class="line">        List&lt;District&gt; districts = districtService.getByParent(parent);</span><br><span class="line">        <span class="keyword">for</span> (District district : districts) &#123;</span><br><span class="line">            System.out.println(district);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表控制层"><a href="#省市区列表控制层" class="headerlink" title="省市区列表控制层"></a>省市区列表控制层</h2><h3 id="设计请求-1"><a href="#设计请求-1" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /district/</span><br><span class="line">request method: GET</span><br><span class="line">request params: String parent</span><br><span class="line">response data: new JsonResult&lt;Lsit&lt;District&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><p>创建新的控制层类<code>DistrictController</code>，在里面编写对应的请求处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.District;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IDistrictService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/district&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以/district开头的请求url均会被拦截到该方法</span></span><br><span class="line">    <span class="comment">//url=/district或者url=/district/均有效</span></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;District&gt;&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span>&#123;</span><br><span class="line">        List&lt;District&gt; districtList = districtService.getByParent(parent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;省市区信息获取成功&quot;</span>,districtList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表前端页面"><a href="#省市区列表前端页面" class="headerlink" title="省市区列表前端页面"></a>省市区列表前端页面</h2><p>前一个版本省市区信息是保存在前端页面的<code>js</code>文件中，通过<code>js</code>代码获取的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/distpicker.data.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/distpicker.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现将这两行代码注释掉，让省市区数据信息依靠后端接口获取</p><p>检查前端页面在提交表单数据省市区数据时是否有相关的name属性和id属性</p><h1 id="获取省市区名称"><a href="#获取省市区名称" class="headerlink" title="获取省市区名称"></a>获取省市区名称</h1><p>依据省市区代码获取对应的省市区名称</p><h2 id="省市区名称持久层"><a href="#省市区名称持久层" class="headerlink" title="省市区名称持久层"></a>省市区名称持久层</h2><h3 id="规划执行的SQL语句-2"><a href="#规划执行的SQL语句-2" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>依据省市区code查询对应省市区的name，本质为一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> t_dict_district <span class="keyword">where</span> code<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-3"><a href="#接口和抽象方法-3" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据省市区代号查询对应的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 省市区代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">String <span class="title function_">findNameByCode</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射-2"><a href="#配置SQL映射-2" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findNameByCode&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">    select name from t_dict_district where code=#&#123;code&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试-4"><a href="#单元测试-4" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findNameByCode</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> districtMapper.findNameByCode(<span class="string">&quot;110000&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区名称业务层"><a href="#省市区名称业务层" class="headerlink" title="省市区名称业务层"></a>省市区名称业务层</h2><p>无特定的异常需要处理，所以跳过<strong>规划异常</strong></p><h3 id="接口和抽象方法-4"><a href="#接口和抽象方法-4" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依据省市区代码获取对应名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 省市区号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">String <span class="title function_">getNameByCode</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现-2"><a href="#抽象方法实现-2" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> districtMapper.findNameByCode(code);</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-5"><a href="#单元测试-5" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getNameByCode</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> districtService.getNameByCode(<span class="string">&quot;120000&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增收货地址业务层的优化"><a href="#新增收货地址业务层的优化" class="headerlink" title="新增收货地址业务层的优化"></a>新增收货地址业务层的优化</h2><p>用户新增收货地址，前端页面只会向后端传递省市区的代码，所以业务层在调用持久层接口将数据存入数据库时，需要调用<code>IDistrictService</code>接口中的<code>getNameByCode</code>来获取对应省市区名称，再存入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AddressMapper addressMapper;</span><br><span class="line">    <span class="comment">//地址业务层接口需要依赖省市区业务层接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址上限设置在application.properties配置文件里</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxCount;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Integer uid, String username, Address address)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询当前用户拥有地址数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">        <span class="comment">//超出地址上限，报异常</span></span><br><span class="line">        <span class="keyword">if</span>(count&gt;maxCount)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressCountLimitException</span>(<span class="string">&quot;收货地址数目超出规定上限&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首条收货地址设置为默认收货地址</span></span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">            address.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        address.setCreatedUser(username);</span><br><span class="line">        address.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        address.setModifiedUser(username);</span><br><span class="line">        address.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//依据前端反馈的省市区号码获取对应省市区名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">provinceName</span> <span class="operator">=</span> districtService.getNameByCode(address.getProvinceCode());</span><br><span class="line">        <span class="type">String</span> <span class="variable">cityName</span> <span class="operator">=</span> districtService.getNameByCode(address.getCityCode());</span><br><span class="line">        <span class="type">String</span> <span class="variable">areaName</span> <span class="operator">=</span> districtService.getNameByCode(address.getAreaCode());</span><br><span class="line">        address.setProvinceName(provinceName);</span><br><span class="line">        address.setCityName(cityName);</span><br><span class="line">        address.setAreaName(areaName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入地址数据</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.insert(address);</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;地址数据插入未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取省市区前端页面"><a href="#获取省市区前端页面" class="headerlink" title="获取省市区前端页面"></a>获取省市区前端页面</h2><p><code>addAddress.html</code>页面中编写对应的省市区展示，根据用户不同的选择将对应的省市区信息填充到对应的下拉列表</p><h3 id="编写相关事件代码"><a href="#编写相关事件代码" class="headerlink" title="编写相关事件代码"></a>编写相关事件代码</h3><p>整体前端页面的逻辑</p><ol><li>用户点击新增收货地址按钮</li><li>出现地址信息表单页面，触发事件，自动将86(代表中国地区编号)发送后端，请求省份信息列表，填充到省份下拉列表，此时城市和区县下拉列表为只存在默认选项</li><li>省份下拉列表值发生改变，触发事件，自动向后端发送请求(携带当前选中省份号码)，请求该省份的所有城市信息列表，填充到城市下拉列表</li><li>城市下拉列表发生改变，出发事件，自动向后端发送请求(携带当前选中城市号码)，请求该城市的所有区县信息列表，填充到区县下拉列表</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//每个下拉列表的默认选项</span></span><br><span class="line">    <span class="comment">//注意:value属性非常重要,实际传给后端的值就是value属性值,这里将其定义为对应省市区的代码编号</span></span><br><span class="line">    <span class="keyword">let</span> defaultOption = <span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择 ----&lt;/option&gt;&quot;</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">showProvinceList</span>();<span class="comment">//外部定于对应的方法</span></span><br><span class="line">    <span class="comment">//城市下拉列表添加对应子标签 option子标签</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(defaultOption);</span><br><span class="line">    <span class="comment">//区域下拉列表添加对应子标签 option子标签</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(defaultOption);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//省的下拉列表数据展示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showProvinceList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择省/直辖市 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/district/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="string">&quot;parent=86&quot;</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="keyword">let</span> provinceList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;provinceList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+provinceList[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+provinceList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;省份数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;省份数据获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * change()函数用于监听某个空间是否发生改变，一旦发生改变，触发事件，执行对应函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//省的下拉列表如果发生改变,会向后端服务器发送请求查询对应省下的所有市数据列表,并展示在对应的下拉列表</span></span><br><span class="line">$(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//清空城市和区县下拉列表中所有内容</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    <span class="comment">//填充默认值</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择市 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择区县 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">val</span>()==<span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">//默认选项直接返回</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/district/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="string">&quot;parent=&quot;</span>+$(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="keyword">let</span> cityList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;cityList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+cityList[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+cityList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;城市数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;城市数据获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//城市的下拉列表发生改变,会向后端服务器发送请求,查询对应市下面的区县信息列表，并展示在对应的下拉列表</span></span><br><span class="line">$(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//清空区县下拉列表中所有的原始子标签</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    <span class="comment">//填充默认值</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择区县 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    <span class="comment">//选择默认无效项,直接返回</span></span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">val</span>()==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/district/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="string">&quot;parent=&quot;</span>+$(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="keyword">let</span> areaList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;areaList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+areaList[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+areaList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;区县数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;区县数据获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;#btn-add-new-address&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/add_new_address&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-add-new-address&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、上传头像功能的实现</title>
      <link href="/2023/08/06/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/06%E4%B8%8A%E4%BC%A0%E5%A4%B4%E5%83%8F%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/06/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/06%E4%B8%8A%E4%BC%A0%E5%A4%B4%E5%83%8F%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="上传头像功能的实现"><a href="#上传头像功能的实现" class="headerlink" title="上传头像功能的实现"></a>上传头像功能的实现</h1><p>用户上传头像图片，涉及到的问题：图片在数据库中以何种形式存在？</p><p>文件上传保存在服务器的某个位置，只需要将该位置记录即可，即数据库中对应字段存储的是头像图片在服务器中的存储路径</p><p>在实际应用场景中，一般是将静态资源文件(图片、视频、文本文件等资源文件)存储在一台专门的电脑上，将该电脑作为一个单独的服务器使用</p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划SQL语句"><a href="#规划SQL语句" class="headerlink" title="规划SQL语句"></a>规划SQL语句</h3><p>将用户头像存储路径更新到数据库表中的avatar字段，本质为一条更新语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> avatar<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="抽象接口和方法"><a href="#抽象接口和方法" class="headerlink" title="抽象接口和方法"></a>抽象接口和方法</h3><p>在<code>UserMapper</code>接口定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户图像</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户ide</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> avatar 用户图像存储地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 信息修改者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 信息修改时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateAvatarByUid</span><span class="params">(Integer uid,String avatar,String modifiedUser,Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法配置到映射文件UserMapper-xml"><a href="#抽象方法配置到映射文件UserMapper-xml" class="headerlink" title="抽象方法配置到映射文件UserMapper.xml"></a>抽象方法配置到映射文件<code>UserMapper.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAvatarByUid&quot;</span>&gt;</span></span><br><span class="line">    update t_user set avatar=#&#123;avatar&#125;,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125; where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAvatarByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    String avatar=<span class="string">&quot;/userPhoto/yifei.png&quot;</span>;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">modifiedTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">modifiedUser</span> <span class="operator">=</span> <span class="string">&quot;管理员&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateAvatarByUid(<span class="number">3</span>, avatar, modifiedUser, modifiedTime);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响行数:&quot;</span>+rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><ul><li>打开页面时，可能找不到用户的信息或用户已被删除</li><li>信息插入过程中发生未知错误</li></ul><blockquote><p>前面的功能以前模块已经实现对应代码</p></blockquote><h3 id="抽象接口和方法-1"><a href="#抽象接口和方法-1" class="headerlink" title="抽象接口和方法"></a>抽象接口和方法</h3><p>在 <code>IUserService</code>接口中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户图像信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> avatar 用户图像数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">alertAvatar</span><span class="params">(Integer uid,String avatar)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertAvatar</span><span class="params">(Integer uid, String avatar)</span> &#123;</span><br><span class="line">    <span class="comment">//查询当前用户是否存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新数据库avatar字段</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateAvatarByUid(uid, avatar, user.getUsername(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;图像信息更新过程发生未知异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertAvatar</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/libai.png&quot;</span>;</span><br><span class="line">    iUserService.alertAvatar(uid,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层的两种可能异常，在以前功能模块中，控制层异常处理类中均有对应的逻辑处理</p><p>由于文件上传过程中可能由于大小、格式、类型等错误引发异常，所以需要专门规划文件上传的异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FileUploadException: 泛指文件上传异常，基类，继承自RunTimeException</span><br><span class="line">FileEmptyException: 文件为空异常</span><br><span class="line">FileSizeException: 文件大小超出限制异常</span><br><span class="line">FileTypeException: 文件类型异常</span><br><span class="line">FileUploadIoException: 文件读写异常</span><br></pre></td></tr></table></figure><p>在控制层异常处理基类中定义对应的异常逻辑(不同的异常，基于不同的状态响应码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(&#123;ServiceException.class, FileUploadException.class&#125;)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileEmptyException) &#123;</span><br><span class="line">    result.setState(<span class="number">6000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileSizeException) &#123;</span><br><span class="line">    result.setState(<span class="number">6001</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件大小超出限制异常&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileTypeException)&#123;</span><br><span class="line">    result.setState(<span class="number">6002</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件类型异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileUploadIOException) &#123;</span><br><span class="line">    result.setState(<span class="number">6003</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件读写异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /user/alert_avatar</span><br><span class="line">request method: POST(原因:GET最大允许提交数据量为2K)</span><br><span class="line">request params: HttpSession,MultiPartFile File //(SpringMVC提供的文件上传对象)</span><br><span class="line">response data: JsonResult&lt;String&gt; //(页面切换，需要时刻保存头像路径，否则再次切换头像页面无法显示)</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 设置上传文件的最大值 10MB */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_AVATAR_SIZE</span> <span class="operator">=</span> <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="comment">/** 设置允许接收的文件类型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; AVATAR_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/bmp&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MultiPartFile是SpringMVC提供的一个接口，这个接口为我们包装了获取文件类型的数据，任何类型的File都可以接受</span></span><br><span class="line"><span class="comment">     * SpringBoot整合了SpringMVC,只需要在处理请求的方法参数列表上申明一个MultiPartFile的参数</span></span><br><span class="line"><span class="comment">     * SpringBoot会自定将接受的文件数据赋值给这个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_avatar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">alertAvatar</span><span class="params">(MultipartFile file,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.getSize()&gt;MAX_AVATAR_SIZE)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;文件超出大小限制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!AVATAR_TYPE.contains(file.getContentType()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>(<span class="string">&quot;文件类型错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//规定文件存储路径 .../upload/xxx.xx</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent);</span><br><span class="line">    <span class="comment">//parent文件夹不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    String[] splits = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="comment">//文件后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> splits[splits.length-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//生成随机的文件名(为避免不同用户文件名重复导致数据被覆盖丢失</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> uuid+<span class="string">&quot;.&quot;</span>+suffix; <span class="comment">//新的文件名</span></span><br><span class="line">    System.out.println(newFileName);</span><br><span class="line">    <span class="comment">//存储路径</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,newFileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.transferTo(dest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>(<span class="string">&quot;文件读写错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    System.out.println(dest.getPath());</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>+newFileName;</span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line"></span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户头像修改成功&quot;</span>,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>直接通过表单发送请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--上传头像表单开始--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/user/alert_avatar&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 control-label&quot;</span>&gt;</span>选择头像:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img-avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../images/index/user.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-responsive&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-offset-2 col-md-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-primary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="部分功能优化和Bug解决"><a href="#部分功能优化和Bug解决" class="headerlink" title="部分功能优化和Bug解决"></a>部分功能优化和Bug解决</h2><h3 id="更改SpringMVC默认文件大小"><a href="#更改SpringMVC默认文件大小" class="headerlink" title="更改SpringMVC默认文件大小"></a>更改SpringMVC默认文件大小</h3><p>方式一：在配置文件<code>application.yaml</code>里修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">       <span class="attr">multipart:</span></span><br><span class="line">         <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">         <span class="attr">max-request-size:</span> <span class="string">15MB</span></span><br></pre></td></tr></table></figure><p>方式二：采用Java代码修改上传文件大小限制，在主类中进行配置，可以定义一个方法，用@Bean修饰，在类的前面添加@Configuration修饰，该方法返回值类型`MultiPartConfigElement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//指明当前项目中mapper接口的路径,项目启动会自动加载对应接口文件</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.bang.store.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(StoreApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MultipartConfigElement <span class="title function_">getMultipartConfigElement</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建配置类工厂类对象</span></span><br><span class="line">        <span class="type">MultipartConfigFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultipartConfigFactory</span>();</span><br><span class="line">        <span class="comment">//设置需要创建对象相关信息</span></span><br><span class="line">        <span class="comment">//10MB</span></span><br><span class="line">        factory.setMaxFileSize(DataSize.of(<span class="number">10</span>, DataUnit.MEGABYTES));</span><br><span class="line">        factory.setMaxRequestSize(DataSize.of(<span class="number">15</span>,DataUnit.MEGABYTES));</span><br><span class="line">        <span class="comment">//通过工厂类创建MultiPartConfigElement对象</span></span><br><span class="line">        <span class="keyword">return</span> factory.createMultipartConfig();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面图像显示"><a href="#页面图像显示" class="headerlink" title="页面图像显示"></a>页面图像显示</h3><p>通过ajax发送请求，解析数据，设置到image对应标签进行数据展示</p><p>前端表单数据映射</p><ul><li>$(“#表单id”).serialize()<ul><li>可以将表单数据自动拼接成key=value的结构提交给服务器，一般提交的是普通的空间数据(比如:text\password\radio\checkbox等)</li></ul></li><li><p>new FormData($(“#表单id”)[index])</p><ul><li>FormData类，将表单中数据保持原有结构进行数据的发送</li></ul></li><li><p>ajax默认处理数据时按照字符串的形式进行处理，以及默认采用字符串的形式提交数据，关闭这两个默认功能</p><ul><li>```javascript<br>processData: false //处理数据的形式，false为关闭以字符串的形式处理数据<br>contentType: false // 关闭默认的数据提交格式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&quot;#btn-change-avatar&quot;).click(function ()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &quot;/user/alert_avatar&quot;</span><br><span class="line">        ,type: &quot;POST&quot;</span><br><span class="line">        ,data: new FormData($(&quot;#form-horizontal&quot;)[0])</span><br><span class="line">        ,processData: false //处理数据的形式，false为关闭以字符串的形式处理数据</span><br><span class="line">        ,contentType: false // 关闭默认的数据提交格式</span><br><span class="line">        ,dataType: &quot;JSON&quot;</span><br><span class="line">        ,success: function (data)&#123;</span><br><span class="line">            if(data.state == 200)&#123;</span><br><span class="line">                //图像显示在页面</span><br><span class="line">                //attr(key,val) 给标签对应属性设置对应值</span><br><span class="line">                $(&quot;#img-avatar&quot;).attr(&quot;src&quot;,data.data);</span><br><span class="line">                alert(&quot;图像修改成功&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                alert(&quot;图像上传失败 &quot;+data.message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,error:function (xmh)&#123;</span><br><span class="line">            alert(&quot;图像上传发生未知异常&quot;+xmh.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="页面跳转图像消失解决办法"><a href="#页面跳转图像消失解决办法" class="headerlink" title="页面跳转图像消失解决办法"></a>页面跳转图像消失解决办法</h3><p>从其他页面再次回到当前页面或者登陆时显示图像</p><ul><li><p>图像上传成功后，可以将图像路径保存在cookie对象，然后每次检测用户打开上传图像页面，在该页面中通过<code>$(document).ready()</code>方法自动检测读取cookie中图像并设置到image的src属性</p></li><li><p>此逻辑应该写在登陆页面</p><ul><li><p>前端query中cookie的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入cookie js文件</span></span><br><span class="line">&lt;script src=<span class="string">&quot;../bootstrap3/js/jquery.cookie.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">//2.调用cookie方法</span></span><br><span class="line"><span class="comment">//三个参数,key,avlue为键值对，time为cookie的存活时间,单位为天</span></span><br><span class="line">$.<span class="title function_">cookie</span>(key,value,time); </span><br></pre></td></tr></table></figure></li><li><p>login.html页面新增逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-login&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-login&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                <span class="comment">//图像路径设置到cookie对象</span></span><br><span class="line">                $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>,data.<span class="property">data</span>.<span class="property">avatar</span>, &#123;<span class="attr">expires</span>:<span class="number">1</span>&#125;);</span><br><span class="line">                <span class="comment">//跳转到对应页面</span></span><br><span class="line">                <span class="comment">//相对路径指定对应页面位置</span></span><br><span class="line">                location.<span class="property">href</span>=<span class="string">&quot;index.html&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;登陆失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;登陆失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>upload.html里面检测加载cookie的逻辑代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//获取cookie数据</span></span><br><span class="line">    <span class="keyword">let</span> avatar = $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(avatar);</span><br><span class="line">    $(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,avatar);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>重新上传图像，需要覆盖原始cookie里的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-change-avatar&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/alert_avatar&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>($(<span class="string">&quot;#form-horizontal&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        ,<span class="attr">processData</span>: <span class="literal">false</span> <span class="comment">//处理数据的形式，false为关闭以字符串的形式处理数据</span></span><br><span class="line">        ,<span class="attr">contentType</span>: <span class="literal">false</span> <span class="comment">// 关闭默认的数据提交格式</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//图像显示在页面</span></span><br><span class="line">                <span class="comment">//attr(key,val) 给标签对应属性设置对应值</span></span><br><span class="line">                $(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,data.<span class="property">data</span>);</span><br><span class="line">                <span class="comment">//覆盖原来的cookie</span></span><br><span class="line">                $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>,data.<span class="property">data</span>, &#123;<span class="attr">expires</span>:<span class="number">1</span>&#125;);</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;图像修改成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;图像上传失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;图像上传发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、个人资料功能的实现</title>
      <link href="/2023/08/06/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/05%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/06/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/05%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="个人资料功能"><a href="#个人资料功能" class="headerlink" title="个人资料功能"></a>个人资料功能</h1><p>用户提交在页面填写个人资料，点击修改按钮提交至后台程序，保存至数据库</p><p><img src="/2023/08/06/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/05%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230806093455640.png" alt="image-20230806093455640"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><h4 id="更新用户信息的SQL语句"><a href="#更新用户信息的SQL语句" class="headerlink" title="更新用户信息的SQL语句"></a>更新用户信息的SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> phone<span class="operator">=</span>?,email<span class="operator">=</span>?,gender<span class="operator">=</span>?，modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h4 id="根据用户名查询用户数据"><a href="#根据用户名查询用户数据" class="headerlink" title="根据用户名查询用户数据"></a>根据用户名查询用户数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>此功能在修改密码功能模块已经实现</p><h3 id="接口和抽象方法的设计"><a href="#接口和抽象方法的设计" class="headerlink" title="接口和抽象方法的设计"></a>接口和抽象方法的设计</h3><p>在<code>UserMapper</code>接口中定义更新用户信息方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据uid更新用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 更新操作受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateInfoByUid</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法配置到映射文件UserMapper-xml中"><a href="#抽象方法配置到映射文件UserMapper-xml中" class="headerlink" title="抽象方法配置到映射文件UserMapper.xml中"></a>抽象方法配置到映射文件<code>UserMapper.xml</code>中</h3><p>采用<code>Mybatis</code>的<code>if</code>标签，只有在各个字段不为空时，才会执行更新操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateInfoByUid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.bang.store.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update t_user</span><br><span class="line">    set</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone!=null&quot;</span>&gt;</span>phone=#&#123;phone&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span>gender=#&#123;gender&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125;</span><br><span class="line">    where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateInfoByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUid(<span class="number">2</span>);</span><br><span class="line">    user.setPhone(<span class="string">&quot;15823209876&quot;</span>);</span><br><span class="line">    user.setGender(<span class="number">1</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;zhangfei@163.com&quot;</span>);</span><br><span class="line">    user.setModifiedUser(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">    user.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateInfoByUid(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响函数:&quot;</span>+rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>业务层主要实现的功能</p><ul><li>用户进入当前页面，系统查询用户信息，并填充到页面对应的文本框</li><li>用户如果点击修改按钮，则执行用户信息更新操作，将对应信息写入数据库</li></ul><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><ul><li>打开页面时，可能找不到用户的信息或用户已被删除</li><li>信息插入过程中发生未知错误</li></ul><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>IUserService</code>接口中，定义对应的抽象方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 根据用户id查询对应用户信息</span><br><span class="line">* @param uid 用户id</span><br><span class="line">* @return 用户信息</span><br><span class="line">*/</span><br><span class="line">User findUserByUid(Integer uid);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 修改更新用户信息</span><br><span class="line">* @param uid 用户id</span><br><span class="line">* @param username 用户姓名</span><br><span class="line">* @param user 用户信息对象</span><br><span class="line">*/</span><br><span class="line">void alertInfo(Integer uid,String username,User user);</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>在<code>`UserServiceImpl</code>中实现上述两个抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findUserByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;当前用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertInfo</span><span class="params">(Integer uid, String username, User user)</span> &#123;</span><br><span class="line">    <span class="comment">//存入信息之前，仍然要判断当前用户是否存在</span></span><br><span class="line">    <span class="comment">//可能用户在此页面停留很久导致用户不存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">curuser</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(curuser==<span class="literal">null</span> || curuser.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;当前用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填充信息</span></span><br><span class="line">    user.setUid(uid);</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setModifiedUser(username);</span><br><span class="line">    user.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据库</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateInfoByUid(user);</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;更新用户信息过程发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUserByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> iUserService.findUserByUid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateInfoByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUid(<span class="number">2</span>);</span><br><span class="line">    user.setPhone(<span class="string">&quot;122&quot;</span>);</span><br><span class="line">    user.setGender(<span class="number">1</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;zhangfei@163.com&quot;</span>);</span><br><span class="line">    user.setModifiedUser(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">    user.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    iUserService.alertInfo(<span class="number">2</span>,<span class="string">&quot;张飞2&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>用户不存在异常和插入过程异常在前面的功能中均已经实现，所以异常处理类中无需增加新的代码逻辑</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><h4 id="打开页面，用户信息展示"><a href="#打开页面，用户信息展示" class="headerlink" title="打开页面，用户信息展示"></a>打开页面，用户信息展示</h4><p>一打开个人资料页面，便向后台发送查询当前用户请求</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /user/get<span class="built_in">_</span>by<span class="built_in">_</span>id</span><br><span class="line">request method: GET</span><br><span class="line">request params: HttpSession session</span><br><span class="line">response data: new JsonResult&lt;User&gt;</span><br></pre></td></tr></table></figure><h4 id="点击修改按钮，更新用户信息"><a href="#点击修改按钮，更新用户信息" class="headerlink" title="点击修改按钮，更新用户信息"></a>点击修改按钮，更新用户信息</h4><p>用户点击修改按钮，向后台发送请求，后台进行数据库更新</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /user/alert<span class="built_in">_</span>info</span><br><span class="line">request method: POST</span><br><span class="line">request params: User user,HttpSession session</span><br><span class="line">response data: JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在<code>UserController</code>里编写对应的请求处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(&quot;/get_by_id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">getById</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findUserByUid(uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;OK&quot;</span>,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">alertInfo</span><span class="params">(User user,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    userService.alertInfo(uid,username,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面修改"><a href="#前端页面修改" class="headerlink" title="前端页面修改"></a>前端页面修改</h2><h3 id="功能1"><a href="#功能1" class="headerlink" title="功能1"></a>功能1</h3><p>打开<code>userdata.html</code>页面，会自动发送<code>ajax</code>请求到<code>\user\get_by_uid</code>，查询对应数据并展示到页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;&#125; );</span><br><span class="line"><span class="comment">//页面加载完成自动执行里面的函数逻辑</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/get_by_id&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//请求成功，数据展示</span></span><br><span class="line">                $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(data.<span class="property">data</span>.<span class="property">username</span>);</span><br><span class="line">                $(<span class="string">&quot;#phone&quot;</span>).<span class="title function_">val</span>(data.<span class="property">data</span>.<span class="property">phone</span>);</span><br><span class="line">                $(<span class="string">&quot;#email&quot;</span>).<span class="title function_">val</span>(data.<span class="property">data</span>.<span class="property">email</span>);</span><br><span class="line">                <span class="keyword">let</span> gender = (data.<span class="property">data</span>.<span class="property">gender</span>==<span class="number">0</span>?$(<span class="string">&quot;#gender-female&quot;</span>):$(<span class="string">&quot;#gender-male&quot;</span>));</span><br><span class="line">                gender.<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>,<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户信息获取失败&quot;</span> +data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户信息获取失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="功能2"><a href="#功能2" class="headerlink" title="功能2"></a>功能2</h3><p>检测用户点击修改按钮，发送请求到<code>\user\alert_info</code>，进行后台数据更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-change-info&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/alert_info&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-change-info&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户信息修改成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户信息修改失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户信息修改失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：运行时数据区概述及线程</title>
      <link href="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章：运行时数据区概述及线程"><a href="#第三章：运行时数据区概述及线程" class="headerlink" title="第三章：运行时数据区概述及线程"></a>第三章：运行时数据区概述及线程</h1><h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p>java程序执行流程</p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104157210.png" alt="image-20230805104157210" style="zoom:80%;"></p><p> <img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104430286.png" alt="image-20230805104430286" style="zoom:80%;"></p><h3 id="JVM系统概述"><a href="#JVM系统概述" class="headerlink" title="JVM系统概述"></a>JVM系统概述</h3><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104726588.png" alt="image-20230805104726588" style="zoom:80%;"></p><h3 id="运行时数据区内存划分"><a href="#运行时数据区内存划分" class="headerlink" title="运行时数据区内存划分"></a>运行时数据区内存划分</h3><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104944035.png" alt="image-20230805104944035" style="zoom:80%;"></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805105219674.png" alt="image-20230805105219674" style="zoom:80%;"></p><h3 id="线程间共享"><a href="#线程间共享" class="headerlink" title="线程间共享"></a>线程间共享</h3><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805105747129.png" alt="image-20230805105747129" style="zoom:80%;"></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程概述"><a href="#线程概述" class="headerlink" title="线程概述"></a>线程概述</h3><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805105936035.png" alt="image-20230805105936035" style="zoom:80%;"></p><h3 id="JVM系统线程"><a href="#JVM系统线程" class="headerlink" title="JVM系统线程"></a>JVM系统线程</h3><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805110315551.png" alt="image-20230805110315551" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：程序计数器</title>
      <link href="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
      <url>/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章：程序计数器"><a href="#第四章：程序计数器" class="headerlink" title="第四章：程序计数器"></a>第四章：程序计数器</h1><h2 id="程序计数器-PC寄存器-的介绍"><a href="#程序计数器-PC寄存器-的介绍" class="headerlink" title="程序计数器(PC寄存器)的介绍"></a>程序计数器(PC寄存器)的介绍</h2><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805144249787.png" alt="image-20230805144249787" style="zoom:80%;"></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805144642697.png" alt="image-20230805144642697" style="zoom:80%;"></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805145041516.png" alt="image-20230805145041516" style="zoom:80%;"></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805145741710.png" alt="image-20230805145741710" style="zoom:80%;"></p><p>  对于运行时数据区里的每一个内存结构，需要重点关注以下两个部分：GC(垃圾回收)和OOM(OutOfMemoryError)</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805150200250.png" alt="image-20230805150200250" style="zoom:80%;"></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805151257080.png" alt="image-20230805151257080" style="zoom:80%;"></p><h2 id="PC寄存器面试常见问题"><a href="#PC寄存器面试常见问题" class="headerlink" title="PC寄存器面试常见问题"></a>PC寄存器面试常见问题</h2><h3 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h3><ul><li>使用PC寄存器存储字节码指令地址有什么用？</li><li>为什么使用PC寄存器记录当前线程的执行地址呢？</li></ul><p><strong>Ans:</strong></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805151822032.png" alt="image-20230805151822032" style="zoom:80%;"></p><h3 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h3><ul><li>PC寄存器为什么会被设定为线程私有？</li></ul><p><strong>Ans:</strong></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805152201883.png" alt="image-20230805152201883" style="zoom:80%;"></p><h2 id="补充：CPU时间片"><a href="#补充：CPU时间片" class="headerlink" title="补充：CPU时间片"></a>补充：CPU时间片</h2><p><strong>宏观并行，微观并发</strong></p><p><img src="/2023/08/05/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805152647595.png" alt="image-20230805152647595" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、用户密码修改功能的实现</title>
      <link href="/2023/08/04/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/04%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/04/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/04%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h1><p>需要用户提交原始密码和新密码，再根据当前登录用户进行信息的修改操作</p><p><img src="/2023/08/04/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/04%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230803224929626.png" alt="image-20230803224929626"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划需要执行的SQL语句"><a href="#规划需要执行的SQL语句" class="headerlink" title="规划需要执行的SQL语句"></a>规划需要执行的SQL语句</h3><p>根据用户uid修改用户的password值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> password<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>根据uid查询用户数据，在修改密码之前，要保证当前用户数据存在，检测当前用户是否被标记删除，检测用户输入的原始密码是否正确</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法"><a href="#设计接口和抽象方法" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p>在接口<code>UserMapper</code>中定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据uid更改用户密码字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password 更改的新密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modifiedUser 更改者用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modifiedDate 更改操作时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 受影响的行数，用于后续判断是否更新成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Integer <span class="title function_">updatePasswordByUid</span><span class="params">(Integer uid, String password, String modifiedUser, Date modifiedDate)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户uid查询用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前用户对象，找不到返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">findByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法配置到映射文件UserMapper-xml中"><a href="#抽象方法配置到映射文件UserMapper-xml中" class="headerlink" title="抽象方法配置到映射文件UserMapper.xml中"></a>抽象方法配置到映射文件<code>UserMapper.xml</code>中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePasswordByUid&quot;</span>&gt;</span></span><br><span class="line">    update t_user set password=#&#123;password&#125;,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedDate&#125;</span><br><span class="line">    where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="功能单元测试"><a href="#功能单元测试" class="headerlink" title="功能单元测试"></a>功能单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePasswordByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> userMapper.updatePasswordByUid(<span class="number">2</span>,<span class="string">&quot;znew&quot;</span>,<span class="string">&quot;张飞&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    System.out.println(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划可能产生的异常"><a href="#规划可能产生的异常" class="headerlink" title="规划可能产生的异常"></a>规划可能产生的异常</h3><p>整个过程可能发生的错误</p><ul><li>用户输入的原始密码错误；用户找不到或者已被删除(is_delete字段为1)</li><li>update执行过程中引发的未知错误</li></ul><p>密码不匹配，用户找不到的异常类在登陆功能中以实现过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户插入数据时产生的未知异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UpdateException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法-1"><a href="#设计接口和抽象方法-1" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p>用户密码修改核心方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改密码和新方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 当前用户名,也可视为密码修改操作的执行者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldPassword 用户输入的原始密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newPassword 用户输入的新密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">alertPassword</span><span class="params">(Integer uid,String username,String oldPassword,String newPassword)</span>;</span><br></pre></td></tr></table></figure><p>实现方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertPassword</span><span class="params">(Integer uid, String username, String oldPassword, String newPassword)</span> &#123;</span><br><span class="line">    <span class="comment">//1.根据uid查询当前用户信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="comment">//2.判断当前用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;当前用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.判断用户输入的原始密码是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> user.getSalt();</span><br><span class="line">    <span class="keyword">if</span>(!user.getPassword().equals(getMD5password(oldPassword,salt)))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordNotMatchException</span>(<span class="string">&quot;用户密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.修改密码</span></span><br><span class="line">    <span class="comment">//计算新密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> getMD5password(newPassword,salt);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updatePasswordByUid(uid, password, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;用户信息插入发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="功能单元测试-1"><a href="#功能单元测试-1" class="headerlink" title="功能单元测试"></a>功能单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertPassword</span><span class="params">()</span>&#123;</span><br><span class="line">    iUserService.alertPassword(<span class="number">1</span>,<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;li123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>在基类<code>BaseController</code>中添加新的异常类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UpdateException)&#123;</span><br><span class="line">            result.setState(<span class="number">5003</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;更新数据时未知异常&quot;</span>);</span><br><span class="line">        &#125; </span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: /user/alert<span class="built_in">_</span>password</span><br><span class="line">method: post</span><br><span class="line">request params: String oldPassword,String newPassword</span><br><span class="line">response data: new JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/alert_password&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">alertPassword</span><span class="params">(String oldPassword,String newPassword,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户名和用户密码</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    userService.alertPassword(uid,username,oldPassword,newPassword);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;密码修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面开发"><a href="#前端页面开发" class="headerlink" title="前端页面开发"></a>前端页面开发</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-change-password&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/alert_password&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-change-password&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;密码修改成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;密码修改失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;密码修改失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：JVM与Java体系结构</title>
      <link href="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：JVM与Java体系结构"><a href="#第一章：JVM与Java体系结构" class="headerlink" title="第一章：JVM与Java体系结构"></a>第一章：JVM与Java体系结构</h1><h2 id="虚拟机与Java虚拟机介绍"><a href="#虚拟机与Java虚拟机介绍" class="headerlink" title="虚拟机与Java虚拟机介绍"></a>虚拟机与Java虚拟机介绍</h2><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>虚拟机就是一台虚拟的计算机，本质是一款软件，用来执行一系列虚拟计算机指令。虚拟机可以分为<strong>系统虚拟机</strong>和<strong>程序虚拟机</strong></p><ul><li><p>系统虚拟机</p><p>系统虚拟机完全是对物理计算机的仿真，提供一个可运行完整操作系统的软件平台，比如Visual Box，VMware就属于系统虚拟机</p></li><li><p>程序虚拟机</p><p>程序虚拟机专门为执行单个计算机程序而设计，比较典型的就是Java虚拟机，在Java虚拟机中执行的指令我们称之为Java字节码指令</p></li></ul><p>无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中</p><h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><p>Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细的定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里</p><p>特点：</p><ul><li>一次编译，到处运行</li><li>自动内存管理</li><li>自动垃圾回收功能</li></ul><p>​     </p><h2 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h2><p>JVM运行在操作系统基础之上，与硬件之间没有直接的交互</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190045749.png" alt="image-20230802190045749" style="zoom: 80%;"></p><p> JDK、JRE、JVM三者之间的关系</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190254484.png" alt="image-20230802190254484" style="zoom:80%;"></p><h2 id="JVM的整体结构"><a href="#JVM的整体结构" class="headerlink" title="JVM的整体结构"></a>JVM的整体结构</h2><p><code>HotSpot VM</code>是目前市面上高性能虚拟机代表作之一</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190808090.png" alt="image-20230802190808090"></p><p>JVM结构示意图</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190721731.png" alt="image-20230802190721731" style="zoom:80%;"></p><h2 id="Java代码执行流程"><a href="#Java代码执行流程" class="headerlink" title="Java代码执行流程"></a>Java代码执行流程</h2><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802191815948.png" alt="image-20230802191815948" style="zoom:80%;"></p><p>JVM的架构模型</p><p>Java编译器的输入指令流基本上是一种<strong>基于栈的指令集架构</strong>，另外一种指令集架构则是<strong>基于寄存器的指令集架构</strong></p><p>基于栈式架构的特点</p><ul><li>设计和实现更简单，适用于资源受限的系统</li><li>避开了寄存器的分配难题：使用零地址指令方式分配</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈，指令集更小，编译器容易实现</li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ul><p>基于寄存器架构的特点</p><ul><li>典型应用为X86的二进制指令集：比如传统的PC以及Android的Davik虚拟机</li><li>指令集架构则完全依赖硬件，可以执行差</li><li>性能优秀和执行更高效</li><li>花费更少的时间去完成一系列操作</li><li>在大部分情况下，基于寄存器架构的指令集往往都是以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令集为主</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>查看java文件的字节码文件</p><ul><li><p>编写.java源文件</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802221427828.png" alt="image-20230802221427828"></p></li><li><p>执行<code>javac xxx.java</code>得到对应的字节码文件<code>xxx.class</code></p></li><li><p>执行<code>javap -v xxx.class</code>即可查看对应的汇编指令</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802221540486.png" alt="image-20230802221540486"></p></li></ul><h2 id="JVM生命周期"><a href="#JVM生命周期" class="headerlink" title="JVM生命周期"></a>JVM生命周期</h2><h3 id="虚拟机的启动"><a href="#虚拟机的启动" class="headerlink" title="虚拟机的启动"></a>虚拟机的启动</h3><p>Java虚拟机的启动是通过引导类加载器(bootstrap class loader)创建一个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的</p><h3 id="虚拟机的执行"><a href="#虚拟机的执行" class="headerlink" title="虚拟机的执行"></a>虚拟机的执行</h3><ul><li>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序</li><li>程序开始执行时他才运行，程序结束时他就停止</li><li>执行一个所谓的的Java程序的时候，真真正正在执行的时一个叫做Java虚拟机的进程</li></ul><p>查看运行的进程:在命令行输入<code>jps</code>，显示当前所有java进程pid的命令</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230803192556421.png" alt="image-20230803192556421"></p><h3 id="虚拟机的退出"><a href="#虚拟机的退出" class="headerlink" title="虚拟机的退出"></a>虚拟机的退出</h3><ul><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致Java虚拟机进程终止</li><li>某线程调用Runtime类或System类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作</li><li>除此之外，JNI(Java Native Interface)规范描述了用JNI Invocation API来加载或卸载Java虚拟机时，Java虚拟机的退出情况</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：类加载子系统</title>
      <link href="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章：类加载子系统"><a href="#第二章：类加载子系统" class="headerlink" title="第二章：类加载子系统"></a>第二章：类加载子系统</h1><h2 id="类加载器与类的加载过程"><a href="#类加载器与类的加载过程" class="headerlink" title="类加载器与类的加载过程"></a>类加载器与类的加载过程</h2><h3 id="JVM的内存结构"><a href="#JVM的内存结构" class="headerlink" title="JVM的内存结构"></a>JVM的内存结构</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803200538663.png" alt="image-20230803200538663" style="zoom:80%;"></p><h3 id="类加载器子系统作用"><a href="#类加载器子系统作用" class="headerlink" title="类加载器子系统作用"></a>类加载器子系统作用</h3><ul><li>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识</li><li>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定</li><li>加载的类信息存放于一块称为方法区的内存空间。除了类信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量(这部分信息是Class文件中常量池部分的内存映射)</li></ul><h3 id="类加载器中ClassLoader的角色"><a href="#类加载器中ClassLoader的角色" class="headerlink" title="类加载器中ClassLoader的角色"></a>类加载器中ClassLoader的角色</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803202014873.png" alt="image-20230803202014873"></p><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803202508503.png" alt="image-20230803202508503" style="zoom:80%;"></p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803202528634.png" alt="image-20230803202528634" style="zoom:80%;"></p><p>整个<strong>类的加载</strong>过程主要包括：</p><ul><li>加载</li><li>链接</li><li>初始化</li></ul><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><ol><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口</li></ol><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803203109097.png" alt="image-20230803203109097" style="zoom:80%;"></p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803203310262.png" alt="image-20230803203310262" style="zoom:80%;"></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>.class文件查看，所需软件：<code>Binary Viewer</code>和<code>jclasslib bytecode viewer</code></p><p>所需软件下载地址</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1YcdprQTBQTGJzp<span class="built_in">_</span>vVBiNFg </span><br><span class="line">提取码：4hmi </span><br></pre></td></tr></table></figure><p>发现所有的<code>.class</code>文件都有一个统一的前缀<code>CA FE BA BE</code>，即相同的前缀标识，验证阶段工作之一就是校验头部标识</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803204637266.png" alt></p><p>  准备阶段：会为每个类变量根据其数据类型，默认初始化为对应的零值，即使显示赋值了，也只在初始化阶段赋值</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803205800679.png" alt></p><p><code>&lt;clinit&gt;()</code>的示例</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803210703082.png" alt></p><p>父类与子类的<code>clinit()</code>执行示例</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803212431043.png" alt="image-20230803212431043" style="zoom:80%;"></p><p>一个类的<code>clinit()</code>方法在对线程下会添加同步锁，只会加载一次，要是加载中断，其他线程就无法执行</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803213639515.png" alt="image-20230803213639515" style="zoom:80%;"></p><h2 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h2><p>JVM支持两种类型的类加载器，分别为<strong>引导类加载器(Bootstrap ClassLoader)</strong>和<strong>自定义类加载器(User-Defined ClassLoader)</strong></p><p>Java虚拟机规范中将所有<strong>派生于抽象类<code>ClassLoader</code>的类加载器都划分为自定义类加载器</strong></p><p>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下图所示</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803214053321.png" alt="image-20230803214053321" style="zoom:80%;"></p><p> 四种类加载查看示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">        <span class="comment">//获取其上层:扩展类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">exClassLoader</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line">        System.out.println(exClassLoader);<span class="comment">//sun.misc.Launcher$ExtClassLoader@4554617c</span></span><br><span class="line">        <span class="comment">//获取其上层,获取不到引导类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">boostrapClassLoader</span> <span class="operator">=</span> exClassLoader.getParent();</span><br><span class="line">        System.out.println(boostrapClassLoader);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户自定义类加载器，m默认使用系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String类使用引导类加载器（Java核心类库都是使用引导类加载器）</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader1</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803215854587.png" alt="image-20230803215854587" style="zoom:80%;"></p><ul><li>扩展类加载器和系统类加载器，在运行时也需要类加载器进行加载，他们的类加载器就是<strong>引导类加载器</strong></li></ul><h3 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805092508374.png" alt="image-20230805092508374" style="zoom:80%;"></p><h3 id="应用程序类加载器-系统类加载器"><a href="#应用程序类加载器-系统类加载器" class="headerlink" title="应用程序类加载器(系统类加载器)"></a>应用程序类加载器(系统类加载器)</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805092700564.png" alt="image-20230805092700564" style="zoom:80%;"></p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><h4 id="查看启动类加载所能够加载的类路径"><a href="#查看启动类加载所能够加载的类路径" class="headerlink" title="查看启动类加载所能够加载的类路径"></a>查看启动类加载所能够加载的类路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;启动类加载器&quot;</span>);</span><br><span class="line"><span class="comment">//获取BoostrapClassLoader能够加载的api的路径</span></span><br><span class="line">URL[] urLs = Launcher.getBootstrapClassPath().getURLs();</span><br><span class="line"><span class="keyword">for</span> (URL urL : urLs) &#123;</span><br><span class="line">    System.out.println(urL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805093148931.png" alt="image-20230805093148931"></p><h4 id="查看扩展类加载器所能够加载类路径"><a href="#查看扩展类加载器所能够加载类路径" class="headerlink" title="查看扩展类加载器所能够加载类路径"></a>查看扩展类加载器所能够加载类路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;扩展类加载器&quot;</span>);</span><br><span class="line"><span class="comment">//获取扩展类加载器所能加载类路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">extDirs</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String path : extDirs.split(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805093644021.png" alt="image-20230805093644021"></p><h3 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805094112234.png" alt="image-20230805094112234" style="zoom:80%;"></p><h4 id="用户自定义类加载器的实现步骤"><a href="#用户自定义类加载器的实现步骤" class="headerlink" title="用户自定义类加载器的实现步骤"></a>用户自定义类加载器的实现步骤</h4><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805094504480.png" alt="image-20230805094504480" style="zoom:80%;"></p><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p><code>ClassLoader</code>是一个抽象类，其后所有的类加载器都继承自<code>ClassLoader</code>(除引导类加载器除外)</p><h3 id="ClassLoader的常用方法"><a href="#ClassLoader的常用方法" class="headerlink" title="ClassLoader的常用方法"></a>ClassLoader的常用方法</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805095106233.png" alt="image-20230805095106233" style="zoom:80%;"></p><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805095315466.png" alt="image-20230805095315466" style="zoom:80%;"></p><h3 id="获取ClassLoader的途径"><a href="#获取ClassLoader的途径" class="headerlink" title="获取ClassLoader的途径"></a>获取ClassLoader的途径</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805095359793.png" alt="image-20230805095359793" style="zoom:80%;"></p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805100002277.png" alt="image-20230805100002277"></p><h3 id="双亲委派机制—-工作原理"><a href="#双亲委派机制—-工作原理" class="headerlink" title="双亲委派机制—-工作原理"></a>双亲委派机制—-工作原理</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805100503027.png" alt="image-20230805100503027" style="zoom:80%;"></p><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>自定义一个类<code>java.lang.String</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户自定义的Java.lang.String类的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,String&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行里面的<code>main</code>方法，会报错</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805101446427.png" alt="image-20230805101446427"></p><p>原因分析</p><p>根据类加载的<code>双亲委派机制</code>，最终类加载请求会到达<code>引导类加载器</code>，引导类加载器会直接加载系统类库中的<code>java.lang.String</code>类，进行实例化对象，而系统类库是没有<code>main</code>方法，所以最后会报错<strong>找不到main方法</strong></p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>反向委托</p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805101859062.png" alt="image-20230805101859062" style="zoom:80%;"></p><h3 id="双亲委派机制的优势"><a href="#双亲委派机制的优势" class="headerlink" title="双亲委派机制的优势"></a>双亲委派机制的优势</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805102050913.png" alt="image-20230805102050913" style="zoom:80%;"></p><h3 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805102437891.png" alt="image-20230805102437891" style="zoom:80%;"></p><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="内容一"><a href="#内容一" class="headerlink" title="内容一"></a>内容一</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805102900262.png" alt="image-20230805102900262" style="zoom:80%;"></p><h3 id="内容二"><a href="#内容二" class="headerlink" title="内容二"></a>内容二</h3><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805103303449.png" alt="image-20230805103303449" style="zoom:80%;"></p><h3 id="内容三"><a href="#内容三" class="headerlink" title="内容三"></a>内容三</h3><p><strong>类的主动使用和被动使用</strong></p><p><img src="/2023/08/04/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805103448811.png" alt="image-20230805103448811" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、用户登录功能的实现</title>
      <link href="/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/03%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/03%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h1><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><p>用户进入登陆页面，输入用户名和密码，点击登录按钮，向后台程序发送请求，后台根据用户信息在数据库中进行查找，如果用户名和密码均正确，则会跳转到对应的主页面，即<code>index.html</code></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划要执行的SQL语句"><a href="#规划要执行的SQL语句" class="headerlink" title="规划要执行的SQL语句"></a>规划要执行的SQL语句</h3><p>分析：一般逻辑是根据用户名查询数据库返回用户记录给业务层，由于密码存储一般是经过加密后的数据，数据库中与用户输入一般不一致，所以密码等其他信息的校验一般放在业务层去进行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> username<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>相关持久层的功能在用户注册模块已经实现</p><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><h4 id="密码错误异常"><a href="#密码错误异常" class="headerlink" title="密码错误异常"></a>密码错误异常</h4><p>用户名正确，密码错误引发的异常，<code>PasswordNotMatchException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordNotMatchException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="用户名不存在异常"><a href="#用户名不存在异常" class="headerlink" title="用户名不存在异常"></a>用户名不存在异常</h4><p>用户名数据库中不存在所引发的异常，<code>UsernameNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法"><a href="#设计接口和抽象方法" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p>直接在<code>IUserService</code>接口中编写登录方法<code>login(String username,String password)</code></p><p>如果登录成功，将用户数据对象需要作为方法返回值返回</p><p>状态管理：将相关数据保存在cookie或者session中，可以避免重复度很好的数据多次频繁操作数据库获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password 用户密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> : 用户对象,因为登陆成功后，各个页面右上角会显示用户信息，需要用到用户对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">login</span><span class="params">(String username,String password)</span>;</span><br></pre></td></tr></table></figure><h3 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">       <span class="comment">//根据用户名称查询用户对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUsername(username);</span><br><span class="line">       <span class="comment">//用户对象不存在，抛出用户名不存在异常</span></span><br><span class="line">       <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//用户密码匹配</span></span><br><span class="line">       <span class="keyword">if</span>(!user.getPassword().equals(getMD5password(password,user.getSalt())))&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordNotMatchException</span>(<span class="string">&quot;用户密码错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断用户是否注销</span></span><br><span class="line">       <span class="keyword">if</span>(user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>根据业务层抛出异常，在统一异常处理基类中做出对应的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UsernameNotFoundException) &#123;</span><br><span class="line">    result.setState(<span class="number">5001</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;用户名不存在异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> PasswordNotMatchException) &#123;</span><br><span class="line">    result.setState(<span class="number">5002</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;用户密码不匹配异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求路径：/user/login</span><br><span class="line">请求方法：POST</span><br><span class="line">请求参数：String username,String password</span><br><span class="line">响应结果：JsonResult&lt;User&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在<code>UserController</code>类中编写对应的请求处理方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">login</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(username, password);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;User&gt;(OK,<span class="string">&quot;登陆成功&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在<code>login.html</code>页面中找到对应表单，在表单中找到登录按钮，将登录按钮与指定时间绑定，按钮点击，向后端指定程序发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     $(<span class="string">&quot;#btn-login&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">       $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">         <span class="attr">url</span>: <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">         ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">         ,<span class="attr">data</span>: $(<span class="string">&quot;#form-login&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">         ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">         ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">              <span class="comment">//跳转到对应页面</span></span><br><span class="line">              <span class="comment">//相对路径指定对应页面位置</span></span><br><span class="line">              location.<span class="property">href</span>=<span class="string">&quot;index.html&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;登陆失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;登陆失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="用户会话Session"><a href="#用户会话Session" class="headerlink" title="用户会话Session"></a>用户会话Session</h2><p>session对象主要存储在服务器端，可以用于保存服务器的临时数据，其在整个项目中都可以被访问，可以在不同模块之间进行数据共享。</p><p>对于用户登录功能，可以将用户当前首次登录输入的信息数据存储在session对象中，供整个会话期间，其他模块共用。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//session对象存储数据</span></span><br><span class="line">session.setAttribute(key,value);</span><br><span class="line"><span class="comment">//从session对象获取数据</span></span><br><span class="line">session.getAttribute(key)</span><br></pre></td></tr></table></figure><p>可能在一个项目中，多次用到session对象存储数据或者从session对象中读取数据，为了减少代码冗余，应该将这两个操作封装到函数中</p><p>可以封装到工具类，但是由于这两个操作只会在控制层使用，而本项目控制层存在基类，所以将该方法定义在控制层基类<code>BaseController</code>中</p><p>由于存储操作要视具体情况而定，所以只封装从session对象读取数据功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从session对象中获取当前登录用户的uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> uid:当前登录用户的uid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">getUidFromSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Integer) session.getAttribute(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从session对象中获取当前用户的username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> username:当前登录用户的username</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getUsernameFromSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (String) session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关位置将数据存取到session对象中"><a href="#相关位置将数据存取到session对象中" class="headerlink" title="相关位置将数据存取到session对象中"></a>相关位置将数据存取到session对象中</h3><p>在<code>UserController</code>类中的<code>login</code>函数中将相关数据存取到session对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">login</span><span class="params">(String username, String password, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(username, password);</span><br><span class="line">    <span class="comment">//数据存取到session对象</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;uid&quot;</span>,user.getUid());</span><br><span class="line">    session.setAttribute(<span class="string">&quot;username&quot;</span>,user.getUsername());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;User&gt;(OK,<span class="string">&quot;登陆成功&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户登录拦截器"><a href="#用户登录拦截器" class="headerlink" title="用户登录拦截器"></a>用户登录拦截器</h2><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>会首先将用户所有请求统一拦截到拦截器中进行处理，所以可以到拦截器中自定义过滤规则，达到拦截请求、过滤响应的目的</p><p>比如：对于当前项目(商城系统)，访问其他页面会全部拦截到拦截器，判断用户是否登录，如果没有则统一会打开<code>login.html</code>用户登录页面，打开其他页面，可以使用<strong>重定向</strong>或者<strong>请求转发</strong>技术来完成</p><p>推荐使用重定向技术，如果两个模块不在同一个服务器上，转发可能会出现错误</p><h3 id="SpringBoot中如何拦截器的使用"><a href="#SpringBoot中如何拦截器的使用" class="headerlink" title="SpringBoot中如何拦截器的使用"></a>SpringBoot中如何拦截器的使用</h3><p>SpringMVC提供了一个<code>HandleInterceptor</code>接口，用于表示拦截器</p><p>使用步骤</p><ol><li><p>自定义一个类，实现<code>HandleInterceptor</code>接口，项目一般会将所有拦截器统一放在一个目录下，本项目中统一放在<code>com.bang.store.interceptor</code>包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义用户登录拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//在所有请求处理方法之前被调用执行，即在请求到达Dispatcher中央处理器之前</span></span><br><span class="line">    <span class="comment">//拦截器的重点关注位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能:检测session对象中是否含有uid数据,如果有则放行请求，否则重定向到用户登录界面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果返回值为true,正常放行;如果为false,则表示拦截，不放行,</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//获取uid数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">uid</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(uid==<span class="literal">null</span>)&#123; <span class="comment">//表明用户没有登录</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/web/login.html&quot;</span>); <span class="comment">//重定向到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//拦截请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//用户登录后则直接放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求执行后被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有关联操作完成之后调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册拦截器</p><p>添加白名单与黑名单，即当前拦截器只对那些请求起作用、对哪些请求不起作用</p><p>比如：注册、登录页面不能够被拦截，否则任何界面都无法进入，造成死循环</p></li><li><p>拦截器注册操作</p><p>借助<code>WebMVCConfigure</code>接口，可以将用户定义的拦截器进行注册，才能使拦截器生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.configure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解，让SpringBoot识别</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptorConfigure</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//实例化自定义拦截器</span></span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">loginInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">        <span class="comment">//配置白名单</span></span><br><span class="line">        List&lt;String&gt; whiteList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        whiteList.add(<span class="string">&quot;/web/login.html&quot;</span>);</span><br><span class="line">        whiteList.add(<span class="string">&quot;/web/register.html&quot;</span>);</span><br><span class="line">        whiteList.add(<span class="string">&quot;/web/product.html&quot;</span>);</span><br><span class="line">        whiteList.add(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">        <span class="comment">//注册拦截器</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/web/**&quot;</span>)  <span class="comment">//配置黑名单,即拦截器要拦截的路径</span></span><br><span class="line">                .excludePathPatterns(whiteList); <span class="comment">//配置白名单,即拦截器不拦截的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、用户注册功能实现</title>
      <link href="/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a><strong>用户表</strong></h3><p><img src="/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230713225827901.png" alt="image-20230713225827901" style="zoom:67%;"></p><h2 id="创建用户的实体类"><a href="#创建用户的实体类" class="headerlink" title="创建用户的实体类"></a>创建用户的实体类</h2><p>实体类的包名规定:<code>com.bang.store.pojo</code></p><h3 id="数据表公共字段抽取"><a href="#数据表公共字段抽取" class="headerlink" title="数据表公共字段抽取"></a>数据表公共字段抽取</h3><p>数据库设计过程中，多个业务数据表均存在以下公共字段，则可以将公共字段抽象成一个新的基类<code>com.bang.store.BasePojo</code>，供各个数据库表使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">created_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;日志-创建人&#x27;</span>,</span><br><span class="line">created_time DATETIME COMMENT <span class="string">&#x27;日志-创建时间&#x27;</span>,</span><br><span class="line">modified_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;日志-最后修改执行人&#x27;</span>,</span><br><span class="line">modified_time DATETIME COMMENT <span class="string">&#x27;日志-最后修改时间&#x27;</span>,</span><br></pre></td></tr></table></figure><h4 id="java基类"><a href="#java基类" class="headerlink" title="java基类"></a><strong>java基类</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasePojo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String createdUser;</span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="keyword">private</span> String modifiedUser;</span><br><span class="line">    <span class="keyword">private</span> Date modifiedTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">BasePojo</span> <span class="variable">basePojo</span> <span class="operator">=</span> (BasePojo) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(createdUser, basePojo.createdUser) &amp;&amp; Objects.equals(createdTime, basePojo.createdTime) &amp;&amp; Objects.equals(modifiedUser, basePojo.modifiedUser) &amp;&amp; Objects.equals(modifiedTime, basePojo.modifiedTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(createdUser, createdTime, modifiedUser, modifiedTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a><strong>补充说明</strong></h4><ul><li><p>数据库字段中的日期类型对应于<code>java</code>中的<code>java.util.Date</code></p></li><li><p><code>Lombok</code>的注解<code>@Date</code>里面包含了<code>get、set、toString、equals、hashCode</code>等方法</p></li><li><code>Lombok</code>的<code>equals</code>好像不能比较属性，所以最好对<code>equals</code>方法进行重写<ul><li><a href="https://zhuanlan.zhihu.com/p/85906077">参考博客</a></li></ul></li></ul><h3 id="用户实体类创建"><a href="#用户实体类创建" class="headerlink" title="用户实体类创建"></a>用户实体类创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户表实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">super</span>.equals(o)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(uid, user.uid) &amp;&amp; Objects.equals(username, user.username) &amp;&amp; Objects.equals(password, user.password) &amp;&amp; Objects.equals(salt, user.salt) &amp;&amp; Objects.equals(phone, user.phone) &amp;&amp; Objects.equals(email, user.email) &amp;&amp; Objects.equals(gender, user.gender) &amp;&amp; Objects.equals(avatar, user.avatar) &amp;&amp; Objects.equals(isDelete, user.isDelete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(<span class="built_in">super</span>.hashCode(), uid, username, password, salt, phone, email, gender, avatar, isDelete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>数据访问层，主要是通过<code>mybatis</code>操作数据库</p><h3 id="需要执行的SQL语句的设计"><a href="#需要执行的SQL语句的设计" class="headerlink" title="需要执行的SQL语句的设计"></a>需要执行的<code>SQL</code>语句的设计</h3><p>用户注册，通常需要输入<code>用户名</code>和<code>密码</code>这两个字段，相当于数据库的插入过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(username,password) <span class="keyword">values</span>(值列表)</span><br></pre></td></tr></table></figure><p>用户注册时，还应该判断当前用户名是否被注册过了，如果用户名已存在，则无法进行注册，需要用户重新输入用户名，这个过程本质是相当于一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> username<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法"><a href="#设计接口和抽象方法" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p><code>Mapper</code>接口方法</p><p>整个项目存在多个<code>Mapper</code>接口，需要在当前包目录结构下创建一个<code>mapper</code>包，在该<code>包</code>下根据功能模块创建对应的<code>Mapper</code>接口。</p><ol><li>创建<code>UserMapper</code>接口，实现与3.1中两条<code>SQL</code>语句对应的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块的Mapper接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将用户数据插入数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user :用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数，根据受影响函数返回当前操作是否执行成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查找到对应用户数据，返回数据，否则返回null值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>在项目启动类中添加注解<code>@MapperScan</code>，指明<code>Mapper</code>接口路径，避免在每个接口类中都要添加注解<code>@Mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指明当前项目中mapper接口的路径,项目启动会自动加载对应接口文件</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.bang.store.mapper&quot;)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="编写映射"><a href="#编写映射" class="headerlink" title="编写映射"></a>编写映射</h3><p><code>Mybatis</code>的映射文件<code>xxMapper.xml</code>的编写，与对应的接口相关联</p><p>映射文件都需要放置在<code>resources</code>文件夹下，为便于管理，可以新建一个<code>mapper</code>文件夹，在该文件夹下再创建不同功能模块的映射文件，注意各个映射文件的命名要与对应接口的命名保持一致</p><p>创建<code>UserMapper.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace属性，与当前映射文件对应接口的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义映射规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        ResultMap:</span></span><br><span class="line"><span class="comment">            id属性: 映射规则名称，唯一标识</span></span><br><span class="line"><span class="comment">            type属性: 数据库表映射对应的java实体类全类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            将表的字段与Java实体类属性字段一一对应,名称匹配的可以省略</span></span><br><span class="line"><span class="comment">            id标签:主键映射关系，必须保留</span></span><br><span class="line"><span class="comment">            result: 其他字段</span></span><br><span class="line"><span class="comment">                column: 数据库字段名</span></span><br><span class="line"><span class="comment">                property: 实体类属性名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;idDelete&quot;</span> <span class="attr">column</span>=<span class="string">&quot;is_delete&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- id属性值需要与对应接口对应方法名一致 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- useGeneratedKeys=&quot;true&quot; keyProperty=&quot;uid&quot; 开启某个字段作为主键并值自动递增，并指明字段名称  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.bang.store.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user(username,password,salt,phone,email,gender,avatar,is_delete,created_user,created_time,modified_user,modified_time) values(</span><br><span class="line">        #&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,#&#123;phone&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;avatar&#125;,#&#123;isDelete&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        resultType=&quot;com.bang.store.pojo.User&quot;  指明返回值类型，该类中各个字段应该与数据库各个字段名称保持一致</span></span><br><span class="line"><span class="comment">        resultMap: 字段名称不一致时，自定义结果集的映射规则</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserPojoMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username=#&#123;username&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis配置文件"><a href="#Mybatis配置文件" class="headerlink" title="Mybatis配置文件"></a>Mybatis配置文件</h3><p><code>Spring</code>里面会有一个<code>Mybatis Config.xml</code>文件，在配置文件里会指定<code>mapper</code>映射文件的位置，<code>SpringBoot</code>里可以省去这个文件</p><p>但是需要在<code>配置文件application.yml里要指明</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>每一个部分功能模块编写完成之后。都需要进行专门的功能测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="comment">//@MapperScan(&quot;com.bang.store.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;li123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">insert</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUsernameTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUsername(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>业务层与实际应用场景相挂钩</p><p>常见包目录结构</p><ul><li>service<ul><li>ex：异常类</li><li>impl：接口文件对应的实现类</li><li>接口文件</li></ul></li></ul><h3 id="异常规划"><a href="#异常规划" class="headerlink" title="异常规划"></a>异常规划</h3><p>结合用户使用具体场景，设计对应的异常</p><p>在实际项目中，异常要进行分级，各个具体问题要建立自定义的异常</p><p>比如：业务层的异常需定义一个<code>ServiceException</code>基类，继承自<code>RuntimeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层异常基类,继承自运行时异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ServiceException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&gt;<br>&gt;</p><blockquote><p>业务层根据应用场景定义对应具体的异常类，均需继承于<code>ServivceException</code></p></blockquote><h4 id="用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常"><a href="#用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常" class="headerlink" title="用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常"></a>用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常</h4><p>定义名为<code>UsernameOccupiedException</code>来表明用户名占用错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户名被占用异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameOccupiedException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常"><a href="#用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常" class="headerlink" title="用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常"></a>用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常</h4><p>定义名为<code>insertException</code>来表明由于此类问题所引起的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据插入过程引发的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">InsertException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>具体业务逻辑，接口命名建议参考<code>IxxxService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><p>实现业务接口中的业务方法，命名建议<code>xxxSericeImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断用户名是否存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">isOccupied</span> <span class="operator">=</span> userMapper.findByUsername(user.getUsername());</span><br><span class="line">        <span class="comment">//用户名存在，则抛出对应的异常</span></span><br><span class="line">        <span class="keyword">if</span>(isOccupied!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameOccupiedException</span>(<span class="string">&quot;用户名已经被占用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.不存在，将用户信息存入数据库</span></span><br><span class="line">        <span class="comment">//用户密码加密</span></span><br><span class="line">        <span class="comment">//生成盐值,盐值+password+盐值: 送入MD5算法加密三次再存入数据库</span></span><br><span class="line">        <span class="comment">//盐值也要存入数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">        password = getMD5password(password,salt);</span><br><span class="line">        user.setSalt(salt);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户类其他信息的补全操作</span></span><br><span class="line">        user.setIsDelete(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//创建和修改的用户名称</span></span><br><span class="line">        user.setCreatedUser(user.getUsername());</span><br><span class="line">        user.setModifiedUser(user.getUsername());</span><br><span class="line">        <span class="comment">//创建和修改时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        user.setCreatedTime(date);</span><br><span class="line">        user.setModifiedTime(date);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        <span class="comment">//数据插入不一定会成功，此时需检测插入是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;用户注册过程中产生了未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMD5password</span><span class="params">(String password,String salt)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            password = DigestUtils.md5DigestAsHex((salt+password+salt).getBytes()).toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><p>创建对应的测试文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUsername(<span class="string">&quot;刘备&quot;</span>);</span><br><span class="line">            user.setPassword(<span class="string">&quot;liu123456&quot;</span>);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">            iUserService.reg(user);</span><br><span class="line">            System.out.println(<span class="string">&quot;注册成功！！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ServiceException e)&#123;</span><br><span class="line">            System.out.println(e.getClass());</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充项"><a href="#补充项" class="headerlink" title="补充项"></a>补充项</h3><p>密码明文展示存在安全隐患，利用<code>md5</code>加密算法，对密码进行加密再存储在数据库</p><p>常见解决方案: 串+真实password+串 -》MD5算法加密，连续加载三次</p><p>串是指：盐值，一个随机的字符串</p><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="创建响应"><a href="#创建响应" class="headerlink" title="创建响应"></a>创建响应</h3><p> 所有的控制层的响应应该都包含：状态码、状态描述信息、数据</p><p>所以将其分装成一个类，将这个类作为返回值返回给前端浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="comment">//状态描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//请求返回数据,数据类型位置,泛型</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//捕获异常,异常信息的传递</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message=e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state, E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><p>依据具体的业务设计对应的请求，常见请求应该包含以下四个主题：请求地址、请求参数、请求方法、请求响应</p><p>比如针对用户注册功能</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求地址: /user/reg</span><br><span class="line">请求参数： User user</span><br><span class="line">请求方法：Post</span><br><span class="line">请求响应：JsonResult&lt;void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在控制层创建对应的实现类，借助业务层的相关接口方法，对用户的请求做出对应逻辑的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">reg</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            userService.reg(user);</span><br><span class="line">            result.setState(<span class="number">200</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户注册成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UsernameOccupiedException e)&#123;</span><br><span class="line">            result.setState(<span class="number">4000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户名被占用&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InsertException e)&#123;</span><br><span class="line">            result.setState(<span class="number">5000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;注册时未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层代码优化设计"><a href="#控制层代码优化设计" class="headerlink" title="控制层代码优化设计"></a>控制层代码优化设计</h3><p>观察5.3中控制层请求处理代码逻辑，发现异常捕获部分存在较大冗余，对于业务层而言，其代码确定之后，异常类型也就可以确定，所以控制层可能捕获的异常也就可能确定，可以将异常捕获处理这部分代码剥离出来，构建一个基础类，让控制层处理请求类继承至该类</p><p>这么设计的可行性：</p><ul><li>Spring提供了ExceptionHandle注解，该注解可以当某种类型异常发生之后，会统一拦截到对应方法上进行处理</li></ul><h4 id="抽象出的基类"><a href="#抽象出的基类" class="headerlink" title="抽象出的基类"></a><strong>抽象出的基类</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer OK=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandle注解: 项目中如果产生指定类型的异常，会统一拦截到此方法上进行处理</span></span><br><span class="line">    <span class="comment">//                     参数:对应拦截的异常类类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> UsernameOccupiedException)&#123;</span><br><span class="line">            result.setState(<span class="number">4000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户名被占用&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InsertException) &#123;</span><br><span class="line">            result.setState(<span class="number">5000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;注册时未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制层注册逻辑代码简化版本"><a href="#控制层注册逻辑代码简化版本" class="headerlink" title="控制层注册逻辑代码简化版本"></a><strong>控制层注册逻辑代码简化版本</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">reg</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userService.reg(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面的开发"><a href="#前端页面的开发" class="headerlink" title="前端页面的开发"></a>前端页面的开发</h2><ol><li><p>在注册页面编写发送请求的方法，利用事件来完成。首先根据选择器的到对应的按钮对象(比如$(选择器))，对按钮对象绑定对应的点击事件</p><p><img src="/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230718235451253.png" alt="image-20230718235451253" style="zoom:50%;"></p></li><li><p>利用异步请求(<code>ajax</code>技术)，对后端程序发送对应的请求</p><p><code>ajax</code>的使用方法，<code>ajax</code>函数会接受多个参数，参数类似于键值对的形式，用,分割</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">type</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">data</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">dataType</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">success</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    ,<span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">参数功能</th></tr></thead><tbody><tr><td style="text-align:center">url</td><td style="text-align:center">标识请求的地址，不包含参数列表 ，比如：url:<a href="http://localhost:8080/user/reg">http://localhost:8080/user/reg</a></td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">请求方法类型(GET、POST)  ，比如: type:”POST”</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">请求发送的数据，例如: data:”username=张飞&amp;password=123456”</td></tr><tr><td style="text-align:center">dataType</td><td style="text-align:center">请求传送数据数据类型，一般为json类型，比如： dataType:”json”</td></tr><tr><td style="text-align:center">success</td><td style="text-align:center">服务器正常响应客户端时，会自动调用该参数对应的方法，并将服务器返回值自动装填到方法参数上</td></tr><tr><td style="text-align:center">error</td><td style="text-align:center">服务器不能够正常响应客户端时，会自动调用该参数对应的方法，并将服务器返回值自动装填到方法参数上</td></tr></tbody></table></div><ol><li><p>前端核心代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">//1.获取对应按钮对象，绑定点击事件</span></span><br><span class="line">      $(<span class="string">&quot;#btn-reg&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//2.点击之后发送ajax异步请求</span></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>:<span class="string">&quot;/user/reg&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">          <span class="comment">//动态获取对应表单数据,会自动拼接成:表单name1=val1&amp;表单name2=val2&amp;...</span></span><br><span class="line">          <span class="attr">data</span>:$(<span class="string">&quot;#form-reg&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">          <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">          <span class="comment">//服务器返回数据</span></span><br><span class="line">          <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(data.<span class="property">message</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//xhr对象,status对应的状态码</span></span><br><span class="line">          <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;注册时产生未知错误&quot;</span>+ xhr.<span class="property">status</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、项目环境搭建</title>
      <link href="/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/01%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/07/19/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/01%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h1><h2 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h2><p>项目 功能包括:登录、注册、热销产品、用户管理(密码、个人信息、头像、收货地址)、购物车（商品展示、增加、删除）、订单模块</p><h2 id="开发顺序"><a href="#开发顺序" class="headerlink" title="开发顺序"></a>开发顺序</h2><p>注册、登录、用户管理、购物车、商品、订单模块</p><h2 id="某个模块的开发顺序"><a href="#某个模块的开发顺序" class="headerlink" title="某个模块的开发顺序"></a>某个模块的开发顺序</h2><ul><li>持久层开发<ul><li>依据前端页面的设置规划相应的SQL语句，以及进行配置</li></ul></li><li>业务层开发<ul><li>核心功能控制、业务操作以及异常的处理</li></ul></li><li>控制层开发<ul><li>接收请求、处理相应</li></ul></li><li>前端开发<ul><li>简单JS、JQuery、AJAX的代码编写</li></ul></li></ul><h1 id="项目搭建的工具和环境"><a href="#项目搭建的工具和环境" class="headerlink" title="项目搭建的工具和环境"></a>项目搭建的工具和环境</h1><ol><li>JDK：1.8及其以上的版本</li><li>maven：配置到IDEA，要求3.6.1及其以上版本</li><li>数据库: Mysql，5.1及其以上版本</li><li>开发平台：IDEA</li></ol><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><ol><li>项目名称：<code>store</code>，表示商城</li><li>主包名：<code>com.bang.store</code></li><li>资源文件：统一放置在<code>resources</code>文件夹下</li><li>单元测试：<code>test.com.bang.store</code></li></ol><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>导入设计对应的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database store charcater <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>项目的<code>application.yml</code>文件配置数据库相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#数据库相关配置信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/store?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span></span><br></pre></td></tr></table></figure></li><li><p>测试连接</p><ol><li>运行<code>SpringBoot</code>主类</li><li>在单元测试文件中测试数据库连接情况</li></ol></li><li><p>测试项目的静态资源文件是否可以正常访问</p><ol><li>将所有静态资源复制到<code>resources</code>下的<code>static</code>文件</li><li>启动项目，在浏览器访问指定静态资源文件测试是否正常</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本概念</title>
      <link href="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络基本概念"><a href="#计算机网络基本概念" class="headerlink" title="计算机网络基本概念"></a>计算机网络基本概念</h1><h2 id="1-因特网"><a href="#1-因特网" class="headerlink" title="1 因特网"></a>1 因特网</h2><h4 id="1-网络、互联网和因特网"><a href="#1-网络、互联网和因特网" class="headerlink" title="1 网络、互联网和因特网"></a>1 网络、互联网和因特网</h4><ul><li>网络<ul><li>若干个节点和连接这些节点的链路组成的即称为网络</li></ul></li><li>互联网<ul><li>多个网络通过路由器互联起来，构成一个覆盖范围更大的网络，即称为互联网</li><li>互联网—-网络的网络</li></ul></li><li>因特网<ul><li>一个专有名词，专指世界上最大的互联网</li></ul></li></ul><h4 id="2-ISP"><a href="#2-ISP" class="headerlink" title="2 ISP"></a>2 ISP</h4><p>因特网服务提供者(<code>Internet Service Provider</code>)</p><p>电信、移动、联通等运营商即可称之为ISP</p><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710001309793.png" alt="image-20230710001309793" style="zoom:50%;"></p><h4 id="3-因特网的组成"><a href="#3-因特网的组成" class="headerlink" title="3 因特网的组成"></a>3 因特网的组成</h4><h5 id="边缘部分-网络边缘"><a href="#边缘部分-网络边缘" class="headerlink" title="边缘部分(网络边缘)"></a>边缘部分(网络边缘)</h5><p>由所有连接在因特网上的主机组成。用户直接使用，用来进行数据通信和资源共享的设备</p><h5 id="核心部分-网络核心"><a href="#核心部分-网络核心" class="headerlink" title="核心部分(网络核心)"></a>核心部分(网络核心)</h5><p>由大量网络和连接这些网络的的路由器组成。网络核心为网络边缘提供服务(连通性和数据交换)</p><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710001702834.png" alt="image-20230710001702834" style="zoom:50%;"></p><h2 id="2-数据交换方式"><a href="#2-数据交换方式" class="headerlink" title="2 数据交换方式"></a>2 数据交换方式</h2><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p>以前的电话机通过连接电话线的方式即为电路交换</p><p>电路交换常见的三个步骤</p><ol><li>建立连接(分配通信资源)</li><li>通话(在此期间，独占通信资源)</li><li>释放连接(归还通信资源)</li></ol><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710002103273.png" alt="image-20230710002103273" style="zoom:50%;"></p><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p>现存的计算机网络体系使用的数据交换方式</p><ul><li>发送方构造分组，发送分组</li><li>分组交换机(路由器等设备)缓存转发分组</li><li>接收方接受分许，还原报文</li></ul><h4 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h4><p>与分组交换类似，只是其传输单位为整个报文，分组交换为单个分组(将一个报文切割为多个分组)</p><h4 id="三者数据交换对比"><a href="#三者数据交换对比" class="headerlink" title="三者数据交换对比"></a>三者数据交换对比</h4><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710002456854.png" alt="image-20230710002456854" style="zoom: 33%;"></p><h2 id="3-计算机网络定义和分类"><a href="#3-计算机网络定义和分类" class="headerlink" title="3 计算机网络定义和分类"></a>3 计算机网络定义和分类</h2><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h4><p>最简单定义：<strong>互联自治</strong>的计算机的集合</p><ul><li>互联<ul><li>强调计算机之间可以通过有线或无线的方式进行数据通信</li></ul></li><li>自治<ul><li>计算机拥有自己的硬件和软件，可以独立单独使用</li></ul></li><li>集合<ul><li>至少含有两台计算机</li></ul></li></ul><h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2 分类"></a>2 分类</h4><p>按照不同的标准可以分为不同的类别</p><h5 id="按交换技术分类"><a href="#按交换技术分类" class="headerlink" title="按交换技术分类"></a>按交换技术分类</h5><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><h5 id="按使用者分类"><a href="#按使用者分类" class="headerlink" title="按使用者分类"></a>按使用者分类</h5><ul><li>公用网</li><li>专用网</li></ul><h5 id="按传输介质分类"><a href="#按传输介质分类" class="headerlink" title="按传输介质分类"></a>按传输介质分类</h5><ul><li>有线网</li><li>无线网</li></ul><h5 id="按覆盖范围分类"><a href="#按覆盖范围分类" class="headerlink" title="按覆盖范围分类"></a>按覆盖范围分类</h5><ul><li>广域网<code>WAN</code></li><li>城域网<code>MAN</code></li><li>局域网<code>LAN</code></li><li>个域网<code>PAN</code></li></ul><h5 id="按拓扑类型分类"><a href="#按拓扑类型分类" class="headerlink" title="按拓扑类型分类"></a>按拓扑类型分类</h5><ul><li>总线型网络</li><li>星型网络</li><li>环形网络</li><li>网状型网络</li></ul><h2 id="4-计算机网络性能指标"><a href="#4-计算机网络性能指标" class="headerlink" title="4 计算机网络性能指标"></a>4 计算机网络性能指标</h2><p>常用评判计算机网络性能主要为以下8个指标</p><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>连接在计算机网络上的主机在数字信道上传送比特的速率，也称之为比特率或者数据率</p><p>单位为：<code>bit/s</code></p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>计算机网络中从一点到另一点所能达到的最高速率</p><p>带宽通常用来表示网络通信线路传送数据的能力</p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>单位时间内通过某个网络的数据量</p><ul><li>吞吐量经常用于对现实世界网络的一种测量，能够衡量实际上到底有多少数据能够通过网络</li><li>受网络带宽或额定速率的限制</li></ul><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>网络时延一般由发送时延、处理时延、传播时延三部分组成</p><ul><li>发送时延<ul><li>分组通过网卡发送到链路所需时间</li><li>$\frac{分组长度(bit)}{发送速率(bit/s)}$</li></ul></li><li>处理时延<ul><li>分组在路由器处排队时间、路由器对其缓存转发的时间</li></ul></li><li>传播时延<ul><li>分组在通信链路上传播所需时间</li><li>$\frac{链路长度}{电磁波传播速率}$</li></ul></li></ul><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710004156154.png" alt="image-20230710004156154" style="zoom:50%;"></p><h4 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h4><h4 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h4><h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><h4 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h4><h2 id="5-计算机网络体系结构"><a href="#5-计算机网络体系结构" class="headerlink" title="5 计算机网络体系结构"></a>5 计算机网络体系结构</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 基础知识一</title>
      <link href="/2023/07/08/java/jvm%E5%85%A5%E9%97%A8/"/>
      <url>/2023/07/08/java/jvm%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>这是JVM基础知识入门的第一篇文章</p><p><img src="/2023/07/08/java/jvm%E5%85%A5%E9%97%A8/3.jpg" alt="3" style="zoom: 33%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目录结构测试</title>
      <link href="/2023/07/08/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/07/08/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>ghhjjjkjk</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>hjjkjkkjS</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><script type="math/tex; mode=display">x_2+y_2=32</script><script type="math/tex; mode=display">matrix = x^2+y^2=z^2</script><p>发广告哼哼唧唧</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>GHhjiig</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><img src="/2023/07/08/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/1.png" alt="1"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码测试</title>
      <link href="/2023/07/08/%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/07/08/%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/08/hello-world/"/>
      <url>/2023/07/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
