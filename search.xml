<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue入门03</title>
      <link href="/2025/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/03%20Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-03/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A803/"/>
      <url>/2025/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/03%20Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-03/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A803/</url>
      
        <content type="html"><![CDATA[<h1 id="vue快速入门03"><a href="#vue快速入门03" class="headerlink" title="vue快速入门03"></a><code>vue快速入门03</code></h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="vue生命周期的四个阶段"><a href="#vue生命周期的四个阶段" class="headerlink" title="vue生命周期的四个阶段"></a>vue生命周期的四个阶段</h3><p>vue对象从创建到销毁的整个过程</p><p>Vue生命周期的四个阶段：</p><ul><li>创建<ul><li>初始化操作，普通数据转变为响应式数据</li><li>该阶段可以发送初始化渲染请求</li></ul></li><li>挂载<ul><li>渲染模板</li><li>该阶段才可以开始操作dom</li></ul></li><li>更新<ul><li>数据修改，更新视图</li></ul></li><li>销毁<ul><li>销毁实例</li></ul></li></ul><h3 id="vue生命周期函数（钩子函数）"><a href="#vue生命周期函数（钩子函数）" class="headerlink" title="vue生命周期函数（钩子函数）"></a>vue生命周期函数（钩子函数）</h3><p>在vue生命周期过程中，会自动运行一些函数，本称之为<strong>生命周期钩子</strong>，可以让开发者在<strong>特定阶段</strong>运行自己的代码</p><p>在整个生命周期中一共8个钩子函数，如下图所示：</p><p><img src="/2025/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/03%20Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-03/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A803/image-20250404150439131.png" alt="image-20250404150439131"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;counter&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;number--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;value&quot;</span> <span class="attr">id</span>=<span class="string">&quot;value&quot;</span>&gt;</span>&#123;&#123;number&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;number++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: <span class="string">&quot;计数器&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">number</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//1.创建阶段，完成初始化，准备数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应式数据准备之前&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应式数据准备之后&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//在这个钩子函数里可以执行渲染数据请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">number</span> = <span class="number">200</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//2.挂载阶段（渲染模板）</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;模板渲染之前&quot;</span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>).<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;模板渲染之后&quot;</span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>).<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//这个阶段之后，就可以操作dom</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//3.更新阶段，改变数据，更新视图</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//更新之前的视图</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据修改了，但视图并未更新&quot;</span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.value&quot;</span>).<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//更新之后的视图</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据修改了，视图已经更新&quot;</span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.value&quot;</span>).<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//4.销毁阶段</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//执行 实例名.$destroy()，可以手动销毁实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeDestroy&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//该阶段一般用于销毁实例之前关闭一些第三方的资源占用</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">destoyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;destroyed&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实例：搜索框一进入页面立刻获取焦点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>搜索页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.search-container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.logo-text</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.search-bar</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.search-bar</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.search-button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#c43c3c</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo-text&quot;</span>&gt;</span>搜索一下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-bar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;搜索内容...&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;search-button&quot;</span>&gt;</span>搜索一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//输入框获取焦点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.search-bar input&quot;</span>).<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="工程化开发入门"><a href="#工程化开发入门" class="headerlink" title="工程化开发入门"></a>工程化开发入门</h2><h3 id="开发Vue的两种方式"><a href="#开发Vue的两种方式" class="headerlink" title="开发Vue的两种方式"></a>开发Vue的两种方式</h3><ul><li>核心包传统开发方式：基于<code>html/css/js</code>文件，直接引入核心包,开发Vue</li><li>工程化开发模式：基于构建工具（例如<code>webpack</code>)的环境中开发Vue</li></ul><h3 id="脚手架-Vue-CLI"><a href="#脚手架-Vue-CLI" class="headerlink" title="脚手架 Vue CLI"></a>脚手架 Vue CLI</h3><p><code>Vue CLI</code>是<code>Vue</code>官方提供的一个全局命令工具，可以帮助我们快速创建一个开发<code>Vue</code>项目的标准化基础架子（集成了Webpack配置）</p><p>好处：</p><ul><li>开箱即用，零配置</li><li>内置babel等工具</li><li>标准化</li></ul><p><strong>使用步骤：</strong></p><ol><li>全局安装（初次使用时执行）：<code>npm i @vue/cli -g</code>或者<code>yarn global add @vue/cli</code></li><li>查看<code>vue</code>版本：<code>vue --version</code></li><li>创建项目架子：<code>vue create project-name</code>（注意：项目名不能用中文）</li><li>启动项目：<code>npm run serve</code>或者<code>yarn serve</code>（具体启动的命令参考项目中的<code>package.json</code>）</li></ol><h3 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h3><p>利用脚手架创建出来的项目的目录结构</p><p><img src="/2025/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/03%20Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-03/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A803/image-20250404222831849.png" alt="image-20250404222831849" style="zoom:50%;"></p><p>项目运行解析流程</p><p><img src="/2025/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/03%20Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-03/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A803/image-20250404225557875.png" alt="image-20250404225557875" style="zoom: 33%;"></p><h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><p><strong>组件化</strong></p><p>一个页面可以拆分成一个个组件，每个组件有着自己独立的结构、样式、行为。</p><p>组件化可以便于维护，利于复用，从而提高开发效率</p><p>组件可以分为两类：</p><ul><li>普通组件</li><li>根组件<ul><li><code>App.vue</code>文件，整个应用最上层的组件，包裹所有普通小组件</li></ul></li></ul><p><strong>App.vue文件</strong></p><p><code>App.vue</code>文件（单个组件文件）包含三个组成部分</p><ul><li><code>template</code>：结构，有且只有一个根元素</li><li><code>script</code>：js逻辑代码</li><li><code>style</code>：样式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!--组件的结构代码--&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;son&quot; @click=&quot;show&quot;&gt;大的&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//导出当前组件的配置项</span><br><span class="line">//里面可以提供data、methods、computed、watch、生命周期钩子函数等</span><br><span class="line">  export default&#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">      show()&#123;</span><br><span class="line">        alert(&quot;你点击了son div元素&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .father&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  .son&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>补充：<code>vscode</code>语法高亮插件<code>Vetur</code></p><p><img src="/2025/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/03%20Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-03/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A803/image-20250404230839527.png" alt="image-20250404230839527"></p><h3 id="普通组件的注册使用"><a href="#普通组件的注册使用" class="headerlink" title="普通组件的注册使用"></a>普通组件的注册使用</h3><h4 id="组件注册的两种方式"><a href="#组件注册的两种方式" class="headerlink" title="组件注册的两种方式"></a>组件注册的两种方式</h4><h5 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h5><p>只能在注册的组件内使用</p><ol><li>创建<code>.vue</code>文件</li><li>在使用的组件内导入并注册</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--导入--&gt;</span><br><span class="line">import 组件名 from &#x27;xxx.vue&#x27;</span><br><span class="line">&lt;!--注册--&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">components:&#123;</span><br><span class="line">组件名称</span><br><span class="line">:导入的组件名</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，直接当成<code>html</code>标签使用，<code>&lt;组件名&gt;&lt;/组件名&gt;</code></p><p>注意组件名的命名规范：大驼峰命名法，比如<code>XxxHhhh</code></p><p><strong>使用实例</strong></p><p><img src="/2025/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/03%20Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-03/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A803/image-20250410213516845.png" alt="image-20250410213516845" style="zoom:67%;"></p><p>将上图中的页面拆分为三个不同的组件：<code>PageHeader</code>、<code>PageMain</code>、<code>PageFooter</code></p><p><img src="/2025/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/03%20Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-03/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A803/image-20250410213623378.png" alt="image-20250410213623378"></p><p><code>PageHeader</code>代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--页面头部组件--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;header&quot;&gt;头部&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .header&#123;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: blueviolet;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    color: white;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>PageMain</code>代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--页面头部组件--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;页面主体&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .main&#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 300px;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    color: white;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>PageFooter</code>代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--页面头部组件--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;footer&quot;&gt;页面底部&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .footer&#123;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: greenyellow;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    color: white;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>App.vue</code>代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;MyHeader&gt;&lt;/MyHeader&gt;</span><br><span class="line">    &lt;MyMain&gt;&lt;/MyMain&gt;</span><br><span class="line">    &lt;MyFooter&gt;&lt;/MyFooter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import PageHeader from &#x27;./components/PageHeader.vue&#x27;;</span><br><span class="line">import PageMain from &#x27;./components/PageMain.vue&#x27;;</span><br><span class="line">import PageFooter from &#x27;./components/PageFooter.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    MyHeader:PageHeader,</span><br><span class="line">    MyMain:PageMain,</span><br><span class="line">    MyFooter:PageFooter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .app&#123;</span><br><span class="line">    margin: 10px auto;</span><br><span class="line">    padding: 50px;</span><br><span class="line">    width: 600px;</span><br><span class="line">    height: 500px;</span><br><span class="line">    background-color: aqua;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h5><p>在所有组件内都能使用</p><ol><li>创建<code>.vue</code>文件</li><li>在<code>main.js</code>中进行全局注册</li></ol><p>在各个组件中均使用的通用组件，就可以把它定义为全局组件</p><p>全局注册的语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入需要注册的组件</span></span><br><span class="line"><span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">&quot;xxxx.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用Vue.component进行全局注册</span></span><br><span class="line"><span class="comment">//Vue.component(&#x27;组件名&#x27;,组件对象)</span></span><br></pre></td></tr></table></figure><p>全局注册之后，任意其他组件中均可直接使用（不用在使用的组件内导入注册该组件），使用的时候，直接当成<code>html</code>标签使用，<code>&lt;组件名&gt;&lt;/组件名&gt;</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>项目页面开发的思路</p><ol><li>分析页面，按照模块对页面进行拆分，搭架子（一般局部注册，在多个组件中均使用的组件，可以考虑进行全局注册）</li><li>根据设计图，编写组件<code>html</code>结构和<code>css</code>样式</li><li>拆分封装通用的小组件</li><li>实现完静态结构后，通过<code>js</code>动态渲染，实现页面的相关功能</li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门02</title>
      <link href="/2025/04/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/02%20vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-02/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A802/"/>
      <url>/2025/04/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/02%20vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-02/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A802/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue入门02"><a href="#Vue入门02" class="headerlink" title="Vue入门02"></a>Vue入门02</h1><h2 id="指令补充"><a href="#指令补充" class="headerlink" title="指令补充"></a>指令补充</h2><h3 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h3><p>通过<code>&quot;.&quot;</code>指明一些指令后缀，不同后缀封装了不同的处理操作，便于简化代码</p><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><p><code>@keyup.enter</code>：键盘回车监听</p><p>语法：<code>@keyup.enter=事件处理函数</code></p><ul><li><code>@keyup</code>是任何按键时都会触发事件</li></ul><h4 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h4><p><code>v-model.trim</code>：去除首尾空格</p><p><code>v-model.number</code>：转数字</p><p>语法：与<code>v-model</code>语法一致，后面接双向绑定的vue数据</p><h4 id="时间修饰符"><a href="#时间修饰符" class="headerlink" title="时间修饰符"></a>时间修饰符</h4><p><code>@事件名.stop</code>：阻止冒泡</p><p><code>@事件名.prevent</code>：阻止默认行为</p><h3 id="v-bind对于样式控制的增强"><a href="#v-bind对于样式控制的增强" class="headerlink" title="v-bind对于样式控制的增强"></a>v-bind对于样式控制的增强</h3><p>为便于开发者进行样式控制，Vue扩展了<code>v-bind</code>语法，可以针对<code>class类名</code>和<code>style行内样式</code>进行控制</p><h4 id="v-bind操作class"><a href="#v-bind操作class" class="headerlink" title="v-bind操作class"></a>v-bind操作class</h4><p>语法：<code>:class=&quot;对象/数组&quot;</code></p><ul><li>对象，键就是类名，值是布尔值，如果值为<code>true</code>，则有这个类，否则没有</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 例如 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;类名1:布尔值,类名2:布尔值,...&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>数组，数组中所有的类都会添加到盒子上，本质就是一个<code>class列表</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[类名1,类名2,类名3,...]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样通过给标签设置不同的类名，便于其根据情况切换不同的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.pink</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.big</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;pink:true,big:true&#125;&quot;</span>&gt;</span>样式切换<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际应用场景：</p><p>网页tab页面高亮，比如不同的栏目模块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>导航栏示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.navbar</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f8f8f8</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.navbar-item</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.navbar-item</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#e2231a</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in tabList&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:item.isActive&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;add(item.id)&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tabList</span>:[&#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;京东秒杀&quot;</span>,<span class="string">&quot;isActive&quot;</span>:<span class="literal">false</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ,&#123;<span class="string">&quot;id&quot;</span>:<span class="number">2</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;每日特价&quot;</span>,<span class="string">&quot;isActive&quot;</span>:<span class="literal">false</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ,&#123;<span class="string">&quot;id&quot;</span>:<span class="number">3</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;品类秒杀&quot;</span>,<span class="string">&quot;isActive&quot;</span>:<span class="literal">false</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">add</span>(<span class="params">id</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">tabList</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        item.<span class="property">isActive</span> = item.<span class="property">id</span>==id</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/04/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/02%20vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-02/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A802/tab-change.gif" alt></p><h4 id="v-bind操作style"><a href="#v-bind操作style" class="headerlink" title="v-bind操作style"></a>v-bind操作style</h4><p>语法：<code>:style=&quot;样式对象&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;ccs属性名1：css属性值,css属性名2：css属性值&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&#x27;&#123;color:&quot;red&quot;,width:&quot;100px&quot;,height:&quot;30px&quot;,border:&quot;1px solid&quot;&#125;&#x27;</span>&gt;</span>style样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model应用于其他表单元素"><a href="#v-model应用于其他表单元素" class="headerlink" title="v-model应用于其他表单元素"></a>v-model应用于其他表单元素</h3><p>所有常见的表单元素均可以用<code>v-model</code>绑定关联，进行双向绑定，能够快速获取或者设定表单元素的值</p><p><code>v-model</code>能够根据控件类型，自动选取正确的方法来更新元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputText&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;长文本&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;textArea&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span><span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>乒乓球<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;nation&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;韩国&quot;</span>&gt;</span>韩国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;日本&quot;</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">inputText</span>:<span class="string">&quot;啦啦啦啦啦&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">textArea</span>:<span class="string">&quot;好好看看啦啦啦&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">hobby</span>:[<span class="string">&quot;篮球&quot;</span>,<span class="string">&quot;乒乓球&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>:<span class="string">&quot;女&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">nation</span>:<span class="string">&quot;日本&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="computed属性"><a href="#computed属性" class="headerlink" title="computed属性"></a>computed属性</h2><h3 id="计算属性介绍"><a href="#计算属性介绍" class="headerlink" title="计算属性介绍"></a>计算属性介绍</h3><p>计算属性：基于现有的数据，计算出来的新属性，依赖的数据发生变化，会自动重新计算</p><p>语法：</p><ul><li>声明在<code>computed</code>配置项中，一个计算属性对应一个函数</li><li>使用起来和普通属性一样使用<code>&#123;&#123;计算属性名&#125;&#125;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">计算属性名()&#123;</span><br><span class="line">基于现有数据，编写求值逻辑</span><br><span class="line">return 结果</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>礼物清单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in goods&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.num&#125;&#125;个<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span>礼物总数:&#123;&#123;allCount&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">goods</span>: [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;篮球&quot;</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                    , &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;玩具&quot;</span>, <span class="attr">num</span>: <span class="number">2</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                    , &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;足球&quot;</span>, <span class="attr">num</span>: <span class="number">6</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">allCount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum,item</span>)=&gt;</span></span></span><br><span class="line"><span class="language-javascript">                        sum+item.<span class="property">num</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="computed计算属性-vs-methods方法"><a href="#computed计算属性-vs-methods方法" class="headerlink" title="computed计算属性 vs methods方法"></a>computed计算属性 vs methods方法</h3><h4 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h4><p>功能：封装了一段对于数据的处理，求得一个结果</p><p>语法：</p><ul><li>写在<code>computed</code>配置项中</li><li>作为属性，直接使用<code>this.计算属性</code>或者<code>&#123;&#123;计算属性&#125;&#125;</code></li></ul><p>缓存特性：</p><ul><li>能够一定程度上提升性能，计算属性会对计算出来的结果进行缓存，再次使用时直接读取缓存，如果依赖项发生了变化，会自动计算新的结果并再次缓存</li></ul><h4 id="methods方法"><a href="#methods方法" class="headerlink" title="methods方法"></a>methods方法</h4><p>功能：封装了处理业务逻辑，给实例提供一个方法</p><p>语法：</p><ul><li>写在<code>methods</code>配置项中</li><li>作为方法，需要调用<code>this.方法名()</code>或者<code>@事件名=方法名</code></li></ul><h3 id="计算属性完整写法"><a href="#计算属性完整写法" class="headerlink" title="计算属性完整写法"></a>计算属性完整写法</h3><p>上述是计算属性的简写，这种情况下只能访问，不能修改属性，如果要修改属性，则需要写计算属性的完整写法</p><p><strong>计算属性的完整写法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">计算属性名:&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">代码逻辑（数据计算逻辑）</span><br><span class="line">return 结果</span><br><span class="line">&#125;,</span><br><span class="line">set()&#123;</span><br><span class="line">代码逻辑（数据修改逻辑）</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">lastName</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>=&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入新的名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputName&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;alertName&quot;</span>&gt;</span>改名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">firstName</span>: <span class="string">&quot;李&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lastName</span>: <span class="string">&quot;白&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">inputName</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alertName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">name</span> = <span class="variable language_">this</span>.<span class="property">inputName</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//修改赋值时，value极为传入的新赋予的值</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">firstName</span> = value.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">lastName</span> = value.<span class="title function_">substring</span>(<span class="number">1</span>, value.<span class="property">length</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="watch监听器"><a href="#watch监听器" class="headerlink" title="watch监听器"></a>watch监听器</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>功能：监视一些数据变化，执行相应的业务逻辑或者异步操作</p><p>应用场景分析：在线翻译栏，左边用户输入内容，右边会实时显示翻译内容</p><p>语法：</p><ul><li><p>简单写法：监听简单类型数据</p></li><li><p>完整写法：需要添加额外的配置</p></li></ul><h3 id="简单写法"><a href="#简单写法" class="headerlink" title="简单写法"></a>简单写法</h3><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例--&gt;</span></span><br><span class="line">data:&#123;</span><br><span class="line">words:&quot;苹果&quot;,</span><br><span class="line">obj:&#123;</span><br><span class="line">words:&quot;苹果&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--监视器--&gt;</span></span><br><span class="line">watch:&#123;</span><br><span class="line">//数据变化时会触发对应的操作</span><br><span class="line">//newValue为新值，oldValue为老值</span><br><span class="line">数据属性名(newValue,oldValue)&#123;</span><br><span class="line">对应数据变化的业务逻辑或者异步操作</span><br><span class="line">&#125;,</span><br><span class="line">&#x27;对象.属性名&#x27;(newValue,oldValue)&#123;</span><br><span class="line">对应数据变化的业务逻辑或者一部操作</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>输入内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;words&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>翻译内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;translateWords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">words</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">translateWords</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">words</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">translateWords</span> = newValue.<span class="title function_">toUpperCase</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如何是调用后端API接口进行相关的操作，这时候要注意性能的影响，采取<strong>防抖</strong>，来避免频繁触发调用</p><h3 id="完整写法"><a href="#完整写法" class="headerlink" title="完整写法"></a>完整写法</h3><p>完整写法需要额外配置项</p><ul><li>deep:true，对复杂数据类型深度监视 ，</li><li>immediate:true，初始化立刻执行一次handler方法</li></ul><p>应用场景分析：仍然是文本翻译场景，但是，不仅用户输入内容，实时显示当前文本翻译结果，当用户切换语言类型时，也需要翻译当前文本内容，这时就需要同时监听一个对象的多个属性</p><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">obj:&#123;</span><br><span class="line">words:&quot;苹果&quot;,</span><br><span class="line">lang:&quot;En&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">数据属性名:&#123;</span><br><span class="line">deep:true,</span><br><span class="line">handler(newValue)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;transObj.lang&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;大写&quot;</span>&gt;</span>大写<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;小写&quot;</span>&gt;</span>小写<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>输入内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;transObj.words&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>翻译内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;translateWords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">transObj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">words</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">lang</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">translateWords</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">transObj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">handler</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (newValue.<span class="property">lang</span> == <span class="string">&quot;大写&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">translateWords</span> = newValue.<span class="property">words</span>.<span class="title function_">toUpperCase</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newValue.<span class="property">lang</span> == <span class="string">&quot;小写&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">translateWords</span> = newValue.<span class="property">words</span>.<span class="title function_">toLowerCase</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="综合案例：购物车"><a href="#综合案例：购物车" class="headerlink" title="综合案例：购物车"></a>综合案例：购物车</h2><p>实现下图中的购物车功能</p><p><img src="/2025/04/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/02%20vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-02/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A802/image-20250403164138551.png" alt="image-20250403164138551" style="zoom:50%;"></p><p>功能分析：</p><ul><li>页面列表渲染：<code>v-for</code></li><li>删除功能</li><li>修改个数</li><li>全选反选</li><li>统计选中商品的数目和总价：<code>computed</code>属性</li><li>持久化到本地：<code>localStorage</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cart</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.total</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.total</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#0056b3</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.delete</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#dc3545</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.delete</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#c82333</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://via.placeholder.com/100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Logo&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;goods.length&gt;0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>选中<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>个数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>小计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>没有商品，购物车为空<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in goods&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.checked&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://via.placeholder.com/50&quot;</span> <span class="attr">:alt</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;item.num&lt;0&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;item.num=1&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;item.num+=1&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price*item.num&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line">        总价：<span class="tag">&lt;<span class="name">span</span>&gt;</span>¥&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>全选:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isAll&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>结算&#123;&#123;totalNum&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> defaultArr = []</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// goods: [&#123; id: 1, name: &quot;火龙果&quot;, price: 6, num: 2, checked: false &#125;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#123; id: 2, name: &quot;草莓&quot;, price: 7, num: 1, checked: false &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//从本地存储读取，如果为空，则用默认值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">goods</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;goods&quot;</span>)) || defaultArr</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">totalPrice</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (item.<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> sum + item.<span class="property">price</span> * item.<span class="property">num</span></span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> sum</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="title function_">totalNum</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (item.<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> sum + item.<span class="property">num</span></span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> sum</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isAll</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="property">length</span>; index++) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">goods</span>[index].<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">goods</span>.<span class="property">length</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              item.<span class="property">checked</span> = value</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">del</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">goods</span> = <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> != id)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//数据持久化，localstorage</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">goods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">handler</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;goods&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(newValue))</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue快速入门</title>
      <link href="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/"/>
      <url>/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue快速入门"><a href="#Vue快速入门" class="headerlink" title="Vue快速入门"></a>Vue快速入门</h1><h2 id="vue基本概念"><a href="#vue基本概念" class="headerlink" title="vue基本概念"></a>vue基本概念</h2><p><a href="https://cn.vuejs.org/">vue</a>是一个用于构建用户界面的渐进式<code>JavaScript</code>框架</p><h3 id="创建Vue实例并初始化渲染"><a href="#创建Vue实例并初始化渲染" class="headerlink" title="创建Vue实例并初始化渲染"></a>创建Vue实例并初始化渲染</h3><ol><li>准备容器，即Vue所管理的元素范围</li><li>引包，可以从官方文档找到引用的链接地址（开发版本/生产版本）</li><li>创建实例</li><li>添加配置，完成渲染</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--准备容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里会编写用于渲染的代码逻辑--&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//实例化对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,<span class="comment">//通过el配置选择器，指定挂载点，即Vue管理的元素范围</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123; <span class="comment">//data提供渲染的数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:<span class="string">&quot;hello world!!!&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><p>插值表达式<code>&#123;&#123;表达式&#125;&#125;</code>是一种<code>Vue</code>的模板语法，利用表达式进行插值，可以把对应的数据渲染到页面，这里面的表达式可以是被求值的代码，<code>JS</code>引擎会将其进行算法得出结果</p><p>使用插值表达式应注意的点：</p><ul><li>使用的数据必须存在，在<code>vue</code>对象的<code>data</code>中能够找的到</li><li>只支持表达式，而非语句，比如<code>if</code>、<code>for</code>等不支持</li><li>不能在标签的属性中使用插值表达式，一般是用于标签的文本位置用于展示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;userName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;userName.toUpperCase()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&gt;=18?&quot;成年&quot;:&quot;未成年&quot;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">userName</span>:<span class="string">&quot;bob&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&quot;李白&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>:<span class="number">27</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue核心特性：响应式"><a href="#Vue核心特性：响应式" class="headerlink" title="Vue核心特性：响应式"></a>Vue核心特性：响应式</h3><p>响应式：数据发生变化，视图自动更新</p><p>本质上是数据改变，vue底层会监听到数据修改，然后进行相关的dom操作，来自动更新视图</p><ul><li><p>访问数据里面的属性值：对象.属性名</p></li><li><p>修改数据：对象.属性名=新值</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;change&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>变换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&quot;hello word&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//改变message的值</span></span></span><br><span class="line"><span class="language-javascript">      app.<span class="property">message</span> = <span class="string">&quot;we are family&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue开发者工具"><a href="#Vue开发者工具" class="headerlink" title="Vue开发者工具"></a>Vue开发者工具</h3><p><a href="https://devtools.vuejs.org/">Vue DevTools</a> 是一个插件，能够方便开发者调试Vue应用</p><p>安装：通过谷歌应用商店安装（国内可以在 <a href="https://chrome.zzzmh.cn/index">极简插件</a>上下载）</p><p><img src="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/image-20250329214623757.png" alt="image-20250329214623757"></p><p>安装之后在浏览器页面右击检查，可以看到对用选项</p><p><img src="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/image-20250329221240760.png" alt="image-20250329221240760"></p><h2 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h2><p><code>Vue</code>会根据不同的指令，针对标签实现不同的功能</p><p>指令：带有<code>v-</code>前缀的特殊标签属性</p><p>常见的指令参照<a href="https://v2.cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4">官方文档</a></p><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>相当于<code>innerHtml</code>能够对表达式进行解析</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>功能：根据表达式真假，控制元素的显示与隐藏</p><p>语法：<code>v-show=&quot;表达式&quot;</code>，表达式值为<code>true</code>显示，<code>false</code>隐藏</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>功能：根据表达式真假，控制元素的显示与隐藏（条件渲染）</p><p>语法：<code>v-if=&quot;表达式&quot;</code>，表达式值为<code>true</code>显示，<code>false</code>隐藏</p><p><strong>v-show &amp; v-if的区别</strong></p><p><code>v-show</code>是通过<code>display</code>属性来控制元素的显示与隐藏，而<code>v-if</code>是通过条件渲染来实现的</p><p>当表达式值为<code>false</code>时，两者都会使元素不显示，但是存在区别：</p><ul><li><code>v-if</code>此时是通过<code>display=none</code>来不显示元素</li><li><code>v-if</code>此时通过移除元素来实现隐藏</li></ul><p>所以<code>v-show</code>适用于频繁切换隐藏的场景，因为<code>v-if</code>会根据表达式值不断创建和销毁元素，更加耗费性能</p><p>不频繁切换的场景建议使用<code>v-if</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>v-show控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>v-if控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/image-20250329224148152.png" alt="image-20250329224148152"></p><h3 id="v-else和v-else-if"><a href="#v-else和v-else-if" class="headerlink" title="v-else和v-else-if"></a>v-else和v-else-if</h3><p>两者是辅助<code>v-if</code>来进行条件渲染，适用于多条件判断场景</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据分数值显示不同的文字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;score&gt;=90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=60&quot;</span>&gt;</span>合格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-else</span>&gt;</span>不合格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">score</span>: <span class="number">90</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>功能：注册事件，即添加监听+提供处理逻辑</p><p> 语法：</p><ul><li><p>v-on:事件名=”内联语句”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>&#123;&#123;score&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点击按钮 score值会加一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;score++&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">score</span>: <span class="number">90</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-on:事件名=”mehods中的方法名”</p></li><li><p>简写：@事件名=xxx</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>&#123;&#123;score&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点击按钮 score值会加一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">score</span>: <span class="number">90</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;<span class="comment">//mehods里面提供Vue实例的所有方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">score</span>--</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>v-on指令可以调用传参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-on:click=方法名(参数1,参数2)</span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>功能：动态的设置html标签的属性值，比如<code>src</code>、<code>title</code>、<code>color</code>等</p><p>语法：<code>v-bind:属性名=&quot;表达式&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; color: color &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>&#123;&#123;score&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--按钮改变div文本颜色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;red&quot;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;green&quot;</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">score</span>: <span class="number">90</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">color</span>: <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;<span class="comment">//mehods里面提供Vue实例的所有方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">score</span>--</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">red</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">color</span> = <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">green</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          app.<span class="property">color</span> = <span class="string">&quot;green&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>功能：基于数据循环，多次渲染整个元素</p><p> 语法：</p><ul><li>遍历数组<ul><li><code>v-for=&quot;(item,index) in 数组&quot;</code></li><li><code>v-for=&quot;item in 数组&quot;</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--显示所有图片--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;item&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in imageList&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">imageList</span>: [<span class="string">&quot;./imgs/10-01.png&quot;</span>, <span class="string">&quot;./imgs/10-02.png&quot;</span></span></span><br><span class="line"><span class="language-javascript">          , <span class="string">&quot;./imgs/11-00.gif&quot;</span>, <span class="string">&quot;./imgs//11-01.gif&quot;</span>, <span class="string">&quot;./imgs/11-03.gif&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;./imgs/11-04.png&quot;</span>, <span class="string">&quot;./imgs/11-05.png&quot;</span></span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">index</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;<span class="comment">//mehods里面提供Vue实例的所有方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in bookList&quot;</span>&gt;</span></span><br><span class="line">        《&#123;&#123;item.name&#125;&#125;》--&#123;&#123;item.author&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bookList</span>: [&#123; <span class="string">&quot;id&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;曹雪芹&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;吴承恩&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">2</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;施耐庵&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">3</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;罗贯中&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;<span class="comment">//mehods里面提供Vue实例的所有方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">del</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">bookList</span> = <span class="variable language_">this</span>.<span class="property">bookList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> != id)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/v-for.gif" alt="v-for.gif"></p><h4 id="v-for中的key"><a href="#v-for中的key" class="headerlink" title="v-for中的key"></a>v-for中的key</h4><p>key的作用：给元素添加唯一标识，便于Vue进行列表项的正确排序复用</p><p>语法：<code>v-for=xxx :key=xxx</code></p><p>注意：</p><ul><li>key的值只能是字符串或者数字类型</li><li>key的值必须具有唯一性</li><li>推荐使用id作为key，不推荐使用index作为key（因为index可能会发生变化，不对应）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in bookList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        《&#123;&#123;item.name&#125;&#125;》--&#123;&#123;item.author&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bookList</span>: [&#123; <span class="string">&quot;id&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;曹雪芹&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;吴承恩&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">2</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;施耐庵&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">3</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;罗贯中&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;<span class="comment">//mehods里面提供Vue实例的所有方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">del</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">bookList</span> = <span class="variable language_">this</span>.<span class="property">bookList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> != id)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>功能：给表单元素使用，双向数据绑定，便于快速获取或设置表单元素内容</p><ul><li>数据变化了，视图自动更新</li><li>视图变化了，数据自动更新</li></ul><p>语法：<code>v-model=变量</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.pwd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:&#123;&#123;user.name&#125;&#125;,密码:&#123;&#123;user.pwd&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">pwd</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="综合案例—记事本"><a href="#综合案例—记事本" class="headerlink" title="综合案例—记事本"></a>综合案例—记事本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.notebook</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#d9534f</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.task-input</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">22px</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.add-task</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#d9534f</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.task-list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.task-list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.task-list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.delete-task</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#d9534f</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.task-count</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clear-tasks</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#5bc0de</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;notebook&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>记事本<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;task-input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入任务&quot;</span> <span class="attr">class</span>=<span class="string">&quot;task-input&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputTask&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;add-task&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;task-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item,index in taskList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;index+1&#125;&#125;. &#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;delete-task&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;task-count&quot;</span>&gt;</span>合计: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;taskList.length&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;clear-tasks&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>清空任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">inputTask</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">taskList</span>: []</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">taskList</span> = []</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">inputTask</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="property">length</span>, <span class="attr">text</span>: <span class="variable language_">this</span>.<span class="property">inputTask</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">inputTask</span> = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">del</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">taskList</span> = <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> != id)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/2025/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/vue/01%20vue%E4%BB%8B%E7%BB%8D/01-vue-%E4%BB%8B%E7%BB%8D/记事本.gif" alt="记事本"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/"/>
      <url>/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/</url>
      
        <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>node.js</code>是一个跨平台<code>javascript</code>运行环境，开发者可以搭建服务器端的<code>javascript</code>应用程序；<code>node.js</code>还可以进行前端工程化，对前端代码进行压缩、转译和整合，提高前端开发和运行效率。  </p><p> 所谓的前端工程化是指开发项目到上线，整个过程中集成的所有工具和技术，比如格式化工具、压缩工具、转换工具以及后续框架中用到的脚手架工具等。而<code>node.js</code>是前端工程化的基础（因为<code>node.js</code>可以主动读取前端代码内容）</p><p>浏览器之所以能够执行<code>js</code>代码，依靠的是内核中的<strong>V8引擎</strong>，而<code>node.js</code>是基于<strong>Chrome V8引擎</strong>进行封装的。但是注意<code>node.js</code>环境中没有<code>DOM</code>和<code>BOM</code>等对象</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接从<a href="https://nodejs.org/en/download/">官网</a>中选择需要的版本进行下载，下载本地之后按照正常软件安装步骤进行安装即可，最后记得添加环境变量，具体的安装教程可参考<a href="https://blog.csdn.net/WHF__/article/details/129362462">csdn</a>或其他博客。</p><p>最后在<code>cmd</code>中执行<code>node -v</code>可以验证是否成功安装</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250319221027028.png" alt="image-20250319221027028"></p><h2 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h2><p>在<code>node</code>环境下执行<code>js</code>代码，通过<code>node xxx.js</code>即可</p><p>编写简易<code>js</code>代码，在<code>node</code>环境下执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250319221734689.png" alt="image-20250319221734689"></p><h2 id="nodejs常用模块"><a href="#nodejs常用模块" class="headerlink" title="nodejs常用模块"></a>nodejs常用模块</h2><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><p> <code>fs</code>模块用于读写文件，封装了与本机文件系统进行交互的方法和属性</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li><p>加载<code>fs</code>模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>) <span class="comment">//fs是模块标识符（模块的名字）</span></span><br></pre></td></tr></table></figure></li><li><p>写入文件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;文件路径&quot;</span>,<span class="string">&quot;写入的内容&quot;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//写入后的回调函数</span></span><br><span class="line">    <span class="comment">//如果写入过程中出现了错误，err参数会有具体的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>读取文件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;文件路径&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//读取后的回调函数</span></span><br><span class="line">    <span class="comment">//data是文件内容的Buffer数据流,err是异常信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><strong>实例</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;./fn_write.txt&quot;</span>, <span class="string">&quot;nodejs fs模块写入文件&quot;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内容已将全部写入文件!!!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;./fn_write.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取失败&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250319225536809.png" alt="image-20250319225536809"></p><h3 id="Path模块"><a href="#Path模块" class="headerlink" title="Path模块"></a>Path模块</h3><p><code>node.js</code>中的<code>Path</code>模块主要用于路径处理</p><p>比如在<code>node.js</code>代码中，相对路径是根据终端所在路径去查找的，可能无法找到你想要的文件，而在代码中编写的相对路径通常是依据当前<code>js</code>文件所在的路径去查找的，所以在编写时尽量实用绝对路径，可以通过<code>__dirname</code>这个内置变量，获取当前<code>js</code>文件所在目录的绝对路径。</p><p><code>path.join()</code>会使用特定于平台的分隔符作为定界符，将所有给定的路径片段连接在一起</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前文件的绝对路径</span></span><br><span class="line"><span class="keyword">let</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;demo01.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath)</span><br></pre></td></tr></table></figure><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p><code>nodejs</code>的<code>http</code>模块可以用于创建web服务，并响应内容给浏览器</p><p><code>http</code>模块创建<code>web</code>服务的步骤：</p><ol><li>加载<code>http</code>模块，创建<code>web</code>服务对象</li><li>监听<code>request</code>请求事件，设置响应头和响应体</li><li>配置端口号，启动服务</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"><span class="comment">//创建web服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">//监听request事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain;charset=utf-8&quot;</span>)</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;欢迎访问由nodejs创建的web服务&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置端口号，启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&quot;8000&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;web服务启动...&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250325145500987.png" alt="image-20250325145500987"></p><h4 id="案例—基于web服务，开发提供网页资源功能"><a href="#案例—基于web服务，开发提供网页资源功能" class="headerlink" title="案例—基于web服务，开发提供网页资源功能"></a>案例—基于web服务，开发提供网页资源功能</h4><p>浏览器请求资源网页，后端响应指定网页内容，包括html标签、css样式和js等字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="comment">//创建web服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">//监听request事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">`request`</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span> == <span class="string">&quot;/random.html&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//请求对应的页面</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dst/random.html&quot;</span>), <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>)</span><br><span class="line">      res.<span class="title function_">end</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain;charset=utf-8&quot;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;访问的资源不存在&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&quot;8000&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;web服务启动...&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>dst/random.html</code>的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* background-color: antiquewhite; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.num</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div_button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;num&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div_button&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;start&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;end&quot;</span>&gt;</span>结束<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> numTag = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.num&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> startButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.start&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> endButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.end&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> intervalId;</span></span><br><span class="line"><span class="language-javascript">    startButton.<span class="title function_">addEventListener</span>(<span class="string">`click`</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> val = <span class="title class_">Number</span>(numTag.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">      intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        val += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        numTag.<span class="property">innerText</span> = val</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">50</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    endButton.<span class="title function_">addEventListener</span>(<span class="string">`click`</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (intervalId) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearInterval</span>(intervalId)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:8000/random.html</code>即可看到如下内容</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250325152705997.png" alt="image-20250325152705997"></p><h2 id="nodejs模块化"><a href="#nodejs模块化" class="headerlink" title="nodejs模块化"></a>nodejs模块化</h2><p>在<code>node.js</code>中，每个文件都被视为一个单独的模块，一个项目是由多个模块文件组成的</p><p>模块化的好处：提高代码的复用性、按需加载、独立作用域</p><h3 id="commonJS标准—导入和导出"><a href="#commonJS标准—导入和导出" class="headerlink" title="commonJS标准—导入和导出"></a>commonJS标准—导入和导出</h3><p>如何自定义模块供其他模块使用：</p><ul><li><p>需要按照标准语法（CommonJS标准）<strong>导出</strong>和<strong>导入</strong>进行使用</p></li><li><p>导出语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    对外属性名<span class="number">1</span>:xxx,</span><br><span class="line">    对外属性名<span class="number">2</span>:xxx,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>倒入语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;模块名或者路径&quot;</span>)</span><br><span class="line"><span class="comment">//如果是nodejs内置模块，直接写名字，比如fs、path、http等</span></span><br><span class="line"><span class="comment">//如果是自定义模块，则写模块文件路径</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>示例</strong></p><p>在<code>dst</code>目录下创建一个<code>utils.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://www.today.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num1, num2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: url,</span><br><span class="line">  <span class="string">&quot;add&quot;</span>: add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在另一个文件里去导入<code>utils.js</code>模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&quot;./dst/utils.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="property">url</span>)</span><br><span class="line"><span class="keyword">const</span> res = utils.<span class="title function_">add</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure><h3 id="ECMAScript标准—默认导出和导入"><a href="#ECMAScript标准—默认导出和导入" class="headerlink" title="ECMAScript标准—默认导出和导入"></a>ECMAScript标准—默认导出和导入</h3><p> 该标准的默认语法：</p><ul><li><p>导出语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    对外属性名<span class="number">1</span>:xxx,</span><br><span class="line">    对外属性名<span class="number">2</span>:xxx,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导入语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 变量名 <span class="keyword">from</span> <span class="string">&quot;模块名或者路径&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：</strong></p><p><code>nodejs</code>默认支持<code>commonjs</code>语法，如果需要使用<code>ECMAScript</code>标准语法，则需要在运行模块所在文件夹新建<code>package.json</code>文件，并设置<code>&#123;&quot;type&quot;:&quot;module&quot;&#125;</code></p><p><strong>示例:</strong></p><p><code>utils.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://www.today.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num1, num2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">&quot;baseurl&quot;</span>: url,</span><br><span class="line">  <span class="string">&quot;add&quot;</span>: add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>demo01.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">&quot;./dst/utils.js&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="property">baseurl</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="title function_">add</span>(<span class="number">20</span>, <span class="number">40</span>))</span><br></pre></td></tr></table></figure><p><code>package.json</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ECMAScript标准—命名导出和导入"><a href="#ECMAScript标准—命名导出和导入" class="headerlink" title="ECMAScript标准—命名导出和导入"></a>ECMAScript标准—命名导出和导入</h3><p>命名标准使用：</p><ul><li>导出：<code>export</code>修饰定义语句</li><li>导入：<code>import &#123;同名变量&#125; from 模块名或路径</code></li></ul><p>如何选择默认导入和导出以及命名导入和导出?</p><ul><li>按需加载，使用命名导入和导出</li><li>全部加载，使用默认导入和导出</li></ul><p><strong>示例:</strong></p><p><code>utils.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> url = <span class="string">&quot;https://www.today.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num1, num2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>demo01.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; url, add &#125; <span class="keyword">from</span> <span class="string">&quot;./dst/utils.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">20</span>, <span class="number">40</span>))</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>CommonJS标准：一般应用在<code>Node.js</code>项目环境中</li><li>ECMAScript标准：一般应用在前端工程化项目中</li></ul><h2 id="包的概念"><a href="#包的概念" class="headerlink" title="包的概念"></a>包的概念</h2><p>包：将模块、代码以及其他资料聚合成一个文件夹</p><p>包的分类：</p><ul><li>项目包：主要用于编写项目及其业务逻辑</li><li>软件包：封装工具和方法进行使用</li></ul><p>包的要求：在根目录下，必须有<code>package.json</code>文件（包的说明清单文件）</p><p><code>package.json</code>常见的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span>软件包的名称<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span>软件包当前的版本<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span>软件包的简短描述<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span>软件包的入口点<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span>软件包的作者<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span>软件包的许可证（商用后可以用作者名字宣传）</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意：导入软件包时，引入的默认时<code>index.js</code>模块文件/<code>main</code>属性指定的模块文件，该文件是包的唯一出口；该文件的作用是将所有其他模块的方法集中起来，统一向外暴露</p><p><strong>示例</strong></p><p>项目目录如下：</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250326005627881.png" alt="image-20250326005627881"></p><p><code>./lib/arr.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="keyword">function</span> (<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sum + val;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&quot;add&quot;</span>: add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>./lib/str.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">len</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">upp</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">toUpperCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&quot;len&quot;</span>: len,</span><br><span class="line">  <span class="string">&quot;upp&quot;</span>: upp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; add &#125; = <span class="built_in">require</span>(<span class="string">&quot;./lib/arr.js&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; len, upp &#125; = <span class="built_in">require</span>(<span class="string">&quot;./lib/str.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  add,</span><br><span class="line">  len,</span><br><span class="line">  upp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>test.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&quot;./utils&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="title function_">add</span>([<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="title function_">len</span>(<span class="string">&quot;hjj&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="title function_">upp</span>(<span class="string">&quot;klkljh&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="npm-—-软件包管理器"><a href="#npm-—-软件包管理器" class="headerlink" title="npm — 软件包管理器"></a>npm — 软件包管理器</h3><p><code>npm</code>是<code>node.js</code>标准的软件包管理器，安装<code>node.js</code>只会，<code>npm</code>工具也会一同被安装，它能够下载和管理<code>node.js</code>包依赖</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250326010255247.png" alt="image-20250326010255247"></p><p>如何使用<code>npm</code>来下载和管理包依赖：</p><ul><li><p>初始化清单文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">//该命令会自动生成package.json文件，如果当前项目存在该文件，则略过此命令</span><br><span class="line">//package.json里面除了记录前面介绍的那些内容外，还会记录当前项目下载了哪些包</span><br></pre></td></tr></table></figure></li><li><p>下载软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i 软件包名称  #下载对应的软件包</span><br></pre></td></tr></table></figure></li><li><p>使用软件包</p><ul><li>在项目需要的地方导入和使用相关的软件包及其模块</li></ul></li></ul><p><strong>示例：</strong></p><p>新建文件夹<code>npm_demo</code>，在该文件夹下执行<code>npm init -y</code>，会生成<code>package.json</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm_demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>下载第三方依赖<code>dayjs</code>，执行<code>npm i dayjs</code></p><p><code>package.json</code>文件中会记录当前项目下载的依赖包的名称和版本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm_demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dayjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.11.13&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>对应第三方包会下载在该项目下的<code>node_modules</code>文件夹下</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250326151732859.png" alt="image-20250326151732859"></p><p>在当前项目中导入第三方包，使用相关工具模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dayjs = <span class="built_in">require</span>(<span class="string">&quot;dayjs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="title function_">dayjs</span>().<span class="title function_">format</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date)</span><br></pre></td></tr></table></figure><h3 id="npm—安装所有的依赖"><a href="#npm—安装所有的依赖" class="headerlink" title="npm—安装所有的依赖"></a>npm—安装所有的依赖</h3><p>场景：从第三方得到的项目文件，里面有<code>package.json</code>文件，但是没有存储第三方依赖包的<code>node_modules</code>文件夹（这是因为用npm下载依赖比用磁盘传递拷贝要快得多），为了能够让项目成功运行起来，需要安装项目涉及到的所有第三方依赖</p><p>此时需要执行<code>npm i</code>命令，其会下载<code>package.json</code>中记录的所有软件包</p><h3 id="npm—全局软件包nodemon"><a href="#npm—全局软件包nodemon" class="headerlink" title="npm—全局软件包nodemon"></a>npm—全局软件包nodemon</h3><ul><li>本地软件包：当前项目内使用，封装了一些属性和方法，存在于项目目录下的<code>node_modules</code>文件夹</li><li>全局软件包：本机所有项目均可使用，封装了一些命令和工具，存在于系统设置的位置</li></ul><p><code>nodemon</code>的作用：替代<code>node</code>命令，检测代码更改，自动重启程序</p><p> <code>nodemon</code>的使用：</p><ul><li>安装：<code>npm i nodemon -g</code>，<code>-g</code>代表安装到全局环境</li><li>运行：<code>nodemon xxx.js</code>来执行目标<code>js</code>文件</li></ul><p>其能感知代码文件变化，自动重启程序</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250326153842673.png" alt="image-20250326153842673"></p><h3 id="删除软件包"><a href="#删除软件包" class="headerlink" title="删除软件包"></a>删除软件包</h3><p><code>npm uni 软件包名称</code></p><p>执行该命令后，会从<code>node_modules</code>中删除对应包依赖，并且会从<code>package.json</code>和<code>package-lock.json</code>这两个文件中删除相应的记录</p><p><img src="/2025/03/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/node%20js/image-20250326154811477.png" alt="image-20250326154811477"></p>]]></content>
      
      
      <categories>
          
          <category> nodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLaMA2安装</title>
      <link href="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/"/>
      <url>/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="LLaMA2安装"><a href="#LLaMA2安装" class="headerlink" title="LLaMA2安装"></a><code>LLaMA2</code>安装</h1><p><code>LLaMA2</code>是<code>meta</code>开源的大预言模型，基于<code>transformer</code>架构实现。</p><p><a href="https://huggingface.co/meta-llama/Llama-2-7b-chat/tree/main">hugging Face</a> | <a href="https://modelscope.cn/models/shakechen/Llama-2-7b-chat/summary">modelscope</a></p><p>本文介绍如何利用可视化工具<code>text-generation-webui</code>来装载<code>llama2-7b-chat-hf</code>模型，并进行推理测试</p><h2 id="text-generation-webui"><a href="#text-generation-webui" class="headerlink" title="text-generation-webui"></a>text-generation-webui</h2><p><code>text-generation-webui</code>是一个基于<a href="https://gradio.hugging-face.cn/guides/quickstart">gradio</a>开源的<code>web</code>用户界面工具，旨在为大预言模型提供一个简单易用的交互平台</p><p><a href="https://github.com/oobabooga/text-generation-webui">text-generation-webui Github</a></p><h3 id="本地安装步骤"><a href="#本地安装步骤" class="headerlink" title="本地安装步骤"></a>本地安装步骤</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">step1 拉取github仓库</span></span><br><span class="line">git clone https://github.com/oobabooga/text-generation-webui.git</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换代码版本,最新版本的代码本地测试页面ui显示不完全，可能是部分依赖不匹配或者其他原因导致，所以切换到其他版本</span></span><br><span class="line">git checkout 1934cb6</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">step2 进入对应目录，按照要求创建对应的conda虚拟环境（虚拟环境里面应当提前安装了torch等常规依赖）,安装对应依赖</span></span><br><span class="line">pip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">step3 启动服务</span></span><br><span class="line">python server.py</span><br></pre></td></tr></table></figure><p>成功启动的运行结果为：</p><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250319204728764.png" alt="image-20250319204728764"></p><p>浏览器访问<code>http://127.0.0.1:7861</code>，界面为：</p><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250319204832941.png" alt="image-20250319204832941" style="zoom: 50%;"></p><h2 id="安装模型llama2-7b-chat-hf"><a href="#安装模型llama2-7b-chat-hf" class="headerlink" title="安装模型llama2-7b-chat-hf"></a>安装模型llama2-7b-chat-hf</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modelcope download --model shakechen/Llama-2-7b-chat-hf --local_dir &quot;./llama2&quot;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250319110304902.png" alt="image-20250319110304902"></p><h2 id="装载模型-amp-模型推理"><a href="#装载模型-amp-模型推理" class="headerlink" title="装载模型&amp;模型推理"></a>装载模型&amp;模型推理</h2><p>从<code>Github</code>上拉取的代码里面有一个<code>models</code>文件夹，将从<code>hugging face</code>或者<code>modelscope</code>上下载下来的模型文件复制到该目录下</p><p>然后从<code>web</code>页面选择模型进行加载</p><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250320093805796.png" alt="image-20250320093805796" style="zoom: 50%;"></p><p>然后点击<code>chat</code>选项卡，注意<code>chat</code>页面的<code>Mode</code>选择<code>instruct</code>，结果可以看出，<code>llama2</code>可以理解中文问题，但是回答都是英文的，效果一般，这是因为<code>LLaMA2</code>的训练语料中仅有<code>0.13%</code>的中文语料</p><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250320102034914.png" alt="image-20250320102034914"></p><p>利用<code>text-generation-webui</code>装载<code>chatGLM3</code>进行测试，步骤与上述相同，下载模型文件、复制到<code>models</code>目录、从页面选择模型进行装载、测试</p><p><img src="/2025/03/20/llm/LLaMA2%E5%AE%89%E8%A3%85/LLaMA2%E5%AE%89%E8%A3%85/image-20250320101628762.png" alt="image-20250320101628762" style="zoom:67%;"></p>]]></content>
      
      
      <categories>
          
          <category> llm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLM本地部署流程</title>
      <link href="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/"/>
      <url>/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="LLM本地部署流程"><a href="#LLM本地部署流程" class="headerlink" title="LLM本地部署流程"></a>LLM本地部署流程</h1><p>下面以本地部署<code>chatglm3-6b</code>模型为例子，展示如何进行本地部署</p><p>本地的环境说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GPU NVIDIA GeForce RTX 3090</span><br><span class="line">CPU 12th Gen Intel(R) Core(TM) i7-12700KF</span><br><span class="line">内存 64.0 GB</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">accelerate==1.5.1</span><br><span class="line">aiofiles==23.2.1</span><br><span class="line">annotated-types==0.7.0</span><br><span class="line">anyio==4.8.0</span><br><span class="line">certifi==2025.1.31</span><br><span class="line">charset-normalizer==3.4.1</span><br><span class="line">click==8.1.8</span><br><span class="line">colorama==0.4.6</span><br><span class="line">cpm-kernels==1.0.11</span><br><span class="line">exceptiongroup==1.2.2</span><br><span class="line">fastapi==0.115.11</span><br><span class="line">ffmpy==0.5.0</span><br><span class="line">filelock==3.13.1</span><br><span class="line">fsspec==2024.6.1</span><br><span class="line">gradio==5.20.1</span><br><span class="line">gradio_client==1.7.2</span><br><span class="line">groovy==0.1.2</span><br><span class="line">h11==0.14.0</span><br><span class="line">httpcore==1.0.7</span><br><span class="line">httpx==0.28.1</span><br><span class="line">huggingface-hub==0.29.3</span><br><span class="line">idna==3.10</span><br><span class="line">intel-openmp==2021.4.0</span><br><span class="line">Jinja2==3.1.4</span><br><span class="line">latex2mathml==3.77.0</span><br><span class="line">Markdown==3.7</span><br><span class="line">markdown-it-py==3.0.0</span><br><span class="line">MarkupSafe==2.1.5</span><br><span class="line">mdtex2html==1.3.1</span><br><span class="line">mdurl==0.1.2</span><br><span class="line">mkl==2021.4.0</span><br><span class="line">mpmath==1.3.0</span><br><span class="line">networkx==3.3</span><br><span class="line">numpy==2.1.2</span><br><span class="line">orjson==3.10.15</span><br><span class="line">packaging==24.2</span><br><span class="line">pandas==2.2.3</span><br><span class="line">pillow==11.0.0</span><br><span class="line">protobuf==6.30.0</span><br><span class="line">psutil==7.0.0</span><br><span class="line">pydantic==2.10.6</span><br><span class="line">pydantic_core==2.27.2</span><br><span class="line">pydub==0.25.1</span><br><span class="line">Pygments==2.19.1</span><br><span class="line">python-dateutil==2.9.0.post0</span><br><span class="line">python-multipart==0.0.20</span><br><span class="line">pytz==2025.1</span><br><span class="line">PyYAML==6.0.2</span><br><span class="line">regex==2024.11.6</span><br><span class="line">requests==2.32.3</span><br><span class="line">rich==13.9.4</span><br><span class="line">ruff==0.9.10</span><br><span class="line">safehttpx==0.1.6</span><br><span class="line">safetensors==0.5.3</span><br><span class="line">semantic-version==2.10.0</span><br><span class="line">sentencepiece==0.2.0</span><br><span class="line">shellingham==1.5.4</span><br><span class="line">six==1.17.0</span><br><span class="line">sniffio==1.3.1</span><br><span class="line">starlette==0.46.1</span><br><span class="line">sympy==1.13.1</span><br><span class="line">tbb==2021.11.0</span><br><span class="line">tokenizers==0.19.1</span><br><span class="line">tomlkit==0.13.2</span><br><span class="line">torch==2.3.0+cu121</span><br><span class="line">torchaudio==2.3.0+cu121</span><br><span class="line">torchvision==0.18.0+cu121</span><br><span class="line">tqdm==4.67.1</span><br><span class="line">transformers==4.40.1</span><br><span class="line">transformers_modules==0.4.0</span><br><span class="line">typer==0.15.2</span><br><span class="line">typing_extensions==4.12.2</span><br><span class="line">tzdata==2025.1</span><br><span class="line">urllib3==2.3.0</span><br><span class="line">uvicorn==0.34.0</span><br><span class="line">websockets==15.0.1</span><br></pre></td></tr></table></figure><h2 id="模型权重文件下载"><a href="#模型权重文件下载" class="headerlink" title="模型权重文件下载"></a>模型权重文件下载</h2><h3 id="方案一：Hugging-Face"><a href="#方案一：Hugging-Face" class="headerlink" title="方案一：Hugging Face"></a>方案一：Hugging Face</h3><p><a href="https://huggingface.co/">Hugging Face</a></p><ul><li>优点：能找到最新的模型和数据</li><li>缺点：国外网站、不稳定、下载速度慢、可能会失败</li></ul><h4 id="下载方法"><a href="#下载方法" class="headerlink" title="下载方法"></a>下载方法</h4><h5 id="手动下载"><a href="#手动下载" class="headerlink" title="手动下载"></a>手动下载</h5><p>进入官网，查找对应模型，进入页面，逐个点击文件下载，这种方法比较耗时和费力</p><p><img src="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/image-20250311171312881.png" alt="image-20250311171312881"></p><h5 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h5><p><strong>安装依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install huggingface_hub</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果速度比较慢，可以尝试国内镜像</span></span><br><span class="line">pip install huggingface_hub -i https://pypi.tuna.tsinghua.edu.cn/simple  #清华源</span><br><span class="line">pip install huggingface_hub -i http://pypi.douban.com/simple/  #豆瓣源</span><br></pre></td></tr></table></figure><p><strong>下载代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">模型下载</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from huggingface_hub import snapshot_download</span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    #指定对应模型</span><br><span class="line">    repo_id = &quot;THUDM/chatglm3-6b&quot;</span><br><span class="line">    #本地存储路径</span><br><span class="line">    local_dir = &quot;./modelroot/chatglm-6b&quot;</span><br><span class="line">    #下载</span><br><span class="line">    snapshot_download(repo_id=repo_id,local_dir=local_dir)</span><br></pre></td></tr></table></figure><p><code>repo_id</code>从如下位置复制</p><p><img src="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/image-20250311171832319.png" alt="image-20250311171832319"></p><h3 id="方案二：阿里魔塔社区"><a href="#方案二：阿里魔塔社区" class="headerlink" title="方案二：阿里魔塔社区"></a>方案二：阿里魔塔社区</h3><p><a href="https://modelscope.cn/home">ModelScope</a></p><ul><li>优点：国内镜像，速度比国外快一些</li><li>缺点：可能有的模型未及时同步，不是最新版本</li></ul><p>同样可以手动和代码下载，手动下载直接点击对应文件即可，下面介绍代码下载，可参考<a href="https://modelscope.cn/docs/home">官方文档</a></p><p><strong>安装依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install modelscope</span><br></pre></td></tr></table></figure><p><strong>下载代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式一：命令行的方式下载</span></span><br><span class="line">modelscope download --model=<span class="string">&quot;模型名称&quot;</span> --local_dir=<span class="string">&quot;本地存储路径&quot;</span></span><br><span class="line"><span class="comment">#方式二：SDK方式下载</span></span><br><span class="line"><span class="keyword">from</span> modelscope <span class="keyword">import</span> snapshot_download</span><br><span class="line">model_dir = snapshot_download(<span class="string">&quot;模型名称&quot;</span>)</span><br></pre></td></tr></table></figure><p>模型名称就是对应的仓库名称，查看方法为：</p><p><img src="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/image-20250312095837826.png" alt="image-20250312095837826" style="zoom:67%;"></p><p><img src="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/image-20250312100413736.png" alt="image-20250312100413736" style="zoom: 67%;"></p><h2 id="模型的加载和推理"><a href="#模型的加载和推理" class="headerlink" title="模型的加载和推理"></a>模型的加载和推理</h2><p>具体步骤可以参照对应模型仓库首页</p><p><a href="https://huggingface.co/THUDM/chatglm3-6b">hugging Face</a>  <a href="https://modelscope.cn/models/ZhipuAI/chatglm3-6b/summary">modelScope</a>，注册阿里魔塔社区，可以免费获得36小时的GPU算力</p><p>安装依赖时，<code>transformers</code>需要指定如下版本，否在会报错，具体问题参考<a href="https://github.com/chatchat-space/Langchain-Chatchat/issues/3915">issue</a></p><p><code>torch</code>版本要与本地的<code>cuda</code>版本要匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主要依赖安装</span></span><br><span class="line">pip install transformers==4.40.1</span><br><span class="line">pip install torch==2.3.0 torchvision==0.18.0 torchaudio==2.3.0 --index-url https://download.pytorch.org/whl/cu121</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#推理代码</span></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer,AutoModel</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start!!!&quot;</span>)</span><br><span class="line">model_path = <span class="string">&quot;D:\software\llm\code\THUDM\chatglm3-6b&quot;</span></span><br><span class="line"></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(model_path,trust_remote_code=<span class="literal">True</span>)</span><br><span class="line">model = AutoModel.from_pretrained(model_path,trust_remote_code=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">model.to(device)</span><br><span class="line">model = model.to(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line"></span><br><span class="line">model = model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    prompt = <span class="built_in">input</span>(<span class="string">&quot;please input your question,enter q exists:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> prompt==<span class="string">&quot;q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    response,history = model.chat(tokenizer,prompt,history=[])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A:&quot;</span>+response)</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="/2025/03/20/llm/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/LLM%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%92%8C%E6%8E%A8%E7%90%86/image-20250313110550843.png" alt="image-20250313110550843"></p>]]></content>
      
      
      <categories>
          
          <category> llm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stable Diffusion模型部署</title>
      <link href="/2025/03/20/llm/Stable%20Diffusion%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/Stable%20Diffusion%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/"/>
      <url>/2025/03/20/llm/Stable%20Diffusion%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/Stable%20Diffusion%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Stable-Diffusion模型部署"><a href="#Stable-Diffusion模型部署" class="headerlink" title="Stable Diffusion模型部署"></a>Stable Diffusion模型部署</h1><p>多模态应用能够对文本、图像、音频和视频等不同模态数据进行整合，学习不同模态之间的关联，实现文本、音频和视频之间的相互转换和生成</p><p><a href="https://stabledifffusion.com/">Stable Diffusion</a>是<code>Stability AI</code>开发的开源AI绘画工具，它能够根据文本的描述生成精细图像，也可实现图像反推功能，即输入一张图片，可以提取图像关键信息，转换为一段描述该图的文字，即可实现<code>文生图</code>和<code>图生文</code></p><p>本文主要介绍如何本地借助<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">stable-diffusion-webui</a>来部署<code>stable diffusion</code>模型，`s</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>创建<code>python</code>虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n stable-diffusion python=3.10.6</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拉取仓库代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到历史稳定版本</span></span><br><span class="line">git checkout bef51ae</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>从魔塔社区下载模型权重文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;./models/Stable-diffusion&quot;</span><br><span class="line">modelscope download --model AI-ModelScope/stable-diffusion-2-1 --local_dir &quot;./&quot;</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python launch.py --no-half</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--no-half 作用是禁用半精度，如果不禁用可能会报错NansException:A tensor with all NaNs was produced <span class="keyword">in</span> Une</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>访问<a href="http://127.0.0.1:7861/">http://127.0.0.1:7861/</a> 即可看到对应的<code>webui</code></p><p>可以在页面调整采样步骤、生成的图片宽高等信息，采样步骤越大，图片大小越大，生成的图片会越清晰、质量也会越好</p>]]></content>
      
      
      <categories>
          
          <category> llm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qwen-VL模型部署</title>
      <link href="/2025/03/20/llm/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/"/>
      <url>/2025/03/20/llm/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Qwen-VL模型部署"><a href="#Qwen-VL模型部署" class="headerlink" title="Qwen-VL模型部署"></a>Qwen-VL模型部署</h1><p><strong>Qwen-VL</strong> 是阿里云研发的大规模视觉语言模型（Large Vision Language Model, LVLM）。Qwen-VL 可以以图像、文本、检测框作为输入，并以文本和检测框作为输出。本文主要介绍本地如何安装部署其量化版本模型<code>Qwen-VL_Chat-Int4</code></p><p>参考资料:</p><p><a href="https://huggingface.co/Qwen/Qwen-VL-Chat-Int4">Hugging Face</a>   |  <a href="https://modelscope.cn/models/Qwen/Qwen-VL-Chat-Int4">modelscope</a></p><h2 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建存储目录</span></span><br><span class="line">mkdir &quot;Qwen/Qwen-VL-Chat-Int4&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载模型到指定目录</span></span><br><span class="line">modelscope download --model &quot;Qwen/Qwen-VL-Chat-Int4&quot; --local_dir &quot;./Qwen/Qwen-VL-Chat-Int4&quot;</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#本机使用的torch版本为</span><br><span class="line">pip install torch==2.3.0 torchvision==0.18.0 torchaudio==2.3.0 --index-url https://download.pytorch.org/whl/cu121</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#下载的模型文件里面有一个依赖列表 requirements.txt</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install optimum</span><br><span class="line"></span><br><span class="line">git clone https://github.com/JustinLin610/AutoGPTQ.git &amp; cd AutoGPTQ</span><br><span class="line">pip install -v .</span><br></pre></td></tr></table></figure><p>其中用于大模型量化的工具<a href="https://github.com/JustinLin610/AutoGPTQ">autogptq</a>，可以使用如下方式进行快速安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install auto-gptq</span><br></pre></td></tr></table></figure><p>安装之后出现依赖问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cannot import name ‘Cache‘ from ‘transformers‘</span><br></pre></td></tr></table></figure><p>原因在于<code>transformers</code>和<code>peft</code>两者版本不匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#解决办法</span><br><span class="line">peft==0.10.0</span><br><span class="line">transformers==4.37.2</span><br></pre></td></tr></table></figure><h2 id="模型推理"><a href="#模型推理" class="headerlink" title="模型推理"></a>模型推理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForCausalLM, AutoTokenizer</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.manual_seed(<span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: The default behavior now has injection attack prevention off.</span></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(<span class="string">&quot;Qwen/Qwen-VL-Chat-Int4&quot;</span>, trust_remote_code=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use cuda device</span></span><br><span class="line">model = AutoModelForCausalLM.from_pretrained(<span class="string">&quot;Qwen/Qwen-VL-Chat-Int4&quot;</span>, device_map=<span class="string">&quot;cuda&quot;</span>, trust_remote_code=<span class="literal">True</span>).<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1st dialogue turn</span></span><br><span class="line">query = tokenizer.from_list_format([</span><br><span class="line">    &#123;<span class="string">&#x27;image&#x27;</span>: <span class="string">&#x27;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#x27;</span>&#125;,<span class="comment">#如果想要分析本地图片，直接将这个链接改为本地的路径即可</span></span><br><span class="line">    &#123;<span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;这是什么&#x27;</span>&#125;,</span><br><span class="line">])</span><br><span class="line">response, history = model.chat(tokenizer, query=query, history=<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="comment"># 图中是一名年轻女子在沙滩上和她的狗玩耍，狗的品种可能是拉布拉多。她们坐在沙滩上，狗的前腿抬起来，似乎在和人类击掌。两人之间充满了信任和爱。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2nd dialogue turn</span></span><br><span class="line">response, history = model.chat(tokenizer, <span class="string">&#x27;输出&quot;击掌&quot;的检测框&#x27;</span>, history=history)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="comment"># &lt;ref&gt;击掌&lt;/ref&gt;&lt;box&gt;(517,508),(589,611)&lt;/box&gt;</span></span><br><span class="line">image = tokenizer.draw_bbox_on_latest_picture(response, history)</span><br><span class="line"><span class="keyword">if</span> image:</span><br><span class="line">  image.save(<span class="string">&#x27;1.jpg&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;no box&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://modelscope.cn/models/Qwen/Qwen-VL-Chat-Int4/feedback/issueDetail/25169">中间出现问题的解决方法</a></p><p>最终推理的结果：</p><p><img src="/2025/03/20/llm/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/Qwen-VL%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/5761433e-b4c5-4d1d-b7d5-cd020d2ee86b.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> llm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradio入门</title>
      <link href="/2025/03/20/llm/gradio%E5%85%A5%E9%97%A8/gradio%E5%85%A5%E9%97%A8/"/>
      <url>/2025/03/20/llm/gradio%E5%85%A5%E9%97%A8/gradio%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Gradio入门"><a href="#Gradio入门" class="headerlink" title="Gradio入门"></a>Gradio入门</h1><p><a href="https://gradio.hugging-face.cn/guides/quickstart">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> llm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/09/12/NDSS/"/>
      <url>/2024/09/12/NDSS/</url>
      
        <content type="html"><![CDATA[<iframe src="_Response_NDSS_2025.pdf" style="width:100%; height:600px;" frameborder="0"></iframe>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper使用</title>
      <link href="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/"/>
      <url>/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper使用"><a href="#Zookeeper使用" class="headerlink" title="Zookeeper使用"></a>Zookeeper使用</h1><h2 id="Zookeeper概述"><a href="#Zookeeper概述" class="headerlink" title="Zookeeper概述"></a>Zookeeper概述</h2><ul><li><code>Zookeeper</code>是<code>apache Hadoop</code>项目下的一个子项目，是一个树形目录服务</li><li><code>Zookeeper</code>是一个分布式、开源的分布式应用程序的协调服务</li><li><code>Zookeeper</code>提供的主要功能<ul><li>配置管理</li><li>分布式锁</li><li>集群管理<ul><li>注册中心 </li></ul></li></ul></li></ul><h2 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h2><p><a href="https://www.cnblogs.com/xiaoyu-w/p/18263274">参考博客</a></p><h2 id="Zookeeper命令操作"><a href="#Zookeeper命令操作" class="headerlink" title="Zookeeper命令操作"></a>Zookeeper命令操作</h2><p>我们可以通过命令行或者Java API的方式对Zookeeper进行操作</p><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721162218163.png" alt="image-20240721162218163"></p><h3 id="Zookeeper数据模型"><a href="#Zookeeper数据模型" class="headerlink" title="Zookeeper数据模型"></a>Zookeeper数据模型</h3><ul><li><code>zookeeper</code>是一个树形目录服务，其数据模型和Unix文件系统目录树很类似，拥有一个层次化结构</li><li>里面的每一个节点都被称为ZNode，每个节点上都会保存自己的数据和节点信息（比如节点创建时间、节点有多少个子节点等信息）</li><li>节点可以拥有子节点，同时允许少量数据(1M)存储在该节点之下</li><li>里面的节点可以分为四大类<ul><li>PERSISTENT持久化节点</li><li>EPHEMERAL临时节点，-e<ul><li>临时的意思就是节点只在当前会话有效，客户端关闭节点就会消失</li></ul></li><li>PERSISTENT_SEQUENTIAL持久化顺序节点，-s<ul><li>顺序的意思就是创建节点的时候会在节点名后面加上数字序号</li></ul></li><li>EPHEMERAL_SEQUENTIAL临时顺序节点，-es</li></ul></li></ul><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721160720591.png" alt="image-20240721160720591"></p><h3 id="Zookeeper服务端常用命令"><a href="#Zookeeper服务端常用命令" class="headerlink" title="Zookeeper服务端常用命令"></a>Zookeeper服务端常用命令</h3><h4 id="启动Zookeeper服务"><a href="#启动Zookeeper服务" class="headerlink" title="启动Zookeeper服务"></a>启动<code>Zookeeper</code>服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><h4 id="查看Zookeeper服务状态"><a href="#查看Zookeeper服务状态" class="headerlink" title="查看Zookeeper服务状态"></a>查看<code>Zookeeper</code>服务状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure><h4 id="停止Zookeeper服务"><a href="#停止Zookeeper服务" class="headerlink" title="停止Zookeeper服务"></a>停止<code>Zookeeper</code>服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh stop</span><br></pre></td></tr></table></figure><h4 id="重启Zookeeper服务"><a href="#重启Zookeeper服务" class="headerlink" title="重启Zookeeper服务"></a>重启<code>Zookeeper</code>服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh restart</span><br></pre></td></tr></table></figure><h3 id="Zookeeper客户端常用命令"><a href="#Zookeeper客户端常用命令" class="headerlink" title="Zookeeper客户端常用命令"></a>Zookeeper客户端常用命令</h3><h4 id="进入客户端"><a href="#进入客户端" class="headerlink" title="进入客户端"></a>进入客户端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh -server ip:端口号</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果是本机的化</span></span><br><span class="line">./zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721162904784.png" alt="image-20240721162904784"></p><h4 id="退出客户端"><a href="#退出客户端" class="headerlink" title="退出客户端"></a>退出客户端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h4 id="查看某个节点下的子节点列表"><a href="#查看某个节点下的子节点列表" class="headerlink" title="查看某个节点下的子节点列表"></a>查看某个节点下的子节点列表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比如查看根节点下子节点</span></span><br><span class="line">ls /</span><br></pre></td></tr></table></figure><h4 id="查看某个节点的详细信息"><a href="#查看某个节点的详细信息" class="headerlink" title="查看某个节点的详细信息"></a>查看某个节点的详细信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -s 节点名</span><br></pre></td></tr></table></figure><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721170316608.png" alt="image-20240721170316608"></p><p>节点属性字段说明：</p><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721171239522.png" alt="image-20240721171239522"></p><h4 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help</span><br></pre></td></tr></table></figure><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create 节点名 【数据】</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比如</span></span><br><span class="line">create /myNode bang</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意，存在的节点不能重复创建</span></span><br></pre></td></tr></table></figure><h4 id="获取节点数据"><a href="#获取节点数据" class="headerlink" title="获取节点数据"></a>获取节点数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get 节点名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比如</span></span><br><span class="line">get /myNode</span><br></pre></td></tr></table></figure><h4 id="更改某个节点值"><a href="#更改某个节点值" class="headerlink" title="更改某个节点值"></a>更改某个节点值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set 节点名 值</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比如</span></span><br><span class="line">set /myNode test</span><br></pre></td></tr></table></figure><h4 id="删除某个节点"><a href="#删除某个节点" class="headerlink" title="删除某个节点"></a>删除某个节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete 节点名  #该命令无法删除存在子节点的节点</span><br><span class="line"></span><br><span class="line">deleteall 节点名 #可以删除节点及其下的所有子节点 </span><br></pre></td></tr></table></figure><p> 默认都是创建持久化节点</p><h4 id="创建临时节点"><a href="#创建临时节点" class="headerlink" title="创建临时节点"></a>创建临时节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create -e 节点名 【数据】</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">该节点只在当前会话有效，quit之后再进入客户端，该节点就不存在了</span></span><br></pre></td></tr></table></figure><h4 id="创建顺序节点"><a href="#创建顺序节点" class="headerlink" title="创建顺序节点"></a>创建顺序节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create -s 节点名 【节点数据】</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">顺序节点会自动在节点名后加入数字后缀</span></span><br></pre></td></tr></table></figure><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721165957900.png" alt="image-20240721165957900"></p><h4 id="创建临时顺序节点"><a href="#创建临时顺序节点" class="headerlink" title="创建临时顺序节点"></a>创建临时顺序节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -es 节点名 【节点数据】</span><br></pre></td></tr></table></figure><h2 id="Zookeeper-Java-API操作"><a href="#Zookeeper-Java-API操作" class="headerlink" title="Zookeeper Java API操作"></a>Zookeeper Java API操作</h2><h3 id="Curator介绍"><a href="#Curator介绍" class="headerlink" title="Curator介绍"></a>Curator介绍</h3><p><code>Curator</code>是<code>apache Zookeeper</code>提供的<code>Java</code>客户端 ，其目标就是简化<code>Zookeeper</code>客户端的使用</p><p>常见的<code>Zookeeper Java API</code></p><ul><li>原生<code>Java API</code></li><li><code>ZkClient</code></li><li><code>Curator</code></li></ul><p><a href="[Welcome to Apache Curator | Apache Curator](https://curator.apache.org/docs/about">curator官网</a>)，使用时注意版本与<code>zookeeper</code>相对应</p><h3 id="Curator-API常用操作"><a href="#Curator-API常用操作" class="headerlink" title="Curator API常用操作"></a>Curator API常用操作</h3><p><strong>maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//建立连接:方式一</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 四个参数:</span></span><br><span class="line"><span class="comment">         *  String connectString:连接字符串，zk地址和1端口，如果是集群，各个机器之间用逗号隔开,&quot;192.168.134.1:2181,192.168.134.2:2181&quot;</span></span><br><span class="line"><span class="comment">         *  int sessionTimeoutMs:会话超时时间</span></span><br><span class="line"><span class="comment">         *  int connectionTimeoutMs:连接超时时间</span></span><br><span class="line"><span class="comment">         *  RetryPolicy retryPolicy:重试策略</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">//1.建立连接对象</span></span><br><span class="line">    <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.newClient(<span class="string">&quot;192.168.134.129:2181&quot;</span>, <span class="number">60000</span>,</span><br><span class="line">                                                                <span class="number">15000</span>, retryPolicy);</span><br><span class="line">    <span class="comment">//2.开启连接</span></span><br><span class="line">    client.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//建立连接方式二</span></span><br><span class="line">    <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.builder().connectString(<span class="string">&quot;192.168.134.129:2181&quot;</span>)</span><br><span class="line">        .sessionTimeoutMs(<span class="number">60000</span>).connectionTimeoutMs(<span class="number">15000</span>)</span><br><span class="line">        .retryPolicy(retryPolicy).namespace(<span class="string">&quot;zkTest&quot;</span>).build();<span class="comment">//namespace表明此次会话所有操作都是在根目录zkTest下进行</span></span><br><span class="line">    client.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//创建没有数据节点，不指定数据默认节点值为当前客户端ip地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//创建节点指定数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().forPath(<span class="string">&quot;/app2&quot;</span>,<span class="string">&quot;we are test&quot;</span>.getBytes());</span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//创建节点，指定节点类型：比如持久化(默认）、临时、顺序节点</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().withMode(CreateMode.EPHEMERAL).forPath(<span class="string">&quot;/app3&quot;</span>);</span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//创建多级节点，/zkTest/app4/p1</span></span><br><span class="line">    <span class="comment">//正常情况下父节点不存在，直接创建多级节点会报错</span></span><br><span class="line">    <span class="comment">//creatingParentsIfNeeded()会创建父节点</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> client.create().creatingParentsIfNeeded().forPath(<span class="string">&quot;/app4/p1&quot;</span>);</span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//删除单节点</span></span><br><span class="line">    client.delete().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//删除带有子节点的节点</span></span><br><span class="line">    client.delete().deletingChildrenIfNeeded().forPath(<span class="string">&quot;/app4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//必须删除成功，即失败之后会自动重试</span></span><br><span class="line">    client.delete().guaranteed().forPath(<span class="string">&quot;/app2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//带回调函数的删除</span></span><br><span class="line">    client.delete().inBackground(<span class="keyword">new</span> <span class="title class_">BackgroundCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processResult</span><span class="params">(CuratorFramework curatorFramework, CuratorEvent curatorEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点被删除&quot;</span>);</span><br><span class="line">            System.out.println(curatorEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//修改节点数据</span></span><br><span class="line">    client.setData().forPath(<span class="string">&quot;/app1&quot;</span>, <span class="string">&quot;test set&quot;</span>.getBytes());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//根据版本哈修改，类似于CAS，只要版本号一致情况下才修改成功,版本不一致会报错</span></span><br><span class="line">    <span class="type">Stat</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">    client.getData().storingStatIn(status).forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">    client.setData().withVersion(status.getVersion()).forPath(<span class="string">&quot;/app1&quot;</span>,<span class="string">&quot;test set v2&quot;</span>.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询节点"><a href="#查询节点" class="headerlink" title="查询节点"></a>查询节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    <span class="type">byte</span>[] data = client.getData().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//查询子节点</span></span><br><span class="line">    List&lt;String&gt; paths = client.getChildren().forPath(<span class="string">&quot;/app4&quot;</span>);</span><br><span class="line">    System.out.println(paths);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//查询节点状态信息</span></span><br><span class="line">    <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">    client.getData().storingStatIn(stat).forPath(<span class="string">&quot;/app4&quot;</span>);</span><br><span class="line">    System.out.println(stat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Watch事件监听"><a href="#Watch事件监听" class="headerlink" title="Watch事件监听"></a>Watch事件监听</h4><ul><li><code>Zookeeper</code>允许用户在指定节点上注册一些<code>Watcher</code>，并且在一些特定事件触发的时候，<code>Zookeeper</code>服务端会将事件通知到感兴趣的客户端上去，该机制是<code>Zookeeper</code>实现分布式协调服务的重要特性</li><li><p><code>Zookeeper</code>中引入了<code>Watcher</code>机制来实现了发布/订阅功能，能够让多个订阅者同时监听某一个对象，当一个对象发生变化时，会通知所有的订阅者</p></li><li><p><code>Curator</code>引入了<code>Cache</code>来实现对<code>Zookeeper</code>服务端事件的监听</p></li><li><p><code>Zookeeper</code>提供了三种不同的<code>Watcher</code></p><ul><li><code>NodeCache</code>：只是监听某一个特定的节点</li><li><code>PathChildrenCache</code>：监听一个<code>ZNode</code>的子节点</li><li><code>TreeCache</code>：可以监听整个树上的所有节点，类似于<code>pathChildrenCache</code>和<code>NodeCache</code>的组合</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWatch1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//NodeCache，监听单个节点</span></span><br><span class="line">    <span class="comment">//1.初始化nodeCache对象</span></span><br><span class="line">    <span class="type">NodeCache</span> <span class="variable">nodeCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NodeCache</span>(client,<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">    <span class="comment">//2.注册监听器</span></span><br><span class="line">    nodeCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">NodeCacheListener</span>() &#123;</span><br><span class="line">        <span class="comment">//监听回调函数</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点发生了变化&quot;</span>);</span><br><span class="line">            <span class="comment">//获取更改后节点数据和状态信息</span></span><br><span class="line">            <span class="type">byte</span>[] data = nodeCache.getCurrentData().getData();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line"></span><br><span class="line">            <span class="type">Stat</span> <span class="variable">status</span> <span class="operator">=</span> nodeCache.getCurrentData().getStat();</span><br><span class="line">            System.out.println(status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3.开启监听</span></span><br><span class="line">    nodeCache.start(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//由于是写在单元测试里面，让服务一直监听下去</span></span><br><span class="line">        <span class="comment">//此时我们去命令行执行节点增删改操作，就会触发该监听器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWatch2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//监听节点子节点的变化</span></span><br><span class="line">    <span class="comment">//1.创建监听器对象</span></span><br><span class="line">    <span class="type">PathChildrenCache</span> <span class="variable">pathChildrenCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathChildrenCache</span>(client,<span class="string">&quot;/app2&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//2.注册监听器</span></span><br><span class="line">    pathChildrenCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">PathChildrenCacheListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">childEvent</span><span class="params">(CuratorFramework curatorFramework, PathChildrenCacheEvent pathChildrenCacheEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子节点发生了变化&quot;</span>);</span><br><span class="line">            <span class="comment">//只要在节点更新时才会进行处理</span></span><br><span class="line">            PathChildrenCacheEvent.<span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> pathChildrenCacheEvent.getType();</span><br><span class="line">            <span class="keyword">if</span>(PathChildrenCacheEvent.Type.CHILD_UPDATED.equals(pathChildrenCacheEvent.getType()))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子节点值发生了更新&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;更新的子节点为:&quot;</span>+pathChildrenCacheEvent.getData().getPath());</span><br><span class="line">                System.out.println(<span class="string">&quot;子节点新值为:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(pathChildrenCacheEvent.getData().getData()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3.启动监听器</span></span><br><span class="line">    pathChildrenCache.start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//由于是写在单元测试里面，让服务一直监听下去</span></span><br><span class="line">        <span class="comment">//此时我们去命令行执行节点增删改操作，就会触发该监听器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWatch3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//TreeCache：既可以监听当前节点又监听其子节点</span></span><br><span class="line">    <span class="type">TreeCache</span> <span class="variable">treeCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeCache</span>(client,<span class="string">&quot;/app2&quot;</span>);</span><br><span class="line">    treeCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">TreeCacheListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">childEvent</span><span class="params">(CuratorFramework curatorFramework, TreeCacheEvent treeCacheEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点发生了变化&quot;</span>);</span><br><span class="line">            System.out.println(treeCacheEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    treeCache.start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//由于是写在单元测试里面，让服务一直监听下去</span></span><br><span class="line">        <span class="comment">//此时我们去命令行执行节点增删改操作，就会触发该监听器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><ul><li>单机开发，涉及并发同步的时候，我们往往采用<code>synchronized</code>或者<code>lock</code>的方式来解决多线程间代码同步问题，这时多线程的运行都是在同一个JVM下，没有任何问题</li><li>在分布式集群工作情况下，属于多<code>JVM</code>工作环境，跨<code>JVM</code>之间已经无法通过多线程的锁解决同步问题</li><li>需要一种更高级别的锁机制，来处理这张跨机器的进程间的数据同步问题——分布式锁</li></ul><h5 id="分布式锁常见的实现机制"><a href="#分布式锁常见的实现机制" class="headerlink" title="分布式锁常见的实现机制"></a>分布式锁常见的实现机制</h5><ul><li>基于缓存的分布式锁<ul><li>Redis</li><li>Memcache</li></ul></li><li>基于Zookeeper实现分布式锁<ul><li>Curator</li></ul></li><li>基于数据库层面实现分布式锁<ul><li>悲观锁、乐观锁</li></ul></li></ul><h5 id="zookeeper实现分布式锁原理"><a href="#zookeeper实现分布式锁原理" class="headerlink" title="zookeeper实现分布式锁原理"></a>zookeeper实现分布式锁原理</h5><ul><li>核心思想：当客户端要获取锁，则创建节点，使用完锁，则删除该节点<ul><li>客户端获取锁时，在<code>lock</code>节点下创建<strong>临时顺序</strong>节点<ul><li>使用临时节点目的是为了避免客户端宕机没有删除节点导致其他客户端永远都无法获取锁</li></ul></li><li>然后获取lock下面的所有子节点，客户端获取所有子节点之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁，使用完锁后，就将该节点删除</li><li>如果发现自己创建的节点并非lock所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，同时对其注册事件监听器，监听删除事件</li><li>如果发现比自己小的那个节点被删除，则客户端的<code>Watcher</code>会收到相应的通知，此时再次判断自己创建的节点是否是lock子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的那一个节点并注册监听</li></ul></li></ul><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721230416991.png" alt="image-20240721230416991" style="zoom: 67%;"></p><h3 id="模拟12306售票案例"><a href="#模拟12306售票案例" class="headerlink" title="模拟12306售票案例"></a>模拟12306售票案例</h3><h4 id="Curator实现分布式锁API"><a href="#Curator实现分布式锁API" class="headerlink" title="Curator实现分布式锁API"></a>Curator实现分布式锁API</h4><p>在<code>Curator</code>中有五种锁方案：</p><ul><li><code>InterProcessSemaphoreMutex</code>：分布式排它锁（非可重入锁）</li><li><code>InterProcessMutex</code>：分布式可重入排他锁</li><li><code>InterProcessReadWriteLock</code>：分布式读写锁</li><li><code>InterProcessMultiLock</code>：将多个锁作为单个实体管理的容器</li><li><code>InterProcessSemaphoreV2</code>：共享信号量</li></ul><h4 id="模拟12306卖票"><a href="#模拟12306卖票" class="headerlink" title="模拟12306卖票"></a>模拟12306卖票</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ticket12306</span> <span class="variable">ticket12306</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket12306</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket12306,<span class="string">&quot;携程&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket12306,<span class="string">&quot;去哪儿&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket12306</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InterProcessMutex lock;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ticketNum=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Ticket12306</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//初始化分布式锁</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.builder().connectString(<span class="string">&quot;192.168.134.129:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60000</span>).connectionTimeoutMs(<span class="number">15000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).namespace(<span class="string">&quot;zkTest&quot;</span>).build();<span class="comment">//namespace表明此次会话所有操作都是在根目录zkTest下进行</span></span><br><span class="line">        client.start();</span><br><span class="line"></span><br><span class="line">        lock = <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(client,<span class="string">&quot;/lock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                lock.acquire();</span><br><span class="line">                <span class="keyword">if</span>(ticketNum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 买的票:&quot;</span>+ticketNum);</span><br><span class="line">                    ticketNum-=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Zookeeper集群"><a href="#Zookeeper集群" class="headerlink" title="Zookeeper集群"></a>Zookeeper集群</h2><h3 id="Zookeeper集群介绍"><a href="#Zookeeper集群介绍" class="headerlink" title="Zookeeper集群介绍"></a>Zookeeper集群介绍</h3><p><code>zookeeper</code>集群，多台机器，客户端访问，哪台机器说了算？</p><p><strong>Leader选举</strong></p><ul><li><code>Serverid</code>：服务器id<ul><li>比如有三台服务器，编号分别为1，2，3。编号越大在选择算法中权重就越大</li></ul></li><li><code>Zxid</code>：数据id<ul><li>服务器中存放数据的最大值id，该值越大说明数据越新，在选举算法中数据越新，权重越大</li></ul></li><li>在选举过程中，如果某台<code>zookeeper</code>服务器获得了超过半数的选票，则此服务器可以成为<code>Leader</code></li></ul><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721233733639.png" alt="image-20240721233733639"></p><h3 id="Zookeeper集群角色"><a href="#Zookeeper集群角色" class="headerlink" title="Zookeeper集群角色"></a>Zookeeper集群角色</h3><p>在<code>Zookeeper</code>集群服务中存在三个角色：</p><ul><li><code>Leader</code>领导者<ul><li>处理事务请求(增删改为事务请求，查询为非事务请求)</li><li>集群内各个服务的调度者</li></ul></li><li><code>Follower</code>跟随者<ul><li>处理客户端非事务请求，转发事务请求给<code>Leader</code>服务器</li><li>参与<code>Leader</code>选举投票</li></ul></li><li><code>Observer</code>观察者<ul><li>处理客户端非事务请求，转发事务请求给<code>Leader</code>服务器</li></ul></li></ul><p><img src="/2024/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/zookeeper%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/zookeeper/image-20240721234818813.png" alt="image-20240721234818813"></p>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Stream流</title>
      <link href="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/"/>
      <url>/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Stream流"><a href="#Java-Stream流" class="headerlink" title="Java Stream流"></a>Java Stream流</h1><ul><li>创建不可变集合</li><li>Stream流</li><li>方法引用</li></ul><h2 id="创建不可变集合"><a href="#创建不可变集合" class="headerlink" title="创建不可变集合"></a>创建不可变集合</h2><p>所谓的不可变集合是指不可以被修改的集合，即长度不可修改、内容也不可修改</p><p><strong>不可变集合应用场景：</strong></p><p>不想让别人修改集合里的内容</p><ul><li>如果某个数据不能被修改，把它防御性地拷贝到不可变集合中是个很好的实践</li><li><p>当集合对象被不可信的库调用时，不可变形式是安全的</p><p>比如：</p></li><li><p>扑克牌集合，一共4*13=52张牌，不允许添加新的牌</p></li><li>出牌游戏规则</li><li>电脑里的硬件信息，这些信息电脑开机获取，开机之后不允许其他程序修改</li></ul><p><strong>如何创建不可变的集合：</strong></p><p>在<code>List、Set、Map</code> 接口中，都存在静态的<code>of</code>方法，可以获取一个不可变的集合，这个集合不能添加，不能删除，也不能修改</p><p>注意：<code>of</code>方法在<code>JDK9</code>里面才有</p><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629092648239.png" alt="image-20240629092648239"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnMutableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; stringList = List.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : stringList) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></span><br><span class="line">        <span class="comment">//stringList.remove(0);</span></span><br><span class="line">        <span class="comment">//Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></span><br><span class="line">        stringList.add(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnMutableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;32&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;56&quot;</span>);</span><br><span class="line">        lists.remove(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//原始集合拷贝为不可变集合</span></span><br><span class="line">        List&lt;String&gt; unMutateList = List.copyOf(lists);</span><br><span class="line">        System.out.println(unMutateList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629100818381.png" alt="image-20240629100818381"></p><p>如果用常规<code>for</code>循环遍历的话，代码会非常繁琐，但是用<code>stream</code>流会非常简洁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; nameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        nameList.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        nameList.add(<span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">        nameList.add(<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        nameList.add(<span class="string">&quot;张强&quot;</span>);</span><br><span class="line">        nameList.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        <span class="comment">//for循环做法</span></span><br><span class="line">        List&lt;String&gt; newNameList1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : nameList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.startsWith(<span class="string">&quot;张&quot;</span>) &amp;&amp; s.length()==<span class="number">3</span>)&#123;</span><br><span class="line">                newNameList1.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(newNameList1);</span><br><span class="line">        <span class="comment">//stream流</span></span><br><span class="line">        List&lt;String&gt; newNameList2 = nameList.stream().filter(name -&gt; name.startsWith(<span class="string">&quot;张&quot;</span>)).filter(name -&gt; name.length() == <span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(newNameList2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream流使用"><a href="#Stream流使用" class="headerlink" title="Stream流使用"></a>Stream流使用</h3><h4 id="stream流使用步骤"><a href="#stream流使用步骤" class="headerlink" title="stream流使用步骤"></a>stream流使用步骤</h4><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629102310459.png" alt="image-20240629102310459"></p><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629102549826.png" alt="image-20240629102549826"></p><h4 id="获取stream流"><a href="#获取stream流" class="headerlink" title="获取stream流"></a>获取stream流</h4><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629102618143.png" alt="image-20240629102618143"></p><p>对于双列集合(map)需要先调用<code>keySet</code>或者<code>entrySet</code>转换成单列集合，再调用<code>Stream</code>方法获取流水线</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.单列集合获取流水线</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        <span class="comment">//获取流水线，并调用终结方法打印元素</span></span><br><span class="line">        list.stream().forEach(item-&gt; System.out.println(item));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.双列集合获取流水线</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;张三&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">&quot;李四&quot;</span>,<span class="number">200</span>);</span><br><span class="line">        map.put(<span class="string">&quot;王五&quot;</span>,<span class="number">300</span>);</span><br><span class="line">        map.put(<span class="string">&quot;赵六&quot;</span>,<span class="number">400</span>);</span><br><span class="line">        <span class="comment">//方法一:通过keySet()获取流水线</span></span><br><span class="line">        map.keySet().stream().forEach(s-&gt; System.out.println(s+<span class="string">&quot;=&quot;</span>+map.get(s)));</span><br><span class="line">        <span class="comment">//方法二:通过entrySet()获取流水线</span></span><br><span class="line">        map.entrySet().stream().forEach(s-&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.数组获取流水线 Arrays.stream()</span></span><br><span class="line">        String[] hobbys = &#123;<span class="string">&quot;篮球&quot;</span>,<span class="string">&quot;足球&quot;</span>,<span class="string">&quot;乒乓球&quot;</span>,<span class="string">&quot;橄榄球&quot;</span>&#125;;</span><br><span class="line">        Arrays.stream(hobbys).forEach(s-&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.零散数据获取数据流,Stream.of(),但是要保证这些零散数据是同一数据类型</span></span><br><span class="line">        Stream.of(<span class="string">&quot;小学&quot;</span>,<span class="string">&quot;初中&quot;</span>,<span class="string">&quot;高中&quot;</span>,<span class="string">&quot;大学&quot;</span>).forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Stream流中间方法"><a href="#Stream流中间方法" class="headerlink" title="Stream流中间方法"></a>Stream流中间方法</h4><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629105106596.png" alt="image-20240629105106596"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">example</span> &#123;</span><br><span class="line">    List&lt;String&gt; nameList=<span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        nameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(nameList,<span class="string">&quot;曹操&quot;</span>,<span class="string">&quot;司马懿&quot;</span>,<span class="string">&quot;赵云&quot;</span>,<span class="string">&quot;关云长&quot;</span>,<span class="string">&quot;写宅院&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//filter过滤,过滤掉不满足条件的元素</span></span><br><span class="line">        <span class="comment">//打印长度大于等于3的人名</span></span><br><span class="line">        nameList.stream().filter(name-&gt;name.length()&gt;=<span class="number">3</span>).forEach(name-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestLimit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//limit,取流中的求几个元素</span></span><br><span class="line">        nameList.stream().limit(<span class="number">3</span>).forEach(name-&gt; System.out.println(name));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        曹操</span></span><br><span class="line"><span class="comment">        司马懿</span></span><br><span class="line"><span class="comment">        赵云</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestSkip</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//skip,跳过流中的求几个元素</span></span><br><span class="line">        nameList.stream().skip(<span class="number">3</span>).forEach(name-&gt; System.out.println(name));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        关云长</span></span><br><span class="line"><span class="comment">        写宅院</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestDistict</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//distinct流中元素去重</span></span><br><span class="line">        <span class="comment">//里面本质是借助于HashSet进行去重，所以非基础类型数据时，要关注重写hashCode和equals方法</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="number">21</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">9</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">9</span>);</span><br><span class="line">        list.stream().distinct().forEach(s-&gt; System.out.print(s+<span class="string">&quot; &quot;</span>));</span><br><span class="line">        <span class="comment">//21 23 22 9 80</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestConcat</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//concat合并两个流,这两个流里面元素的数据类型最好要一致</span></span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list1,<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="string">&quot;韩国&quot;</span>,<span class="string">&quot;朝鲜&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list2,<span class="string">&quot;英国&quot;</span>,<span class="string">&quot;法国&quot;</span>,<span class="string">&quot;德国&quot;</span>);</span><br><span class="line">        Stream.concat(list1.stream(),list2.stream()).forEach(s-&gt; System.out.print(s+<span class="string">&quot; &quot;</span>));</span><br><span class="line">        <span class="comment">//中国 日本 韩国 朝鲜 英国 法国 德国</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestMap</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//map可以对流中元素进行操作，以及数据类型转换</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">        <span class="comment">//比如对流中所有元素进行如下运算，将结果打印: i*i+10</span></span><br><span class="line">        list.stream().map(i-&gt;i*i+<span class="number">10</span>).forEach(s-&gt; System.out.print(s+<span class="string">&quot; &quot;</span>));</span><br><span class="line">        <span class="comment">//19 35 59 11 91</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Stream流中间方法-1"><a href="#Stream流中间方法-1" class="headerlink" title="Stream流中间方法"></a>Stream流中间方法</h4><p><img src="/2024/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java-stream/image-20240629112458751.png" alt="image-20240629112458751"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//终结方法 count，统计流中元素个数</span></span><br><span class="line">    <span class="comment">//map可以对流中元素进行操作，以及数据类型转换</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestToArray</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//toArray将流中的结果放入数组</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="string">&quot;韩国&quot;</span>,<span class="string">&quot;朝鲜&quot;</span>);</span><br><span class="line">    <span class="comment">//value为流中元素个数</span></span><br><span class="line">    String[] array = list.stream().toArray(value -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[value]);</span><br><span class="line">    System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestToList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//流转换为list</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="string">&quot;关羽-男-32&quot;</span>,<span class="string">&quot;刘备-男-38&quot;</span>,<span class="string">&quot;张飞-男-23&quot;</span>,<span class="string">&quot;貂蝉-女-12&quot;</span>,<span class="string">&quot;孙尚香-女-31&quot;</span>);</span><br><span class="line">    <span class="comment">//将list中所有男性成员姓名组装成一个list</span></span><br><span class="line">    List&lt;String&gt; nameList = list.stream()</span><br><span class="line">        .filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">        .map(s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    System.out.println(nameList);</span><br><span class="line">    <span class="comment">//[关羽, 刘备, 张飞]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestToSet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//流转换为lset</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="string">&quot;关羽-男-32&quot;</span>,<span class="string">&quot;刘备-男-38&quot;</span>,<span class="string">&quot;张飞-男-23&quot;</span>,<span class="string">&quot;貂蝉-女-12&quot;</span>,<span class="string">&quot;孙尚香-女-31&quot;</span>);</span><br><span class="line">    <span class="comment">//将list中所有男性成员姓名组装成一个list</span></span><br><span class="line">    Set&lt;String&gt; nameSet = list.stream()</span><br><span class="line">        .filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">        .map(s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        .collect(Collectors.toSet());</span><br><span class="line">    System.out.println(nameSet);</span><br><span class="line">    <span class="comment">//[关羽, 刘备, 张飞]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestToMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//转换为map</span></span><br><span class="line">    <span class="comment">//组成:key为姓名,value为年龄</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="string">&quot;关羽-男-32&quot;</span>,<span class="string">&quot;刘备-男-38&quot;</span>,<span class="string">&quot;张飞-男-23&quot;</span>,<span class="string">&quot;貂蝉-女-12&quot;</span>,<span class="string">&quot;孙尚香-女-31&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Collectors.toMap(参数1，参数2):</span></span><br><span class="line"><span class="comment">         *  参数1为map key的生成规则</span></span><br><span class="line"><span class="comment">         *  参数2为map value的生成规则</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    Map&lt;String, Integer&gt; map = list.stream().collect(Collectors.toMap(</span><br><span class="line">        s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>], s -&gt; Integer.parseInt(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>])</span><br><span class="line">    ));</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    <span class="comment">//&#123;关羽=32, 张飞=23, 刘备=38, 貂蝉=12, 孙尚香=31&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm web项目的开发流程及规范</title>
      <link href="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/"/>
      <url>/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/</url>
      
        <content type="html"><![CDATA[<h1 id="ssm-web项目的整体开发流程"><a href="#ssm-web项目的整体开发流程" class="headerlink" title="ssm web项目的整体开发流程"></a>ssm web项目的整体开发流程</h1><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p><code>springboot</code>+<code>mybatis</code></p><p>后端api的测试：<code>knife4j</code>，<a href="https://doc.xiaominfo.com/docs/quick-start">knife4j参考资料</a></p><h2 id="整理一套开发规范"><a href="#整理一套开发规范" class="headerlink" title="整理一套开发规范"></a>整理一套开发规范</h2><p><img src="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/image-20240623222551476.png" alt="image-20240623222551476" style="zoom:50%;"></p><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p><img src="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/image-20240624000220806.png" alt="image-20240624000220806"></p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>创建一个简单数据库表<code>user</code></p><p><img src="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/image-20240623223427731.png" alt="image-20240623223427731"></p><p>执行简单的增删改查业务逻辑</p><h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><h3 id="domain层开发"><a href="#domain层开发" class="headerlink" title="domain层开发"></a>domain层开发</h3><p>定义一个<code>Java</code>实体类<code>com.example.domain.User</code>与数据库表<code>user</code>相对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dao层开发"><a href="#dao层开发" class="headerlink" title="dao层开发"></a>dao层开发</h3><p>dao层我们采用<code>mybatis</code>框架</p><h4 id="step1-在application-yml配置文件中配置mysql数据库和mybatis-mapper扫描路径"><a href="#step1-在application-yml配置文件中配置mysql数据库和mybatis-mapper扫描路径" class="headerlink" title="step1 在application.yml配置文件中配置mysql数据库和mybatis mapper扫描路径"></a>step1 在<code>application.yml</code>配置文件中配置<code>mysql</code>数据库和<code>mybatis mapper</code>扫描路径</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ssm-demo</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my-test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h4 id="step2-编写dao层接口"><a href="#step2-编写dao层接口" class="headerlink" title="step2 编写dao层接口"></a>step2 编写dao层接口</h4><p>创建<code>com.example.mapper.UserMapper</code>接口，里面定义争对数据库表<code>user</code>的<code>dao</code>层业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据id查询单个用户</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step3-编写具体SQL语句的Mybatis映射文件"><a href="#step3-编写具体SQL语句的Mybatis映射文件" class="headerlink" title="step3 编写具体SQL语句的Mybatis映射文件"></a>step3 编写具体SQL语句的Mybatis映射文件</h4><p>文件路劲<code>src/main/resources/mapper/UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;userName&#125;,password=#&#123;passWord&#125; where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user values(#&#123;id&#125;,#&#123;userName&#125;,#&#123;passWord&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.domain.User&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="service层开发"><a href="#service层开发" class="headerlink" title="service层开发"></a>service层开发</h3><p>service往往是业务中最繁琐最终的地方，大对数代码都在这一层，这一层需要先声明一个接口，然后是一个接口实现类，又因为需要根据业务逻辑做异常处理，所以需要首先自定义异常</p><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>我们自己定义一个异常类，继承自<code>RuntimeException</code>，各种不太的业务异常我们用一个枚举类来进行描述</p><h5 id="枚举类异常类型申明"><a href="#枚举类异常类型申明" class="headerlink" title="枚举类异常类型申明"></a>枚举类异常类型申明</h5><p><code>com.example.exception.UserExceptionEnum</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块异常类型枚举类</span></span><br><span class="line"><span class="comment"> *      主要包括:</span></span><br><span class="line"><span class="comment"> *          参数类型错误异常</span></span><br><span class="line"><span class="comment"> *          无请求权限异常</span></span><br><span class="line"><span class="comment"> *          未知异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserExceptionEnum</span> &#123;</span><br><span class="line">    TYPE_NOTtMATCH_EXCEPTION(<span class="string">&quot;请求参数错误&quot;</span>),</span><br><span class="line">    PERMISSION_DENIED_EXCEPTION(<span class="string">&quot;无请求权限&quot;</span>),</span><br><span class="line">    UNKNOWN_EXCEPTION(<span class="string">&quot;未知类型错误&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    UserExceptionEnum(String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserExceptionEnum&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;&#125; &quot;</span> + <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h5><p><code>com.example.exception.UserException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserExceptionEnum userExceptionEnum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service层接口申明"><a href="#service层接口申明" class="headerlink" title="service层接口申明"></a>service层接口申明</h4><p><code>com.example.service.IUserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">deleteUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service层实现类"><a href="#service层实现类" class="headerlink" title="service层实现类"></a>service层实现类</h4><p><code>com.example.service.impl.UserServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.example.exception.UserException;</span><br><span class="line"><span class="keyword">import</span> com.example.exception.UserExceptionEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(id&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserException</span>(UserExceptionEnum.TYPE_NOTtMATCH_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> userMapper.findById(id);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserException</span>(UserExceptionEnum.UNKNOWN_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.updateUser(user)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.delete(user)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller层开发"><a href="#Controller层开发" class="headerlink" title="Controller层开发"></a>Controller层开发</h3><p><code>controller</code>层涉及到具体的与前端进行交互，所以我们需要与前端进行约定</p><ul><li>前端传递过来的参数统一格式</li><li>后端最终给前端传递参数的统一格式</li></ul><h4 id="step1-协商前端查询参数统一格式"><a href="#step1-协商前端查询参数统一格式" class="headerlink" title="step1  协商前端查询参数统一格式"></a>step1  协商前端查询参数统一格式</h4><p>我们定义类<code>com.example.req.UserReq</code>，前端按照此格式传递参数发送请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step2-协商后端传递前端结果统一格式"><a href="#step2-协商后端传递前端结果统一格式" class="headerlink" title="step2 协商后端传递前端结果统一格式"></a>step2 协商后端传递前端结果统一格式</h4><p>我们定义类<code>com.example.resp.CommonResp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.resp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给前端统一返回的数据格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResp</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">//是否成功</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> success=<span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//响应描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String message=<span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    <span class="comment">//具体响应内容</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResp</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step3-统一异常处理"><a href="#step3-统一异常处理" class="headerlink" title="step3  统一异常处理"></a>step3  统一异常处理</h4><p>注意，在项目中我们一般将异常不断向外抛，统一在<code>Controller</code>层进行异常处理</p><p>通过<code>@ControllerAdvice</code> 配合 <code>@ExceptionHandler</code> 实现全局异常处理</p><p>我们编写类<code>com.example.controller.ControllerExceptionHandler</code>来进行全局异常处理，即触发对应类型异常，返回特定类型的结果给前端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.example.req.UserReq;</span><br><span class="line"><span class="keyword">import</span> com.example.resp.CommonResp;</span><br><span class="line"><span class="keyword">import</span> com.example.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户模块相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line">    <span class="comment">//查找单个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryOne&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询单个用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求queryOne&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(userReq.getId());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryAll&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询所有用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUser</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userService.findAllUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/updateInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;更新用户信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">upDateUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/addInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">addUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/deleteInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">deleteUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.deleteUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step4-controller层具体业务逻辑"><a href="#step4-controller层具体业务逻辑" class="headerlink" title="step4 controller层具体业务逻辑"></a>step4 controller层具体业务逻辑</h4><p><code>com.example.controller.UserController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.example.req.UserReq;</span><br><span class="line"><span class="keyword">import</span> com.example.resp.CommonResp;</span><br><span class="line"><span class="keyword">import</span> com.example.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户模块相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line">    <span class="comment">//查找单个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryOne&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询单个用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求queryOne&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(userReq.getId());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryAll&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询所有用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUser</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userService.findAllUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/updateInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;更新用户信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">upDateUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/addInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">addUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/deleteInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">deleteUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.deleteUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器开发"><a href="#拦截器开发" class="headerlink" title="拦截器开发"></a>拦截器开发</h3><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><p>如果请求需要做参数或者其他权限校验，我们可以自定义拦截器类，实现<code>HandlerInterceptor</code>接口</p><p><code>com.example.interceptor.UserInterceptor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.exception.UserException;</span><br><span class="line"><span class="keyword">import</span> com.example.exception.UserExceptionEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入拦截器，开始进行权限校验&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;bang&quot;</span>.equals(token))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserException</span>(UserExceptionEnum.PERMISSION_DENIED_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;权限校验通过&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在配置类中配置拦截器，及其对应白黑名单"><a href="#在配置类中配置拦截器，及其对应白黑名单" class="headerlink" title="在配置类中配置拦截器，及其对应白黑名单"></a>在配置类中配置拦截器，及其对应白黑名单</h4><p><code>com.example.config.WebMvcConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.UserInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserInterceptor userInterceptor;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(userInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/doc.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后端接口测试"><a href="#后端接口测试" class="headerlink" title="后端接口测试"></a>后端接口测试</h3><p>对于<code>dao</code>层以及<code>service</code>层的功能开发，我们编写单元测试进行测试</p><p>对于整体接口测试，我们借助<code>knife4j</code>来进行在线接口文档测试，<a href="https://doc.xiaominfo.com/docs/action/springboot">SpringBoot整合Knife4j</a></p><h4 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">SSM-Template-Project</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;测试SSM-Template-Project&quot;</span></span><br><span class="line">    <span class="comment"># aaa&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">bang@google.com</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">bang</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://bang.world.com</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0</span></span><br><span class="line">    <span class="attr">license:</span> <span class="string">Apache</span> <span class="number">1.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">test1:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">用户模块测试</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span>  <span class="comment">#controller包名</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.example.controller</span></span><br></pre></td></tr></table></figure><h4 id="controller层代码上添加添加对应注解"><a href="#controller层代码上添加添加对应注解" class="headerlink" title="controller层代码上添加添加对应注解"></a>controller层代码上添加添加对应注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> com.example.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.example.req.UserReq;</span><br><span class="line"><span class="keyword">import</span> com.example.resp.CommonResp;</span><br><span class="line"><span class="keyword">import</span> com.example.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户模块相关接口&quot;)</span> <span class="comment">//测试模块名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line">    <span class="comment">//查找单个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryOne&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询单个用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求queryOne&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(userReq.getId());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryAll&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询所有用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUser</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userService.findAllUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/updateInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;更新用户信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">upDateUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/addInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加用户&quot;)</span> <span class="comment">//接口名称</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">addUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/deleteInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Boolean&gt; <span class="title function_">deleteUserInfo</span><span class="params">(UserReq userReq)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.toBean(userReq, User.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">s</span> <span class="operator">=</span> userService.deleteUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在线文档测试"><a href="#在线文档测试" class="headerlink" title="在线文档测试"></a>在线文档测试</h4><p>访问<code>http://localhost:8080/doc.html</code></p><p><img src="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/image-20240624003139210.png" alt="image-20240624003139210"></p><p><img src="/2024/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/ssm%20web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/ssm/image-20240624003206334.png" alt="image-20240624003206334"></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端快速工程化</title>
      <link href="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
      <url>/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前端快速工程化"><a href="#前端快速工程化" class="headerlink" title="前端快速工程化"></a>前端快速工程化</h1><p>前端 vs 后端</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606103633092.png" alt="image-20240606103633092"></p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><ul><li>ECMAScript（ES） 是规范、 JavaScript 是 ES 的实现</li><li>ES6 的第一个版本 在 2015 年 6 月发布，正式名称是《ECMAScript 2015 标准》（简称 ES2015）</li><li>ES6 指是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等</li></ul><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>推荐使用<code>let</code>关键字替代 <code>var</code>关键字声明变量，因为 <code>var</code>存在诸多问题，比如：</p><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure><p>只会打印a，而b无法引用，所以a可以跨域，不安全</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606093610335.png" alt="image-20240606093610335"></p><h4 id="重复申明"><a href="#重复申明" class="headerlink" title="重复申明"></a>重复申明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 可以声明多次</span></span><br><span class="line"><span class="comment">// let 只能声明一次</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// Identifier &#x27;n&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606093849111.png" alt="image-20240606093849111"></p><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 会变量提升,变量在初始化之前即可被引用</span></span><br><span class="line"><span class="comment">// let 不存在变量提升，变量初始化之前引用会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">//ReferenceError: y is not defined</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606094050855.png" alt="image-20240606094050855"></p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明之后不允许改变</span></span><br><span class="line"><span class="comment">// 2. 一但声明必须初始化，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">3</span>; <span class="comment">//Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数组解构</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//以前我们想获取其中的值，只能通过角标。ES6 可以这样：</span></span><br><span class="line"><span class="keyword">let</span> [x, y, z] = arr;<span class="comment">// x，y，z 将与 arr 中的每个位置对应来取值</span></span><br><span class="line"><span class="comment">// 然后打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z);</span><br></pre></td></tr></table></figure><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="attr">language</span>: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解构表达式获取值，将 person 里面每一个属性和左边对应赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123;name, age, language&#125; = person;</span><br><span class="line"><span class="comment">// 等价于下面</span></span><br><span class="line"><span class="comment">// const name = person.name;</span></span><br><span class="line"><span class="comment">// const age = person.age;</span></span><br><span class="line"><span class="comment">// const language = person.language;</span></span><br><span class="line"><span class="comment">// 可以分别打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(language);</span><br><span class="line"><span class="comment">//扩展：如果想要将 name 的值赋值给其他变量，可以如下,nn 是新的变量名</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>: nn, age, language&#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nn);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(language);</span><br></pre></td></tr></table></figure><h3 id="链判断"><a href="#链判断" class="headerlink" title="链判断"></a>链判断</h3><p>如果读取对象内部的某个属性，往往需要判断一下，属性的上层对象是否存在。</p><p>比如，读取message.body.user.firstName这个属性，安全的写法是写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  message = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">const</span>  firstName = message.<span class="property">body</span>.<span class="property">user</span>.<span class="property">firstName</span> || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">const</span> firstName = (message</span><br><span class="line">                   &amp;&amp; message.<span class="property">body</span></span><br><span class="line">                   &amp;&amp; message.<span class="property">body</span>.<span class="property">user</span></span><br><span class="line">                   &amp;&amp; message.<span class="property">body</span>.<span class="property">user</span>.<span class="property">firstName</span>) || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstName)</span><br></pre></td></tr></table></figure><p>这样的层层判断非常麻烦，因此 <a href="https://github.com/tc39/proposal-optional-chaining">ES2020</a> 引入了“链判断运算符”（optional chaining operator）<strong>?.</strong>，简化上面的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = message?.<span class="property">body</span>?.<span class="property">user</span>?.<span class="property">firstName</span> || <span class="string">&#x27;default&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 ES6 以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断 b 是否为空，为空就给默认值 1</span></span><br><span class="line">  b = b || <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add2</span>(<span class="params">a, b = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add2</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>类似于Java中的lambda表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以前声明一个方法</span></span><br><span class="line"><span class="comment">// var print = function (obj) &#123;</span></span><br><span class="line"><span class="comment">// console.log(obj);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 可以简写为：</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">print</span> = obj =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">// 测试调用</span></span><br><span class="line"><span class="title function_">print</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个参数的情况：</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写为：</span></span><br><span class="line"><span class="comment">//当只有一行语句，并且需要返回结果时，可以省略 &#123;&#125; , 结果会自动返回。</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">sum2</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="comment">//测试调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum2</span>(<span class="number">10</span>, <span class="number">10</span>));<span class="comment">//20</span></span><br><span class="line"><span class="comment">// 代码不止一行，可以用`&#123;&#125;`括起来</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">sum3</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    c = a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum3</span>(<span class="number">10</span>, <span class="number">20</span>));<span class="comment">//30</span></span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> info = <span class="string">&quot;你好，我的名字是：【&quot;</span>+name+<span class="string">&quot;】，年龄是：【&quot;</span>+age+<span class="string">&quot;】，邮箱是：【】&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line"></span><br><span class="line"># 模板字符串的写法</span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`你好，我的名字是：<span class="subst">$&#123;name&#125;</span>，年龄是：<span class="subst">$&#123;person.age&#125;</span>，邮箱是：<span class="subst">$&#123;person.email&#125;</span>`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>代表 <code>异步对象</code>，类似Java中的 <code>CompletableFuture</code></p><p><strong>promise</strong> 是现代 JavaScript 中异步编程的基础，是一个由异步函数返回的可以向我们指示当前操作所处的状态的对象。在 Promise 返回给调用者的时候，操作往往还没有完成，但 Promise 对象可以让我们操作最终完成时对其进行处理（无论成功还是失败）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fetch:浏览器支持从远程获取数据的一个函数，这个函数返回的就是 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> fetchPromise = <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始发送请求...&quot;</span>)</span><br><span class="line"><span class="comment">//响应成功的处理逻辑</span></span><br><span class="line">fetchPromise.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已收到响应：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    response.<span class="title function_">json</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//响应失败的处理逻辑</span></span><br><span class="line">fetchPromise.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已发送请求……&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606100712450.png" alt="image-20240606100712450"></p><h4 id="fetch-api"><a href="#fetch-api" class="headerlink" title="fetch api"></a>fetch api</h4><ul><li>fetch 是浏览器支持从远程获取数据的一个函数，这个函数返回的就是 <code>Promise 对象</code></li><li>通过 fetch() API 得到一个 Response 对象<ul><li><strong>response.status</strong>： 读取响应状态码</li><li><strong>response.json()</strong>：读取响应体json数据；（<strong>这也是个异步对象</strong>）</li></ul></li></ul><h4 id="Promise状态"><a href="#Promise状态" class="headerlink" title="Promise状态"></a>Promise状态</h4><p>Promise 有三种状态：</p><ul><li><strong>待定（pending）</strong>：初始状态，既没有被兑现，也没有被拒绝。这是调用 fetch() 返回 Promise 时的状态，此时请求还在进行中。</li><li><strong>已兑现（fulfilled）</strong>：意味着操作成功完成。当 Promise 完成时，它的 then() 处理函数被调用。</li><li><strong>已拒绝（rejected）</strong>：意味着操作失败。当一个 Promise 失败时，它的 catch() 处理函数被调用。</li></ul><h4 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h4><p>如何自定义Promise对象?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 执行异步操作</span></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(value);<span class="comment">// 调用 resolve，代表 Promise 将返回成功的结果</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error);<span class="comment">// 调用 reject，代表 Promise 会返回失败结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>自定义Promise对象示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> get = <span class="keyword">function</span> (<span class="params">url, data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: data,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params">result</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">error</span>(<span class="params">error</span>) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Async-函数"><a href="#Async-函数" class="headerlink" title="Async 函数"></a>Async 函数</h3><p><strong>async function</strong> 声明创建一个绑定到给定名称的新异步函数。函数体内允许使用 await 关键字，这使得我们可以<strong>更简洁地编写基于 promise 的异步代码</strong>，并且<strong>避免了显式地配置 promise 链</strong>的需要。</p><ul><li><code>async 函数</code>是使用<code>async关键字声明的函数</code>。async 函数是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction">AsyncFunction</a> 构造函数的实例，并且其中允许使用 await 关键字。</li><li><code>async 和 await</code> 关键字让我们可以用一种更简洁的方式写出基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> 的异步行为，而无需刻意地链式调用 promise。</li><li><code>async 函数</code> 返回的还是 <code>Promise对象</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 这是一个异步函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在异步函数中，你可以在调用一个返回 Promise 的函数之前使用 <strong>await</strong> 关键字。这使得代码在该点上等待，直到 Promise 被完成，这时 Promise 的响应被当作返回值，或者被拒绝的响应被作为错误抛出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchProducts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 在这一行之后，我们的函数将等待 `fetch()` 调用完成</span></span><br><span class="line">    <span class="comment">// 调用 `fetch()` 将返回一个“响应”或抛出一个错误</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">      <span class="string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP 请求错误：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在这一行之后，我们的函数将等待 `response.json()` 的调用完成</span></span><br><span class="line">    <span class="comment">// `response.json()` 调用将返回 JSON 对象或抛出一个错误</span></span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`无法获取产品列表：<span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchProducts</span>();</span><br></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>实际项目中，不可能将所有的js代码写在某一个单独的文件中，在实际开发中需要模块化，</p><p><strong>将 JavaScript 程序拆分为可按需导入的单独模块</strong>的机制。Node.js 已经提供这个能力很长时间了，还有很多的 JavaScript 库和框架已经开始了模块的使用</p><p>下面演示一个模块化示例，主要包含三个文件:</p><ul><li>index.html：主页面</li><li>main.js：主js文件，里面从其他js文件中引入需要的内容</li><li>user.js：申明一些变量或函数供第三方使用</li></ul><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606103318267.png" alt="image-20240606103318267"></p><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ES6规范<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    //必须申明type为模块化 module</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是ES6模块化测试使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="user-js"><a href="#user-js" class="headerlink" title="user.js"></a>user.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在user.js中定义一个对象和一个对应的函数</span></span><br><span class="line"><span class="keyword">const</span>  user = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isAdult</span> = (<span class="params">age</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (age &gt; <span class="number">18</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成年人&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未成年&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要借助export关键字，向外暴露能被其他地方引用的对象</span></span><br><span class="line"><span class="keyword">export</span> &#123;user,isAdult&#125;</span><br></pre></td></tr></table></figure><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从user.js中导入需要的对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;user,isAdult&#125; <span class="keyword">from</span> <span class="string">&quot;./lib/user.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`姓名:<span class="subst">$&#123;user.username&#125;</span>,年龄:<span class="subst">$&#123;user.age&#125;</span>`</span>);</span><br><span class="line"><span class="title function_">isAdult</span>(user.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>npm 是 nodejs 中进行 <strong>包管理</strong> 的工具</p><p>以前引入第三方js，需要手动下载导入，现在只需用npm进行依赖的安装和管理</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li><p>安装nodejs <a href="https://nodejs.org/en">nodejs下载地址</a></p></li><li><p>配置npm</p><ul><li>```shell<br>npm config set registry <a href="https://registry.npmmirror.com">https://registry.npmmirror.com</a>  #设置国内阿里云镜像源<br>npm config get registry  #查看镜像源<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 常用命令</span><br><span class="line"></span><br><span class="line">- npm init： 项目初始化</span><br><span class="line">  - npm init -y：默认一路yes，不用挨个输入信息</span><br><span class="line">- npm install 包名：安装js包到项目中（仅当前项目有效）。指定 **包名**，或者 **包名@版本号**</span><br><span class="line">  - npm install -g： 全局安装，所有项目都能用</span><br><span class="line">  - 可以去 [npm仓库](https://www.npmjs.com/) 搜索第三方库</span><br><span class="line">- npm update 包名：升级包到最新版本</span><br><span class="line">- npm uninstall 包名：卸载包</span><br><span class="line">- npm run：项目运行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 使用示例</span><br><span class="line"></span><br><span class="line">创建一个文件目录`02-npm`，在其下执行`npm init -y`会初始化一个项目</span><br><span class="line"></span><br><span class="line">![image-20240606104558876](%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606104558876.png)</span><br><span class="line"></span><br><span class="line">目录中会多出一个`package.json`文件</span><br><span class="line"></span><br><span class="line">- **package.json** 文件一般都在每个项目的根目录下面，定义了这个项目所需要的各种模块，以及项目的配置信息，包括名称、版本、许可证、依赖模块等元数据。格式是严格的JSON格式</span><br><span class="line">- 当你执行 npm install 的时候，node 会先从 package.json 文件中读取所有 dependencies 信息，然后根据 dependencies 中的信息与 node_modules 中的模块进行对比，没有的直接下载，已有的检查更新。另外，package.json 文件只记录你通过 npm install 方式安装的模块信息，而这些模块所依赖的其他子模块的信息不会记录</span><br><span class="line"></span><br><span class="line">![image-20240606104627076](%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606104627076.png)</span><br><span class="line"></span><br><span class="line">安装所需依赖，假定我们需要使用jquery，则执行`npm install jquery`</span><br><span class="line"></span><br><span class="line">![image-20240606104849023](%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606104849023.png)</span><br><span class="line"></span><br><span class="line">![image-20240606143059363](%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606143059363.png)</span><br><span class="line"></span><br><span class="line">运行，`package.json`文件中的`scripts`中的命令我们可以通过`npm run xxx`来运行</span><br><span class="line"></span><br><span class="line">![image-20240606143435515](%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606143435515.png)</span><br><span class="line"></span><br><span class="line">我们分享或者从第三下载项目时，由于项目第三方依赖包很大，所以一般会把`node_modules`排除在外，那么我们在本地运行这些项目又需要第三方依赖怎么办？直接在项目中运行`npm install`其会自动根据`package.json`中依赖的第三方库及版本进行下载</span><br><span class="line"></span><br><span class="line">### 总结：npm使用流程</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712110492836-0f787e3a-4b9c-4236-8250-3912df233a20.webp&quot; alt=&quot;image.png&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">## Vite</span><br><span class="line"></span><br><span class="line">### 概述</span><br><span class="line"></span><br><span class="line">[官网](https://cn.vitejs.dev)</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606144119659.png&quot; alt=&quot;image-20240606144119659&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">- 快速创建前端项目脚手架</span><br><span class="line">- 统一的工程化规范：目录结构、代码规范、git提交规范 等</span><br><span class="line">- 自动化构建和部署：前端脚手架可以自动进行代码打包、压缩、合并、编译等常见的构建工作，可以通过集成自动化部署脚本，自动将代码部署到测试、生产环境等；</span><br><span class="line"></span><br><span class="line">### 常用命令</span><br><span class="line"></span><br><span class="line">#### 创建项目</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">npm create vite #根据向导选择技术栈</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install #安装项目所有依赖</span><br><span class="line"></span><br><span class="line">npm install axios #安装指定依赖到当前项目</span><br><span class="line">npm install -g xxx # 全局安装</span><br></pre></td></tr></table></figure><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev #启动项目</span><br></pre></td></tr></table></figure><h4 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build #构建后 生成 dist 文件夹</span><br></pre></td></tr></table></figure><h4 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h4><ul><li>前后分离方式：需要把 dist 文件夹内容部署到如 nginx 之类的服务器上</li><li>前后不分离方式：把 dist 文件夹内容复制到 SpringBoot 项目 <code>resources</code> 下面</li></ul><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>创建项目</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606144716638.png" alt="image-20240606144716638" style="zoom:67%;"></p><p>安装依赖、启动项目</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606145017250.png" alt="image-20240606145017250" style="zoom:67%;"></p><p>访问项目</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606145119005.png" alt="image-20240606145119005" style="zoom: 50%;"></p><p>项目打包</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606145317517.png" alt="image-20240606145317517"></p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606145411584.png" alt="image-20240606145411584"></p><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p><a href="https://cn.vuejs.org/guide/essentials/application.html">Vue官方文档</a></p><p>我们可以利用Vite工具链快速创建一个Vue项目</p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>组件系统是一个抽象的概念:</p><ul><li>组件：小型、独立、可复用的单元</li><li>组合：通过组件之间的组合、包含关系构建出一个完整应用</li></ul><p>几乎任意类型的应用界面都可以抽象为一个组件树</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1708754538888-ced4be1b-71b9-4238-9398-372985b1b99a.webp" alt="img"></p><h3 id="SFC"><a href="#SFC" class="headerlink" title="SFC"></a>SFC</h3><p>Vue 的<strong>单文件组件</strong> (即 <em>.vue 文件，英文 Single-File Component，简称 <em>*SFC</em></em>) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  //编写脚本</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  //编写页面模板</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  //编写样式</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue运行原理"><a href="#Vue运行原理" class="headerlink" title="Vue运行原理"></a>Vue运行原理</h3><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712477454104-1234f405-1fdf-457c-8b84-a4cae4f4645e.webp" alt="运行原理.png"></p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606151543916.png" alt="image-20240606151543916" style="zoom:67%;"></p><h3 id="Vue基础语法"><a href="#Vue基础语法" class="headerlink" title="Vue基础语法"></a>Vue基础语法</h3><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><p>页面展示的某个内容来自于某个变量，如何将变量的值显示在页面的正确位置，需要用到插值，直接在html中需要的位置<code>&#123;&#123;变量名&#125;&#125;</code>即可引用变量值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义基本数据变量</span><br><span class="line">let name=&quot;张三&quot;;</span><br><span class="line">let age=27;</span><br><span class="line">let scores=&#123;</span><br><span class="line">  &quot;数学&quot;:129,</span><br><span class="line">  &quot;英语&quot;:136,</span><br><span class="line">  &quot;政治&quot;:89</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">      &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;数学&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;英语&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;政治&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;/thead&gt;</span><br><span class="line">      &lt;tbody&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;name&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;age&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;scores.数学&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;scores.英语&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;scores.政治&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606152744403.png" alt="image-20240606152744403"></p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p><a href="https://cn.vuejs.org/api/built-in-directives.html">vue指令官方文档</a></p><h5 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h5><p>可以为元素绑定特定的事件，比如点击按钮出发某个函数等操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//顶一个对应的函数</span><br><span class="line">function buy()&#123;</span><br><span class="line">  alert(&quot;欢迎选购！！！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button v-on:click=&quot;buy&quot;&gt;点击购买&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="条件判断v-if"><a href="#条件判断v-if" class="headerlink" title="条件判断v-if"></a>条件判断v-if</h5><p>比如根据某个条件，决定页面显示的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义变量</span><br><span class="line">let person=&#123;</span><br><span class="line">  name:&quot;章三&quot;,</span><br><span class="line">  age:27</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!--根据age大小显示不同内容--&gt;</span><br><span class="line">    &lt;span style=&quot;color: red&quot; v-if=&quot;person.age&gt;18&quot;&gt;成年人&lt;/span&gt;</span><br><span class="line">    &lt;span style=&quot;color: blue&quot; v-else&gt;未成年人&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="循环指令v-for"><a href="#循环指令v-for" class="headerlink" title="循环指令v-for"></a>循环指令v-for</h5><p>比如循环显示某个列表的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义变量</span><br><span class="line">let persons=[&quot;章三&quot;,&quot;里斯&quot;,&quot;王五&quot;,&quot;赵六&quot;]</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;li v-for=&quot;person in persons&quot;&gt;&#123;&#123;person&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606160128431.png" alt="image-20240606160128431"></p><h5 id="属性绑定v-bind"><a href="#属性绑定v-bind" class="headerlink" title="属性绑定v-bind"></a>属性绑定v-bind</h5><p>动态地绑定一个或者多个属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义变量</span><br><span class="line">let url = &quot;https://www.baidu.com&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 将a标签href属性与变量url动态绑定 --&gt;</span><br><span class="line">    &lt;a v-bind:href=&quot;url&quot;&gt;跳转&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>注意:此时如果我们想修改变量的值，属性值并不会跟着修改</p><h4 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h4><p>前面个通过指令绑定，数据地动态变化无法反馈到页面元素中</p><p>Vue通过<code>ref()</code>和<code>reactive()</code>包装数据，将会生成一个数据的代理对象。vue内部的 <strong>基于依赖追踪的响应式系统</strong> 就会<strong>追踪</strong>感知<strong>数据变化</strong>，并<strong>触发页面</strong>的重新<strong>渲染</strong></p><h5 id="响应式-ref"><a href="#响应式-ref" class="headerlink" title="响应式-ref()"></a>响应式-ref()</h5><h6 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h6><ul><li>使用 <strong>ref()</strong> 包装<strong>原始类型、对象类型数据</strong>，生成 <strong>代理对象</strong></li><li><strong>任何方法、js代码中</strong>，使用 <code>代理对象.value</code> 的形式读取和修改值</li><li><strong>页面组件中</strong>，直接使用 <code>代理对象</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义变量</span><br><span class="line">import &#123;ref&#125; from &quot;vue&quot;;</span><br><span class="line">//ref生成代理对象</span><br><span class="line">let num = ref(0);</span><br><span class="line">let incr = function ()&#123;</span><br><span class="line">  num.value++;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;&lt;button v-on:click=&quot;incr&quot;&gt;增加&lt;/button&gt;&lt;/span&gt;</span><br><span class="line">    &lt;!-- 动态显示num的值 --&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;num&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="响应式-reactive"><a href="#响应式-reactive" class="headerlink" title="响应式-reactive()"></a>响应式-reactive()</h5><h6 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h6><ul><li>使用 <strong>reactive()</strong> 包装<strong>对象类型数据</strong>，生成 <strong>代理对象</strong></li><li><strong>任何方法、js代码中</strong>，使用 <code>代理对象.属性</code>的形式读取和修改值</li><li><strong>页面组件中</strong>，直接使用 <code>代理对象.属性</code></li></ul><h5 id="ref-vs-reactive"><a href="#ref-vs-reactive" class="headerlink" title="ref() vs reactive()"></a>ref() vs reactive()</h5><p>两者差异比较：</p><ul><li><code>ref()</code>可以包装<strong>原始类型、对象类型数据</strong></li><li><p><code>reactive()</code>只能包装<strong>对象类型数据</strong></p></li><li><p><code>ref()</code>使用时，需要<code>对象.value.属性</code>，而<code>reactive()</code>可以直接<code>对象.属性</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//定义变量</span><br><span class="line">import &#123;reactive, ref&#125; from &quot;vue&quot;;</span><br><span class="line">//ref生成代理对象</span><br><span class="line">let car1 = ref(&#123;</span><br><span class="line">  brand:&quot;比亚迪&quot;,</span><br><span class="line">  price:10000</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let car2 = reactive(&#123;</span><br><span class="line">  brand:&quot;小米&quot;,</span><br><span class="line">  price:10000</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//ref包装对象，要使用到值，需要: 对象.value.属性</span><br><span class="line">let incr1 = function ()&#123;</span><br><span class="line">  car1.value.price+=10000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//reactive包装对象，要使用到值只需: 对象.属性</span><br><span class="line">let incr2 = function ()&#123;</span><br><span class="line">  car2.price+=1000;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;汽车:&#123;&#123;car1.brand&#125;&#125;，价格:&#123;&#123;car1.price&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车:&#123;&#123;car2.brand&#125;&#125;，价格:&#123;&#123;car2.price&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;incr1&quot;&gt;比亚迪涨价&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incr2&quot;&gt;小米涨价&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="表单绑定"><a href="#表单绑定" class="headerlink" title="表单绑定"></a>表单绑定</h4><p>前面我们使用的<code>v-bind</code>只能实现从数据到页面的单向绑定，数据变化可以在页面中体现出来，但是页面变化无法体现在数据变量中</p><p>我们可以使用<code>v-model</code>在表单输入元素或者组件上创建双向绑定，即数据改了可以传递到页面，页面改了可以传递到数据变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123;reactive&#125; from &quot;vue&quot;;</span><br><span class="line">  //将data的各个属性与表单进行绑定</span><br><span class="line">  const data=reactive(&#123;</span><br><span class="line">    name:&quot;章三&quot;,</span><br><span class="line">    agree:true,</span><br><span class="line">    hobby:[],</span><br><span class="line">    gender:&quot;男&quot;,</span><br><span class="line">    degree:&quot;&quot;,</span><br><span class="line">    course:[]</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;display: flex;&quot;&gt;</span><br><span class="line">    &lt;div style=&quot;border: 1px solid black;width: 300px&quot;&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;h1&gt;表单绑定&lt;/h1&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">          &lt;label&gt;姓名(文本框)：&lt;/label&gt;</span><br><span class="line">          &lt;input v-model=&quot;data.name&quot;/&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;&lt;label&gt;同意协议(checkbox)：&lt;/label&gt;</span><br><span class="line">          &lt;input type=&quot;checkbox&quot; v-model=&quot;data.agree&quot;/&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">          &lt;label&gt;兴趣(多选框)：&lt;/label&gt;&lt;br/&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;足球&quot; v-model=&quot;data.hobby&quot;/&gt;足球&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;篮球&quot; v-model=&quot;data.hobby&quot;/&gt;篮球&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;羽毛球&quot; v-model=&quot;data.hobby&quot;/&gt;羽毛球&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;乒乓球&quot; v-model=&quot;data.hobby&quot;/&gt;乒乓球&lt;/label&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">          &lt;label&gt;性别(单选框)：&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; v-model=&quot;data.gender&quot;&gt;男&lt;/label&gt;</span><br><span class="line">          &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; v-model=&quot;data.gender&quot;&gt;女&lt;/label&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">          &lt;label&gt;学历(单选下拉列表)：&lt;/label&gt;</span><br><span class="line">          &lt;select v-model=&quot;data.degree&quot;&gt;</span><br><span class="line">            &lt;option disabled value=&quot;&quot;&gt;选择学历&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;小学&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;初中&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;高中&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;大学&lt;/option&gt;</span><br><span class="line">          &lt;/select&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">          &lt;label&gt;课程(多选下拉列表)：&lt;/label&gt;</span><br><span class="line">          &lt;br/&gt;</span><br><span class="line">          &lt;select multiple v-model=&quot;data.course&quot;&gt;</span><br><span class="line">            &lt;option disabled value=&quot;&quot;&gt;选择课程&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;语文&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;数学&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;英语&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;道法&lt;/option&gt;</span><br><span class="line">          &lt;/select&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=&quot;border: 1px solid blue;width: 200px&quot;&gt;</span><br><span class="line">      &lt;h1&gt;结果预览&lt;/h1&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;&lt;label&gt;姓名：&#123;&#123;data.name&#125;&#125;&lt;/label&gt;&lt;/p&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;&lt;label&gt;同意协议：&#123;&#123;data.agree&#125;&#125;&lt;/label&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">        &lt;label&gt;兴趣：</span><br><span class="line">          &lt;li v-for=&quot;h in data.hobby&quot;&gt;&#123;&#123;h&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">        &lt;label&gt;性别：&#123;&#123;data.gender&#125;&#125;&lt;/label&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">        &lt;label&gt;学历：&#123;&#123;data.degree&#125;&#125;&lt;/label&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;p style=&quot;background-color: azure&quot;&gt;</span><br><span class="line">        &lt;label&gt;课程：</span><br><span class="line">          &lt;li v-for=&quot;c in data.course&quot;&gt;&#123;&#123;c&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606191540670.png" alt="image-20240606191540670" style="zoom:67%;"></p><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>根据已有的数据计算出新数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;computed, reactive&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">    const car = reactive(&#123;</span><br><span class="line">      brand:&quot;小米&quot;,</span><br><span class="line">      price:1000,</span><br><span class="line">      number:10</span><br><span class="line">    &#125;);</span><br><span class="line">    //总价由单价×数目得到</span><br><span class="line">    const totalPrice = computed(()=&gt;car.price*car.number);</span><br><span class="line"></span><br><span class="line">    //涨价函数</span><br><span class="line">    let addPrice = function()&#123;</span><br><span class="line">      car.price+=100;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;汽车品牌:&#123;&#123;car.brand&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车单价:&#123;&#123;car.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车数目:&#123;&#123;car.number&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;总价:&#123;&#123;totalPrice&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;addPrice&quot;&gt;加价&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;car.number++&quot;&gt;加数目&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240606192330189.png" alt="image-20240606192330189"></p><h3 id="vue进阶使用"><a href="#vue进阶使用" class="headerlink" title="vue进阶使用"></a>vue进阶使用</h3><h4 id="监听-watch"><a href="#监听-watch" class="headerlink" title="监听 watch"></a>监听 watch</h4><p><a href="https://www.cnblogs.com/steamed-twisted-roll/p/17130597.html">vue3使用watch的注意事项</a></p><p>监听某个变量或者属性值的变化，然后执行对应的业务逻辑处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;computed, reactive, watch&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">    const car = reactive(&#123;</span><br><span class="line">      brand:&quot;小米&quot;,</span><br><span class="line">      price:1000,</span><br><span class="line">      number:1</span><br><span class="line">    &#125;);</span><br><span class="line">    //总价由单价×数目得到</span><br><span class="line">    const totalPrice = computed(()=&gt;car.price*car.number);</span><br><span class="line"></span><br><span class="line">    //涨价函数</span><br><span class="line">    let addPrice = function()&#123;</span><br><span class="line">      car.price+=100;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //监听数目的变化，如果汽车数目超过了5，则弹出限购提示</span><br><span class="line">    //对象的属性必须使用()=&gt;对象.属性这种形式</span><br><span class="line">    watch(()=&gt;car.number,()=&gt;&#123;</span><br><span class="line">      if(car.number&gt;5)&#123;</span><br><span class="line">        alert(&quot;当前购买数量超出5&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;汽车品牌:&#123;&#123;car.brand&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车单价:&#123;&#123;car.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车数目:&#123;&#123;car.number&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;总价:&#123;&#123;totalPrice&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;addPrice&quot;&gt;加价&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;car.number++&quot;&gt;加数目&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="监听-watchEffect"><a href="#监听-watchEffect" class="headerlink" title="监听 watchEffect"></a>监听 watchEffect</h4><p>watch只能监听单个ref或者reactive对象，我们可以使用watchEffective同时监听所有的ref或者reactive对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;computed, reactive, watch, watchEffect&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">    const car = reactive(&#123;</span><br><span class="line">      brand:&quot;小米&quot;,</span><br><span class="line">      price:1000,</span><br><span class="line">      number:1</span><br><span class="line">    &#125;);</span><br><span class="line">    //总价由单价×数目得到</span><br><span class="line">    const totalPrice = computed(()=&gt;car.price*car.number);</span><br><span class="line"></span><br><span class="line">    //涨价函数</span><br><span class="line">    let addPrice = function()&#123;</span><br><span class="line">      car.price+=100;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //监听数目的变化，如果汽车数目超过了5，则弹出限购提示</span><br><span class="line">    //监听价格变化，价格如果超出1500，则弹出太贵了的提示</span><br><span class="line">    //watchEffect会自动监听所有的ref或者reactive对象</span><br><span class="line">    watchEffect(()=&gt;&#123;</span><br><span class="line">      if(car.number&gt;5)&#123;</span><br><span class="line">        alert(&quot;超出限购&quot;);</span><br><span class="line">        car.number=5;</span><br><span class="line">      &#125;</span><br><span class="line">      if(car.price&gt;1500)&#123;</span><br><span class="line">        alert(&quot;太贵了&quot;);</span><br><span class="line">        car.price=1500;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;汽车品牌:&#123;&#123;car.brand&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车单价:&#123;&#123;car.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;汽车数目:&#123;&#123;car.number&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;总价:&#123;&#123;totalPrice&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;addPrice&quot;&gt;加价&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;car.number++&quot;&gt;加数目&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h4><p><a href="https://cn.vuejs.org/api/options-lifecycle.html">官网关于生命周期的介绍</a></p><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为生命周期钩子的函数，让开发者有机会在特定阶段运行自己的代码。</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712714322676-1b2be398-47b7-4901-ab8d-f5dff873a8ab.png" alt="img" style="zoom: 33%;"></p><p>生命周期整体分为四个阶段，分别是：<code>创建、挂载、更新、销毁</code>，每个阶段都有两个钩子，一前一后。</p><p>常用的钩子:</p><ul><li>onBeforeMount：挂载之前</li><li>onMounte：挂载完成</li><li>onBeforeUpdate：更新之前</li><li>onUpdated：更新完成</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;onBeforeMount, onBeforeUpdate, onMounted, onUpdated, ref&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">  const count = ref(0);</span><br><span class="line">  // 生命周期钩子</span><br><span class="line">  //常见场景：在挂载之前，即onBeforeMount之前向后台发送请求数据</span><br><span class="line"></span><br><span class="line">  //挂载之前有值，无页面元素</span><br><span class="line">  onBeforeMount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载之前&#x27;,count.value,document.getElementById(&quot;btn01&quot;))</span><br><span class="line">  &#125;)</span><br><span class="line">  //挂载之后才有页面元素</span><br><span class="line">  onMounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载完毕&#x27;,count.value,document.getElementById(&quot;btn01&quot;))</span><br><span class="line">  &#125;)</span><br><span class="line">  //更新之前数据变了，但是页面内容未变动</span><br><span class="line">  onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新之前&#x27;,count.value,document.getElementById(&quot;btn01&quot;).innerHTML)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUpdated(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新完毕&#x27;,count.value,document.getElementById(&quot;btn01&quot;).innerHTML)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button id=&quot;btn01&quot; @click=&quot;count++&quot;&gt;点&#123;&#123;count&#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h4><p>项目中每一个vue文件都相当于一个组件， 一个大型项目由很多组件组成，这些组件之间如何进行值的传递？</p><h5 id="父传子-Prop"><a href="#父传子-Prop" class="headerlink" title="父传子-Prop"></a>父传子-Prop</h5><p>父组件给子组件传递值，单向数据流效果</p><ul><li>父组件修改值，子组件发生变化</li><li>子组件修改值，父组件发生变化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//父组件给子组件传递数据：使用属性绑定</span><br><span class="line">&lt;Son :books=&quot;data.books&quot; :money=&quot;data.money&quot;/&gt;</span><br><span class="line">  </span><br><span class="line">//子组件定义接受父组件的属性</span><br><span class="line">let props = defineProps(&#123;</span><br><span class="line">  money: &#123;</span><br><span class="line">    type: Number,</span><br><span class="line">    required: true,</span><br><span class="line">    default: 200</span><br><span class="line">  &#125;,</span><br><span class="line">  books: Array</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//在父组件里，给子组件传递数据，使用属性绑定</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import Son from &quot;./Son.vue&quot;;</span><br><span class="line">let money=1000</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Father&lt;/h2&gt;</span><br><span class="line">  &lt;son :money=&quot;money&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//在子组件里，定义接收父组件数据的属性</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let props = defineProps([&quot;money&quot;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 style=&quot;color: red&quot;&gt;son&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;money:&#123;&#123;money&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="子传父-Emit"><a href="#子传父-Emit" class="headerlink" title="子传父-Emit"></a>子传父-Emit</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//子组件定义发生的事件</span><br><span class="line">let emits = defineEmits([&#x27;buy&#x27;]);</span><br><span class="line">function buy()&#123;</span><br><span class="line">  // props.money -= 5;</span><br><span class="line">  emits(&#x27;buy&#x27;,-5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//父组件感知事件和接受事件值</span><br><span class="line">  &lt;Son :books=&quot;data.books&quot; :money=&quot;data.money&quot;</span><br><span class="line">       @buy=&quot;moneyMinis&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="插槽-slots"><a href="#插槽-slots" class="headerlink" title="插槽-slots"></a>插槽-slots</h4><p>插槽也可以进行组件之间的传值（html元素）的传递</p><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">import Son from &quot;./Son.vue&quot;;</span><br><span class="line">import &#123;reactive&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const car=reactive(&#123;</span><br><span class="line">  brand:&quot;小米&quot;,</span><br><span class="line">  price:1000</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Father&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;汽车品牌:&#123;&#123;car.brand&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;汽车价格:&#123;&#123;car.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;car.price+=100&quot;&gt;涨价&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">  &lt;son :car=&quot;car&quot;&gt;</span><br><span class="line">    哈哈，我是谁??</span><br><span class="line">  &lt;/son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let props = defineProps([&quot;car&quot;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 style=&quot;color: red&quot;&gt;son&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;汽车品牌:&#123;&#123;props.car.brand&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;汽车价格:&#123;&#123;props.car.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;props.car.price-=100&quot;&gt;降价&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h4&gt;来自于父组件使用slot传递的内容:&lt;slot/&gt;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240607200626824.png" alt="image-20240607200626824" style="zoom:50%;"></p><h5 id="插槽可以带默认值"><a href="#插槽可以带默认值" class="headerlink" title="插槽可以带默认值"></a>插槽可以带默认值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">let props = defineProps([&quot;car&quot;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 style=&quot;color: red&quot;&gt;son&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;汽车品牌:&#123;&#123;props.car.brand&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;汽车价格:&#123;&#123;props.car.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;props.car.price-=100&quot;&gt;降价&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h4&gt;来自于父组件使用slot传递的内容:&lt;slot&gt;我是slot默认值&lt;/slot&gt;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240607200745242.png" alt="image-20240607200745242" style="zoom:50%;"></p><h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><p>当子组件中多个地方需要插槽，应当如何进行区分</p><p>对于子组件，给插槽取名称<code>&lt;slot name=&quot;名称&quot;&gt;&lt;/slot&gt;</code></p><p>对于父组件，使用template定义插槽’<template v-slot:名称>内容</template>‘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">import Son from &quot;./Son.vue&quot;;</span><br><span class="line">import &#123;reactive&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const car=reactive(&#123;</span><br><span class="line">  brand:&quot;小米&quot;,</span><br><span class="line">  price:1000</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;Father&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;汽车品牌:&#123;&#123;car.brand&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;汽车价格:&#123;&#123;car.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;car.price+=100&quot;&gt;涨价&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">  &lt;son :car=&quot;car&quot;&gt;</span><br><span class="line">    &lt;template v-slot:slot1&gt;</span><br><span class="line">      插槽1</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">//v-slot可以用 #代替</span><br><span class="line">    &lt;template #slot2&gt;</span><br><span class="line">      &lt;span style=&quot;color: red&quot;&gt;插槽2&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">let props = defineProps([&quot;car&quot;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 style=&quot;color: red&quot;&gt;son&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;汽车品牌:&#123;&#123;props.car.brand&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;汽车价格:&#123;&#123;props.car.price&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;props.car.price-=100&quot;&gt;降价&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h4&gt;来自于父组件使用slot传递的内容:&lt;slot&gt;我是slot默认值&lt;/slot&gt;&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">  &lt;slot name=&quot;slot1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;slot name=&quot;slot2&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240607201429542.png" alt="image-20240607201429542" style="zoom:50%;"></p><h3 id="vu3总结"><a href="#vu3总结" class="headerlink" title="vu3总结"></a>vu3总结</h3><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712737404128-2d94429f-b301-408e-ac3a-88e175b1d45f.webp" alt="未命名绘图.png"></p><p>几个简写：</p><ul><li><p><code>v-on</code>=<code>@</code></p></li><li><p><code>v-bind</code>= <code>:</code></p></li><li><code>v-slot</code>= <code>#</code></li></ul><h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h2><h3 id="路由概述"><a href="#路由概述" class="headerlink" title="路由概述"></a>路由概述</h3><p><a href="https://router.vuejs.org/zh/introduction.html">vue router官方文档</a></p><p>前端系统根据页面路径。跳转到指定的组件，展示对应的页面效果</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1709801835501-9cce06a4-3956-4095-8cb3-8a792dd15026.png" alt="img" style="zoom:67%;"></p><h3 id="路由入门示例"><a href="#路由入门示例" class="headerlink" title="路由入门示例"></a>路由入门示例</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">选择对应的项目和语言</span></span><br></pre></td></tr></table></figure><h4 id="整合vue-router"><a href="#整合vue-router" class="headerlink" title="整合vue-router"></a>整合vue-router</h4><p>参照官方文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装依赖</span></span><br><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><p><a href="https://router.vuejs.org/zh/guide/">官方入门案例</a></p><h4 id="路由配置的一般步骤"><a href="#路由配置的一般步骤" class="headerlink" title="路由配置的一般步骤"></a>路由配置的一般步骤</h4><ol><li>编写<code>router/index.js</code>文件</li><li>在<code>index.js</code>中配置路由信息</li><li>在<code>index.js</code>中创建路由器并导出</li><li>在<code>main.js</code>中使用路由</li><li>在相应的页面使用<code>router-link</code>和<code>router-view</code>完成路由功能</li></ol><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><code>router/index.js</code>内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.配置路由信息</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../views/home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dog <span class="keyword">from</span> <span class="string">&quot;../views/dog.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createMemoryHistory, createRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//定义路由规则，将路由与对应页面绑定</span></span><br><span class="line"><span class="comment">//有如下两种路由定义的写法</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>: home&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/dog&#x27;</span>,<span class="attr">component</span>: dog&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/cat&quot;</span>,<span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;../views/cat.vue&#x27;</span>)&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">        <span class="attr">history</span>: <span class="title function_">createMemoryHistory</span>(),</span><br><span class="line">        routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出路由，供main.js使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><code>main.js</code>内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router/index.js&quot;</span>;</span><br><span class="line"><span class="comment">//4.注册路由插件,使用use(xx)</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>App.vue</code>内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 使用组件 RouterLink 来创建链接 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;首页Home&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/dog&quot;&gt;dog页面&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/cat&quot;&gt;cat页面&lt;/router-link&gt;</span><br><span class="line">    &lt;!-- RouterView 组件可以使 Vue Router 知道你想要在哪里渲染当前 URL 路径对应的路由组件 --&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><p>使用 <code>:变量名</code>接受动态参数；这个成为 <em>路径参数</em>，类似与<code>Spring MVC</code>中的<code>path variable</code></p><p><code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.配置路由信息</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../views/home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dog <span class="keyword">from</span> <span class="string">&quot;../views/dog.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createMemoryHistory, createRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//定义路由规则，将路由与对应页面绑定</span></span><br><span class="line"><span class="comment">//有如下两种路由定义的写法</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>: home&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/dog&#x27;</span>,<span class="attr">component</span>: dog&#125;,</span><br><span class="line">    <span class="comment">//这样使用路由 /cat/11或者/cat/jkk或者/cat/xxx均指向的是cat.vue页面组件</span></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/cat:id&quot;</span>,<span class="attr">component</span>:<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;../views/cat.vue&#x27;</span>)&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">        <span class="attr">history</span>: <span class="title function_">createMemoryHistory</span>(),</span><br><span class="line">        routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出路由，供main.js使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>多级路由嵌套，比如从父页面跳转到子页面，再从子页面可以到孙页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由编写规则</span></span><br><span class="line"><span class="comment">//1.配置路由信息</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../views/home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dog <span class="keyword">from</span> <span class="string">&quot;../views/dog.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createMemoryHistory, createRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&quot;../views/user.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> userEmail <span class="keyword">from</span> <span class="string">&quot;../views/userEmail.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> userDetail <span class="keyword">from</span> <span class="string">&quot;../views/userDetail.vue&quot;</span>;</span><br><span class="line"><span class="comment">//定义路由规则，将路由与对应页面绑定</span></span><br><span class="line"><span class="comment">//有如下两种路由定义的写法</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,<span class="attr">component</span>: home&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: user,</span><br><span class="line">        <span class="attr">children</span>: [ <span class="comment">//嵌套子页面</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 当 /user/:id/email 匹配成功</span></span><br><span class="line">                <span class="comment">// userEmail 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;email&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: userEmail,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 当 /user/:id/detail 匹配成功</span></span><br><span class="line">                <span class="comment">// userDetail 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: userDetail,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">        <span class="attr">history</span>: <span class="title function_">createMemoryHistory</span>(),</span><br><span class="line">        routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出路由，供main.js使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h3><h4 id="useRoute：路由数据"><a href="#useRoute：路由数据" class="headerlink" title="useRoute：路由数据"></a>useRoute：路由数据</h4><p>路由传参跳转到指定页面后，页面需要取到传递过来的值，可以使用 <code>useRoute</code>方法，拿到当前页路由数据；可以做</p><ul><li>获取到当前路径</li><li>获取到组件名</li><li>获取到参数</li><li>获取到查询字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印query参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br><span class="line"><span class="comment">// 打印params参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">params</span>)</span><br></pre></td></tr></table></figure><h4 id="useRouter：路由器"><a href="#useRouter：路由器" class="headerlink" title="useRouter：路由器"></a>useRouter：路由器</h4><p>拿到路由器；可以控制跳转、回退等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute, useRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="comment">//push:跳到指定路由</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go(1) 相当于浏览器上的下一个页面</span></span><br><span class="line"><span class="comment">//go(-1) 相当于浏览器回滚到上一个页面</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute, useRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/users/eduardo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/eduardo&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立 url</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;eduardo&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带 hash，结果是 /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">hash</span>: <span class="string">&#x27;#team&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意： `params` 不能与 `path` 一起使用</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;) <span class="comment">//错误用法 -&gt; /user</span></span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="params-参数"><a href="#params-参数" class="headerlink" title="params 参数"></a>params 参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">        name:&#x27;xiang&#x27;, //用name跳转，params情况下，不可用path</span><br><span class="line">        params:&#123;</span><br><span class="line">          id:news.id,</span><br><span class="line">          title:news.title,</span><br><span class="line">          content:news.title</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><h4 id="query-参数"><a href="#query-参数" class="headerlink" title="query 参数"></a>query 参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;</span><br><span class="line">跳转</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    //name:&#x27;xiang&#x27;, //用name也可以跳转</span><br><span class="line">    path:&#x27;/news/detail&#x27;,</span><br><span class="line">    query:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>具体使用细节参照<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">导航守卫官方文档</a></p><p>类似于拦截器，再跳转到指定页面之前进行相应的逻辑处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import &#123;createRouter, createWebHistory&#125; from &#x27;vue-router&#x27;</span><br><span class="line">import HomeView from &#x27;../views/HomeView.vue&#x27;</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    history: createWebHistory(import.meta.env.BASE_URL),</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: &#x27;/&#x27;,</span><br><span class="line">            name: &#x27;home&#x27;,</span><br><span class="line">            component: HomeView</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &#x27;/about&#x27;,</span><br><span class="line">            name: &#x27;about&#x27;,</span><br><span class="line">            // route level code-splitting</span><br><span class="line">            // this generates a separate chunk (About.[hash].js) for this route</span><br><span class="line">            // which is lazy-loaded when the route is visited.</span><br><span class="line">            component: () =&gt; import(&#x27;../views/AboutView.vue&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &#x27;/user/:name&#x27;,</span><br><span class="line">            name: &#x27;User&#x27;,</span><br><span class="line">            component: () =&gt; import(&#x27;@/views/user/UserInfo.vue&#x27;),</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: &#x27;profile&#x27;,</span><br><span class="line">                    component: () =&gt; import(&#x27;@/views/user/Profile.vue&#x27;)</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: &#x27;posts&#x27;,</span><br><span class="line">                    component: () =&gt; import(&#x27;@/views/user/Posts.vue&#x27;)</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(async (to, from) =&gt; &#123;</span><br><span class="line">    console.log(&quot;守卫：to：&quot;, to)</span><br><span class="line">    console.log(&quot;守卫：from：&quot;, from)</span><br><span class="line">    if (to.fullPath === &#x27;/about&#x27;) &#123;</span><br><span class="line">       return &quot;/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h3 id="vue-router总结"><a href="#vue-router总结" class="headerlink" title="vue-router总结"></a>vue-router总结</h3><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712842500600-cd5098c4-2c44-4932-867b-1db92c5aa2bb.webp" alt="未命名绘图001.png"></p><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><a href="https://www.axios-http.cn/docs/intro">Axios官方文档</a></p><p>Axios 是一个基于 promise 的网络请求库，可以用于浏览器和 node.js，主要用于前端向后端请求数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//安装</span><br><span class="line">npm install axios</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//基本用法</span><br><span class="line">import axios from &quot;axios&quot;</span><br><span class="line">axios.get(&#x27;/user&#x27;)</span><br><span class="line">     .then(res =&gt; console.log(resp.data))</span><br></pre></td></tr></table></figure><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向给定ID的用户发起请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理成功情况</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理错误情况</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 总是会执行</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>携带请求参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上述请求也可以按以下方式完成（可选）</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 总是会执行</span></span><br><span class="line">  &#125;);  </span><br></pre></td></tr></table></figure><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><p>默认<code>post请求体</code>中的数据将会以<code>json</code>方式提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>响应的数据结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  <span class="attr">statusText</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是服务器响应头</span></span><br><span class="line">  <span class="comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span></span><br><span class="line">  <span class="comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `config` 是 `axios` 请求的配置信息</span></span><br><span class="line">  <span class="attr">config</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `request` 是生成此响应的请求</span></span><br><span class="line">  <span class="comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span></span><br><span class="line">  <span class="comment">// 在浏览器中则是 XMLHttpRequest 实例</span></span><br><span class="line">  <span class="attr">request</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可用的配置项如下：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 它只能用于 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream</span></span><br><span class="line">  <span class="comment">// 你可以修改请求头。</span></span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">    <span class="comment">// 对发送的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 对接收的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义请求头</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个简单对象或 URLSearchParams 对象</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `paramsSerializer`是可选方法，主要用于序列化`params`</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  <span class="attr">paramsSerializer</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Qs</span>.<span class="title function_">stringify</span>(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求体被发送的数据</span></span><br><span class="line">  <span class="comment">// 仅适用 &#x27;PUT&#x27;, &#x27;POST&#x27;, &#x27;DELETE 和 &#x27;PATCH&#x27; 请求方法</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属: FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属: Stream, Buffer</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送请求体数据的可选语法</span></span><br><span class="line">  <span class="comment">// 请求方式 post</span></span><br><span class="line">  <span class="comment">// 只有 value 会被发送，key 则不会</span></span><br><span class="line">  <span class="attr">data</span>: <span class="string">&#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数。</span></span><br><span class="line">  <span class="comment">// 如果请求时间超过 `timeout` 的值，则请求会被中断</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>, <span class="comment">// 默认值是 `0` (永不超时)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，这使测试更加容易。</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span></span><br><span class="line">  <span class="attr">adapter</span>: <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `auth` HTTP Basic Auth</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;janedoe&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;s00pers3cret&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseType` 表示浏览器将要响应的数据类型</span></span><br><span class="line">  <span class="comment">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  <span class="comment">// 浏览器专属：&#x27;blob&#x27;</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span></span><br><span class="line">  <span class="comment">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">  <span class="attr">responseEncoding</span>: <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span></span><br><span class="line">  <span class="attr">xsrfCookieName</span>: <span class="string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span></span><br><span class="line">  <span class="attr">xsrfHeaderName</span>: <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  <span class="attr">onUploadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  <span class="attr">onDownloadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span></span><br><span class="line">  <span class="attr">maxContentLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span></span><br><span class="line">  <span class="attr">maxBodyLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span></span><br><span class="line">  <span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line">  <span class="comment">// 则promise 将会 resolved，否则是 rejected。</span></span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认值</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span></span><br><span class="line">  <span class="comment">// 如果设置为0，则不会进行重定向</span></span><br><span class="line">  <span class="attr">maxRedirects</span>: <span class="number">5</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span></span><br><span class="line">  <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span></span><br><span class="line">  <span class="comment">// 只能指定 `socketPath` 或 `proxy` 。</span></span><br><span class="line">  <span class="comment">// 若都指定，这使用 `socketPath` 。</span></span><br><span class="line">  <span class="attr">socketPath</span>: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span></span><br><span class="line">  <span class="comment">// and https requests, respectively, in node.js. This allows options to be added like</span></span><br><span class="line">  <span class="comment">// `keepAlive` that are not enabled by default.</span></span><br><span class="line">  <span class="attr">httpAgent</span>: <span class="keyword">new</span> http.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `proxy` 定义了代理服务器的主机名，端口和协议。</span></span><br><span class="line">  <span class="comment">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span></span><br><span class="line">  <span class="comment">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span></span><br><span class="line">  <span class="comment">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span></span><br><span class="line">  <span class="comment">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// see https://axios-http.com/zh/docs/cancellation</span></span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> (<span class="params">cancel</span>) &#123;</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `decompress` indicates whether or not the response body should be decompressed </span></span><br><span class="line">  <span class="comment">// automatically. If set to `true` will also remove the &#x27;content-encoding&#x27; header </span></span><br><span class="line">  <span class="comment">// from the responses objects of all decompressed responses</span></span><br><span class="line">  <span class="comment">// - Node only (XHR cannot turn off decompression)</span></span><br><span class="line">  <span class="attr">decompress</span>: <span class="literal">true</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="pina"><a href="#pina" class="headerlink" title="pina"></a>pina</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><a href="https://pinia.vuejs.org/zh/introduction.html">官方文档</a></p><p><strong>Pinia</strong> 是 Vue 的<strong>存储库</strong>，它允许您<strong>跨组件/页面共享状态</strong>。<br>背景：</p><p>对于一个web页面，用户登录之后，其他各个组件需要使用用户的信息，这个时候我们可以使用前面讲过的<code>vue-router</code>路由传参或者<code>vue</code>组件传值的方式来进行数据传输，但是这两个方式比较繁琐，所以需要引入pinia，来进行库组件数据共享。</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240611225430746.png" alt="image-20240611225430746" style="zoom: 33%;"></p><p>Pinia 三个核心概念：</p><ul><li>State：表示 Pinia Store 内部保存的数据（data）</li><li>Getter：可以认为是 Store 里面数据的计算属性（computed）</li><li>Actions：是暴露修改数据的几种方式。</li></ul><p><strong><em>虽然外部也可以直接读写Pinia Store 中保存的data，但是我们建议使用Actions暴露的方法操作数据更加安全</em></strong>。</p><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/1712928014360-66fb4f45-471c-443b-be5d-6ca43778f7fe.png" alt="img"></p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><h5 id="安装pinia"><a href="#安装pinia" class="headerlink" title="安装pinia"></a>安装pinia</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm</span><br></pre></td></tr></table></figure><h5 id="main-js-1"><a href="#main-js-1" class="headerlink" title="main.js"></a>main.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="comment">//创建一个 pinia 实例 (根 store) 并将其传递给应用</span></span><br><span class="line"><span class="keyword">const</span> pina = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(pina).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="定义存储单元"><a href="#定义存储单元" class="headerlink" title="定义存储单元"></a>定义存储单元</h5><p>在<code>store/money.js</code>中编写如下内容，定义存储单元</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> moneyStore = <span class="title function_">defineStore</span>(<span class="string">&quot;money&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>(&#123;<span class="string">&quot;money&quot;</span>:<span class="number">100</span>&#125;),</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="comment">//人名币</span></span><br><span class="line">        <span class="attr">rmb</span>:<span class="function">(<span class="params">state</span>)=&gt;</span>state[<span class="string">&quot;money&quot;</span>],</span><br><span class="line">        <span class="comment">//美元</span></span><br><span class="line">        <span class="attr">usb</span>:<span class="function">(<span class="params">state</span>)=&gt;</span>state[<span class="string">&quot;money&quot;</span>]*<span class="number">6</span>,</span><br><span class="line">        <span class="comment">//欧元</span></span><br><span class="line">        <span class="attr">er</span>:<span class="function">(<span class="params">state</span>)=&gt;</span>state[<span class="string">&quot;money&quot;</span>]*<span class="number">11</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">win</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="string">&quot;money&quot;</span>]+=args</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">pay</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="string">&quot;money&quot;</span>]-=args</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="组件中使用存储单元"><a href="#组件中使用存储单元" class="headerlink" title="组件中使用存储单元"></a>组件中使用存储单元</h5><p><code>showMoney.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;账户余额&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;人名币:&#123;&#123;money.rmb&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;美元:&#123;&#123;money.usb&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;欧元:&#123;&#123;money.er&#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;moneyStore&#125; from &quot;../store/money.js&quot;;</span><br><span class="line"></span><br><span class="line">let money = moneyStore()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  div&#123;</span><br><span class="line">    color: #888888;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>actionMoney.vue</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;guaguale&quot;</span>&gt;</span>刮刮乐<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;shop&quot;</span>&gt;</span>购物<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123;moneyStore&#125; <span class="keyword">from</span> <span class="string">&quot;../store/money.js&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> money = <span class="title function_">moneyStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">guaguale</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    money.<span class="title function_">win</span>(<span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">shop</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    money.<span class="title function_">pay</span>(<span class="number">10</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ActionMoney</span> <span class="keyword">from</span> <span class="string">&quot;./components/actionMoney.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShoMoney</span> <span class="keyword">from</span> <span class="string">&quot;./components/shoMoney.vue&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">sho-money</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">action-money</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/06/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%B7%A5%E7%A8%8B%E5%8C%96/image-20240611232311652.png" alt="image-20240611232311652" style="zoom:50%;"></p><h3 id="Setup-Store"><a href="#Setup-Store" class="headerlink" title="Setup Store"></a>Setup Store</h3><p>也存在另一种定义 store 的可用语法。与 Vue 组合式 API 的 <a href="https://cn.vuejs.org/api/composition-api-setup.html">setup 函数</a> 相似，我们可以传入一个函数，该函数定义了一些响应式属性和方法，并且返回一个带有我们想暴露出去的属性和方法的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;computed, ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export const moneyStore = defineStore(&quot;money&quot;,&#123;</span></span><br><span class="line"><span class="comment">//     state:()=&gt;(&#123;&quot;money&quot;:100&#125;),</span></span><br><span class="line"><span class="comment">//     getters:&#123;</span></span><br><span class="line"><span class="comment">//         //人名币</span></span><br><span class="line"><span class="comment">//         rmb:(state)=&gt;state[&quot;money&quot;],</span></span><br><span class="line"><span class="comment">//         //美元</span></span><br><span class="line"><span class="comment">//         usb:(state)=&gt;state[&quot;money&quot;]*6,</span></span><br><span class="line"><span class="comment">//         //欧元</span></span><br><span class="line"><span class="comment">//         er:(state)=&gt;state[&quot;money&quot;]*11</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     actions:&#123;</span></span><br><span class="line"><span class="comment">//         win(args)&#123;</span></span><br><span class="line"><span class="comment">//             this[&quot;money&quot;]+=args</span></span><br><span class="line"><span class="comment">//         &#125;,</span></span><br><span class="line"><span class="comment">//         pay(args)&#123;</span></span><br><span class="line"><span class="comment">//             this[&quot;money&quot;]-=args</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> moneyStore = <span class="title function_">defineStore</span>(<span class="string">&quot;money&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> money=<span class="title function_">ref</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">const</span> rmb = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>money.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">const</span> usb = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>money.<span class="property">value</span>*<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">const</span> er = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>money.<span class="property">value</span>*<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">win</span> = (<span class="params">arg</span>)=&gt;&#123;</span><br><span class="line">        money.<span class="property">value</span>+=arg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">pay</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">        money.<span class="property">value</span>-=arg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;money,rmb,usb,er,win,pay&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite  # 选择 使用 create-vue 自定义项目</span><br><span class="line">npm create vue@latest  # 直接使用create-vue 创建项目,会自动整合好vue-router和pinia、Axios等工具链，无需额外下载相关雨来</span><br><span class="line">vue-cli #已经过时</span><br></pre></td></tr></table></figure><h2 id="Ant-Design-Vue"><a href="#Ant-Design-Vue" class="headerlink" title="Ant Design Vue"></a>Ant Design Vue</h2><p><a href="https://www.antdv.com/components/overview">官方文档</a></p><p>一个第三方UI组件库，提供了许多漂亮的UI组件，可以直接引用，快速进行相关页面的开发</p><p>使用 <code>npm create vue@latest</code> 创建出项目脚手架，然后整合<code>ant design vue</code></p><h3 id="整合ant-design-vue"><a href="#整合ant-design-vue" class="headerlink" title="整合ant design vue"></a>整合ant design vue</h3><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save ant-design-vue@4.x</span><br></pre></td></tr></table></figure><p>全局注册： 编写<code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Antd</span> <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;ant-design-vue/dist/reset.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Antd</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h4><p>各个组件的详细用法，参考官方文档示例</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.yuque.com/leifengyang/sutong/knn21ltyewyv6l7o">参考资料1</a></p><p><a href="https://www.bilibili.com/video/BV14t421M7CL?p=2&amp;spm_id_from=pageDriver&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">参考资料2</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka的安装与快速使用</title>
      <link href="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/"/>
      <url>/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka的安装与快速使用"><a href="#Kafka的安装与快速使用" class="headerlink" title="Kafka的安装与快速使用"></a>Kafka的安装与快速使用</h1><p><a href="https://kafka.apache.org/">Kafka官网</a></p><p>kafa是一个基于<code>zookeeper</code>的分布式消息系统，具有高吞吐率、高性能、实时以及高可靠的特点</p><h2 id="Kafka安装"><a href="#Kafka安装" class="headerlink" title="Kafka安装"></a>Kafka安装</h2><p><a href="https://kafka.apache.org/downloads">Kafka下载地址</a>   <a href="https://zookeeper.apache.org/releases.html">zookeeper下载地址</a></p><blockquote><p>环境需求：以下操作在: VMware+Centos7环境下进行</p><p>前置依赖：JDK8</p><p>安装版本：kafka_2.11-2.0.0、zookeeper-3.4.12</p></blockquote><p>下载kafka和zookeeper对应安装包，上传至虚拟机</p><p>文件上传我们可以采用第三方工具<code>WinSCP</code>，也可以文件传输的命令行工具<code>rz</code>、<code>sz</code></p><h3 id="安装lrzsz"><a href="#安装lrzsz" class="headerlink" title="安装lrzsz"></a>安装lrzsz</h3><p>rz，sz是Linux/Unix同Windows进行ZModem文件传输的命令行工具，rz 可以很方便的从客户端传文件到服务器，sz也可以很方便的从服务器传文件到客户端</p><p>yum方式安装:<code>yum install -y lrzsz</code></p><p><strong>从客户端上传文件</strong></p><p>直接在<code>ssh连接工具</code>某个路径下命令行输入<code>rz</code>，则会弹出文件选择按钮，</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524100114750.png" alt="image-20240524100114750" style="zoom:67%;"></p><p><strong>从服务器端下载文件</strong></p><p>直接在<code>ssh连接工具</code>中输入<code>sz xxx</code>，会弹出选择框，将服务器端文件<code>xxx</code>下载到客户端本地的某个位置</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524100242243.png" alt="image-20240524100242243" style="zoom:67%;"></p><h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><p>我们将下载的安装包<code>zookeeper-3.4.12.tar.gz</code>上传至服务器，然后解压至某个目录，解压直接执行<code>tar -zxvf zookeeper-3.4.12.tar.gz -C 目标目录</code></p><p><strong>修改zookeeper配置文件</strong></p><p><code>zookeeper</code>默认配置文件为<code>zoo.cfg</code>，他只提供了一个配置文件样例<code>zoo_sample.cfg</code>，所以我们需要对其进行拷贝，创建配置文件<code>zoo.cfg</code></p><p><code>cp zoo_sample.cfg zoo.cfg</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524100822946.png" alt="image-20240524100822946"></p><p>然后对<code>zoo.cfg</code>文件进行一些修改，一般只需关注于下面三个配置即可</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524101550892.png" alt="image-20240524101550892"></p><p><strong>启动 zookeeper</strong></p><p>切换至<code>bin</code>目录，执行<code>zkServer.sh start</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524101817665.png" alt="image-20240524101817665"></p><p><strong>查看状态</strong></p><p><code>zkServer.sh status</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524101937219.png" alt="image-20240524101937219"></p><p><strong>关闭服务</strong></p><p><code>zkServer.sh stop</code></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524102033493.png" alt="image-20240524102033493"></p><h3 id="安装kafka"><a href="#安装kafka" class="headerlink" title="安装kafka"></a>安装kafka</h3><p>我们将下载的安装包<code>kafka_2.11-2.0.0.tgz</code>上传至服务器，然后解压至某个目录，解压直接执行<code>tar -zxvf kafka_2.11-2.0.0.tgz -C 目标目录</code></p><p><strong>修改kafka配置文件</strong></p><p>主要的配置文件为<code>config/server.properties</code></p><p>几个重要的配置为：</p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524102634821.png" alt="image-20240524102634821"></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524103126185.png" alt="image-20240524103126185"></p><p><img src="/2024/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/kafka/01%20kafka%E5%85%A5%E9%97%A8/image-20240524103311380.png" alt="image-20240524103311380"></p><h2 id="Kafka简单使用"><a href="#Kafka简单使用" class="headerlink" title="Kafka简单使用"></a>Kafka简单使用</h2><h3 id="Kafka基本概念"><a href="#Kafka基本概念" class="headerlink" title="Kafka基本概念"></a>Kafka基本概念</h3><p><strong>Topic</strong></p><p>虚拟的概念，消息存放的地方，由1到多个Partitions组成</p><p><strong>Partition</strong></p><p>实际消息存储单位</p><p><strong>Producer</strong></p><p>消息生产者</p><p><strong>Consumer</strong></p><p>消息消费者</p><h3 id="Kafka常用命令"><a href="#Kafka常用命令" class="headerlink" title="Kafka常用命令"></a>Kafka常用命令</h3><p>在操作<code>kafka</code>之前需要首先启动<code>zookeeper</code></p><h4 id="启动Kafka"><a href="#启动Kafka" class="headerlink" title="启动Kafka"></a><strong>启动Kafka</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure><h4 id="停止Kafka"><a href="#停止Kafka" class="headerlink" title="停止Kafka"></a>停止Kafka</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure><h4 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建Topic</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic bang-topic</span><br></pre></td></tr></table></figure><h4 id="查看已经创建的Topic信息"><a href="#查看已经创建的Topic信息" class="headerlink" title="查看已经创建的Topic信息"></a>查看已经创建的Topic信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list 192.168.59.128:9092 --topic bang-topic</span><br></pre></td></tr></table></figure><h4 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server 192.168.59.128:9092 --topic bang-topic --from-beginning</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm快捷键</title>
      <link href="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/01%20pycharm%E5%BF%AB%E6%8D%B7/"/>
      <url>/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/01%20pycharm%E5%BF%AB%E6%8D%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="pycharm快捷键"><a href="#pycharm快捷键" class="headerlink" title="pycharm快捷键"></a>pycharm快捷键</h1><p>可以通过安装插件形式，使用其他软件快捷键，比如Eclipse或者VSCode快捷键</p><p>下面介绍的是安装Eclipse快捷键形式</p><p>Alt+鼠标：可以查看指定函数的源码</p><p>Alt+右键：切换到下一步代码位置</p><p>Alt+左键：切换到上一步代码位置</p><p>Alt+上建：当前行代码与其上一行代码位置互换</p><p>Alt+下键：当前代码与其下一行代码位置互换</p><p>Ctrl+d：删除当前行代码</p><p>ctrl+f：全局搜索</p><p>ctrl+h：所有当前项目所有文件目录包括第三方库</p><p>home：光标跳到当前行行首</p><p>end：光标跳到当前行行尾</p><p>ctrl+o：查看当前文件里有哪些方法</p>]]></content>
      
      
      <categories>
          
          <category> pycharam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫概述</title>
      <link href="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫概述"><a href="#爬虫概述" class="headerlink" title="爬虫概述"></a>爬虫概述</h1><h2 id="爬虫的作用"><a href="#爬虫的作用" class="headerlink" title="爬虫的作用"></a>爬虫的作用</h2><ul><li>采集网络数据</li><li>自动化测试</li><li>实现一些脱离手动的操作，比如帮人投票、12306抢票、微信聊天助手</li><li>灰产，比如薅羊毛、网络攻击、做水军、刷单等</li></ul><h2 id="为什么要爬取数据-数据能做什么"><a href="#为什么要爬取数据-数据能做什么" class="headerlink" title="为什么要爬取数据(数据能做什么?)"></a>为什么要爬取数据(数据能做什么?)</h2><ul><li>聚合产品，比如新闻网站或者今日头条</li><li>搜索引擎，比如谷歌、百度</li><li>数据分析、人工智能的源数据</li><li>特定领域的数据服务，比如二手车估价、天气预报、去哪儿网等</li></ul><h2 id="爬虫的前置知识"><a href="#爬虫的前置知识" class="headerlink" title="爬虫的前置知识"></a>爬虫的前置知识</h2><ul><li>计算机网络协议，比如http/https协议、tcp/ip协议、socket编程</li><li>一定的前端基础，不用太深入</li><li>正则表达式，主要是用来进行数据分析的</li><li>数据存储技术，比如分布式存储</li><li>并发处理技术，多线程、多进程、线程池等技术</li><li>图像识别（解决验证码反爬），机器学习算法（验证码、数据分析等后续操作）</li></ul><h2 id="爬虫中的难点问题"><a href="#爬虫中的难点问题" class="headerlink" title="爬虫中的难点问题"></a>爬虫中的难点问题</h2><ul><li>爬虫的采集以及更新策略</li><li>解决反爬</li><li>数据解析</li><li>海量数据存储</li><li>模拟登录（验证码识别）</li><li>爬虫的监控和部署</li><li>数据的去重，比如url去重、内容去重</li></ul><h2 id="爬虫中需要的网络知识"><a href="#爬虫中需要的网络知识" class="headerlink" title="爬虫中需要的网络知识"></a>爬虫中需要的网络知识</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240514221103540.png" alt="image-20240514221103540" style="zoom:33%;"></p><p>问题一：为什么服务器不会随便封禁ip或者ip段</p><p>原因主要有以下两点：</p><ul><li>DHCP，动态ip，我们日常的ip地址基本都是动态ip(静态ip需要花钱去买)，同一台及其可能每天的ip都不一样</li><li>局域网，整个局域网可能对外只会存在一个公网ip，如果封禁，会导致整个局域网内所有用户均无法访问</li></ul><p>url协议</p><p>其他概念比较熟悉，了解锚点的概念，可以定位到同一页面的某个位置</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240514222633684.png" alt="image-20240514222633684" style="zoom:50%;"></p><p>Socket编程</p><p>了解即可</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240514224618291.png" alt="image-20240514224618291" style="zoom:33%;"></p><p>注意：recv、accept等方法都是阻塞式方式</p><h2 id="前端知识"><a href="#前端知识" class="headerlink" title="前端知识"></a>前端知识</h2><p>html（网页基础骨架）+css（网页装饰）+js（网页交互）</p><p>浏览器加载过程：</p><p>​                                                         <img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515095945789.png" alt="image-20240515095945789" style="zoom:50%;"> </p><p>dom树:</p><p>可以根据dom树定位特定元素节点，javaScript操控html本质就是通过dom树来实现的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515100145565.png" alt="image-20240515100145565" style="zoom:50%;"></p><p> 了解标签选择器、id选择器和class选择器的概念，很多动态网页都是依靠js来动态生成的html</p><p>AJAX &amp; json &amp; xml</p><p>AJAX = 异步JavaScript+XML</p><p>AJAX是一种无需重新加载整个页面的情况下，能够更新部分网页的技术</p><p>json和xml的产生背景：</p><ul><li>跨语言的数据格式 （不同语言编写服务之间的数据传输问题） </li><li>可以通过响应头 content-type字段指明数据为json格式</li></ul><p>jquery等框架都提供了对应API去构造AJAX请求</p><p>动态网页 vs 静态网页</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515103310799.png" alt="image-20240515103310799" style="zoom:50%;"></p><p>GET VS POST请求</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515104424712.png" alt="image-20240515104424712" style="zoom:50%;"></p><p>  数据传输格式 content-type</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515104549040.png" alt="image-20240515104549040" style="zoom:50%;"></p><pre><code>                          &lt;img src=&quot;02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515104635902.png&quot; alt=&quot;image-20240515104635902&quot; style=&quot;zoom:50%;&quot; /&gt;</code></pre><p>前端数据提交方式：</p><ul><li>form表单的submit</li><li>js监听事件的方式</li><li>button按钮点击事件的方式</li><li>js发送AJAX请求的方式</li></ul><h2 id="爬虫数据采集分类"><a href="#爬虫数据采集分类" class="headerlink" title="爬虫数据采集分类"></a>爬虫数据采集分类</h2><p>按照采集对象分类：</p><ul><li>全网采集：一般只有搜索引擎浏览器才会这么做</li><li>全站采集：对某个网站所以数据采集，一般需求也不多</li><li>具体网站指定数据采集：这种需求最多，一般应用只会对网站的某个具体数据感兴趣</li></ul><p>按照采集方案分类：</p><ul><li>利用http协议采集—页面分析</li><li>利用api接口采集—app数据采集</li><li>利用目标网站的api采集—微博、github、twitter、facebook等，这些大型网站用于一般有开放的api平台，可以供第三方开发者扩展使用</li></ul><p>对于99%以上的网站都不会对外提供api，所以绝大多数情况只能利用http请求，对网页进行分析</p><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><p><a href="https://requests.readthedocs.io/projects/cn/zh-cn/latest/user/quickstart.html">requests库的官方文档</a></p><p>知道如何构造请求、伪造请求头、获取请求、解析请求，详细教程参考官方文档即可</p><h2 id="数据解析手段"><a href="#数据解析手段" class="headerlink" title="数据解析手段"></a>数据解析手段</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式语法参照<a href="https://www.runoob.com/regexp/regexp-syntax.html">菜鸟教程 正则表达式 - 教程</a></p><p>python提供了<code>re</code>来进行正则化操作，具体用法参照<a href="https://www.runoob.com/python/python-reg-expressions.html">菜鸟教程-Python 正则表达式</a>，可以实现替换、搜索、提取数据的功能</p><h3 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a>beautifulsoup</h3><p>python中用于解析html的库</p><p><a href="https://beautifulsoup.cn/">beautifulsoup中文文档</a></p><h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><p>*XPath 是一门在 XML 文档中查找信息的语言。，<a href="https://www.runoob.com/xpath/xpath-intro.html">Xpath详细概念介绍</a></p><p><a href="https://www.bilibili.com/video/BV1MZ421H74V/?p=13&amp;spm_id_from=pageDriver&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">视频教程</a>，讲的比较好</p><p>python中支持xPath的库：</p><ul><li>lxml：文档不友好，不推荐</li><li>scrapy selector：是对lxml的再次封装<ul><li><a href="https://scrapy-chs.readthedocs.io/zh-cn/0.24/topics/selectors.html">scrapy官方文档</a></li></ul></li></ul><p>浏览器可以为我们自动生成想要的xpath表达式，流程如下图所示：</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515171015141.png" alt="image-20240515171015141" style="zoom:67%;"></p><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><p><a href="https://www.runoob.com/cssref/css-selectors.html">CSS选择器 菜鸟教程</a></p><p>在python中推荐使用scrapy中的Selector<a href="https://blog.csdn.net/dangsh_/article/details/78617178">,参考博客</a></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515194946491.png" alt="image-20240515194946491" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515195029759.png" alt="image-20240515195029759" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/02%20%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/image-20240515195135282.png" alt="image-20240515195135282" style="zoom:50%;"></p><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫进阶</title>
      <link href="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/"/>
      <url>/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫进阶"><a href="#爬虫进阶" class="headerlink" title="爬虫进阶"></a>爬虫进阶</h1><p>爬虫一定要找最新的教程，因为网站更新速度很快，老版教程很可能会过时，一些案例基本无法复现</p><h2 id="爬虫概述"><a href="#爬虫概述" class="headerlink" title="爬虫概述"></a>爬虫概述</h2><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240515215806526.png" alt="image-20240515215806526" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240515220426489.png" alt="image-20240515220426489" style="zoom: 50%;"></p><p>​                                    <img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240515220603409.png" alt="image-20240515220603409" style="zoom: 50%;"></p><h2 id="静态页面抓取："><a href="#静态页面抓取：" class="headerlink" title="静态页面抓取："></a>静态页面抓取：</h2><ol><li>获取构造需要抓取的所有url列表</li><li>遍历这个列表，使用request等抓取页面数据</li><li>使用xpath+Scrapy Selector或者Xpath+lxml的方式对抓取的页面内容进行解析<ol><li>xpath的编写可以借助浏览器来完成，选中对应元素右键点击copy as xpath</li></ol></li></ol><h2 id="request构造请求："><a href="#request构造请求：" class="headerlink" title="request构造请求："></a>request构造请求：</h2><ul><li>get请求：<ul><li>方式一：url+参数拼接方式</li><li>方式二：url+params形参的方式</li></ul></li><li>post请求<ul><li>许多登陆页面，需要通过构造post请求，提交信息，破除限制 </li><li>可以通过form-data或者json的形式提交数据</li></ul></li></ul><h2 id="模拟登陆场景："><a href="#模拟登陆场景：" class="headerlink" title="模拟登陆场景："></a>模拟登陆场景：</h2><p>许多网站必须登陆之后才能访问里面其他的页面</p><ol><li>通过抓包，找到登陆接口</li><li>编写代码请求登陆接口，传入正确的账号、密码等信息</li></ol><p>即使登陆之后，仍然可以访问其他页面吗？不一定，这时我们要关注后台的鉴权方式</p><p>后台的鉴权方式一般有两种：</p><ul><li>基于cookie+session的鉴权机制</li><li>基于Token的鉴权机制<ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516004458958.png" alt="image-20240516004458958" style="zoom:50%;"></li></ul></li></ul><p>如何初步判断是采用的哪种鉴权？</p><ul><li>form-data大概率是cookie+session</li><li>网站首页地址与登陆请求地址不一致，大概率是token鉴权</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516005245589.png" alt="image-20240516005245589" style="zoom:67%;"></p><h3 id="模拟登录中华网"><a href="#模拟登录中华网" class="headerlink" title="模拟登录中华网"></a>模拟登录中华网</h3><p>模拟登录、访问需要登录之后才能够访问的页面</p><ul><li>1发送登录请求</li><li>保存cookie信息</li><li>下次请求需要登录页面直接携带cookie信息</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">中华网账号 https://passport.china.com/</span><br><span class="line">username:17775990925</span><br><span class="line">password:a546245426</span><br></pre></td></tr></table></figure><p>通过抓包找到登录接口地址，注意这里用错误的账号或者密码，如果是正确的则会自动跳转，无法找出登录接口</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516102343020.png" alt="image-20240516102343020" style="zoom:80%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516102405228.png" alt="image-20240516102405228"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516102418641.png" alt="image-20240516102418641"></p><p>利用python构造请求模拟登录实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#url</span></span><br><span class="line">url = <span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://passport.china.com/logon&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#请求参数</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;17775990925&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;a546245426&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#模拟登录请求</span></span><br><span class="line"><span class="comment"># login_response = requests.post(url,data=params,headers=headers)</span></span><br><span class="line"><span class="comment"># print(login_response.content.decode(&quot;utf8&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(login_response.cookies)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">如何提取请求的cookie信息:</span></span><br><span class="line"><span class="string">    response.cookies</span></span><br><span class="line"><span class="string">如何解决利用cookie进行校验的访问请求:</span></span><br><span class="line"><span class="string">    方式一: </span></span><br><span class="line"><span class="string">        request.get(cookies=cookies)，利用参数让请求携带cookie信息,cookie字典格式</span></span><br><span class="line"><span class="string">    方式二:</span></span><br><span class="line"><span class="string">        请求头中携带,cookie以字符串格式</span></span><br><span class="line"><span class="string">        headers=&#123;</span></span><br><span class="line"><span class="string">            &quot;Cookie&quot;:cookie值</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    方式三：requests.session</span></span><br><span class="line"><span class="string">    利用:</span></span><br><span class="line"><span class="string">        requests.session()对象去发送请求，其会自动记住状态信息</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问其他页面,不携带cookie信息的话会自动跳转到登录页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式一：以字典的形式传递</span></span><br><span class="line"><span class="comment"># url = &quot;https://passport.china.com&quot;</span></span><br><span class="line"><span class="comment"># response = requests.get(url,headers=headers,cookies=login_response.cookies)</span></span><br><span class="line"><span class="comment"># print(response.content.decode())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：以字符串的形式传递</span></span><br><span class="line"><span class="comment">#这种cookie来源:直接从浏览器复制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># headers[&quot;Cookie&quot;]=&#x27;area_name=%E6%B9%96%E5%8C%97%E7%9C%81%E6%AD%A6%E6%B1%89%E5%B8%82; SESSION_COOKIE=46; Hm_lvt_cbec92dec763e6774898d6d85460f707=1715822413,1715828314; Hm_lpvt_cbec92dec763e6774898d6d85460f707=1715828314; nickname=china_2823hxfg16791058; lastlogindate=2024-05-16; lastlogintime=&quot;10:58:48&quot;; lastloginip=211.161.157.200; bindMobile=&quot;1@177*****925&quot;; CHINACOMID=218ab446-115d-4fbe-93fe-a5fd744593825; CP_USER=FKBo6w-aaDELXK1EnoT3DPk1faoTCuWOzIpsuaQNIsJWqiRz6o9drrZQMJZRRbngi7eJikd0sv41eZDrzksZGmumfJyC7TEP5dMN41%2F1QIHag0K39t%2FVBxzGqQTN85yGmV%2FbilYB7ulfPMYVXbF6aMqwUoU1rfChWCxyzGnnrK%2FgdpLc0L1F5tS7hOqvGEkrBP23Gu2Sd0E76gm7%2FHCqgRxwGcN7FXOpmlLJ6WjemIAiC44IuLq2ow%3D%3D; CP_USERINFO=4Gkk4uas%2FGU6V4cAn8Kr14YtZHaRsQ3bb0iKxhYvuaLYLT-rPEFbvbaQzjvqSKm2v8Fd1lQ14weg0PM1aAxGqjzFStaNWwdXEhS3Zzs0jusNqPIZSkWIUHBpa7NyrsBUv2O8QVvh3O4yqW9wAjnfpw%3D%3D; china_variable=jpEe7N32pYz8SAjCjL8fnh2eLZiI1D/EC6dYmS6/lLUOPrHJGj-IxLIHbACvhNcaC9z3Z8pi2hy0JtYoQGGXmsutg32di8lhAZaSKKJ8BFBt-lJZl7B3R-LY1hWhKpza; lastlogindate=2024-05-16; lastlogintime=&quot;10:58:48&quot;; lastloginip=211.161.157.200&#x27;</span></span><br><span class="line"><span class="comment"># response = requests.get(url,headers=headers)</span></span><br><span class="line"><span class="comment"># print(response.content.decode())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三: requests.session</span></span><br><span class="line">login_url = <span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line">main_url = <span class="string">&quot;https://passport.china.com&quot;</span></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">session.post(login_url,data=params,headers=headers)</span><br><span class="line"><span class="comment">#访问其他页面,整个过程处于同一会话</span></span><br><span class="line">response = session.get(main_url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode())</span><br></pre></td></tr></table></figure><h2 id="Ajax异步数据"><a href="#Ajax异步数据" class="headerlink" title="Ajax异步数据"></a>Ajax异步数据</h2><p>背景：大对数网站采用前后端分离方式构建应用，数据都是通过Ajax请求异步加载获取的，直接请求目标网站的话，返回的内容中压根就没有任何数据</p><p>比如对于东方财富：<a href="https://quote.eastmoney.com/center">https://quote.eastmoney.com/center</a></p><p>浏览器抓包分析，发现页面数据根本不在请求返回的html文件中，他的数据都是通过异步请求得到的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516111515843.png" alt="image-20240516111515843"></p><p>对于这类型的网站，抓取数据的地址根本不是页面上的地址,因为html中压根就没有数据，我们要去分析其发送的AJAX请求，获取对应的URL，然后去抓取对应的数据</p><h3 id="异步数据抓取案例"><a href="#异步数据抓取案例" class="headerlink" title="异步数据抓取案例"></a>异步数据抓取案例</h3><p>我们选取<a href="https://careers.tencent.com/home.html">腾讯招聘</a>网站作为爬取目标，我们可以发现它的网站职位数据就是异步加载的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516144559312.png" alt="image-20240516144559312"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">url:https://careers.tencent.com/tencentcareer/api/post/Query</span></span><br><span class="line"><span class="string">请求参数:</span></span><br><span class="line"><span class="string">    timestamp: 1715841296996</span></span><br><span class="line"><span class="string">    countryId:</span></span><br><span class="line"><span class="string">    cityId:</span></span><br><span class="line"><span class="string">    bgIds:</span></span><br><span class="line"><span class="string">    productId:</span></span><br><span class="line"><span class="string">    categoryId:</span></span><br><span class="line"><span class="string">    parentCategoryId:</span></span><br><span class="line"><span class="string">    attrId:</span></span><br><span class="line"><span class="string">    keyword:</span></span><br><span class="line"><span class="string">    pageIndex: 1</span></span><br><span class="line"><span class="string">    pageSize: 10</span></span><br><span class="line"><span class="string">    language: zh-cn</span></span><br><span class="line"><span class="string">    area: cn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">base_url = <span class="string">&quot;https://careers.tencent.com/tencentcareer/api/post/Query&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>: <span class="number">1715841296996</span>,</span><br><span class="line">    <span class="string">&quot;countryId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cityId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bgIds&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;categoryId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parentCategoryId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attrId&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;keyword&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageIndex&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;zh-cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area&quot;</span>: <span class="string">&quot;cn&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#分页抓取:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可变的参数:</span></span><br><span class="line"><span class="string"> pageIndex以及timestamp</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> pageIndex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    params[<span class="string">&quot;timestamp&quot;</span>] = <span class="built_in">int</span>(time.time()*<span class="number">1000</span>)</span><br><span class="line">    params[<span class="string">&quot;pageIndex&quot;</span>] = pageIndex</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">10</span>,<span class="string">&quot;current pageInde:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(pageIndex),<span class="string">&quot;=&quot;</span>*<span class="number">10</span>)</span><br><span class="line">    response = requests.get(url=base_url,params=params)</span><br><span class="line">    <span class="comment">#转换为json格式</span></span><br><span class="line">    result_data = response.json()</span><br><span class="line">    job_count = result_data[<span class="string">&quot;Data&quot;</span>][<span class="string">&quot;Count&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> job_count==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    job_list = result_data[<span class="string">&quot;Data&quot;</span>][<span class="string">&quot;Posts&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> job <span class="keyword">in</span> job_list:</span><br><span class="line">        <span class="built_in">print</span>(job[<span class="string">&quot;RecruitPostName&quot;</span>])</span><br><span class="line"><span class="comment">#数据后续可以根据具体业务需求，保存在本地文件或者数据库中   </span></span><br></pre></td></tr></table></figure><h2 id="数据格式转换问题"><a href="#数据格式转换问题" class="headerlink" title="数据格式转换问题"></a>数据格式转换问题</h2><p>有些网站，我们抓取时，响应返回的数据形式比较复杂，我们如何从中快速提取想要的数据</p><p>对于非结构化数据：HTML</p><ul><li>用正则表达式、xpath等手段处理</li></ul><p>对于结构化数据：json、xml等</p><ul><li>直接转换为python类型</li></ul><h3 id="json模块"><a href="#json模块" class="headerlink" title="json模块"></a>json模块</h3><p>json.loads</p><ul><li>把json格式字符串解码转换成python对象，json数组对应列表、json对象对应字典</li><li>python中的None，在json中用null表示</li></ul><p>json.dumps</p><ul><li>实现把python类型转换为json字符串，返回一个str对象，是把python对象编码成json字符串</li><li>其序列化默认采用ascii编码</li><li>添加参数 ensure_ascii=False禁用ascii编码，按utf-8编码</li></ul><p><a href="https://blog.csdn.net/qq_37806690/article/details/137988296">python json转换参考资料</a></p><h3 id="jsonPath"><a href="#jsonPath" class="headerlink" title="jsonPath"></a>jsonPath</h3><p>正如XPath之于XML文档一样，JsonPath为Json文档提供了解析能力，通过使用JsonPath，你可以方便的查找节点、获取想要的数据，JsonPath是Json版的XPath</p><p>其用法基本跟xpath一致</p><p><a href="https://www.cnblogs.com/youring2/p/10942728.html">参考资料</a></p><p><a href="https://www.jianshu.com/p/3f5b9cc88bde">python jsonpath教程</a></p><h3 id="案例：jsonpath进行数据提取"><a href="#案例：jsonpath进行数据提取" class="headerlink" title="案例：jsonpath进行数据提取"></a>案例：jsonpath进行数据提取</h3><p>目标网站<a href="https://www.xfz.cn/">小饭桌</a>，我们提取各个咨询的标题、发布作者、发布事件信息</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516153253078.png" alt="image-20240516153253078"></p><p>其响应数据格式如下图所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">10918</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;智愈医疗完成超6000万元Pre-A++轮融资&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;photo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://static-image.xfz.cn/1715658195_783.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;photo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://static-image.xfz.cn/1552965456_492.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;authors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;author_id&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;饭桌君&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;is_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;article_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;融资消息&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;intro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;由辰德资本领投，联想之星跟投，老股东顺为资本、礼来亚洲基金、众海投资持续加注。凡卓资本担任本轮融资独家财务顾问。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-05-14 11:43:15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;智愈医疗&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们需要从中解析出我们想要的数据</p><p>我们首先抓包，分析其数据异步加载的接口以及对应的请求参数，分析不同分页url和请求参数的规律</p><p>其请求的数据</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516153515923.png" alt="image-20240516153515923"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516153529052.png" alt="image-20240516153529052"></p><p><strong>python代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;uid&quot;: 10874,</span></span><br><span class="line"><span class="string">    &quot;title&quot;: &quot;与微软合作，这家独角兽让GPT对中国企业开放了&quot;,</span></span><br><span class="line"><span class="string">    &quot;photo&quot;: &quot;https://static-image.xfz.cn/1708917564_964.jpg&quot;,</span></span><br><span class="line"><span class="string">    &quot;author&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;photo&quot;: &quot;https://static-image.xfz.cn/1693983197_842.jpg&quot;,</span></span><br><span class="line"><span class="string">        &quot;authors&quot;: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;author_id&quot;: 2295,</span></span><br><span class="line"><span class="string">                &quot;name&quot;: &quot;黄泽正&quot;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;is_original&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;article_type&quot;: &quot;热点&quot;,</span></span><br><span class="line"><span class="string">    &quot;intro&quot;: &quot;中国企业合法合规使用GPT的时代，终于来了。&quot;,</span></span><br><span class="line"><span class="string">    &quot;source&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">    &quot;time&quot;: &quot;2024-02-26 11:19:24&quot;,</span></span><br><span class="line"><span class="string">    &quot;keywords&quot;: [</span></span><br><span class="line"><span class="string">        &quot;GPT&quot;,</span></span><br><span class="line"><span class="string">        &quot;易点云&quot;,</span></span><br><span class="line"><span class="string">        &quot;IT综合解決方案供应商&quot;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&quot;https://www.xfz.cn/api/website/articles/&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;p&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;n&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    params[<span class="string">&quot;p&quot;</span>]=p</span><br><span class="line">    response = requests.get(url=base_url,params=params)</span><br><span class="line">    response_json = response.json()</span><br><span class="line">    <span class="comment">#提取感兴趣信息</span></span><br><span class="line">    <span class="comment">#文章标题</span></span><br><span class="line">    title_list = jsonpath.jsonpath(response_json,<span class="string">&quot;$..title&quot;</span>)</span><br><span class="line">    <span class="comment">#文章作者</span></span><br><span class="line">    author_list = jsonpath.jsonpath(response_json,<span class="string">&quot;$..author..name&quot;</span>)</span><br><span class="line">    <span class="comment">#发布时间</span></span><br><span class="line">    time_list = jsonpath.jsonpath(response_json,<span class="string">&quot;$..time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> title,author,time <span class="keyword">in</span> <span class="built_in">zip</span>(title_list,author_list,time_list):</span><br><span class="line">        <span class="built_in">print</span>(title,<span class="string">&quot;\t&quot;</span>,author,<span class="string">&quot;\t&quot;</span>,time)</span><br></pre></td></tr></table></figure><h2 id="视频抓取"><a href="#视频抓取" class="headerlink" title="视频抓取"></a>视频抓取</h2><h3 id="B站视频抓取"><a href="#B站视频抓取" class="headerlink" title="B站视频抓取"></a>B站视频抓取</h3><h4 id="资源抓取"><a href="#资源抓取" class="headerlink" title="资源抓取"></a>资源抓取</h4><p>B站视频的画面和音频是通过不同的url来异步请求获取，所以我们抓包分析得到画面和音频的请求链接，然后分别抓取画面和音频，最后在本地将两者合成视频文件</p><p>抓包分析，最开始的两个请求即为画面和音频资源请求</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516182906785.png" alt="image-20240516182906785"></p><h4 id="视频合成"><a href="#视频合成" class="headerlink" title="视频合成"></a>视频合成</h4><p>MoviePy是一个用于视频编辑的Python模块，它可以用于一些基本操作，比如剪切、拼接、插入标题、视频合成、视频处理和创建高级特效</p><p><a href="https://moviepy-cn.readthedocs.io/zh/latest/">官网教程</a></p><p><a href="https://zhuanlan.zhihu.com/p/680555324">参考博客</a></p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析：</span></span><br><span class="line"><span class="string">    对于B站而言，其视频和音频内容是分开请求的，最终的视频是由两者一起合成的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">注意:经过验证，如果不携带User-Agent和Referer这两个请求头，会直接返回403 forbidden</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>:<span class="string">&quot;https://www.bilibili.com/video/BV1Mp421m7Ck/?spm_id_from=333.1007.tianma.1-1-1.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url1=<span class="string">&quot;https://cn-hbwh-fx-01-13.bilivideo.com/upgcxcode/03/12/1475871203/1475871203-1-100026.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1715855097&amp;gen=playurlv2&amp;os=bcache&amp;oi=1939666239&amp;trid=00002988359d2ffb4c87ad295bbe92858e17u&amp;mid=503787920&amp;platform=pc&amp;upsig=9252145cbb94964367b3213d88a75b0f&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,mid,platform&amp;cdnid=3881&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;buvid=FEF21EE4-4208-C79B-80F6-27AC2A9BBD3459139infoc&amp;build=0&amp;f=u_0_0&amp;agrr=1&amp;bw=173938&amp;np=151388311&amp;logo=80000000&quot;</span></span><br><span class="line">url2=<span class="string">&quot;https://cn-hbwh-fx-01-12.bilivideo.com/upgcxcode/03/12/1475871203/1475871203-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1715855097&amp;gen=playurlv2&amp;os=bcache&amp;oi=1939666239&amp;trid=00002988359d2ffb4c87ad295bbe92858e17u&amp;mid=503787920&amp;platform=pc&amp;upsig=1d8cc071b206465e33d41d8e298308d9&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,mid,platform&amp;cdnid=1237&amp;bvc=vod&amp;nettype=0&amp;orderid=0,3&amp;buvid=FEF21EE4-4208-C79B-80F6-27AC2A9BBD3459139infoc&amp;build=0&amp;f=u_0_0&amp;agrr=1&amp;bw=20005&amp;np=151388311&amp;logo=80000000&quot;</span></span><br><span class="line"></span><br><span class="line">response1 = requests.get(url1,headers=headers)</span><br><span class="line">response2 = requests.get(url2,headers=headers)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;b站1.mp4&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response1.content)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;b站2.mp4&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response2.content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#合成视频:画面+音频</span></span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> ffmpeg_tools</span><br><span class="line">ffmpeg_tools.ffmpeg_merge_video_audio(<span class="string">&quot;b站1.mp4&quot;</span>,<span class="string">&quot;b站2.mp4&quot;</span>,<span class="string">&quot;b站.mp4&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="抖音视频抓取"><a href="#抖音视频抓取" class="headerlink" title="抖音视频抓取"></a>抖音视频抓取</h3><p>我们抓包分析，抖音各个视频的链接都是杂乱无规则的，所以无法用requests批量抓取，如果要批量抓取，只能模拟人来不断点击获取，这个就必须要用到自动化工具selenium了</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516184053032.png" alt="image-20240516184053032"></p><p>对于单个视频的下载比较简单，无任何其他的限制，直接发送请求即可获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;https://v3-weba.douyinvod.com/02263c98b4f10164f58047cc60b11827/6645f1ed/video/tos/cn/tos-cn-ve-15/osB7nDAWI4MQuoB8ECDoeGezOhEs4BbeV2AqM1/?a=6383&amp;ch=5&amp;cr=3&amp;dr=0&amp;lr=all&amp;cd=0%7C0%7C0%7C3&amp;cv=1&amp;br=1199&amp;bt=1199&amp;cs=0&amp;ds=3&amp;ft=kmz2Nvx2llUpoDtWsRdusEBOG4kbZ0Fl~z7avjZmpmPt188HKw9gHlcApW9w6x&amp;mime_type=video_mp4&amp;qs=0&amp;rc=aDk6Omc7ZjY7OTszN2c7Z0BpM3hnNGQ6Zmd4czMzNGkzM0BiLmBiXjZgX14xX2I0NTQ1YSMvYm1ycjRfMy5gLS1kLTBzcw%3D%3D&amp;btag=c0000e00030000&amp;cquery=101s_100B_100x_100z_100a&amp;dy_q=1715855997&amp;feature_id=f0150a16a324336cda5d6dd0b69ed299&amp;l=20240516183955A37ACE947DDB97002DEE&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;抖音.mp4&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure><p>单个视频url无任何规律，所以无法通过代码去批量构造，批量爬取的核心就在于如何批量获取视频的url列表</p><h2 id="selenium的使用"><a href="#selenium的使用" class="headerlink" title="selenium的使用"></a>selenium的使用</h2><p><a href="https://www.selenium.dev/zh-cn/documentation/webdriver/getting_started/">selenium</a>是一个Web的自动化测试工具，最初是为了网站自动化测试而开发的，其可以按照指定的指令自动操作，其可以直接运行在浏览器之上，它支持所有主流的浏览器，模拟人去手动操作浏览器</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们以<a href="https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81">领导留言板</a>这个网站为例，抓取里面的内容，通过抓包获取url，请求参数以及请求等信息，但还是会被拦截</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://liuyan.people.com.cn/v1/threads/list/df&quot;</span></span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">  <span class="string">&quot;appCode&quot;</span>: <span class="string">&quot;PC42ce3bfa4980a9&quot;</span>,</span><br><span class="line">  <span class="string">&quot;token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;signature&quot;</span>: <span class="string">&quot;315b4bdafbf17b3dbb6a48a244b67dff&quot;</span>,</span><br><span class="line">  <span class="string">&quot;param&quot;</span>: <span class="string">&quot;&#123;\&quot;fid\&quot;:\&quot;571\&quot;,\&quot;showUnAnswer\&quot;:1,\&quot;typeId\&quot;:5,\&quot;lastItem\&quot;:\&quot;\&quot;,\&quot;position\&quot;:\&quot;0\&quot;,\&quot;rows\&quot;:10,\&quot;orderType\&quot;:2&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;&quot;&quot;https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81&quot;&quot;&quot;</span></span><br><span class="line">            ,<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;__jsluid_s=4b575e53f2419a15d98413b3c2ade788; Hm_lvt_40ee6cb2aa47857d8ece9594220140f1=1715856547; language=zh-CN; deviceId=52e3892d-030a-4de8-8d77-c62c7c0a1a87; Hm_lpvt_40ee6cb2aa47857d8ece9594220140f1=1715856654&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers,data=params)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode())</span><br></pre></td></tr></table></figure><p>响应内容:</p><p>其网站内部设置了防护和反扒机制，单纯靠requests是无法处理的，所以这是我们就需要借助于Selenium，模拟人类登录网站的行为，来进行数据的抓取</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="keyword">\environment</span><span class="keyword">\anaconda</span>3<span class="keyword">\envs</span><span class="keyword">\scrap</span><span class="keyword">\python</span>.exe &quot;C:<span class="keyword">\bang</span><span class="keyword">\MyOwn</span><span class="keyword">\Java</span>重要知识点学习<span class="keyword">\BaiduSyncdisk</span><span class="keyword">\0</span>7 python网络爬虫<span class="keyword">\my</span><span class="built_in">_</span>code<span class="keyword">\ch</span>04-selenium<span class="keyword">\领</span>导留言板.py&quot; </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body&#123; background:<span class="params">#</span>eff1f0; font-family: microsoft yahei; color:<span class="params">#9</span>69696; font-size:12px;&#125;</span><br><span class="line">.online-desc-con &#123; text-align:center; &#125;</span><br><span class="line">.r-tip01 &#123; color: <span class="params">#9</span>69696; font-size: 16px; display: block; text-align: center; width: 600px; padding: 0 10px; overflow: hidden; text-overflow: ellipsis; margin: 0 auto 15px; &#125;</span><br><span class="line">.r-tip02 &#123; color: <span class="params">#</span>b1b0b0; font-size: 12px; display: block; margin-top: 20px; margin-bottom: 20px; &#125;</span><br><span class="line">.r-tip02 a:visited &#123; text-decoration: underline; color: <span class="params">#0</span>088CC; &#125;</span><br><span class="line">.r-tip02 a:link &#123; text-decoration: underline; color: <span class="params">#0</span>088CC; &#125;</span><br><span class="line">img &#123; border: 0; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;online-desc-con&quot; style=&quot;width:650px;padding-top:15px;margin:34px auto;&quot;&gt;</span><br><span class="line">    &lt;a id=&quot;official<span class="built_in">_</span>site&quot; href=&quot;http://www.365cyd.com&quot; target=&quot;<span class="built_in">_</span>blank&quot;&gt;</span><br><span class="line">        &lt;img id=&quot;wafblock&quot; alt=&quot;&quot; style=&quot;margin: 0 auto 17px auto;&quot; /&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;span class=&quot;r-tip01&quot; id=&quot;error<span class="built_in">_</span>403&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;r-tip01&quot; id=&quot;error<span class="built_in">_</span>403<span class="built_in">_</span>en&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;r-tip02&quot;&gt;如果您是网站管理员&lt;a href=&quot;http://help.365cyd.com/cyd-error-help.html?code=403&quot; target=&quot;<span class="built_in">_</span>blank&quot;&gt;点击这里&lt;/a&gt;查看详情&lt;/span&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;center&gt;client: &lt;span id=&quot;client<span class="built_in">_</span>ip&quot;&gt;&lt;/span&gt;, server: e85ed68, time: &lt;span id=&quot;time<span class="built_in">_</span>error&quot;&gt;&lt;/span&gt;&lt;span id=&quot;rule<span class="built_in">_</span>id&quot;&gt;&lt;/span&gt;&lt;/center&gt;</span><br><span class="line">    &lt;img alt=&quot;&quot; src=&quot;/cdn-cgi/image/logo.png&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    void(function fuckie6()&#123;if(location.hash <span class="built_in">&amp;</span><span class="built_in">&amp;</span> /MSIE 6/.test(navigator.userAgent) <span class="built_in">&amp;</span><span class="built_in">&amp;</span> !/jsl<span class="built_in">_</span>sec/.test(location.href))&#123;location.href = location.href.split(&#x27;<span class="params">#</span>&#x27;)[0] + &#x27;<span class="built_in">&amp;</span>jsl<span class="built_in">_</span>sec&#x27; + location.hash&#125;&#125;)();</span><br><span class="line">    var data = &#123;&quot;error<span class="built_in">_</span>403<span class="built_in">_</span>type&quot;:&quot;cli<span class="built_in">_</span>ip&quot;,&quot;error<span class="built_in">_</span>403&quot;:&quot;您的IP( 218.106.117.241 )最近有可疑的攻击行为，请稍后重试.&quot;,&quot;client<span class="built_in">_</span>ip&quot;:&quot;218.106.117.241&quot;,&quot;time<span class="built_in">_</span>error&quot;:&quot;16<span class="keyword">\/</span>May<span class="keyword">\/</span>2024:19:01:37 +0800&quot;,&quot;error<span class="built_in">_</span>403<span class="built_in">_</span>en&quot;:&quot;&quot;&#125;;</span><br><span class="line">    var rule<span class="built_in">_</span>id = parseInt(data[&#x27;rule<span class="built_in">_</span>id&#x27;]) || &#x27;&#x27;;</span><br><span class="line">    if (rule<span class="built_in">_</span>id != &#x27;&#x27;) &#123;</span><br><span class="line">        rule<span class="built_in">_</span>id = &#x27;[&#x27; + rule<span class="built_in">_</span>id + &#x27;]&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    document.getElementById(&quot;wafblock&quot;).src = &#x27;/cdn-cgi/image/&#x27; + (data[&#x27;error<span class="built_in">_</span>403<span class="built_in">_</span>type&#x27;] || &#x27;hacker&#x27;) + &#x27;.png&#x27;;</span><br><span class="line">    document.getElementById(&#x27;error<span class="built_in">_</span>403&#x27;).innerText = data[&#x27;error<span class="built_in">_</span>403&#x27;] || &#x27;当前访问疑似黑客攻击，已被创宇盾拦截。&#x27;;</span><br><span class="line">    document.getElementById(&#x27;error<span class="built_in">_</span>403<span class="built_in">_</span>en&#x27;).innerText = data[&#x27;error<span class="built_in">_</span>403<span class="built_in">_</span>en&#x27;];</span><br><span class="line">    document.getElementById(&#x27;client<span class="built_in">_</span>ip&#x27;).innerText = data[&#x27;client<span class="built_in">_</span>ip&#x27;];</span><br><span class="line">    document.getElementById(&#x27;time<span class="built_in">_</span>error&#x27;).innerText = data[&#x27;time<span class="built_in">_</span>error&#x27;];</span><br><span class="line">    document.getElementById(&#x27;rule<span class="built_in">_</span>id&#x27;).innerText = rule<span class="built_in">_</span>id;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用Selenium的一般流程"><a href="#使用Selenium的一般流程" class="headerlink" title="使用Selenium的一般流程"></a>使用Selenium的一般流程</h3><ol><li>selenium打开浏览器</li><li>访问要爬取的页面，如果有需要可以设置对页面进行一些操作</li><li>获取想要爬取的页面数据</li></ol><h3 id="selenium环境安装"><a href="#selenium环境安装" class="headerlink" title="selenium环境安装"></a>selenium环境安装</h3><p><strong>selenium安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p><strong>浏览器对应的驱动chromedriver的下载</strong></p><p><a href="https://zhuanlan.zhihu.com/p/664339667">chromeDriver下载参考资料</a></p><p><a href="https://blog.csdn.net/linglong_L/article/details/136283810?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-136283810-blog-138708545.235^v43^pc_blog_bottom_relevance_base6&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=2">chromeDriver参考资料</a></p><p><a href="https://www.cnblogs.com/aiyablog/articles/17948703">ChromeDriver下载地址列表</a></p><p>安装之后可以在代码中指定charomeDriver的地址或者我们可以直接将chromeDriver放在python的安装文件夹中，更推荐后者</p><p>测试是否安装成功:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#请求</span></span><br><span class="line">driver.get(url)</span><br><span class="line"><span class="comment">#短暂延时</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#获取页面内容</span></span><br><span class="line">html = driver.page_source</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会自动弹出百度首页</p><h3 id="selenium基本用法"><a href="#selenium基本用法" class="headerlink" title="selenium基本用法"></a>selenium基本用法</h3><p><a href="https://selenium-python-zh.readthedocs.io/en/latest/installation.html">Python selenium库官方文档</a></p><p><strong>启动浏览器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure><p><strong>访问页面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get(url)</span><br></pre></td></tr></table></figure><p><strong>窗口最大化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.maximize_window()</span><br></pre></td></tr></table></figure><p><strong>刷新页面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.refresh()</span><br></pre></td></tr></table></figure><p><strong>获取页面源码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html = driver.page_source</span><br></pre></td></tr></table></figure><p><strong>页面截图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.save_screenshot(<span class="string">&quot;xxx.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>关闭浏览器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>使用Selenium时，如果关闭的时候没有使用driver.quit退出，会导致系统中会启动多个chromeDriver程序，可以在命令行中通过如下命令批量删除chromedriver进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /F /im chromedriver.exe</span><br></pre></td></tr></table></figure><h3 id="Selenium-driver对象的相关属性"><a href="#Selenium-driver对象的相关属性" class="headerlink" title="Selenium driver对象的相关属性"></a>Selenium driver对象的相关属性</h3><ul><li>current_url：当前url地址</li><li>title：页面标题</li><li>page_source：页面html源码，注意这个页面源码与requests获取的源码是不一样的，其是所有js执行之后的完整的源码</li><li>window_handler:获取浏览器上所有窗口句柄，窗口句柄即各个窗口id</li><li>curren_window_handler：获取当前窗口的句柄</li></ul><h3 id="selenium元素定位和等待"><a href="#selenium元素定位和等待" class="headerlink" title="selenium元素定位和等待"></a>selenium元素定位和等待</h3><h4 id="元素定位的方法："><a href="#元素定位的方法：" class="headerlink" title="元素定位的方法："></a>元素定位的方法：</h4><p><a href="https://selenium-python-zh.readthedocs.io/en/latest/locating-elements.html">selenium查找元素官网教程</a></p><p>一般我们知道如何通过xpath来定位元素就够了</p><p><strong>案例：打开百度首页，在输入框中输入值进行搜索</strong></p><p>首先打开百度首页，定位带搜索输入框元素，向输入框中输入值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment">#打开浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#url</span></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment">#定位到搜索框</span></span><br><span class="line">element = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#输入内容，发送请求</span></span><br><span class="line">element.send_keys(<span class="string">&quot;三国演义&quot;</span>)</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516202419933.png" alt="image-20240516202419933" style="zoom:67%;"></p><h4 id="元素的属性和操作"><a href="#元素的属性和操作" class="headerlink" title="元素的属性和操作"></a>元素的属性和操作</h4><h5 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h5><ul><li>tagname：获取标签名</li><li>text：获取标签文本</li><li>parent：获取父级标签</li><li>get_attribute()：获取属性</li><li>s_displayed()：判断元素是否可见</li></ul><h5 id="元素的操作"><a href="#元素的操作" class="headerlink" title="元素的操作"></a>元素的操作</h5><ul><li>click()，点击元素</li><li>send_keys()：输入内容</li><li>clear()：清空表单</li></ul><h3 id="selenium模拟登录案例"><a href="#selenium模拟登录案例" class="headerlink" title="selenium模拟登录案例"></a>selenium模拟登录案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">需求分析:</span></span><br><span class="line"><span class="string">    selenium模拟登录中华网:https://passport.china.com/logon</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;17775990925&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;a546245426&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#打开浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">url = <span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位登录的表单元素</span></span><br><span class="line"><span class="comment">#用户名元素</span></span><br><span class="line">userNameElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;userInput&quot;]/input[@name=&quot;userName&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#密码元素</span></span><br><span class="line">passWordElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;55&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#登录按钮</span></span><br><span class="line">loginButtonElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;index_logonid&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">#填入信息</span></span><br><span class="line">userNameElement.send_keys(params[<span class="string">&quot;userName&quot;</span>])</span><br><span class="line">passWordElement.send_keys(params[<span class="string">&quot;password&quot;</span>])</span><br><span class="line"><span class="comment">#点击登录按钮</span></span><br><span class="line">loginButtonElement.click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="selenium爬取数据案例"><a href="#selenium爬取数据案例" class="headerlink" title="selenium爬取数据案例"></a>selenium爬取数据案例</h3><p><strong>需求分析</strong></p><p>利用selenium爬取领导留言板数据</p><p>主要抓取各个留言的：</p><ul><li>标题</li><li>正文内容</li><li>时间</li><li>留言ID</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516205322272.png" alt="image-20240516205322272" style="zoom:67%;"></p><p><strong>代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">selenium访问指定页面，并对页面解析，获取对应数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> selector</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打开浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#访问页面</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment">#等待</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#利用selenium定位元素</span></span><br><span class="line">titleElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//h1&#x27;</span>)</span><br><span class="line">textElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//p/span&#x27;</span>)</span><br><span class="line">timeElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//div[@class=&quot;headMainS fl&quot;]/p&#x27;</span>)</span><br><span class="line">IdElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//span[contains(text(),&quot;留言ID&quot;)]&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> titleElement,timeElement,IdElement,textElemen <span class="keyword">in</span> <span class="built_in">zip</span>(titleElementList,timeElementList,IdElementList,textElementList):</span><br><span class="line">    <span class="built_in">print</span>(timeElement.text,<span class="string">&quot;\t&quot;</span>,titleElement.text,<span class="string">&quot;\t&quot;</span>,IdElement.text)</span><br><span class="line">    <span class="built_in">print</span>(textElemen.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line"><span class="comment">#获取页面加载后的源码</span></span><br><span class="line"><span class="comment"># html = driver.page_source</span></span><br><span class="line"><span class="comment"># print(html)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">页面元素分析，如何利用xpath进行解析:</span></span><br><span class="line"><span class="string">标题: //h1/text()</span></span><br><span class="line"><span class="string">正文: //p/span/text()</span></span><br><span class="line"><span class="string">时间: //div[@class=&quot;headMainS fl&quot;]/p/text()</span></span><br><span class="line"><span class="string">留言ID://span[contains(text(),&quot;留言ID&quot;)]/text()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#解析</span></span><br><span class="line"><span class="comment"># title_list = selector.Selector(text=html).xpath(&quot;//h1/text()&quot;).extract()</span></span><br><span class="line"><span class="comment"># time_list = selector.Selector(text=html).xpath(&#x27;//div[@class=&quot;headMainS fl&quot;]/p/text()&#x27;).extract()</span></span><br><span class="line"><span class="comment"># ID_list = selector.Selector(text=html).xpath(&#x27;//span[contains(text(),&quot;留言ID&quot;)]/text()&#x27;).extract()</span></span><br><span class="line"><span class="comment"># for title,time,ID in zip(title_list,time_list,ID_list):</span></span><br><span class="line"><span class="comment">#     print(title+&quot;\t&quot;+time+&quot;\t&quot;+ID)</span></span><br></pre></td></tr></table></figure><p><strong>目前存在的问题</strong></p><ul><li><p>正文内容抓取不全，如下图所示，每一条帖子需要点击<strong>查看全文</strong>才能显示完全</p><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516212857275.png" alt="image-20240516212857275"></li></ul></li><li><p>内容抓取不全，目前只能抓取第一页数据，需要手动点击<strong>查看更多</strong>才能获取下一页记录</p><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240516212942046.png" alt="image-20240516212942046"></li></ul></li></ul><h2 id="selenium进阶使用"><a href="#selenium进阶使用" class="headerlink" title="selenium进阶使用"></a>selenium进阶使用</h2><h3 id="等待机制"><a href="#等待机制" class="headerlink" title="等待机制"></a>等待机制</h3><p><a href="https://selenium-python-zh.readthedocs.io/en/latest/waits.html">官网 等待页面加载完成文档</a></p><h4 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a><strong>背景</strong></h4><p>现在大多数网页都是动态加载的，如果页面内容发生变更，就需要时间来进行渲染，代码是自动执行的，有可能在执行的时候页面新的元素还没有加载出来，就查不到，报 no such element的错误，如果报这个错误，则有可能是定位表达式不正确，或者也可能是页面元素已经发生了变化</p><p>我们爬虫的过程中，如果打开新的页面、页面跳转等情况都要添加合适的等待，否则有的情况下会导致程序错误，无法进行下去</p><h4 id="等待的三种方式"><a href="#等待的三种方式" class="headerlink" title="等待的三种方式"></a><strong>等待的三种方式</strong></h4><ul><li>强制等待<ul><li><code>time.sleep(n)</code></li></ul></li><li>隐式等待<ul><li><code>driver.implicitly_wait(n)</code></li></ul></li><li>显示等待（需要等待条件满足）<ul><li>隐式等待某些情况找不到，就要用显示等待</li></ul></li></ul><h4 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a>强制等待</h4><p><code>time.sleep()</code></p><p>不管网页有没有加载完成，都会等待指定时间</p><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><p><code>driver.implicitly_wait(n)</code></p><p>如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素。 默认等待时间是0秒</p><p>在n秒内如果还是找不到，则会抛出异常，在指定时间内，每隔一段时间就去看一下，如果成功找到，则程序会继续往下执行，如果没找到则继续等，直到最大等待时间</p><h4 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h4><p>可以设置等待条件，比如等待到某个元素可见、某个元素可点击</p><p>这种情况比较复杂，我们重点关注这种情况下如何使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一步:创建等待对象</span></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">10</span>)  <span class="comment">#WebDriverWait 三个参数，第一个为driver对象，第二个为最大时间，第三个为间隔时间，比如:WebDriverWait(driver,30,0.2)，即在30s内每个0.2s去找一次</span></span><br><span class="line"><span class="comment">#第二步：定义元素查找对象</span></span><br><span class="line">located = (By.XPATH,<span class="string">&quot;//input[@id=&#x27;u&#x27;&quot;</span>)</span><br><span class="line"><span class="comment">#第三步：定位的等待条件,比如指定元素可见为等待条件</span></span><br><span class="line">conditions = EC.visibility_of_element_located(located)</span><br><span class="line"><span class="comment">#第四步:通过等待计时器对象去查找</span></span><br><span class="line">wait.until(conditions)</span><br><span class="line"></span><br><span class="line"><span class="comment">#一行代码表示</span></span><br><span class="line">WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">            .until(EC.visibility_of_element_located((By.XPATH,<span class="string">&quot;//input[@id=&#x27;u&#x27;&quot;</span>)))</span><br></pre></td></tr></table></figure><h5 id="常用显示等待条件"><a href="#常用显示等待条件" class="headerlink" title="常用显示等待条件"></a><strong>常用显示等待条件</strong></h5><ul><li><code>visibility_of_element_located</code>：元素可见</li><li><code>element_to_be_clickable</code>：元素可点击</li></ul><h5 id="等待条件"><a href="#等待条件" class="headerlink" title="等待条件"></a>等待条件</h5><ul><li><code>presence_of_element_located</code>：元素存在</li><li><code>visibility_of_element_located</code>：元素可见</li><li><code>element_to_be_clickable</code>：元素可点击</li><li><code>title_contains</code>：标题包含某内容</li><li><code>new_window_is_opened</code>：等待新窗口出现</li><li><code>frame_to_be_available_and_switch_to_it</code>：加载并切换到iframe中</li><li><code>alert_is_present</code>：出现Alert弹框</li></ul><h3 id="iframe切换"><a href="#iframe切换" class="headerlink" title="iframe切换"></a>iframe切换</h3><h4 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h4><p>对于<a href="https://wx.mail.qq.com/">QQ邮箱登录页面</a>，其内部是一个网页嵌套另一个网页构成的，如果直接查找或者点击里面的某些元素是找不到的，必须要进行iframe切换</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517091621440.png" alt="image-20240517091621440"></p><h4 id="selenium控制iframe切换"><a href="#selenium控制iframe切换" class="headerlink" title="selenium控制iframe切换"></a>selenium控制iframe切换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式一：切换iframe，通过iframe的名字(name属性)进行切换</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;frame_name&#x27;</span>) </span><br><span class="line"><span class="comment">#方式二:通过element元素去切换</span></span><br><span class="line">iframeElement = driver.find_element_by_xpath(<span class="string">&#x27;//iframe[@id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(iframeElement)</span><br><span class="line"><span class="comment">#方式三：通过索引切换</span></span><br><span class="line">driver.switch_to.frame(<span class="number">1</span>) <span class="comment">#根据第几个iframe切换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切换回默认的html页面</span></span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到父级的iframe中</span></span><br><span class="line">driver.switch_to.parent_frame()</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>模拟QQ邮箱登录页面点击密码登录，然后输入账号密码模拟登陆</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517092226636.png" alt="image-20240517092226636"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#url</span></span><br><span class="line">url = <span class="string">&quot;https://wx.mail.qq.com/&quot;</span></span><br><span class="line">driver.get(url=url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换进入第一个iframe</span></span><br><span class="line">driver.switch_to.frame(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#切换进入第二个iframe</span></span><br><span class="line">iframeElement = driver.find_element(By.XPATH,<span class="string">&#x27;//iframe[@id=&quot;ptlogin_iframe&quot;]&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(iframeElement)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找密码登录按钮，并点击</span></span><br><span class="line">passwordLoginButton = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;switcher_plogin&quot;]&#x27;</span>)</span><br><span class="line">passwordLoginButton.click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到账号和密码输入框，模拟登录</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;u&quot;]&#x27;</span>).send_keys(<span class="string">&quot;wujjjj&quot;</span>)</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;p&quot;]&#x27;</span>).send_keys(<span class="string">&quot;99899&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#登录按钮</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;login_button&quot;]&#x27;</span>).click()</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><p>最终还会弹出</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517094617205.png" alt="image-20240517094617205"></p><h3 id="窗口滚动"><a href="#窗口滚动" class="headerlink" title="窗口滚动"></a>窗口滚动</h3><h4 id="背景-3"><a href="#背景-3" class="headerlink" title="背景"></a>背景</h4><p>有的时候，元素虽然被加载出来了，但是如果看不到，是无法进行操作的，这时就需要滚动页面才会显示新的内容</p><p>比如对于我们之前爬取的<a href="https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=571&amp;formName=%E6%B9%96%E5%8C%97%E7%9C%81%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%8E%8B%E8%92%99%E5%BE%BD&amp;position=0&amp;province=28&amp;city=&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81">领导留言板</a>网站，就需要手动滚动页面到最底部，然后点击查看更多，才能分页查看下一页数据</p><p>所以要想抓取数据完全，需要不断查找查看更多按钮，然后点击进行翻页</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517111858981.png" alt="image-20240517111858981"></p><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://liuyan.people.com.cn/threads/list?checkStatus=0&amp;fid=1179&amp;formName=%E5%AE%9C%E6%98%8C%E5%B8%82%E5%A7%94%E4%B9%A6%E8%AE%B0%E7%86%8A%E5%BE%81%E5%AE%87&amp;position=0&amp;province=28&amp;city=230&amp;saveLocation=28&amp;pForumNames=%E6%B9%96%E5%8C%97%E7%9C%81&amp;pForumNames=%E5%AE%9C%E6%98%8C%E5%B8%82&quot;</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#隐式等待</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment">#循环迭代 找到查看更多，并翻页,无法确定有多少也，只能死循环，找不到即触发异常结束</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 找到 查看更多按钮</span></span><br><span class="line">        element = driver.find_element(By.XPATH, <span class="string">&#x27;//*[@class=&quot;mordList&quot;]&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(element)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        element.location_once_scrolled_into_view  <span class="comment"># 页面滚动到 查看更多按钮可见的位置</span></span><br><span class="line">        <span class="comment"># 点击查看更多按钮</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        element.click()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#整体页面解析</span></span><br><span class="line"><span class="comment">#利用selenium定位元素</span></span><br><span class="line">titleElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//h1&#x27;</span>)</span><br><span class="line">textElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//p/span&#x27;</span>)</span><br><span class="line">timeElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//div[@class=&quot;headMainS fl&quot;]/p&#x27;</span>)</span><br><span class="line">IdElementList = driver.find_elements(By.XPATH,<span class="string">&#x27;//span[contains(text(),&quot;留言ID&quot;)]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> titleElement,timeElement,IdElement,textElemen <span class="keyword">in</span> <span class="built_in">zip</span>(titleElementList,timeElementList,IdElementList,textElementList):</span><br><span class="line">    <span class="built_in">print</span>(timeElement.text,<span class="string">&quot;\t&quot;</span>,titleElement.text,<span class="string">&quot;\t&quot;</span>,IdElement.text)</span><br><span class="line">    <span class="built_in">print</span>(textElemen.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总条数:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(titleElementList)))</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="JS模拟滚动页面"><a href="#JS模拟滚动页面" class="headerlink" title="JS模拟滚动页面"></a>JS模拟滚动页面</h3><p><strong>js滚动窗口到指定坐标位置</strong></p><ul><li><p><code>scrollTo()</code>：可把内容滚动到指定的坐标</p><ul><li>```js<br>scrollTo(x,y)<h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1>x ：必须，要在窗口文档显示区左上角显示的文档的x坐标<br>y : 必须，要在窗口文档显示区左上角显示的文档的y坐标<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**selenium如何执行js代码**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">#移动Y坐标到500的位置</span><br><span class="line">js = &quot;window.scrollTo(0,500)&quot;</span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">#滚动到窗口底板</span><br><span class="line">js = &quot;window.scrollTo(0,document.body.scrollHeight)&quot;</span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line">#相对滚动</span><br><span class="line">#scrollBy(x1,x2)表示相对当前位置(x,y)，页面下一步滚动到 x+x1,y+y1</span><br><span class="line">#有的时候，突然滚动到底部，可能会被反爬机制识别，这是用相对滑动，模拟人的操作</span><br><span class="line">js = &quot;window.scrollBy(0,100)&quot;</span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h3><p>比如：有的页面需要模拟鼠标操作，对页面元素进行拖拽操作，比如滑块验证码之类的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br></pre></td></tr></table></figure><p>ActionChains：鼠标操作类</p><ul><li>click：鼠标点击</li><li>double_click：鼠标双击</li><li>context_click：鼠标右击</li><li>move_to_element：鼠标移动到某个节点</li><li>click_and_hold：鼠标左键按下鼠标</li><li>move_by_offse：鼠标相对当前位置进行移动</li><li>drag_and_drop()：在一个位置按下鼠标，到另一个位置进行释放</li><li>release：释放鼠标</li><li>perform：执行动作</li></ul><p><a href="https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable">鼠标操作练习网站</a></p><p><strong>实例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ActionChains：鼠标操作类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- click：鼠标点击</span></span><br><span class="line"><span class="string">- double_click：鼠标双击</span></span><br><span class="line"><span class="string">- context_click：鼠标右击</span></span><br><span class="line"><span class="string">- move_to_element：鼠标移动到某个节点</span></span><br><span class="line"><span class="string">- click_and_hold：鼠标左键按下鼠标</span></span><br><span class="line"><span class="string">- move_by_offse：鼠标相对当前位置进行移动</span></span><br><span class="line"><span class="string">- drag_and_drop()：在一个位置按下鼠标，到另一个位置进行释放</span></span><br><span class="line"><span class="string">- release：释放鼠标</span></span><br><span class="line"><span class="string">- perform：执行动作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到子iframe</span></span><br><span class="line">driver.switch_to.frame(driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;iframeResult&quot;]&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到拖拽块元素</span></span><br><span class="line">dragElement = driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;draggable&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化 ActionChains对象</span></span><br><span class="line">ac = ActionChains(driver)</span><br><span class="line"><span class="comment">#将鼠标移动到该元素上</span></span><br><span class="line">ac.move_to_element(dragElement)</span><br><span class="line"><span class="comment">#按住鼠标不放</span></span><br><span class="line">ac.click_and_hold()</span><br><span class="line"><span class="comment">#将鼠标移动到另一个元素</span></span><br><span class="line">ac.move_to_element(driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;droppable&quot;]&#x27;</span>))</span><br><span class="line"><span class="comment">#执行鼠标动作</span></span><br><span class="line">ac.perform()</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517184401515.png" alt="image-20240517184401515"></p><h3 id="selenium携带cookie登录"><a href="#selenium携带cookie登录" class="headerlink" title="selenium携带cookie登录"></a>selenium携带cookie登录</h3><p>很多网站需要登录才能访问其他页面，这种情况我们需要首先需要利用selenium模拟登录获取网站的cookie信息，然后在访问其他网站的时候模拟</p><p><a href="https://blog.csdn.net/weixin_43821172/article/details/105199481">参考资料</a></p><h2 id="selenium特征检测"><a href="#selenium特征检测" class="headerlink" title="selenium特征检测"></a>selenium特征检测</h2><p><a href="https://zhuanlan.zhihu.com/p/321928394">参考资料 js文件下载地址</a></p><h3 id="selenium启动的浏览器可能具有以下特殊的特征"><a href="#selenium启动的浏览器可能具有以下特殊的特征" class="headerlink" title="selenium启动的浏览器可能具有以下特殊的特征"></a>selenium启动的浏览器可能具有以下特殊的特征</h3><ul><li>User-Agent字符串<ul><li>Selenium启动的浏览器通常具有特定的User-Agent字符串，可以通过检查User-Agent来判断是否为Selenium启动的浏览器</li></ul></li><li>自动化工具标识<ul><li>Selenium启动的浏览器可能会在请求头中包含一些自动化工具的标识，例如<code>Requested-With</code>、<code>DNT</code>等</li></ul></li><li>WebDriver相关属性<ul><li>Selenium启动的浏览器可能会在全局<code>window</code>对象中注入一些特殊的属性，例如<code>webdriver</code>、<code>navigator.webdriver</code>等</li></ul></li><li>页面加载行为<ul><li>Selenium启动的浏览器通常会以自动化的方式加载页面，可能会出现一些快速点击、输入文本等行为</li></ul></li><li>元素检测<ul><li>Selenium启动浏览器的时候会在DOM中插入一些特定的元素或者属性，用于控制浏览器行为，可以通过检测这些特定的元素或属性来判断是否为Selenium启动的浏览器</li></ul></li></ul><h3 id="如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征"><a href="#如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征" class="headerlink" title="如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征"></a>如果想使用selenium正常访问，则需要在创建webdriver时隐藏浏览器相关的特征</h3><ul><li><code>--disable-infobars</code>：禁止显示Chrome浏览器正在受到自动测试软件控制的通知栏</li><li><code>excludeSwitches</code>、<code>enable-automation</code>：排除启动自动化扩展程序的开关，可以防止被网站检测到使用了自动化测试工具，减少被反爬虫封锁的可能</li><li><code>useAutomationExtension:False</code>：禁用自动化扩展程序，同样为了避免被网站检测到使用了自动化工具</li><li>通过<code>Page.addScriptToEvaluateOnNewDocument</code>方法，可以在每次页面加载时执行指定的JavaScript代码，我们每次打开新页面之前，执行<code>hide.js</code>来隐藏selenium启动浏览器生成的属性，从而防止被检测出来时爬虫</li></ul><h3 id="绕过特征检测案例"><a href="#绕过特征检测案例" class="headerlink" title="绕过特征检测案例"></a>绕过特征检测案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">目标网站: https://www.aqistudy.cn/ 对selenium做了反爬</span></span><br><span class="line"><span class="string">如果用selenium打开，是不会有数据显示的</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置浏览器配置,隐藏selenium一些特性</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">#添加防检测的参数</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-infobars&quot;</span>)</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;excludeSwitches&quot;</span>,[<span class="string">&quot;enable-automation&quot;</span>])</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;useAutomationExtension&quot;</span>,<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#添加浏览器头</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#每次打开新的页面之前，执行该脚本，去除selenium打开浏览器生成的相关属性特征</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../stealth.min.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    js = f.read()</span><br><span class="line">driver.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>,&#123;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: js</span><br><span class="line">&#125;)</span><br><span class="line">url = <span class="string">&#x27;https://www.aqistudy.cn/&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="JS逆向分析"><a href="#JS逆向分析" class="headerlink" title="JS逆向分析"></a>JS逆向分析</h2><h3 id="js参数加密案例"><a href="#js参数加密案例" class="headerlink" title="js参数加密案例"></a>js参数加密案例</h3><p>许多网站的请求参数都是加密传递的，要模拟发送请求，就得直到参数是怎么加密的，然后用代码实现加密的过程</p><p>比如对于一些网站的登录页面，其账号、密码传输时是通过某种加密算法加密后再发送请求的</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>对于 <a href="https://www.94mxd.com.cn/signin">网站</a>的登录界面，</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517194933379.png" alt="image-20240517194933379"></p><p>我们输入账号、密码模拟登录，抓包分析，发现其密码是加密后的数据</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517195033515.png" alt="image-20240517195033515"></p><p>找到调用的js文件</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517202540845.png" alt="image-20240517202540845"></p><p>我们班通过打断点分析，定位带其js代码中加密的函数,实际上是一个 盐值拼接，然后采用md5加密得到</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517202750673.png" alt="image-20240517202750673"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240517202817522.png" alt="image-20240517202817522"></p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment">#md5加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hashPwd</span>(<span class="params">password</span>):</span><br><span class="line">    <span class="comment">#盐值</span></span><br><span class="line">    saltValue = <span class="string">&quot;Hq44cyp4mT9Fh5eNrZ67bjifidFhW%fb0ICjx#6gE59@P@Hr8%!WuYBa1yvytq$qh1FEM18qA8Hp9m3VLux9luIYpeYzA2l2W3Z&quot;</span></span><br><span class="line">    <span class="comment">#加密</span></span><br><span class="line">    strVal = password+saltValue</span><br><span class="line"></span><br><span class="line">    hashObj = hashlib.md5()</span><br><span class="line">    hashObj.update(strVal.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    md5StrVal = hashObj.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> md5StrVal</span><br></pre></td></tr></table></figure><p>当然，如果我们采用selenium模拟登录，无需直到其加密算法，直接在输入框中输入明文，即可模拟登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.94mxd.com.cn/signin&quot;</span></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;1985439923@qq.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wu123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#模拟登录</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(url)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位元素输入值</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;email&quot;]&#x27;</span>).send_keys(params[<span class="string">&quot;email&quot;</span>])</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;password&quot;]&#x27;</span>).send_keys(params[<span class="string">&quot;password&quot;</span>])</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#点击登录按钮</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;container&quot;]/div/div/div[2]/div[2]//button&#x27;</span>).click()</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="调用js加密代码"><a href="#调用js加密代码" class="headerlink" title="调用js加密代码"></a>调用js加密代码</h3><p>在逆向分析时，有时候会发现某个js加密算法会比较繁琐，用python还原同样的算法会比较费劲，此时，我们可以不必使用python去还原，而是利用python去直接调用JavaScript中定义的功能，通过调式分析加密算法所在的位置和源码，然后直接在代码中调用该js代码</p><p>python调用js，需要借助于第三方库<code>pyexcejs</code>，这个库底层调用<code>node.js</code>，所以还需要安装<code>node.js</code></p><p><strong>代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">python调用js用第三方库:</span></span><br><span class="line"><span class="string">    需要安装python第三方库:pyexecjs</span></span><br><span class="line"><span class="string">    需要安装: node.js</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line">jsCode=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function add(a,b)&#123;</span></span><br><span class="line"><span class="string">    return a+b</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function say()&#123;</span></span><br><span class="line"><span class="string">    return &quot;say,hello!!!&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#第一步：编译代码</span></span><br><span class="line">JS = execjs.<span class="built_in">compile</span>(jsCode)</span><br><span class="line"><span class="comment">#第二部调用</span></span><br><span class="line">result = JS.call(<span class="string">&quot;add&quot;</span>,<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line">message = JS.call(<span class="string">&quot;say&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><h2 id="验证码破解"><a href="#验证码破解" class="headerlink" title="验证码破解"></a>验证码破解</h2><h3 id="图像验证码破解"><a href="#图像验证码破解" class="headerlink" title="图像验证码破解"></a>图像验证码破解</h3><p>许多网站，在登陆的时候，除了输入账号、密码之外，还会显示一个图像验证码，那么这类网站应该如何破解？</p><p>对于 <a href="https://www.chaojiying.com/user/login/">超级鹰</a>：网站登陆页面，如下图所示：其会显示一个图像验证码，要想破解这类网站，就需要能够识别图像验证码中的字符</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518200110879.png" alt="image-20240518200110879" style="zoom: 33%;"></p><p>抓包分析，一打开登陆界面，其会自动向后台发送一个请求，获取一个图像验证码，且该同一链接地址多次请求，返回的结果均是不同的</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518200524218.png" alt="image-20240518200524218" style="zoom:33%;"></p><p>对于其点击登陆按钮发送的登陆请求，抓包如下图所示：</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518200840384.png" alt="image-20240518200840384" style="zoom:50%;"></p><p>综上所述，该问题的难点就在于验证码的识别问题</p><p><strong>破解步骤：</strong></p><ul><li><p>发送请求获取验证码</p><ul><li>这个问题比较棘手，因为发现，同一个图片地址，每次请求时，其返回的图片都是不一样的</li><li>那么他是如何将验证码与登陆关联起来的呢？通过同一会话session关联起来的</li></ul></li><li><p>识别验证码内容</p><ul><li><p>```python<br>“””<br>图像验证码: 需要获取验证码图片，然后识别图片里面的文本内容，这个就需要用到ocr技术</p><p>python中ocr识别库: ddddocr<br>该库是免费的，但是精度不是很高，有的时候会识别错误</p><p>如果精度要求比较高，可以找一些第三方收费服务：百度直接搜：打码平台 一般会支持各种类型的验证码识别<br>“””<br>import ddddocr</p><h1 id="创建ocr对象"><a href="#创建ocr对象" class="headerlink" title="创建ocr对象"></a>创建ocr对象</h1><p>ocr = ddddocr.DdddOcr()</p><h1 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h1><p>with open(“1.png”,”rb”) as f:</p><pre><code>image = f.read()</code></pre><h1 id="识别图片内容"><a href="#识别图片内容" class="headerlink" title="识别图片内容"></a>识别图片内容</h1><p>code = ocr.classification(image)<br>print(“识别结果:”,code)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 发送登陆请求</span><br><span class="line"></span><br><span class="line">**破解超级鹰网站登陆页面代码示例**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import requests</span><br><span class="line">import ddddocr</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">流程：</span><br><span class="line">    ①请求网站，获取图像验证码图片</span><br><span class="line">    ②调用第三方库识别图像验证码文本</span><br><span class="line">    ③构造请求，发送登陆请求</span><br><span class="line">    </span><br><span class="line">    注意：这整个过程需在同一会话session中进行</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">#获取图形验证码</span><br><span class="line">codeUrl = &quot;https://www.chaojiying.com/include/code/code.php?u=1&quot;</span><br><span class="line">codeImage = session.get(url=codeUrl).content</span><br><span class="line">with open(&quot;code.png&quot;,&quot;wb&quot;) as f:</span><br><span class="line">    f.write(codeImage)</span><br><span class="line">#调用第三方库识别图像验证码</span><br><span class="line">ocr = ddddocr.DdddOcr()</span><br><span class="line">code = ocr.classification(codeImage)</span><br><span class="line">print(&quot;验证码：&quot;,code)</span><br><span class="line">#构造登陆请求</span><br><span class="line">loginUrl = &quot;https://www.chaojiying.com/user/login/&quot;</span><br><span class="line">params=&#123;</span><br><span class="line">    &quot;user&quot;: &quot;HustRich&quot;,</span><br><span class="line">    &quot;pass&quot;: &quot;wu123456&quot;,</span><br><span class="line">    &quot;imgtxt&quot;: code,</span><br><span class="line">    &quot;act&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line">headers=&#123;</span><br><span class="line">    &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span><br><span class="line">    # ,&quot;Cookie&quot;:&quot;PHPSESSID=c2s08og1j8244us3qc4ub9d217; __51cke__=; __tins__16851773=%7B%22sid%22%3A%201716036582790%2C%20%22vd%22%3A%203%2C%20%22expires%22%3A%201716039030500%7D; __51laig__=4&quot;</span><br><span class="line">&#125;</span><br><span class="line">response = session.post(url=loginUrl,data=params,headers=headers)</span><br><span class="line">print(response.content)</span><br><span class="line"></span><br><span class="line">with open(&quot;res.html&quot;,&quot;wb&quot;) as f:</span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="js逆向：滑动验证码的轨迹破解"><a href="#js逆向：滑动验证码的轨迹破解" class="headerlink" title="js逆向：滑动验证码的轨迹破解"></a>js逆向：滑动验证码的轨迹破解</h3><p>案例网站：<a href="https://user.qunar.com/passport/login.jsp">去哪儿</a></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100404382.png" alt="image-20240518100404382" style="zoom: 33%;"></p><p><strong>需求分析</strong></p><p>我们输入手机号，然后点击获取验证码，会弹出一个滑动验证码窗口，经过验证之后才会收到验证码，然后点击登陆注册，此过程向后端的请求包括：</p><ul><li>滑动验证码的请求</li><li>获取手机验证码的请求</li><li>登陆接口的请求</li></ul><p><strong>滑动验证码请求</strong></p><p>只有将滑动验证码拖动到最右端才能成功发送该请求</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100928636.png" alt="image-20240518100928636"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100848451.png" alt="image-20240518100848451" style="zoom:50%;"></p><p>观察滑动验证码请求参数，发现其中有一个未知的参数 data</p><p><strong>手机验证码请求</strong></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518100959013.png" alt="image-20240518100959013" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518101033801.png" alt="image-20240518101033801"></p><p><strong>登陆接口请求</strong></p><p>验证码破解相关知识等后续有需求再了解</p><h2 id="异步爬虫"><a href="#异步爬虫" class="headerlink" title="异步爬虫"></a>异步爬虫</h2><p>当我们有大量数据需要抓取时，总的抓取时间会比较长，这个时候，如果需要提高数据的抓取效率，需要用到多线程异步并发爬取</p><p>该方法缺陷，并发会导致短时间对目标网站服务器大量请求，使得目标网站压力过大，如果被检测，可能触发一系列的反爬机制</p><p>该方法一般需要配合代理IP去使用，每次请求从不同ip发出，这样即使访问很频繁，由于请求来自于不同ip，被检测概率会比较低</p><h3 id="抓取需求"><a href="#抓取需求" class="headerlink" title="抓取需求"></a>抓取需求</h3><p>目标网站：<a href="https://www.myfreemp3.com.cn/">https://www.myfreemp3.com.cn/</a></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518104553106.png" alt="image-20240518104553106" style="zoom: 33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518105026649.png" alt="image-20240518105026649" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518105052266.png" alt="image-20240518105052266" style="zoom:33%;"></p><p>我们的目标是抓取该网站上周杰伦所有歌曲</p><ul><li><p>要求：下载每一首歌曲的封面图、mp3文件，歌词，然后保存在本地，要求保存的格式如下：</p><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518105221295.png" alt="image-20240518105221295" style="zoom:33%;"></li></ul></li><li><p>子目录名为各个歌曲名，里面包含mp3文件、封面图png，歌词文本txt文件</p></li></ul><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ul><li>先抓取搜索歌手所有的歌曲，提取歌曲名、歌手、封面图、歌词信息</li><li>然后再去下载歌曲、封面、歌词保存为文件</li></ul><h4 id="获取歌曲列表接口"><a href="#获取歌曲列表接口" class="headerlink" title="获取歌曲列表接口"></a>获取歌曲列表接口</h4><p>抓包分析：</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110007948.png" alt="image-20240518110007948" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110055152.png" alt="image-20240518110055152" style="zoom:33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110125909.png" alt="image-20240518110125909" style="zoom:33%;"></p><p><img src="03 爬虫进阶//image-20240518110235118.png" alt="image-20240518110235118" style="zoom:33%;"></p><p>歌曲列表接口：</p><blockquote><p>url地址：</p><ul><li><a href="https://www.myfreemp3.com.cn/">https://www.myfreemp3.com.cn/</a></li></ul><p>请求方法：</p><ul><li>POST</li></ul><p>参数：</p><ul><li>input: 歌手名</li><li>filter: name</li><li>page: 页码</li><li>type: netease</li></ul><p>返回响应:</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518110437045.png" alt="image-20240518110437045" style="zoom:50%;"></p></blockquote><h4 id="单线程下载"><a href="#单线程下载" class="headerlink" title="单线程下载"></a>单线程下载</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析:</span></span><br><span class="line"><span class="string">    抓取网站:https://www.myfreemp3.com.cn/ 中指定歌手的歌曲:</span></span><br><span class="line"><span class="string">        下载数据包括: 歌曲封面图片、歌曲歌词文本文件，歌曲mp3资源文件</span></span><br><span class="line"><span class="string">        文件存储格式:</span></span><br><span class="line"><span class="string">            歌手名:</span></span><br><span class="line"><span class="string">                歌曲名:</span></span><br><span class="line"><span class="string">                    歌曲名_作者.png</span></span><br><span class="line"><span class="string">                    歌曲名_作者.txt</span></span><br><span class="line"><span class="string">                    歌曲名_作者.mp3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrawMusic</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,baseDir</span>):</span><br><span class="line">        self.url = <span class="string">&quot;https://www.myfreemp3.com.cn&quot;</span></span><br><span class="line">        self.headers=&#123;</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">                ,<span class="string">&quot;X-Requested-With&quot;</span>:<span class="string">&quot;XMLHttpRequest&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        self.params=&#123;</span><br><span class="line">            <span class="string">&quot;input&quot;</span>: <span class="string">&quot;周杰伦&quot;</span>,</span><br><span class="line">            <span class="string">&quot;filter&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">            <span class="string">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;netease&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.baseDir = baseDir</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendRequest</span>(<span class="params">self,name,pageIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 歌手姓名</span></span><br><span class="line"><span class="string">        :param pageIndex: 当前页码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.params[<span class="string">&quot;name&quot;</span>]=name</span><br><span class="line">        self.params[<span class="string">&quot;page&quot;</span>]=pageIndex</span><br><span class="line">        response = requests.post(url=self.url, data=self.params, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        data = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;list&quot;</span>]</span><br><span class="line">        curSaveDir = os.path.join(self.baseDir,name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curSaveDir):</span><br><span class="line">            os.makedirs(curSaveDir)</span><br><span class="line">            self.parseData(curSaveDir,data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parseData</span>(<span class="params">self,curSaveDir,data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param curSaveDir: 该歌手数据存储根目录</span></span><br><span class="line"><span class="string">        :param data: 需要被解析的数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            <span class="comment"># 歌词标题</span></span><br><span class="line">            title = item[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">            <span class="comment"># 作者</span></span><br><span class="line">            author = item[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">            <span class="comment"># 封面图片链接</span></span><br><span class="line">            pic = item[<span class="string">&quot;pic&quot;</span>]</span><br><span class="line">            <span class="comment"># 歌词文本</span></span><br><span class="line">            tex = item[<span class="string">&quot;lrc&quot;</span>]</span><br><span class="line">            <span class="comment"># 歌词下载链接</span></span><br><span class="line">            mp3Link = item[<span class="string">&quot;url&quot;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment">#当前歌曲数据存储路径</span></span><br><span class="line">            curMusicSaveDir = os.path.join(curSaveDir, title)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curMusicSaveDir):</span><br><span class="line">                os.mkdir(curMusicSaveDir)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;benign dowmload &#123;&#125;&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">                <span class="comment"># 图片</span></span><br><span class="line">                curPicSavePath = os.path.join(curMusicSaveDir, title + <span class="string">&quot;.png&quot;</span>)</span><br><span class="line">                self.downloadFile(pic, curPicSavePath)</span><br><span class="line">                <span class="comment"># 歌词</span></span><br><span class="line">                curTexSavePath = os.path.join(curMusicSaveDir, title + <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(curTexSavePath, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(tex)</span><br><span class="line">                <span class="comment"># MP3</span></span><br><span class="line">                curMp3SavePath = os.path.join(curMusicSaveDir, title + <span class="string">&quot;.mp3&quot;</span>)</span><br><span class="line">                self.downloadFile(mp3Link, curMp3SavePath)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;歌曲&#123;&#125;已被下载，无需重复下载&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">downloadFile</span>(<span class="params">self,url, path</span>):</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(url+<span class="string">&quot; 下载失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    crawDownload = CrawMusic(<span class="string">r&quot;E:\tempData\musics&quot;</span>)</span><br><span class="line">    crawDownload.sendRequest(<span class="string">&quot;周杰伦&quot;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="异步下载"><a href="#异步下载" class="headerlink" title="异步下载"></a>异步下载</h4><p>上面代码是单线程下载，而且只是下载单页数据，当需要下载大量数据时，就必须采用多线程异步下载</p><p>整个爬虫其实主要分为以下三个模块：</p><ul><li>发送请求获取响应</li><li>数据解析</li><li>数据存储</li><li>如下图所示，对于这三个模块我们可以进行异步处理，模块一线程请求后的数据进入一个管道，模块二线程从管道中拿取数据进行解析，然后解析后的结果放入另一个管道，模块三线程从管道二中拿取解析后的数据进行存储，这个过程，三个模块相互独立，如果哪个部分耗时较多，可以采用多线程进行处理</li></ul><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518182355861.png" alt="image-20240518182355861" style="zoom:50%;"></p><p><strong>多线程代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析:</span></span><br><span class="line"><span class="string">    抓取网站:https://www.myfreemp3.com.cn/ 中指定歌手的歌曲:</span></span><br><span class="line"><span class="string">        下载数据包括: 歌曲封面图片、歌曲歌词文本文件，歌曲mp3资源文件</span></span><br><span class="line"><span class="string">        文件存储格式:</span></span><br><span class="line"><span class="string">            歌手名:</span></span><br><span class="line"><span class="string">                歌曲名:</span></span><br><span class="line"><span class="string">                    歌曲名_作者.png</span></span><br><span class="line"><span class="string">                    歌曲名_作者.txt</span></span><br><span class="line"><span class="string">                    歌曲名_作者.mp3</span></span><br><span class="line"><span class="string">    并发下载:</span></span><br><span class="line"><span class="string">        请求、数据解析、数据存储三个部分用多个不同线程处理</span></span><br><span class="line"><span class="string">        各个线程之间用 queue.Queue来进行数据传递，该对象是线程安全的</span></span><br><span class="line"><span class="string">        queue的用法参考:https://blog.csdn.net/songpeiying/article/details/131761990</span></span><br><span class="line"><span class="string">        queue = queue.Queue()</span></span><br><span class="line"><span class="string">        queue.put() 添加数据  使用put()方法将元素放入队列。如果队列已满，put()方法会阻塞直到有空余空间</span></span><br><span class="line"><span class="string">        queue.get() 获取数据  使用get()方法从队列中取出元素。如果队列为空，get()方法会阻塞直到有元素可用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        queue.get(timeout=xx) 等待xx秒如果还未获取数据则会报错，如果不添加timeout参数则会一直阻塞</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrawMusic</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,baseDir</span>):</span><br><span class="line">        self.url = <span class="string">&quot;https://www.myfreemp3.com.cn&quot;</span></span><br><span class="line">        self.headers=&#123;</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">                ,<span class="string">&quot;X-Requested-With&quot;</span>:<span class="string">&quot;XMLHttpRequest&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        self.params=&#123;</span><br><span class="line">            <span class="string">&quot;input&quot;</span>: <span class="string">&quot;周杰伦&quot;</span>,</span><br><span class="line">            <span class="string">&quot;filter&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">            <span class="string">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;netease&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.baseDir = baseDir</span><br><span class="line">        <span class="comment">#响应数据类管道</span></span><br><span class="line">        self.responseDataQueue = queue.Queue()</span><br><span class="line">        <span class="comment">#解析数据管道</span></span><br><span class="line">        self.parseDataQueue = queue.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendRequest</span>(<span class="params">self,name,pageIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 歌手姓名</span></span><br><span class="line"><span class="string">        :param pageIndex: 当前页码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.params[<span class="string">&quot;input&quot;</span>]=name</span><br><span class="line">        self.params[<span class="string">&quot;page&quot;</span>]=pageIndex</span><br><span class="line">        response = requests.post(url=self.url, data=self.params, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        data = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;list&quot;</span>]</span><br><span class="line">        curSaveDir = os.path.join(self.baseDir,name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curSaveDir):</span><br><span class="line">            os.makedirs(curSaveDir)</span><br><span class="line">        self.responseDataQueue.put((curSaveDir,data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parseData</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param curSaveDir: 该歌手数据存储根目录</span></span><br><span class="line"><span class="string">        :param data: 需要被解析的数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                curSaveDir, data = self.responseDataQueue.get(timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span> queue.Empty:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">                <span class="comment"># 歌词标题</span></span><br><span class="line">                title = item[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">                <span class="comment"># 作者</span></span><br><span class="line">                author = item[<span class="string">&quot;author&quot;</span>]</span><br><span class="line">                <span class="comment"># 封面图片链接</span></span><br><span class="line">                pic = item[<span class="string">&quot;pic&quot;</span>]</span><br><span class="line">                <span class="comment"># 歌词文本</span></span><br><span class="line">                tex = item[<span class="string">&quot;lrc&quot;</span>]</span><br><span class="line">                <span class="comment"># 歌词下载链接</span></span><br><span class="line">                mp3Link = item[<span class="string">&quot;url&quot;</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment">#当前歌曲数据存储路径</span></span><br><span class="line">                curMusicSaveDir = os.path.join(curSaveDir, title)</span><br><span class="line">                self.parseDataQueue.put((curMusicSaveDir,title,author,pic,tex,mp3Link))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">saveData</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                curMusicSaveDir, title, author,pic, tex, mp3Link = self.parseDataQueue.get(timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span> queue.Empty:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(curMusicSaveDir):</span><br><span class="line">                os.mkdir(curMusicSaveDir)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;benign dowmload &#123;&#125;&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">                <span class="comment"># 图片</span></span><br><span class="line">                curPicSavePath = os.path.join(curMusicSaveDir, title +<span class="string">&quot;_&quot;</span>+author+ <span class="string">&quot;.png&quot;</span>)</span><br><span class="line">                self.downloadFile(pic, curPicSavePath)</span><br><span class="line">                <span class="comment"># 歌词</span></span><br><span class="line">                curTexSavePath = os.path.join(curMusicSaveDir, title +<span class="string">&quot;_&quot;</span>+author+ <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(curTexSavePath, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(tex)</span><br><span class="line">                <span class="comment"># MP3</span></span><br><span class="line">                curMp3SavePath = os.path.join(curMusicSaveDir, title +<span class="string">&quot;_&quot;</span>+author+ <span class="string">&quot;.mp3&quot;</span>)</span><br><span class="line">                self.downloadFile(mp3Link, curMp3SavePath)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;歌曲&#123;&#125;已被下载，无需重复下载&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">downloadFile</span>(<span class="params">self,url, path</span>):</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(url+<span class="string">&quot; 下载失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    crawDownload = CrawMusic(<span class="string">r&quot;E:\tempData\musics&quot;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    多线程，我们采用线程池来进行处理</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        pool.submit(crawDownload.sendRequest,<span class="string">&quot;蔡依林&quot;</span>,<span class="number">1</span>)</span><br><span class="line">        pool.submit(crawDownload.parseData)</span><br><span class="line">        <span class="comment">#save data比较耗时，采用三个线程</span></span><br><span class="line">        pool.submit(crawDownload.saveData)</span><br><span class="line">        pool.submit(crawDownload.saveData)</span><br><span class="line">        pool.submit(crawDownload.saveData)</span><br></pre></td></tr></table></figure><h2 id="Cookie池和IP代理"><a href="#Cookie池和IP代理" class="headerlink" title="Cookie池和IP代理"></a>Cookie池和IP代理</h2><p>多线程并发存在问题：同一时间向目标服务器发送请求过多，且请求来自于同一客户端，容易被对方察觉，触发反爬机制导致失败</p><h3 id="代理IP的使用"><a href="#代理IP的使用" class="headerlink" title="代理IP的使用"></a>代理IP的使用</h3><h4 id="代理IP的基本概念"><a href="#代理IP的基本概念" class="headerlink" title="代理IP的基本概念"></a>代理IP的基本概念</h4><h5 id="背景：为什么要使用代理"><a href="#背景：为什么要使用代理" class="headerlink" title="背景：为什么要使用代理"></a>背景：为什么要使用代理</h5><ul><li>一段时间内，检测IP访问频率，访问太频繁会被识别成爬虫被对方屏蔽</li><li>使用代理IP可以让服务器以为不是同一客户端在请求</li><li>防止我们真实的IP地址被泄露，被追究</li></ul><h5 id="使用代理的请求过程"><a href="#使用代理的请求过程" class="headerlink" title="使用代理的请求过程"></a>使用代理的请求过程</h5><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518190455761.png" alt="image-20240518190455761" style="zoom:50%;"></p><h4 id="代理IP的获取"><a href="#代理IP的获取" class="headerlink" title="代理IP的获取"></a>代理IP的获取</h4><p>目前有许多平台会提供代理IP的服务，且一般注册之后都会赠送一些免费使用的额度</p><h4 id="代理IP平台"><a href="#代理IP平台" class="headerlink" title="代理IP平台"></a><strong>代理IP平台</strong></h4><ul><li>天启  <a href="https://www.tianqiip.com/getIp">https://www.tianqiip.com/getIp</a><ul><li><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518191323650.png" alt="image-20240518191323650" style="zoom: 33%;"></li></ul></li></ul><h4 id="在python代码中如何配置代理"><a href="#在python代码中如何配置代理" class="headerlink" title="在python代码中如何配置代理"></a>在python代码中如何配置代理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ip =<span class="string">&quot;122.239.153.110&quot;</span></span><br><span class="line">port =<span class="number">40020</span></span><br><span class="line">proxies=&#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">f&quot;htpp://<span class="subst">&#123;ip&#125;</span>.<span class="subst">&#123;port&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#通过参数 proxies配置代理</span></span><br><span class="line">response = requests.get(url=url,headers=headers,proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(proxies)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure><h4 id="动态ip池"><a href="#动态ip池" class="headerlink" title="动态ip池"></a>动态ip池</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">天启平台有教程，更具生成的api链接发送get请求可以获取代理Ip列表</span></span><br><span class="line"><span class="string">每次在爬虫时，随机从列表中选择一个代理ip</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpiderCraw</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.proxyGetUrl = <span class="string">&quot;http://api.tianqiip.com/getip?secret=ka9cjsm0egycakir&amp;num=10&amp;type=json&amp;port=1&amp;time=5&amp;mr=1&amp;sign=d50e433630f39d20c428a0d5c6c033e7&quot;</span></span><br><span class="line">        self.ipList = requests.get(self.proxyGetUrl).json()[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getProxyIp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> random.choice(self.ipList)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getSendRequest</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#每次发送请求，从ip池中随机选择一个代理ip</span></span><br><span class="line">        proxyIp = self.getProxyIp()</span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(proxyIp[<span class="string">&quot;ip&quot;</span>],proxyIp[<span class="string">&quot;port&quot;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">        requests.get(url=url,proxies=proxies)</span><br><span class="line">url =</span><br><span class="line">ipPool = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(ipPool.json()[<span class="string">&quot;data&quot;</span>])</span><br></pre></td></tr></table></figure><h3 id="Cookie池的搭建"><a href="#Cookie池的搭建" class="headerlink" title="Cookie池的搭建"></a>Cookie池的搭建</h3><h4 id="爬虫中使用cookie的利弊"><a href="#爬虫中使用cookie的利弊" class="headerlink" title="爬虫中使用cookie的利弊"></a>爬虫中使用cookie的利弊</h4><h5 id="带上cookie好处"><a href="#带上cookie好处" class="headerlink" title="带上cookie好处"></a>带上cookie好处</h5><ul><li>能够访问登陆后的页面</li><li>能够实现部分反爬</li></ul><h4 id="带上cookie的坏处"><a href="#带上cookie的坏处" class="headerlink" title="带上cookie的坏处"></a>带上cookie的坏处</h4><ul><li>一套cookie往往对应一个用户的信息，请求太频繁容易被对方识别为爬虫</li><li>上面问题如何解决？使用多个账号，每次请求的cookie不一样即可</li></ul><h4 id="cookie池的搭建"><a href="#cookie池的搭建" class="headerlink" title="cookie池的搭建"></a>cookie池的搭建</h4><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><ul><li>主备多个账号，越多越好</li><li>爬取数据之前对这些账号进行批量登录，并将cookie保存在本地cookie池中<ul><li>需要登陆账号的可以这么做</li><li>不需要登陆账号的，可以启动多个浏览器，手动登陆，然后将cookie值复制存储在本地</li></ul></li><li>爬虫执行之后，每次从cookie池中随机选择一个cookie</li></ul><p><strong>示例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CookieManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.cookieList=[]</span><br><span class="line">        <span class="comment">#实现准备一组账号密码</span></span><br><span class="line">        self.userInfoList=[</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123321&quot;</span>,<span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx1&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123322&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx2&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123323&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx3&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123324&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx4&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;userName&quot;</span>: <span class="string">&quot;123325&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;wwxxx5&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> userInfo <span class="keyword">in</span> self.userInfoList:</span><br><span class="line">            self.loginGetCookie(userInfo)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.cookieList:</span><br><span class="line">            <span class="built_in">print</span>(item)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loginGetCookie</span>(<span class="params">self,userInfo</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        登陆函数，并从响应中获取cookie，然后保存在cookie池中</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        url=<span class="string">&quot;https://passport.china.com/logon&quot;</span></span><br><span class="line">        response = requests.post(url,data=userInfo)</span><br><span class="line">        self.cookieList.append(response.cookies)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getCookie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        供外部使用，随机从cookie池中选择一个cookie</span></span><br><span class="line"><span class="string">        外部使用时:直接在requests中以cookies参数进行传递</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> random.choice(self.cookieList)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cookieManager = CookieManager()</span><br><span class="line">    <span class="built_in">print</span>(cookieManager.getCookie())</span><br></pre></td></tr></table></figure><h3 id="Cookie池-IP池"><a href="#Cookie池-IP池" class="headerlink" title="Cookie池+IP池"></a>Cookie池+IP池</h3><p>同一个IP使用不同的Cookie，还是会出现同一个IP频繁请求，如果每个Cookie都绑定一组代理IP，这个时候就很难会被检测出来</p><p>基本思路：用不同ip去登陆不同账号，得到不同cookie，这样每一个代理Ipd都会对应多个cookie，在爬虫启动时，每次从ip_cookei池中选择一个ip，cookie对</p><h2 id="综合项目实战案例"><a href="#综合项目实战案例" class="headerlink" title="综合项目实战案例"></a>综合项目实战案例</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p>某原创音乐网站数据抓取</p><p>需求：抓取某原创音乐平台整站数据</p><p>地址：<a href="https://5sing.kugou.com/">https://5sing.kugou.com/</a></p><p>分页抓取该网站所有的原创音乐数据，一共50页</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518222840513.png" alt="image-20240518222840513" style="zoom: 33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518222855995.png" alt="image-20240518222855995" style="zoom:33%;"></p><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a><strong>抓包分析</strong></h3><p>通过抓包分析，我们发现该网站数据不是Ajax请求，直接抓取请求页面即可获取对应数据</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518223255287.png" alt="image-20240518223255287" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518223819051.png" alt="image-20240518223819051" style="zoom:50%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518224023061.png" alt="image-20240518224023061"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240518230616148.png" alt="image-20240518230616148"></p><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>获取歌曲列表、提取歌曲的歌名、歌曲首页地址<ol><li>发送请求，获取页面的HTML</li><li>解析HTML，提取歌名和歌曲ID、首页地址</li></ol></li><li>获取每首歌的下载地址<ol><li>发送请求获取歌曲的下载地址</li></ol></li><li>下载歌曲，保存在本地<ol><li>下载歌曲，保存本地</li></ol></li></ol><p>数据量分析：一共50页，每页20条数据，要完整的下载一首歌的话，需要通过两次请求，第一次请求页面，获取歌曲id，第二次针对该歌曲地址，将其下载到本地</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><h4 id="爬取所有歌曲的名称和id数据"><a href="#爬取所有歌曲的名称和id数据" class="headerlink" title="爬取所有歌曲的名称和id数据"></a>爬取所有歌曲的名称和id数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://5sing.kugou.com/yc/list&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#参数，经过分析，前三个参数应该是固定的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&quot;t&quot;</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;l&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;p&quot;</span>:page  <span class="comment">#页码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url=url,headers=headers,params=params).content.decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#解析htm，获取歌曲名称、链接地址</span></span><br><span class="line">    html = etree.HTML(response)</span><br><span class="line">    dlList = html.xpath(<span class="string">&#x27;//div[@class=&quot;lists&quot;]/dl&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> dlItem <span class="keyword">in</span> dlList:</span><br><span class="line">        title = dlItem.xpath(<span class="string">&#x27;.//h3/a/text()&#x27;</span>)[<span class="number">0</span>] <span class="comment">#名称</span></span><br><span class="line">        url = <span class="string">&#x27;https://5sing.kugou.com&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(dlItem.xpath(<span class="string">&#x27;.//h3/a/@href&#x27;</span>)[<span class="number">0</span>]) <span class="comment">#首页地址</span></span><br><span class="line">        <span class="built_in">id</span> = dlItem.xpath(<span class="string">&#x27;./dd[@class=&quot;l_action&quot;]/a[@class=&quot;m_date_shou&quot;]/@argid&#x27;</span>)[<span class="number">0</span>]<span class="comment">#id</span></span><br><span class="line">        <span class="built_in">print</span>(title,url,<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><h4 id="获取各个歌曲源文件的下载地址"><a href="#获取各个歌曲源文件的下载地址" class="headerlink" title="获取各个歌曲源文件的下载地址"></a>获取各个歌曲源文件的下载地址</h4><p>&gt;<br>&gt;</p><blockquote><p>抓包分析</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519000844468.png" alt="image-20240519000844468" style="zoom: 33%;"></p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519001011699.png" alt="image-20240519001011699" style="zoom:33%;"></p><p>两个不同歌曲请求的参数对比：</p><p>我们发现只有songid和signature这两个参数不一样，songid即为我们前面抓取的歌曲id，而难点就在于signature不知从何而来</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519001105427.png" alt="image-20240519001105427"></p></blockquote><p>难点：参数signature不知从何而来，这个可能可能设计到js加密</p><p>如何分析网站生成signature的js代码？</p><p>在所有源代码中搜索signature</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519002901327.png" alt="image-20240519002901327"></p><p> 定位到该位置</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519003003459.png" alt="image-20240519003003459" style="zoom: 80%;"></p><p>我们在控制台执行，发现n的值为</p><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240519003149366.png" alt="image-20240519003149366"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n的结构：</span><br><span class="line">字符串: o = &quot;5uytoxQewcvIc1gn1PlNF0T2jbbOzRl&quot;</span><br><span class="line">与请求参数的子字符串事项首位拼接得到拼接得到</span><br><span class="line"></span><br><span class="line">即 n = o + params +o</span><br><span class="line">我们经过多次实验发现字符串o为定值，不同请求、不同浏览器该值都是一致的</span><br></pre></td></tr></table></figure><p>这个js代码比较复杂，我们无法用python代码等价复现，只能将js代码拷贝至本地，由python调用执行</p><h2 id="其他补充知识"><a href="#其他补充知识" class="headerlink" title="其他补充知识"></a>其他补充知识</h2><h3 id="免费邮箱资源"><a href="#免费邮箱资源" class="headerlink" title="免费邮箱资源"></a>免费邮箱资源</h3><p>针对账户限制，注册账号需要大量邮箱进行注册新的账号</p><p><a href="https://blog.csdn.net/julius_lee/article/details/106802027">需要很多邮箱怎么办？分享几个不错的办法可无限安全生成多个邮箱</a></p><h3 id="免费代理IP资源"><a href="#免费代理IP资源" class="headerlink" title="免费代理IP资源"></a>免费代理IP资源</h3><p>设置自己本地的梯子IP地址：</p><p>打开clash软件，查看代理端口为7890，在代码首部添加如下代码，即可使用本地代理转发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置代理</span></span><br><span class="line">os.environ[<span class="string">&quot;http_proxy&quot;</span>] = <span class="string">&quot;http://localhost:7890&quot;</span></span><br><span class="line">os.environ[<span class="string">&quot;https_proxy&quot;</span>] = <span class="string">&quot;http://localhost:7890&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/05/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/python/%E7%88%AC%E8%99%AB/03%20%E7%88%AC%E8%99%AB%E8%BF%9B%E9%98%B6/image-20240604093135783.png" alt="image-20240604093135783"></p><p><a href="https://www.bytezonex.com/archives/8ZwHxBGP.html">参考资料一</a></p><h3 id="网站指纹反爬"><a href="#网站指纹反爬" class="headerlink" title="网站指纹反爬"></a>网站指纹反爬</h3><h4 id="背景-4"><a href="#背景-4" class="headerlink" title="背景"></a>背景</h4><p>我们使用<code>requests</code>库访问网站<a href="https://www.digikey.cn时，无论怎么设置头部信息，均是返回403页面，但是用浏览器或者PostMan访问时，均可得到正常的页面结果，这种情况大概率就是遇到了**原生模拟浏览器">https://www.digikey.cn时，无论怎么设置头部信息，均是返回403页面，但是用浏览器或者PostMan访问时，均可得到正常的页面结果，这种情况大概率就是遇到了**原生模拟浏览器</a> TLS/JA3 指纹的验证**，览器和<a href="https://so.csdn.net/so/search?q=postman&amp;spm=1001.2101.3001.7020">postman</a>都有自带指纹验证，而唯独requests库没有。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用第三方库<code>curl_cffi</code>访问，即可解决这个问题，其可以模仿对浏览器指纹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> curl_cffi <span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.digikey.cn&quot;</span>, impersonate=<span class="string">&quot;chrome110&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.content.decode(<span class="string">&quot;utf8&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://blog.csdn.net/lipachong/article/details/131213288">某网站指纹反爬处理</a></p><p><a href="https://www.bilibili.com/video/BV1nz421X7r8/?spm_id_from=333.337.search-card.all.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">JS逆向_浏览器JA3指纹信息</a></p><p><a href="https://pypi.org/project/curl-cffi/#description">curl-cffif官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ollama的使用</title>
      <link href="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/"/>
      <url>/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/</url>
      
        <content type="html"><![CDATA[<h1 id="Ollama"><a href="#Ollama" class="headerlink" title="Ollama"></a>Ollama</h1><h2 id="Ollama简介"><a href="#Ollama简介" class="headerlink" title="Ollama简介"></a>Ollama简介</h2><p>随着各个公司发布开源大模型，大模型管理工具越来越重要。Ollama就是一款优秀的开源大模型管理工具。利用Ollma开发者们可以自由的创建，训练模型，并且搭建本地化chatbot。同时Ollama还支持OpenAI同样形式的REST API以提升开发者效率。本质上讲Ollama是一个集成的本地大模型运行框架，它的出现极大地简化了AI模型的开发和使用过程。它支持Linux、Mac、Windows等系统，其内部不仅提供了丰富的AI模型库，而且提供了强大的API接口，可以方便将AI功能整合到用户自己具体的应用中。</p><p>Ollama的特点：</p><ul><li>一键式安装，无需繁琐的环境配置，简单易用</li><li>性能强大，可以充分利用本地的计算资源，可以仅仅利用CPU或者充分调用本地GPU来运行模型</li><li>功能丰富，提供了丰富的模型库，支持多种大语言模型并且支持多模态模型</li><li>提供了丰富的API接口，便于开发者结合自身需求灵活进行功能扩展和开发</li></ul><p>相关资料：<a href="https://ollama.com/">Ollama官网</a>  <a href="https://github.com/ollama/ollama">GitHub</a> <a href="https://ollama.com/library">支持的模型列表</a></p><h2 id="Ollama在Windows系统上的使用"><a href="#Ollama在Windows系统上的使用" class="headerlink" title="Ollama在Windows系统上的使用"></a>Ollama在Windows系统上的使用</h2><h3 id="Ollama安装"><a href="#Ollama安装" class="headerlink" title="Ollama安装"></a>Ollama安装</h3><p>直接在<a href="https://ollama.com/download/windows">官网</a>下载Windows平台的安装包</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507145152909.png" alt="image-20240507145152909"></p><p>安装完成之后就可以在菜单栏看到Ollama图标，此时就可以在Windows上使用Ollama了</p><h3 id="Ollama使用"><a href="#Ollama使用" class="headerlink" title="Ollama使用"></a>Ollama使用</h3><p>安装成功之后，我们在电脑任何位置打开命令行窗口，可以直接启动Ollama</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507150145854.png" alt="image-20240507150145854"></p><p>我们执行以下命令，可以自动pull对应的模型，并对模型进行加载，我们可以通过<a href="https://ollama.com/library">官网</a>查看支持模型列表和具体的模型细节</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run [modelname]</span><br></pre></td></tr></table></figure><p>首次执行上述命令会下载模型到本地，如果本地存在该模型，则不会被重复下载</p><p>我们以阿里巴巴通义千问4B模型使用为例展示如何本地使用大语言模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run qwen:4b</span><br></pre></td></tr></table></figure><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152309824.png" alt="image-20240507152309824"></p><p>Ollama使用方式有两种，命令行的放方式和API的方式</p><h4 id="命令行方式使用"><a href="#命令行方式使用" class="headerlink" title="命令行方式使用"></a>命令行方式使用</h4><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152416981.png" alt="image-20240507152416981"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run [modelname] *prompt* #可以不进入命令行方式调用</span><br></pre></td></tr></table></figure><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152709759.png" alt="image-20240507152709759"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run [modelname] *prompt* --verbose  #添加--verbose可以查看模型推理的具体开销细节</span><br></pre></td></tr></table></figure><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507153558820.png" alt="image-20240507153558820"></p><p>退出命令行</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507152452012.png" alt="image-20240507152452012"></p><h4 id="API方式使用"><a href="#API方式使用" class="headerlink" title="API方式使用"></a>API方式使用</h4><p><a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl用法指南</a>  <a href="https://github.com/ollama/ollama/blob/main/docs/api.md">Ollama API官方文档</a></p><p>Ollama API默认的地址和端口是<code>http:localhost:11434</code>，可以在安装启动Ollama的系统中直接调用访问</p><p>下面我们利用<code>postman</code>构造HTTP请求，访问Ollama服务:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507155607340.png" alt="image-20240507155607340"></p><p>响应</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507155704762.png" alt="image-20240507155704762"></p><p>如何修改默认端口号？</p><p>要更改地址和端口，可以添加以下环境变量：</p><ul><li>变量名：<code>OLLAMA_HOST</code></li><li>变量值（端口）：<code>:8000</code></li></ul><p>这样Ollama服务访问地址就可以变为<code>http://localhost:8000</code></p><h3 id="SpringAI整合Ollama"><a href="#SpringAI整合Ollama" class="headerlink" title="SpringAI整合Ollama"></a>SpringAI整合Ollama</h3><p><a href="https://docs.spring.io/spring-ai/reference/api/clients/ollama-chat.html">官方文档</a></p><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-ollama-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本地ollama服务地址</span></span><br><span class="line"><span class="attr">spring.ai.ollama.base-url</span>=<span class="string">http://localhost:11434</span></span><br><span class="line"><span class="comment">#启动allama客户端</span></span><br><span class="line"><span class="attr">spring.ai.ollama.chat.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#指定使用的模型</span></span><br><span class="line"><span class="attr">spring.ai.ollama.chat.options.model</span>=<span class="string">qwen:4b</span></span><br></pre></td></tr></table></figure><h3 id="编写简单controller代码"><a href="#编写简单controller代码" class="headerlink" title="编写简单controller代码"></a>编写简单controller代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OllamaChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatController</span><span class="params">(OllamaChatClient chatClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">generate</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;generation&quot;</span>, chatClient.call(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generateStream&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;ChatResponse&gt; <span class="title function_">generateStream</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="type">Prompt</span> <span class="variable">prompt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(<span class="keyword">new</span> <span class="title class_">UserMessage</span>(message));</span><br><span class="line">        <span class="keyword">return</span> chatClient.stream(prompt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>构造请求<code>http://localhost:8080/ai/generate?message=武汉景区</code></p><p>响应结果:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/03%20Ollama/Ollama/image-20240507211513747.png" alt="image-20240507211513747"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.youtube.com/watch?v=POf4qbohP9k">Ollama 使用指南 </a></p><p><a href="https://ollama.com/">Ollama官网</a></p><p><a href="https://github.com/ollama/ollama">Ollama GitHub</a></p><p><a href="https://www.sysgeek.cn/ollama-on-windows/">Ollama on Windows：本地运行大型语言模型（LLM）的新利器</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Baidu Comate</title>
      <link href="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/"/>
      <url>/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/</url>
      
        <content type="html"><![CDATA[<h1 id="Baidu-Comate"><a href="#Baidu-Comate" class="headerlink" title="Baidu Comate"></a>Baidu Comate</h1><p><a href="https://comate.baidu.com/zh/download">Baidu Comate</a>基于文心大模型，结合百度积累多年的编程现场大数据和外部优秀开源数据，为你生成更符合实际研发场景的优质代码，提升编码效率</p><p>可以在VS Code或者IDEA中以插件的形式集成使用</p><h2 id="Idea中集成"><a href="#Idea中集成" class="headerlink" title="Idea中集成"></a>Idea中集成</h2><p>点击【Plugins】，进入 Marketplace 选项卡，搜索框输入【Comate】，找到 Baidu Comate 后点击安装</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507204012558.png" alt="image-20240507204012558" style="zoom:67%;"></p><p>重启 IntelliJ IDE，重启成功后登录百度账号，即可使用</p><p>点击代码旁边按钮，可以使用对应的功能，比如代码检查，代码调优等</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507204447566.png" alt="image-20240507204447566"></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507204417398.png" alt="image-20240507204417398" style="zoom:67%;"></p><h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>比如我们需要编写一个功能的前端代码，其会自动给我们生成html代码、ccs代码和javascript代码</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507221638012.png" alt="image-20240507221638012"></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507221724449.png" alt="image-20240507221724449"></p><p>我们直接运行其给出的代码，展示的页面如下图所示：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507222017558.png" alt="image-20240507222017558" style="zoom:50%;"></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/04%20%E7%99%BE%E5%BA%A6Comate%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/baidu%20comate/image-20240507222133854.png" alt="image-20240507222133854" style="zoom:50%;"></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPring AI</title>
      <link href="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/"/>
      <url>/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-AI"><a href="#Spring-AI" class="headerlink" title="Spring AI"></a>Spring AI</h1><h2 id="Spring-AI简介"><a href="#Spring-AI简介" class="headerlink" title="Spring AI简介"></a>Spring AI简介</h2><p><a href="https://spring.io/projects/spring-ai">Spring AI官方文档</a></p><p>Spring AI 是一个面向人工智能工程的应用框架，它类似于一个客户端，可以实现向不同厂商对应的AI模型服务发送请求获取响应</p><p>SpringAI目前能够支持的AI模型</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/model.png" alt="img" style="zoom:80%;"></p><h2 id="Spring-AI实践"><a href="#Spring-AI实践" class="headerlink" title="Spring AI实践"></a>Spring AI实践</h2><p><a href="https://api.xty.app/">Open ai Api Key第三方平台</a></p><p>在该平台上注册可以免费获取一定的使用额度</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507203148267.png" alt="image-20240507203148267"></p><p>参考<a href="https://docs.spring.io/spring-ai/reference/api/clients/openai-chat.html#_sample_controller_auto_configuration">SpringAI openAI官方文档</a>，快速搭建一个应用</p><h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependency&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-openai-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="进行相关配置"><a href="#进行相关配置" class="headerlink" title="进行相关配置"></a>进行相关配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务地址</span></span><br><span class="line"><span class="attr">spring.ai.openai.base-url</span>=<span class="string">https://api.xty.app</span></span><br><span class="line"><span class="comment">#openai key</span></span><br><span class="line"><span class="attr">spring.ai.openai.api-key</span>=<span class="string">sk-yJ86bNiRwQJVyczO122aF307B7554905A0F53eF6B3B27132</span></span><br><span class="line"><span class="comment">#使用模型名称</span></span><br><span class="line"><span class="attr">spring.ai.openai.chat.options.model</span>=<span class="string">gpt-3.5-turbo</span></span><br><span class="line"><span class="comment">#随机性</span></span><br><span class="line"><span class="attr">spring.ai.openai.chat.options.temperature</span>=<span class="string">0.7</span></span><br></pre></td></tr></table></figure><h3 id="编写一个简单controller"><a href="#编写一个简单controller" class="headerlink" title="编写一个简单controller"></a>编写一个简单controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OpenAiChatClient chatClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatController</span><span class="params">(OpenAiChatClient chatClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//整体响应</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">generate</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;generation&quot;</span>, chatClient.call(message));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//流式响应</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ai/generateStream&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;ChatResponse&gt; <span class="title function_">generateStream</span><span class="params">(<span class="meta">@RequestParam(value = &quot;message&quot;, defaultValue = &quot;Tell me a joke&quot;)</span> String message)</span> &#123;</span><br><span class="line">        <span class="type">Prompt</span> <span class="variable">prompt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prompt</span>(<span class="keyword">new</span> <span class="title class_">UserMessage</span>(message));</span><br><span class="line">        <span class="keyword">return</span> chatClient.stream(prompt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>构造请求:<code>http://localhost:8080/ai/generate?message=%E5%AD%A6%E4%B9%A0Java%E8%B7%AF%E7%BA%BF</code></p><p>得到的响应:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507210454691.png" alt="image-20240507210454691"></p><h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><h3 id="调用openAI相关模型生成图片"><a href="#调用openAI相关模型生成图片" class="headerlink" title="调用openAI相关模型生成图片"></a>调用openAI相关模型生成图片</h3><p><a href="https://docs.spring.io/spring-ai/reference/api/clients/image/openai-image.html">官方文档参考</a></p><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启生图模式</span></span><br><span class="line"><span class="attr">spring.ai.openai.image.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#指定生图模型,默认为dall-e-3</span></span><br><span class="line"><span class="attr">spring.ai.openai.image.options.model</span>=<span class="string">dall-e-3</span></span><br></pre></td></tr></table></figure><h4 id="controller代码"><a href="#controller代码" class="headerlink" title="controller代码"></a>controller代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入openAiImageClien</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">OpenAiImageClient openAiImageClient;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/ai/image&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">generateImage</span><span class="params">(String prompt)</span>&#123;</span><br><span class="line">    <span class="type">ImageResponse</span> <span class="variable">response</span> <span class="operator">=</span> openAiImageClient.call(<span class="keyword">new</span> <span class="title class_">ImagePrompt</span>(prompt));</span><br><span class="line">    <span class="comment">//可以两种形式返回生成的图片</span></span><br><span class="line">    <span class="comment">//图片的url:response.getResult().getOutput().getUrl()</span></span><br><span class="line">    <span class="comment">//图片的base64编码:response.getResult().getOutput().getB64Json()</span></span><br><span class="line">    <span class="keyword">return</span> response.getResult().getOutput().getUrl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>构造请求:<code>http://localhost:8080/ai/image?prompt=一个女孩坐在苹果树下</code></p><p>响应结果:</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507214047146.png" alt="image-20240507214047146"></p><p>在浏览器直接输入上述url即可显示下图</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507214027753.png" alt="image-20240507214027753" style="zoom:50%;"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><a href="https://zhuanlan.zhihu.com/p/671853034">AnythingLLM：基于RAG方案构专属私有知识库（开源｜高效｜可定制）</a></p><p>我们可以使用AnythingLLM 配合 Ollama 构建自己的知识库，可以通过给本地模型喂入一些文本文档，使其具有一些特殊领域的知识</p><p>比如：我们选择本地Ollama模型，直接提问得到的结果如下</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220505442.png" alt="image-20240507220505442" style="zoom:80%;"></p><p>我们给其上传一个文本txt文件，文本内容如下:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">吴棒，男，毕业于华中科技大学，人张的贼帅</span><br></pre></td></tr></table></figure><p>然后上传该文本文件，喂入模型</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220714606.png" alt="image-20240507220714606" style="zoom:80%;"></p><p>再次提问：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220803128.png" alt="image-20240507220803128"></p><p>也可以直接给一个网页链接，其可以自动爬取网页内容训练模型</p><p>比如我们给其输入网页:<code>https://eic.hust.edu.cn/info/1195/7541.htm</code></p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507221034200.png" alt="image-20240507221034200"></p><p>喂入数据模型之前提问结果：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507220938907.png" alt="image-20240507220938907"></p><p>喂入数据之后模型提问结果：</p><p><img src="/2024/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/AI%E7%9B%B8%E5%85%B3/02%20Spring%20AI/Spring%20AI/image-20240507221151449.png" alt="image-20240507221151449"></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git版本控制</title>
      <link href="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/"/>
      <url>/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="VCS-版本控制系统"><a href="#VCS-版本控制系统" class="headerlink" title="VCS(版本控制系统)"></a>VCS(版本控制系统)</h1><h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><p>关于git的详细介绍，可以参考官网的<a href="https://git-scm.com/book/zh/v2">Git Book</a></p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>不同系统上git的安装流程 ，参照<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">官方文档</a></p><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><p>Git 自带一个 <code>git config</code> 的工具来帮助设置控制 Git 外观和行为的配置变量</p><p><strong>config作用域</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> <span class="comment">#只对某个仓库有效,该命令只能在某个git repository内部使用，在仓库内部--local的配置优先级会大于--global的配置</span></span><br><span class="line">git config --global <span class="comment">#对当前用户的所有仓库都有效</span></span><br><span class="line">git config --system <span class="comment">#对系统所有登录的用户都有效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示指定作用域的config配置，只需加 --list</span></span><br><span class="line">git config --list --<span class="built_in">local</span>  <span class="comment">#只该命令只能在某个git repository内部使用,查看某个具体的仓库的配置</span></span><br><span class="line">git config --list --global</span><br><span class="line">git config --list --system</span><br></pre></td></tr></table></figure><p><strong>配置用户信息</strong></p><p>安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your_name&quot;</span><br><span class="line">git config --global user.email &quot;your_email&quot;</span><br></pre></td></tr></table></figure><p><strong>查看配置信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506152643834.png" alt="image-20240506152643834"></p><h3 id="新建Git仓库"><a href="#新建Git仓库" class="headerlink" title="新建Git仓库"></a>新建Git仓库</h3><p>新建git仓库的两者场景</p><p>方法一：将已有的代码文件纳入git管理</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入已有的项目文件夹，执行:</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>方法二：新建一个直接用git管理的新文件夹</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init 文件夹名 <span class="params">#</span>其会在当前目录下新建一个新的文件夹，并加此文件夹纳入git管理</span><br></pre></td></tr></table></figure><h3 id="git工作区域的理解"><a href="#git工作区域的理解" class="headerlink" title="git工作区域的理解"></a>git工作区域的理解</h3><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/1090617-20181008211557402-232838726.png" alt="img"></p><p>Git本地有四个工作目录，这四个工作目录之间的状态转换关系如上图所示</p><ul><li>Workspace：工作区，本地存放项目的文件夹</li><li>Index/Stage：暂存区，用于存放临时改动的记录</li><li>Repository：仓库区/版本库，里面会存放所有提交的版本数据</li><li>Remote：远程仓库，比如Github上的仓库，我们可以通过相关命令把本地文件推送到远程仓库</li></ul><p>我们通常直接操作的目录就是工作目录，然后将需要用git进行管理的文件或者文件夹，通过<code>git add 文件名..</code>放入暂存区，通过<code>git commit -m 标记</code>将暂存区文件提交至本地仓库，通过<code>git push</code>将本地仓库推送到关联的远程仓库</p><h3 id="git文件状态理解"><a href="#git文件状态理解" class="headerlink" title="git文件状态理解"></a>git文件状态理解</h3><p>版本控制是对文件进行版本控制，所以要明确当前操作文件所处的状态，在git中文件有四种状态</p><ul><li>untrack<ul><li>未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged</li></ul></li><li>modified<ul><li>修改过，针对的就是已经登记在案的文件最近又发生了改动的情况，也就是说我们最近改过了某一个之前已经登记在案的文件</li></ul></li><li>committed<ul><li>执行完commit之后，会在仓库中生成一个版本号(hash值)，标志这次提交。之后任何时候，都可以借助这个hash值回退到这次提交。</li></ul></li><li>stage<ul><li>这个时候已经执行过git add，但未执行git commit，但是用git diff已经看不到任何修改。</li></ul></li></ul><h2 id="Git常见实操"><a href="#Git常见实操" class="headerlink" title="Git常见实操"></a>Git常见实操</h2><h3 id="场景一：从头创建一个新的仓库"><a href="#场景一：从头创建一个新的仓库" class="headerlink" title="场景一：从头创建一个新的仓库"></a>场景一：从头创建一个新的仓库</h3><p>在项目中新建文件以及文件内容修改</p><p>在C盘下创建目录git_learning，进入该目录执行<code>git init</code>，可以看到生成了一个隐藏文件夹<code>.git</code>，此时git_learning文件夹就成为了一个版本库，里面的文件都可以被git管理，即每个文件的修改、删除都能被git跟</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506195103057.png" alt="image-20240506195103057"></p><p>在版本库(本地仓库)中添加新的文件</p><p>我们在git_learning文件夹下新建一个<code>hello.txt</code>文件，里面内容为v000000</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506200840972.png" alt="image-20240506200840972"></p><p>执行<code>git add hello.txt</code>将该文件提交到暂存区</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506200930083.png" alt="image-20240506200930083"></p><p>执行<code>git commit -m xxx</code>将文件提交到仓库</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506201100485.png" alt="image-20240506201100485"></p><p>每次执行<code>git status</code>可以查看文件的状态</p><p>对<code>hello.txt</code>文件进行修改，将<code>v000000</code>改为<code>v111111</code></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506201330714.png" alt="image-20240506201330714"></p><p>我们可以通过执行<code>git diff 文件名</code>的方式查看文件中到底改动了什么内容</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506201453188.png" alt="image-20240506201453188"></p><p>知道文件修改内容之后，如果无误，可以重新对文件提交到暂存区和仓库</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506201707786.png" alt="image-20240506201707786"></p><h3 id="场景二：文件版本回退"><a href="#场景二：文件版本回退" class="headerlink" title="场景二：文件版本回退"></a>场景二：文件版本回退</h3><p>前面我们对hello.txt文件进行了修改，前后一共提交了两次</p><p>现在我们对文件再次修改，将文件内容改为<code>v222222</code>，并提交，我们前后对该文件修改了两次，该文件存在三个不同的版本</p><p>我们可以通过<code>git log</code>查看历史提交记录</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506202044597.png" alt="image-20240506202044597"></p><p>那么如果我们现在想把文件内容恢复到前面的某个版本，该怎么做？</p><p>git中回滚到历史版本的命令:</p><ul><li><code>git reset --hard HEAD^</code>:回退到当前的上一个版本</li><li><code>git reset --hard HEAD^^</code>：回退到当前的上上一个版本</li><li><code>git reset --hard HEAD~n</code>：回退到当前的前n个版本</li><li><code>git reset --hard 版本号</code>：可以精准回退到某个具体的版本记录</li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506202650087.png" alt="image-20240506202650087"></p><p>可以看到回滚之后，<code>git log</code>看不到第三次提交的记录，那么如果我们想恢复到第三版记录(即内容为v222222)，该怎么做？</p><p>我们可以先通过<code>git reflog</code>查看版本号,然后回滚到指定版本</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git 的 reflog 是指引用日志（reference logs）的简称，它记录了 Git 仓库中 HEAD 引用的变化历史。换句话说，reflog 记录了本地仓库的操作历史，包括分支切换、合并、重置等操作，即使在一些操作后出现了提交丢失或者分支丢失的情况下，通过 reflog 也可以找回之前的状态。</span><br></pre></td></tr></table></figure><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506203046924.png" alt="image-20240506203046924"></p><h3 id="场景三：撤销文件修改与恢复被删除文件"><a href="#场景三：撤销文件修改与恢复被删除文件" class="headerlink" title="场景三：撤销文件修改与恢复被删除文件"></a>场景三：撤销文件修改与恢复被删除文件</h3><p>我们修改<code>hello.txt</code>文件，将其内容改为了<code>v333333</code>，此时未执行其他命令，文件处于工作区，我们发现内容修改错了，想恢复到原始内容<code>v222222</code>，该怎么做？</p><p>此时有三种解决办法：</p><ul><li>直接修改<code>hello.txt</code>，将内容修改为原始内容<ul><li>此方法缺陷在于，如果原始内容较多，不记得了该怎么办？无法手动恢复</li></ul></li><li>将错就错，执行<code>git add</code>、<code>git commit</code>将文件提交仓库，再执行<code>git reset --hard HEAD^</code>回滚到上一版本</li><li>执行<code>git checkout -- 文件名</code>，可以把文件在工作区的修改全部丢弃</li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506203932209.png" alt="image-20240506203932209"></p><p>我们在git_learning目录下新建一个文件<code>test.txt</code>，然后将其提交到仓库，然后将该文件删除，那么我们如果想将该文件恢复应该怎么做？</p><ul><li>方法1：<code>git commit</code>然后<code>git reset</code></li><li>方法2：<code>git checkout -- test.txt</code>，可以直接在版本库中恢复此文件</li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506204655377.png" alt="image-20240506204655377"></p><h3 id="场景四：本地仓库与远程仓库的关联"><a href="#场景四：本地仓库与远程仓库的关联" class="headerlink" title="场景四：本地仓库与远程仓库的关联"></a>场景四：本地仓库与远程仓库的关联</h3><p><a href="https://www.cnblogs.com/linshengqian/p/15065553.html">git配置连接github</a></p><p>我们在GitHub上新建一个仓库<code>git_learning</code>，可以通过如下操作，将本地仓库与远程仓库关联起来，并将本地仓库推送到远程仓库</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin xxxxx.git <span class="params">#</span>本地仓库与远程仓库</span><br><span class="line">git push -u origin master <span class="params">#</span>将本地仓库master分支推送到远程仓库</span><br></pre></td></tr></table></figure><h3 id="场景五：创建和管理分支"><a href="#场景五：创建和管理分支" class="headerlink" title="场景五：创建和管理分支"></a>场景五：创建和管理分支</h3><p>在我们实际代码开发过程中，一个项目可能会衍生出多个版本或者类型，但不同版本可能依赖的主体核心代码一致，只是不同版本的部分功能可能不一样，这个时候我们就需要将核心代码的部分生成多个分支用于支持不同版本程序的开发</p><p>或者同一项目多人协作，一般是不会直接允许在master(主分支)上进行开发，而是先在主分支上克隆一份，等个人开发完毕后再合并到主分支，这样可以避免代码污染等对主分支造成破坏</p><p><code>git branch -a</code>列出所有本地分支和远程分支</p><p><code>git branch</code>列出所有本地分支</p><p><code>git branch -r</code>列出所有远程分支</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506213127779.png" alt="image-20240506213127779"></p><p><code>git branch 分支名</code>创建分支</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506213656875.png" alt="image-20240506213656875"></p><p><code>git branch -d 分支名</code>删除分支</p><p><code>git checkout 分支名</code>将当前项目切换为指定分支</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506213823140.png" alt="image-20240506213823140"></p><p>将当前新的分支推送到远程仓库(当前本地分支first推送到远程仓库的分支名也应该叫first)</p><p><code>git push --set-upstream origin first</code></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506214230927.png" alt="image-20240506214230927"></p><p>在本地first分支上的修改不会影响本地和远程master分支上的内容</p><p>观察下面两张图，我们本地将分支切换回master，可以发现本地的tt.txt文件就会自动消失</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506214738664.png" alt="image-20240506214738664"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506214808174.png" alt="image-20240506214808174"></p><p>如何合并多个分支？</p><p>在实际项目开发过程中，我们在自己分支上进行开发，最后要部署测试时，需要将自己分支代码合并到主分支应该怎么做？</p><p>我们首先执行<code>git checkout master</code>切换回主分支</p><p>执行<code>git merge first</code>将当前分支(主分支)与first分支代码合并</p><p>执行<code>git push</code>将本地主分支代码推送到远程仓库主分支</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240506215256645.png" alt="image-20240506215256645"></p><h3 id="场景六：团队协作与代码冲突解决"><a href="#场景六：团队协作与代码冲突解决" class="headerlink" title="场景六：团队协作与代码冲突解决"></a>场景六：团队协作与代码冲突解决</h3><p>团队仓库如何进行git协作</p><p>团队仓库可以添加多名成员同时协作，注意此时各个成员在本地操作之前最好使用</p><p><code>git pull</code>将仓库最新代码拉取到本地，保证线上仓库与本地仓库的一致性</p><p>对于团队协作，我们的提交顺序：</p><ol><li>刚开始进行项目开发时，使用<code>git pull</code>拉取更新</li><li>项目代码开发完毕之后，先<code>git add</code>、<code>git comiit</code>到本地仓库</li><li>push之前再使用<code>git pull</code>确保当前远程仓库所有更新都已经获取<ul><li>这样做是为了避免冲突，因为如果两个人同时操作了一个文件的变更，这时就会出现协作冲突，git此时不知道到底要使用哪一个人的变更，所以它会将两个人提交的不同部分标记出来</li></ul></li><li>最后再<code>git push</code>将本地仓库推送到远程仓库</li></ol><h2 id="Git开源项目或者团队项目协作场景"><a href="#Git开源项目或者团队项目协作场景" class="headerlink" title="Git开源项目或者团队项目协作场景"></a>Git开源项目或者团队项目协作场景</h2><p>如何进行Github团队项目的协作？</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们准备两台不同的电脑，每台电脑登陆不同的github账号，模拟团队中的不同项目成员，由其中一个成员在github上创建一个公共仓库，然后邀请另一个账号(成员)协作。github创建团队项目team-work、并且邀请团队成员如下图所示</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240604234532722.png" alt="image-20240604234532722" style="zoom:33%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240604234406883.png" alt="image-20240604234406883" style="zoom: 33%;"></p><h3 id="团队协作整个流程"><a href="#团队协作整个流程" class="headerlink" title="团队协作整个流程"></a>团队协作整个流程</h3><p>一般团队协作各个成员是不允许直接在main(master)分支上直接操作，都是各自简历一个新的分支来进行</p><p>下面来模拟两个成员A和成员B如何协作团队项目</p><p>仓库最初的状态如下图所示，三个文件，以及test.txt中的内容如下图所示：</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605100946687.png" alt="image-20240605100946687" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605101127141.png" alt="image-20240605101127141" style="zoom:50%;"></p><p>下面模拟团队协作，成员A的任务：创建新的文件testA.txt、在原始的test.txt最后一行添加<code>I am member A</code></p><p>成员B的任务：创建新的文件testB.txt、在原始test.txt最后一行添加<code>I am member B</code></p><p>然后两个成员各自提交到远程仓库对应的分支，然后由管理员B来进行分支合并和冲突问题解决</p><h4 id="成员A"><a href="#成员A" class="headerlink" title="成员A"></a>成员A</h4><ul><li>拉取项目到本地<ul><li><code>git clone 远程仓库地址</code></li></ul></li><li>在本地创建自己的分支<ul><li><code>git checkout -b 自己的分支名</code></li></ul></li><li>进行文件修改或者相关文件添加</li><li>提交到远程仓库<ul><li><code>git push origin 自己的分支名</code></li></ul></li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605102708908.png" alt="image-20240605102708908" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605102814850.png" alt="image-20240605102814850"></p><h4 id="成员B"><a href="#成员B" class="headerlink" title="成员B"></a>成员B</h4><ul><li>拉取项目到本地<ul><li><code>git clone 远程仓库地址</code></li></ul></li><li>在本地创建自己的分支<ul><li><code>git checkout -b 自己的分支名</code></li></ul></li><li>进行文件修改或者相关文件添加</li><li>提交到远程仓库<ul><li><code>git push origin 自己的分支名</code></li></ul></li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103558966.png" alt="image-20240605103558966"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103623151.png" alt="image-20240605103623151"></p><h4 id="仓库合并"><a href="#仓库合并" class="headerlink" title="仓库合并"></a>仓库合并</h4><p>当前仓库状态：</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103656896.png" alt="image-20240605103656896"></p><p>成员可以在Github上创建pull request请求，让原作者(管理员人)看到你的修改，然后管理员会review代码文件，解决合并冲突，然后会执行<code>Squash merge</code>将对应分支代码合并到main(master)分支</p><p><strong>对于分支memberA的处理</strong></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103729459.png" alt="image-20240605103729459" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103758042.png" alt="image-20240605103758042" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103848407.png" alt="image-20240605103848407" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605103949299.png" alt="image-20240605103949299" style="zoom:50%;"></p><p><strong>对于分支memberB的处理</strong></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104109678.png" alt="image-20240605104109678" style="zoom:50%;"></p><p>由于分支A与分支B都在同一文件test.txt中做了修改，所以会发生合并冲突，需要解决冲突才能合并</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104152827.png" alt="image-20240605104152827" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104330474.png" alt="image-20240605104330474" style="zoom:50%;"></p><p>解决冲突，同时保留A和B的修改（删除文件中所有的分隔符即可)</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104508244.png" alt="image-20240605104508244"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104547186.png" alt="image-20240605104547186"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104614032.png" alt="image-20240605104614032" style="zoom:50%;"></p><p>此时main分支中包含了A和B两者提交和更改的所有记录</p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104708323.png" alt="image-20240605104708323" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605104839138.png" alt="image-20240605104839138"></p><h4 id="各个成员如何同步远程最新的代码"><a href="#各个成员如何同步远程最新的代码" class="headerlink" title="各个成员如何同步远程最新的代码"></a>各个成员如何同步远程最新的代码</h4><p>远程main(master)仓库更新后，各个成员本地git与远程仓库不一致，需要拉取远程main仓库最新状态，然后与本地自己的分支合并，同步最新状态</p><p>仓库主分支main中内容发生了变更，此时成员A需要同步远程仓库最新状态，并在最新状态上做修改，那么他应该怎么做？</p><ul><li>本地切换到main分支<code>git checkout main</code></li><li>拉取远程仓库main分支最新内容到本地<code>git pull origin main</code></li><li>切换到自己的分支<code>git checkout memberA</code></li><li>将main分支与自己的分支进行合并<code>git rebase main</code></li><li>后续在最新状态上重复前面正常操作即可</li></ul><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605105913293.png" alt="image-20240605105913293" style="zoom:50%;"></p><p><img src="/2024/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/git%E5%AD%A6%E4%B9%A0/Git/image-20240605110117907.png" alt="image-20240605110117907" style="zoom:50%;"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/m0_48319758/article/details/122832675">如何作为Collaborator在Github更新仓库（上传代码）</a></p><p><a href="https://www.youtube.com/watch?v=uj8hjLyEBmU">十分钟学会正确的github工作流，和开源作者们使用同一套流程</a></p><p><a href="https://blog.csdn.net/u010393510/article/details/127121169">详解Git合并冲突——问题重现、原因及解决 “Automatic merge failed； fix conflicts and then commit the result.“</a></p><h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://git-scm.com/book/zh/v2">Pro Git</a></p><p><a href="https://zhuanlan.zhihu.com/p/30044692">Git使用教程,最详细，最傻瓜，最浅显，真正手把手教</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见免费资源网站</title>
      <link href="/2024/04/22/%E4%B8%AA%E4%BA%BA%E6%9D%82%E9%A1%B9/%E5%85%8D%E8%B4%B9%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/"/>
      <url>/2024/04/22/%E4%B8%AA%E4%BA%BA%E6%9D%82%E9%A1%B9/%E5%85%8D%E8%B4%B9%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="常见免费资源网站"><a href="#常见免费资源网站" class="headerlink" title="常见免费资源网站"></a>常见免费资源网站</h1><h2 id="聚合搜索平台"><a href="#聚合搜索平台" class="headerlink" title="聚合搜索平台"></a>聚合搜索平台</h2><p><a href="https://www.chongbuluo.com/">虫部落</a>    聚合搜索平台，涵盖论坛以及常见问题的问答，学术、教程等常见搜索网站的聚合</p><p><a href="https://keyanyu.com/">科研鱼导航</a> 聚合搜索平台，主要是学术科研相关搜索资源的聚合，包含常见的科研工具、学术论文、期刊会议等</p><p><a href="https://yigekuang.cn/">一个框导航网</a>  各种资源网站大聚合</p><h2 id="设计类"><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h2><p><a href="https://www.maliquankai.com/">码力全开</a>  技术、设计、产品、运营，以及关于独立开发者常使用的设计资源类库</p><h2 id="电子书类"><a href="#电子书类" class="headerlink" title="电子书类"></a>电子书类</h2><p><a href="https://shuxiangjia.cn/#google_vignette">书享家</a>   聚合各种电子书下载网站</p><h2 id="PPT类"><a href="#PPT类" class="headerlink" title="PPT类"></a>PPT类</h2><p><a href="https://hippter.com/">HiPPTER</a>  聚合各种PPT资源网站</p><h2 id="教学资源类"><a href="#教学资源类" class="headerlink" title="教学资源类"></a>教学资源类</h2><p><a href="https://www.diyijc.com/">第一教程网_免费的综合知识学习网站 (diyijc.com)</a>  涵盖小学、初中、高中、大学、研究生以及各种技能教学视频的网站</p><p><a href="https://www.examcoo.com/">考试酷</a>  涵盖各种学科考试的在线题库系统，比如计算机等级考试、软考、考公、英语等级考试等</p><p><a href="https://moocs.unipus.cn/">中国高校外语慕课平台（UMOOCs） (unipus.cn)</a>  汇聚中国各个高效优质的外语教学课程，包含英语、以及各种其他小语种</p><h2 id="视频图片资源相关"><a href="#视频图片资源相关" class="headerlink" title="视频图片资源相关"></a>视频图片资源相关</h2><p><a href="https://shuxiangjia.cn/#google_vignette">wallhaven</a>  涵盖大量高清壁纸资源</p><p><a href="https://unsplash.com/">Unsplash</a> 各种设计师、摄影师制作的图片资源，可以免费下载</p><p><a href="https://www.videvo.net/">Videvo</a>  视频和音视频资源网站，适用于视频剪辑制作者，需要的各种素材齐全</p><p><a href="https://pixabay.com/zh/">Pixabay</a> 音视频资源丰富，包含大量视频、音频、图片、插画、矢量图资源</p><p><a href="https://www.pexels.com/zh-cn/">Pexels</a>  高清图片资源</p><h2 id="其他稀缺资源类"><a href="#其他稀缺资源类" class="headerlink" title="其他稀缺资源类"></a>其他稀缺资源类</h2><p><a href="https://airpano.org.cn/">AirPano</a>  可以在线观看世界各地360全景风景图</p><p><a href="https://www.upyunso.com/">upyunso</a> 没有套路的网盘资源搜索网站</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现带括号的四则运算表达式的计算</title>
      <link href="/2024/04/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95%E4%BB%A5%E5%8F%8A%E4%B8%AA%E4%BA%BA%E7%BB%8F%E9%AA%8C%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E5%AE%9E%E7%8E%B0%E5%B8%A6%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
      <url>/2024/04/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95%E4%BB%A5%E5%8F%8A%E4%B8%AA%E4%BA%BA%E7%BB%8F%E9%AA%8C%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E5%AE%9E%E7%8E%B0%E5%B8%A6%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="实现带括号的四则运算表达式的计算"><a href="#实现带括号的四则运算表达式的计算" class="headerlink" title="实现带括号的四则运算表达式的计算"></a>实现带括号的四则运算表达式的计算</h1><p>本题源于找暑期实习携程二面当时的手撕题目，当时比较懵逼，没有撕出来</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目描述:</span><br><span class="line">利用栈或者队列求解:</span><br><span class="line">1+((2+3)×4)-5</span><br></pre></td></tr></table></figure><p>分析:我们以前做过如何用单个栈求解逆波兰表达式的值，本题给出的是一个中缀表达式，逆波兰表达式是后缀表达式的形式</p><p>比如:题目中的表达式对应的后缀表达形式为:<code>123+4×+5-</code></p><p>所以本题首先需要解决的问题是：</p><ol><li>如何将一个中缀表达式转换为后缀表达式</li><li>如何求解后缀表达式的值</li></ol><h2 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h2><p>利用一个栈一个队列即可，定义一个栈<code>stack</code>和一个队列<code>queue</code>，然后遍历中缀表达式，碰到数字，直接将其加入队列<code>queue</code>，碰到非数字字符，则根据实际情况需要做如下操作：</p><ul><li>如果当前栈<code>stack</code>为空或者<code>stack</code>栈顶元素为<code>(</code>，则直接将当前字符加入栈<code>stack</code></li><li>如果当前字符的优先级大于栈<code>stack</code>栈顶字符的优先级，则也直接将当亲字符加入栈<code>stack</code></li><li>否则，不断弹出栈<code>statck</code>栈顶的字符直到栈顶字符的优先级小于当前字符或者栈顶字符为’(‘</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">(<span class="type">char</span> c)</span>&#123;</span><br><span class="line">    <span class="type">int</span> priority=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:priority=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:priority=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;×&#x27;</span>:priority=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:priority=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> priority;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">inPrefix2postPrefix</span><span class="params">(String str)</span>&#123;</span><br><span class="line">    List&lt;String&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Stack&lt;Character&gt; opStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index&lt; str.length())&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(index);</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//数字，注意有的数字并非只有一位，所以要注意拼接</span></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> (index&lt;str.length() &amp;&amp; (str.charAt(index)&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(index)&lt;=<span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">                sb.append(str.charAt(index));</span><br><span class="line">                index+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            resultList.add(sb.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//非数字字符</span></span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || opStack.isEmpty())&#123;</span><br><span class="line">                opStack.push(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//全部弹出直至栈顶为(</span></span><br><span class="line">                <span class="keyword">while</span> (!(opStack.peek()==<span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">                    resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                opStack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(opStack.peek()==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                opStack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(getPriority(opStack.peek())&lt;getPriority(c))&#123;</span><br><span class="line">                opStack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (getPriority(c)&lt;=getPriority(opStack.peek()))&#123;</span><br><span class="line">                    resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(opStack.size()==<span class="number">0</span> || opStack.peek()==<span class="string">&#x27;(&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                opStack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">            index+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!opStack.isEmpty())&#123;</span><br><span class="line">        resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符的优先级</p><ul><li>‘)’优先级最高</li><li>‘×’与’/‘的优先级要高于’+’和’-‘</li><li>‘(‘的优先级最低</li></ul><h2 id="后缀表达式求值"><a href="#后缀表达式求值" class="headerlink" title="后缀表达式求值"></a>后缀表达式求值</h2><p>利用单个栈<code>stack</code>即可解决，碰到数字，则直接入栈，碰到字符，则弹出栈中的两个数字，根据运算符类型进行求解，再将运算结果加入栈中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">calbyPostPrefix</span><span class="params">(List&lt;String&gt; postPrefixList)</span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(String item:postPrefixList)&#123;</span><br><span class="line">        <span class="keyword">if</span>(item.equals(<span class="string">&quot;+&quot;</span>) || item.equals(<span class="string">&quot;-&quot;</span>) || item.equals(<span class="string">&quot;×&quot;</span>) || item.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            stack.push(cal(num1,num2,item));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(Integer.parseInt(item));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.peek();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2,String c)</span>&#123;</span><br><span class="line">    <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:result=num1+num2;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:result=num1-num2;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;×&quot;</span>:result=num1*num2;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:result=num1/num2;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ALTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Java求解带括号的优先级运算:</span></span><br><span class="line"><span class="comment">            1 + ( ( 2 + 3 ) × 4 ) - 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          思路:首先将中缀表达式转换为后缀表达式，然后根据后缀表达式去计算</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;12+((21+3)×4)-5&quot;</span>;</span><br><span class="line">        List&lt;String&gt; postPrefixList = inPrefix2postPrefix(str);</span><br><span class="line">        System.out.println(postPrefixList);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calbyPostPrefix(postPrefixList);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calbyPostPrefix</span><span class="params">(List&lt;String&gt; postPrefixList)</span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String item:postPrefixList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(item.equals(<span class="string">&quot;+&quot;</span>) || item.equals(<span class="string">&quot;-&quot;</span>) || item.equals(<span class="string">&quot;×&quot;</span>) || item.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                stack.push(cal(num1,num2,item));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(Integer.parseInt(item));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2,String c)</span>&#123;</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:result=num1+num2;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:result=num1-num2;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;×&quot;</span>:result=num1*num2;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:result=num1/num2;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">(<span class="type">char</span> c)</span>&#123;</span><br><span class="line">        <span class="type">int</span> priority=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:priority=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:priority=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;×&#x27;</span>:priority=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:priority=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> priority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">inPrefix2postPrefix</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        List&lt;String&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;Character&gt; opStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index&lt; str.length())&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(index);</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//数字，注意有的数字并非只有一位，所以要注意拼接</span></span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">while</span> (index&lt;str.length() &amp;&amp; (str.charAt(index)&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(index)&lt;=<span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">                    sb.append(str.charAt(index));</span><br><span class="line">                    index+=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                resultList.add(sb.toString());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//非数字字符</span></span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || opStack.isEmpty())&#123;</span><br><span class="line">                    opStack.push(c);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c==<span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">//全部弹出直至栈顶为(</span></span><br><span class="line">                    <span class="keyword">while</span> (!(opStack.peek()==<span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">                        resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    opStack.pop();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(opStack.peek()==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    opStack.push(c);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(getPriority(opStack.peek())&lt;getPriority(c))&#123;</span><br><span class="line">                    opStack.push(c);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span> (getPriority(c)&lt;=getPriority(opStack.peek()))&#123;</span><br><span class="line">                        resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span>(opStack.size()==<span class="number">0</span> || opStack.peek()==<span class="string">&#x27;(&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    opStack.push(c);</span><br><span class="line">                &#125;</span><br><span class="line">                index+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!opStack.isEmpty())&#123;</span><br><span class="line">            resultList.add(opStack.pop()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo简单使用</title>
      <link href="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/"/>
      <url>/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/</url>
      
        <content type="html"><![CDATA[<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><h2 id="分布式系统概述"><a href="#分布式系统概述" class="headerlink" title="分布式系统概述"></a>分布式系统概述</h2><h3 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h3><ul><li>美观</li><li>功能</li><li>速度</li><li>稳定性</li></ul><p>其中美观由UI决定、功能由PM决定，而速度和稳定性则与开发人员息息相关</p><h3 id="互联网项目特点"><a href="#互联网项目特点" class="headerlink" title="互联网项目特点"></a>互联网项目特点</h3><ul><li>用户多</li><li>流量大、并发高</li><li>海量数据</li><li>易受攻击</li><li>功能繁琐</li><li>变更快</li></ul><h3 id="大型互联网项目架构目标"><a href="#大型互联网项目架构目标" class="headerlink" title="大型互联网项目架构目标"></a>大型互联网项目架构目标</h3><h4 id="衡量网站的性能指标"><a href="#衡量网站的性能指标" class="headerlink" title="衡量网站的性能指标"></a>衡量网站的性能指标</h4><h5 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h5><p>指执行一个请求从开始到最后收到响应数据所花费的总体时间</p><h5 id="并发数"><a href="#并发数" class="headerlink" title="并发数"></a>并发数</h5><p>指系统同时能够处理的请求数量</p><ul><li>并发连接数<ul><li>指的是客户端向服务器发起请求，并建立了TCP连接，每秒钟服务器连接的总TCP数量</li></ul></li><li>请求数(QPS)<ul><li>每秒多少请求</li></ul></li><li>并发用户数<ul><li>单位时间内多少用户</li></ul></li></ul><h5 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h5><p>单位时间内系统能处理的请求数量</p><ul><li>QPS（Query per second) 每秒查询数</li><li>TPS（Transactions per second)每秒事务数<ul><li>一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</li><li>•一个页面的一次访问，只会形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，就会有多个QPS</li></ul></li></ul><h4 id="大型互联网项目目标"><a href="#大型互联网项目目标" class="headerlink" title="大型互联网项目目标"></a>大型互联网项目目标</h4><ul><li><p><strong>高性能</strong>：提供快速的访问体验。</p></li><li><p><strong>高可用</strong>：网站服务一直可以正常访问。</p></li><li><p><strong>可伸缩</strong>：通过硬件增加/减少，提高/降低处理能力。</p></li><li><p><strong>高可扩展</strong>：系统间耦合低，方便的通过新增/移除方式，增加/减少新的功能/模块。 </p></li><li><p><strong>安全性</strong>：提供网站安全访问和数据加密，安全存储等策略。</p></li><li><p><strong>敏捷性</strong>：随需应变，快速响应。</p></li></ul><h3 id="集群与分布式"><a href="#集群与分布式" class="headerlink" title="集群与分布式"></a>集群与分布式</h3><ul><li>集群：很多人一起干一样的事，同一业务部署在多台机器</li><li>分布式：很多人一起干不一样的事，这些不一样的事，合起来是一件大事，一个大的业务系统，拆分成多个小的业务模块，不同模块部署在不同机器上</li></ul><p>高性能、高可用、可伸缩、高扩展</p><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240409220727156.png" alt="image-20240409220727156" style="zoom: 33%;"></p><h2 id="Dubbo概述"><a href="#Dubbo概述" class="headerlink" title="Dubbo概述"></a>Dubbo概述</h2><ul><li>Dubbo是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。</li><li>致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案</li><li><a href="http://dubbo.apache.org">官网</a></li></ul><h3 id="Dubbo基本架构"><a href="#Dubbo基本架构" class="headerlink" title="Dubbo基本架构"></a>Dubbo基本架构</h3><p><strong>节点角色说明：</strong></p><ul><li><p><strong>Provider</strong>：暴露服务的服务提供方</p></li><li><p><strong>Container</strong>：服务运行容器</p></li><li><p><strong>Consumer</strong>：调用远程服务的服务消费方</p></li><li><p><strong>Registry</strong>：服务注册与发现的注册中心</p></li><li><p><strong>Monitor</strong>：统计服务的调用次数和调用时间的监控中心</p></li></ul><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240409235820537.png" alt="image-20240409235820537"></p><h2 id="Dubbo快速入门"><a href="#Dubbo快速入门" class="headerlink" title="Dubbo快速入门"></a>Dubbo快速入门</h2><p>Dubbo官方推荐使用<a href="https://zookeeper.apache.org/"><strong>Zookeeper</strong></a>作为注册中心</p><p>所以需要首先安装zookeeper</p><h3 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h3><p>我们选择在VMWare虚拟机CentOS7系统上进行安装，安装zookeeper版本为3.5.6</p><p><a href="https://zookeeper.apache.org/releases.html">Zookeeper下载地址</a></p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>下载对应安装包，并上传到虚拟机对应目录</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/springCloudTool <span class="params">#</span>切换到对应目录</span><br><span class="line">mkdir zookeeper <span class="params">#</span>创建目录</span><br><span class="line">通过winscap将安装包上传至/home/springCloudTool/zookeeper目录下</span><br><span class="line">tar -zxvf apache-ZooKeeper-3.5.6-bin.tar.gz   <span class="params">#</span>解压安装包</span><br></pre></td></tr></table></figure><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240410002642779.png" alt="image-20240410002642779"></p><h4 id="启动配置"><a href="#启动配置" class="headerlink" title="启动配置"></a>启动配置</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /home/springCloudTool/zookeeper <span class="params">#</span>切换目录</span><br><span class="line">mkdir zkdata  <span class="params">#</span>创建目录</span><br><span class="line">cd ./conf <span class="params">#</span>进入配置文件目录</span><br><span class="line">cp  zoo<span class="built_in">_</span>sample.cfg  zoo.cfg <span class="params">#</span>拷贝配置文件</span><br><span class="line">vim zoo.cfg <span class="params">#</span>修改配置文件</span><br></pre></td></tr></table></figure><p>修改存储目录</p><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240410003008221.png" alt="image-20240410003008221" style="zoom:50%;"></p><h4 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ../bin <span class="params">#</span>进入目录</span><br><span class="line">./zkServer.sh start <span class="params">#</span>启动zookeeper</span><br><span class="line">./zkServer.sh stop <span class="params">#</span>停止zookeeper</span><br><span class="line">./zkServer.sh status <span class="params">#</span>查看zookeeper状态</span><br></pre></td></tr></table></figure><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240410004115488.png" alt="image-20240410004115488"></p><h3 id="Dubbo快速入门案例"><a href="#Dubbo快速入门案例" class="headerlink" title="Dubbo快速入门案例"></a>Dubbo快速入门案例</h3><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/quickstart/java/spring-boot/">入门案例参考官网教程</a></p><h4 id="创建项目Dubbo-Demo-Project"><a href="#创建项目Dubbo-Demo-Project" class="headerlink" title="创建项目Dubbo-Demo-Project"></a>创建项目Dubbo-Demo-Project</h4><p>在此项目下创建三个子模块</p><ul><li>common-api  公共接口模块</li><li>dubbo-consumer  服务消费者模块</li><li>dubbo-provider 服务提供者模块</li></ul><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><h5 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h5><p>对于多模块项目，首先需要在父项目的 <code>pom.xml</code> 里面配置依赖信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Dubbo-Demo-Project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>common-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>3.2.0-beta.4<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Boot --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Dubbo --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-dependencies-zookeeper-curator5 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper-curator5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0-beta.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在服务消费者和服务提供者模块中的pom.xml进行如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Dubbo-Demo-Project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- dubbo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper-curator5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-reload4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring boot starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="application-yaml文件配置"><a href="#application-yaml文件配置" class="headerlink" title="application.yaml文件配置"></a>application.yaml文件配置</h5><p>dubbo-consumer 模块进行如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-demo-consumer</span>  <span class="comment">#模块名称</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.134.129:2181</span>  <span class="comment">#服务注册中心zookeeper地址</span></span><br></pre></td></tr></table></figure><p>dubbo-provider 模块进行如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-demo-provider</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.134.129:2181</span></span><br></pre></td></tr></table></figure><h4 id="代码逻辑编写"><a href="#代码逻辑编写" class="headerlink" title="代码逻辑编写"></a>代码逻辑编写</h4><h5 id="公共模块中编写服务接口"><a href="#公共模块中编写服务接口" class="headerlink" title="公共模块中编写服务接口"></a>公共模块中编写服务接口</h5><p>在coomon-api模块下的<code>com/bang/dubbo/demo</code>包下编写服务接口<code>UserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务提供模块对公共接口进行实现，提供具体的业务逻辑"><a href="#服务提供模块对公共接口进行实现，提供具体的业务逻辑" class="headerlink" title="服务提供模块对公共接口进行实现，提供具体的业务逻辑"></a>服务提供模块对公共接口进行实现，提供具体的业务逻辑</h5><p>在dubbo-provider模块的<code>com/bang/dubbo/demo</code>模块中编写具体接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,&quot;</span>+name+<span class="string">&quot;,welcome to dubbo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>@DubboService</code> 注解，通过这个配置可以基于 Spring Boot 去发布 Dubbo 服务</p><h5 id="服务消费模块编写对应的服务调用逻辑"><a href="#服务消费模块编写对应的服务调用逻辑" class="headerlink" title="服务消费模块编写对应的服务调用逻辑"></a>服务消费模块编写对应的服务调用逻辑</h5><p>在dubbo-consumer模块的<code>com/bang/dubbo/demo</code>模块中编写具体服务调用代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboReference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@DubboReference</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> userService.sayHello(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Receive result ======&gt; &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; Receive result ======&gt; &quot;</span> + userService.sayHello(<span class="string">&quot;TOM&quot;</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>Task</code> 类中，通过<code>@DubboReference</code> 从 Dubbo 获取了一个 RPC 订阅，这个 <code>userService</code> 可以像本地调用一样直接调用。在 <code>run</code>方法中创建了一个线程进行调用。</p><h4 id="编写各个模块启动类"><a href="#编写各个模块启动类" class="headerlink" title="编写各个模块启动类"></a>编写各个模块启动类</h4><p>启动类上需添加<code>@EnableDubbo</code>注解</p><h5 id="duubo-consumer模块启动类ConsumerApplication"><a href="#duubo-consumer模块启动类ConsumerApplication" class="headerlink" title="duubo-consumer模块启动类ConsumerApplication"></a>duubo-consumer模块启动类<code>ConsumerApplication</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="dubbo-provider模块启动类ProviderApplication"><a href="#dubbo-provider模块启动类ProviderApplication" class="headerlink" title="dubbo-provider模块启动类ProviderApplication"></a>dubbo-provider模块启动类<code>ProviderApplication</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h4><h5 id="在服务器上启动zookeeper注册中心"><a href="#在服务器上启动zookeeper注册中心" class="headerlink" title="在服务器上启动zookeeper注册中心"></a>在服务器上启动<code>zookeeper</code>注册中心</h5><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240411002347869.png" alt="image-20240411002347869"></p><h5 id="启动服务提供模块"><a href="#启动服务提供模块" class="headerlink" title="启动服务提供模块"></a>启动服务提供模块</h5><p>出现下图，即代表服务提供者启动完毕，标志着该服务提供者可以对外提供服务了</p><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240411002436647.png" alt="image-20240411002436647"></p><h5 id="启动服务调用模块"><a href="#启动服务调用模块" class="headerlink" title="启动服务调用模块"></a>启动服务调用模块</h5><p>出现下图效果，即代表服务消费端启动完毕并调用到服务端成功获取结果</p><p><img src="/2024/04/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/Dubbo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Dubbo/image-20240411002541788.png" alt="image-20240411002541788"></p>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>主要是学习掌握：进程管理与内存管理这两部分；关于IO管理只需了解即可</p><h2 id="CH1-操作系统概述"><a href="#CH1-操作系统概述" class="headerlink" title="CH1 操作系统概述"></a>CH1 操作系统概述</h2><h3 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329101703565.png" alt="image-20240329101703565" style="zoom: 33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329102306616.png" alt="image-20240329102306616" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329102505147.png" alt="image-20240329102505147" style="zoom:33%;"></p><p>操作系统向上层提供的简易服务：</p><ul><li>图像化用户接口</li><li>命令接口<ul><li>联机命令接口：类似于CMD，交互的方式，用户输入一个命令，操作系统执行对应的操作</li><li>脱机命令接口：批处理命令接口，比如Windows下执行.bat脚本或者Linux下执行.sh脚本</li></ul></li><li>程序接口：在程序中通过系统调用来使用程序接口，执行相关的功能<ul><li>比如执行print函数，将内容输出时，内部就进行了系统调用</li></ul></li></ul><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329103245727.png" alt="image-20240329103245727" style="zoom:33%;"></p><h3 id="操作系统的基本特征"><a href="#操作系统的基本特征" class="headerlink" title="操作系统的基本特征"></a>操作系统的基本特征</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329103933052.png" alt="image-20240329103933052" style="zoom:33%;"></p><h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329104338488.png" alt="image-20240329104338488" style="zoom:33%;"></p><p>在一定程度上并发和共享是相互存在的前提条件</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329110214579.png" alt="image-20240329110214579"></p><h4 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329105335225.png" alt="image-20240329105335225"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329105528794.png" alt="image-20240329105528794"></p><h3 id="操作系统的运行机制"><a href="#操作系统的运行机制" class="headerlink" title="操作系统的运行机制"></a>操作系统的运行机制</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329110743123.png" alt="image-20240329110743123" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240329112117138.png" alt="image-20240329112117138" style="zoom:33%;"></p><p>核心：内核态与用户态之间的切换</p><p>CPU如何实现内核态和用户态之间的切换？</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330160907592.png" alt="image-20240330160907592"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330161220818.png" alt="image-20240330161220818" style="zoom:33%;"></p><h3 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h3><h4 id="中断的作用"><a href="#中断的作用" class="headerlink" title="中断的作用"></a>中断的作用</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330161359620.png" alt="image-20240330161359620" style="zoom:33%;"></p><p>中断是让操作系统内核夺回CPU使用权的唯一途径</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330161703444.png" alt="image-20240330161703444" style="zoom:33%;"></p><p>发生中断，CPU会暂停当前程序的执行，转而执行对应的中断处理程序</p><h4 id="中断的类型"><a href="#中断的类型" class="headerlink" title="中断的类型"></a>中断的类型</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330162024172.png" alt="image-20240330162024172" style="zoom:33%;"></p><h5 id="内中断的例子"><a href="#内中断的例子" class="headerlink" title="内中断的例子"></a>内中断的例子</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330162407138.png" alt="image-20240330162407138" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330162754820.png" alt="image-20240330162754820" style="zoom:33%;"></p><p>外中断的例子</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330163648701.png" alt="image-20240330163648701" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330163940308.png" alt="image-20240330163940308" style="zoom:33%;"></p><h4 id="中断机制的原理"><a href="#中断机制的原理" class="headerlink" title="中断机制的原理"></a>中断机制的原理</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330172636154.png" alt="image-20240330172636154" style="zoom:33%;"></p><h4 id="中断总结"><a href="#中断总结" class="headerlink" title="中断总结"></a>中断总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240330172822246.png" alt="image-20240330172822246" style="zoom:33%;"></p><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331092830406.png" alt="image-20240331092830406" style="zoom:33%;"></p><h4 id="什么是系统调用"><a href="#什么是系统调用" class="headerlink" title="什么是系统调用"></a>什么是系统调用</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331093109959.png" alt="image-20240331093109959" style="zoom:33%;"></p><h4 id="系统调用与库函数的区别"><a href="#系统调用与库函数的区别" class="headerlink" title="系统调用与库函数的区别"></a>系统调用与库函数的区别</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331093401427.png" alt="image-20240331093401427" style="zoom:33%;"></p><h4 id="什么功能需要系统调用？"><a href="#什么功能需要系统调用？" class="headerlink" title="什么功能需要系统调用？"></a>什么功能需要系统调用？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331093820510.png" alt="image-20240331093820510" style="zoom:33%;"></p><h4 id="系统调用的过程"><a href="#系统调用的过程" class="headerlink" title="系统调用的过程"></a>系统调用的过程</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331094313271.png" alt="image-20240331094313271" style="zoom:33%;"></p><h3 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h3><h4 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331095203052.png" alt="image-20240331095203052" style="zoom:33%;"></p><p>一般可以分为大内核和微内核这两种体系结构</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331100203297.png" alt="image-20240331100203297" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331100343140.png" alt="image-20240331100343140" style="zoom:33%;"></p><h3 id="操作系统的引导"><a href="#操作系统的引导" class="headerlink" title="操作系统的引导"></a>操作系统的引导</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331100544668.png" alt="image-20240331100544668" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331102542575.png" alt="image-20240331102542575" style="zoom:33%;"></p><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331104423948.png" alt="image-20240331104423948" style="zoom:33%;"></p><h2 id="CH2-进程管理"><a href="#CH2-进程管理" class="headerlink" title="CH2 进程管理"></a>CH2 进程管理</h2><h3 id="进程的概述"><a href="#进程的概述" class="headerlink" title="进程的概述"></a>进程的概述</h3><p>要理解以下几个问题：</p><ul><li>进程的概念：理解进程与程序的区别</li><li>进程的组成：一个进程由哪些部分组成</li><li>进程的特征：进程有哪些重要的特征</li></ul><h4 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h4><p>程序：是静态的，是存放在磁盘里的可执行文件，就是一系列的指令集合</p><p>进程：是动态的，是程序的一次执行过程</p><p>同一个程序多次运行会对应多个进程 </p><p> <strong>Q:操作系统作为这些进程的管理者，他是如何区分各个进程？</strong></p><h4 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h4><h5 id="PCB：进程控制块"><a href="#PCB：进程控制块" class="headerlink" title="PCB：进程控制块"></a>PCB：进程控制块</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331184210902.png" alt="image-20240331184210902" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331184306253.png" alt="image-20240331184306253" style="zoom:33%;"></p><h5 id="程序段、数据段"><a href="#程序段、数据段" class="headerlink" title="程序段、数据段"></a>程序段、数据段</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331184625343.png" alt="image-20240331184625343" style="zoom:33%;"></p><pre><code>                                 &lt;img src=&quot;操作系统/image-20240331184952014.png&quot; alt=&quot;image-20240331184952014&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331185302328.png" alt="image-20240331185302328" style="zoom:33%;"></p><h3 id="进程的状态与转换"><a href="#进程的状态与转换" class="headerlink" title="进程的状态与转换"></a>进程的状态与转换</h3><h4 id="进程的状态以及状态之间的转换"><a href="#进程的状态以及状态之间的转换" class="headerlink" title="进程的状态以及状态之间的转换"></a>进程的状态以及状态之间的转换</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331185532434.png" alt="image-20240331185532434" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331190255612.png" alt="image-20240331190255612" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331190659103.png" alt="image-20240331190659103" style="zoom:33%;"></p><p>操作系统如何将各个进程的PCB组织起来？</p><h5 id="进程的组织方式一：链接方式"><a href="#进程的组织方式一：链接方式" class="headerlink" title="进程的组织方式一：链接方式"></a>进程的组织方式一：链接方式</h5><p>链表的形式存放不同状态的进程</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331190854657.png" alt="image-20240331190854657" style="zoom:33%;"></p><h5 id="进程的组织方式二：索引方式"><a href="#进程的组织方式二：索引方式" class="headerlink" title="进程的组织方式二：索引方式"></a>进程的组织方式二：索引方式</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331191108337.png" alt="image-20240331191108337" style="zoom:33%;"></p><h5 id="进程组织方式总结"><a href="#进程组织方式总结" class="headerlink" title="进程组织方式总结"></a>进程组织方式总结</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331191136504.png" alt="image-20240331191136504" style="zoom:33%;"></p><h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><p>​                            <img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331191531974.png" alt="image-20240331191531974" style="zoom:33%;">   </p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331191713944.png" alt="image-20240331191713944" style="zoom:33%;"></p><h4 id="如何实现进程的控制"><a href="#如何实现进程的控制" class="headerlink" title="如何实现进程的控制"></a>如何实现进程的控制</h4><p><strong>原语：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原语是操作系统内核中的一直特殊程序，它的执行具有原子性，也就是这段程序的运行必须是一气呵成，不可中断</span><br></pre></td></tr></table></figure><p>  <strong>为什么进程控制需要用原语来实现(或者为什么这个过程需要一气呵成、不可中断？)</strong></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331192400695.png" alt="image-20240331192400695" style="zoom:33%;"></p><p><strong>操作系统是如何实现原语的原子性？</strong></p><p>背景：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正常情况下：CPU每执行完一条指令都会例行检查是否有中断信号需要处理，如果有，则暂停运行当前程序，转而去执行相应的中断处理程序</span><br></pre></td></tr></table></figure><p> 操作系统利用开中断和关中断指令去保证原语的原子性</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331193415950.png" alt="image-20240331193415950" style="zoom:33%;"></p><h4 id="进程控制相关的原语"><a href="#进程控制相关的原语" class="headerlink" title="进程控制相关的原语"></a>进程控制相关的原语</h4><h5 id="进程创建（创建原语）"><a href="#进程创建（创建原语）" class="headerlink" title="进程创建（创建原语）"></a>进程创建（创建原语）</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331193717795.png" alt="image-20240331193717795" style="zoom:33%;"></p><h5 id="进程的终止（撤销原语）"><a href="#进程的终止（撤销原语）" class="headerlink" title="进程的终止（撤销原语）"></a>进程的终止（撤销原语）</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331194410242.png" alt="image-20240331194410242" style="zoom:33%;"></p><h5 id="阻塞原语和唤醒原语"><a href="#阻塞原语和唤醒原语" class="headerlink" title="阻塞原语和唤醒原语"></a>阻塞原语和唤醒原语</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331194602482.png" alt="image-20240331194602482" style="zoom:33%;"></p><h5 id="切换原语"><a href="#切换原语" class="headerlink" title="切换原语"></a>切换原语</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331194736908.png" alt="image-20240331194736908" style="zoom:33%;"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>无论是哪种进程原语，在进程状态切换时无非做的三类事情：</p><ul><li>更新PCB中的信息<ul><li>修改进程状态state,保存恢复进程的运行环境</li></ul></li><li>将PCB插入合适的队列</li><li>分配/回收资源 </li></ul><h4 id="扩充：程序是如何执行的以及进程之间的切换会发生什么？"><a href="#扩充：程序是如何执行的以及进程之间的切换会发生什么？" class="headerlink" title="扩充：程序是如何执行的以及进程之间的切换会发生什么？"></a>扩充：程序是如何执行的以及进程之间的切换会发生什么？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331195409640.png" alt="image-20240331195409640" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331195522798.png" alt="image-20240331195522798" style="zoom:33%;"></p><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>概念：进程间通信(IPC,Inter-Process Communication)是指两个进程之间产生数据交互 </p><p>背景：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进程是资源分配的基本单位，因此各个进程拥有的内存地址空间是相互独立的，为了保证安全，一个进程是不能直接访问另一个进程的地址空间</span><br></pre></td></tr></table></figure><p>进程之间是如何进行通信的？</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331200027954.png" alt="image-20240331200027954" style="zoom:33%;"></p><h4 id="进程通信方式一：共享存储"><a href="#进程通信方式一：共享存储" class="headerlink" title="进程通信方式一：共享存储"></a>进程通信方式一：共享存储</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331201150098.png" alt="image-20240331201150098" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331201430938.png" alt="image-20240331201430938" style="zoom:33%;"></p><h4 id="进程通信方式二：消息传递"><a href="#进程通信方式二：消息传递" class="headerlink" title="进程通信方式二：消息传递"></a>进程通信方式二：消息传递</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331201745944.png" alt="image-20240331201745944" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331202322351.png" alt="image-20240331202322351" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331202521007.png" alt="image-20240331202521007" style="zoom:33%;"></p><h4 id="进程通信方式三：管道通信"><a href="#进程通信方式三：管道通信" class="headerlink" title="进程通信方式三：管道通信"></a>进程通信方式三：管道通信</h4><pre><code>                                         &lt;img src=&quot;操作系统/image-20240331203332343.png&quot; alt=&quot;image-20240331203332343&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h3 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331204009917.png" alt="image-20240331204009917" style="zoom:33%;"></p><h4 id="为什么引入线程？"><a href="#为什么引入线程？" class="headerlink" title="为什么引入线程？"></a>为什么引入线程？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331204304470.png" alt="image-20240331204304470" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331204439565.png" alt="image-20240331204439565" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331204720727.png" alt="image-20240331204720727" style="zoom:33%;"></p><h4 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331204924114.png" alt="image-20240331204924114" style="zoom:33%;"></p><h3 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331205012635.png" alt="image-20240331205012635" style="zoom:33%;"></p><h4 id="用户级线程"><a href="#用户级线程" class="headerlink" title="用户级线程"></a>用户级线程</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331205602438.png" alt="image-20240331205602438" style="zoom:33%;"></p><p>用户级线程的特点：</p><ul><li>线程的管理工作是由线程库来完成的</li><li>线程的切换不需要CP变态(由用户态-&gt;核心态)</li><li>操作系统无法意识到用户级线程的存在</li></ul><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331210012233.png" alt="image-20240331210012233" style="zoom:33%;"></p><h4 id="内核级线程"><a href="#内核级线程" class="headerlink" title="内核级线程"></a>内核级线程</h4><pre><code>                                     &lt;img src=&quot;操作系统/image-20240331210233658.png&quot; alt=&quot;image-20240331210233658&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h4><h5 id="一对一模型"><a href="#一对一模型" class="headerlink" title="一对一模型"></a>一对一模型</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331210459845.png" alt="image-20240331210459845" style="zoom:33%;"></p><h5 id="多对一模型"><a href="#多对一模型" class="headerlink" title="多对一模型"></a>多对一模型</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331210646253.png" alt="image-20240331210646253" style="zoom:33%;"></p><h5 id="多对多模型"><a href="#多对多模型" class="headerlink" title="多对多模型"></a>多对多模型</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331210823048.png" alt="image-20240331210823048" style="zoom:33%;"></p><h3 id="线程的状态与转换"><a href="#线程的状态与转换" class="headerlink" title="线程的状态与转换"></a>线程的状态与转换</h3><p>线程的状态以及各个状态之间的转换与进程基本一致</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331211122746.png" alt="image-20240331211122746" style="zoom:33%;"></p><h3 id="线程的组织与控制"><a href="#线程的组织与控制" class="headerlink" title="线程的组织与控制"></a>线程的组织与控制</h3><p>进程的组织与控制是通过PCB来实现的，而线程的组织与控制是通过TCB(线程控制块)来实现的</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331211602274.png" alt="image-20240331211602274" style="zoom:33%;"></p><h3 id="处理器调度"><a href="#处理器调度" class="headerlink" title="处理器调度"></a>处理器调度</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331220650527.png" alt="image-20240331220650527" style="zoom:33%;"></p><h4 id="调度的概念"><a href="#调度的概念" class="headerlink" title="调度的概念"></a>调度的概念</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331221435911.png" alt="image-20240331221435911"></p><h4 id="调度层次"><a href="#调度层次" class="headerlink" title="调度层次"></a>调度层次</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331222521655.png" alt="image-20240331222521655" style="zoom:33%;"></p><h5 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331221904732.png" alt="image-20240331221904732" style="zoom:33%;"></p><h5 id="低级调度"><a href="#低级调度" class="headerlink" title="低级调度"></a>低级调度</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331221955990.png" alt="image-20240331221955990" style="zoom:33%;"></p><h5 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331222155365.png" alt="image-20240331222155365" style="zoom:33%;"></p><h3 id="进程调度的时机、切换与过程、方式"><a href="#进程调度的时机、切换与过程、方式" class="headerlink" title="进程调度的时机、切换与过程、方式"></a>进程调度的时机、切换与过程、方式</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331222739796.png" alt="image-20240331222739796" style="zoom:33%;"></p><h4 id="进程调度的时机"><a href="#进程调度的时机" class="headerlink" title="进程调度的时机"></a>进程调度的时机</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331223151270.png" alt="image-20240331223151270" style="zoom:33%;"></p><h4 id="进程调度方式"><a href="#进程调度方式" class="headerlink" title="进程调度方式"></a>进程调度方式</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331224337647.png" alt="image-20240331224337647" style="zoom:33%;"></p><h4 id="进程的切换与过程"><a href="#进程的切换与过程" class="headerlink" title="进程的切换与过程"></a>进程的切换与过程</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331224639448.png" alt="image-20240331224639448" style="zoom:33%;"></p><h3 id="调度器和闲逛进程"><a href="#调度器和闲逛进程" class="headerlink" title="调度器和闲逛进程"></a>调度器和闲逛进程</h3><h4 id="调度器-调度程序"><a href="#调度器-调度程序" class="headerlink" title="调度器/调度程序"></a>调度器/调度程序</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331225213245.png" alt="image-20240331225213245" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331225541506.png" alt="image-20240331225541506" style="zoom:33%;"></p><h4 id="闲逛进程"><a href="#闲逛进程" class="headerlink" title="闲逛进程"></a>闲逛进程</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331225622880.png" alt="image-20240331225622880" style="zoom:33%;"></p><h3 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331230015428.png" alt="image-20240331230015428" style="zoom:33%;"></p><h4 id="CPU利用率"><a href="#CPU利用率" class="headerlink" title="CPU利用率"></a>CPU利用率</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331230417364.png" alt="image-20240331230417364" style="zoom:33%;"></p><h4 id="系统吞吐量"><a href="#系统吞吐量" class="headerlink" title="系统吞吐量"></a>系统吞吐量</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331230640212.png" alt="image-20240331230640212" style="zoom:33%;"></p><h4 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331231214518.png" alt="image-20240331231214518" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331231351719.png" alt="image-20240331231351719" style="zoom:33%;"></p><h4 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h4><p>等待时间=周转时间-运行时间</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331231537845.png" alt="image-20240331231537845" style="zoom:33%;"></p><h4 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331232308693.png" alt="image-20240331232308693" style="zoom:33%;"></p><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><h4 id="先来先服务-FCFS"><a href="#先来先服务-FCFS" class="headerlink" title="先来先服务(FCFS)"></a>先来先服务(FCFS)</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331233004559.png" alt="image-20240331233004559" style="zoom:33%;"></p><h4 id="短作业优先-SJF"><a href="#短作业优先-SJF" class="headerlink" title="短作业优先(SJF)"></a>短作业优先(SJF)</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331233326887.png" alt="image-20240331233326887" style="zoom:33%;"></p><h4 id="高响应比优先-HRRN"><a href="#高响应比优先-HRRN" class="headerlink" title="高响应比优先(HRRN)"></a>高响应比优先(HRRN)</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331233451122.png" alt="image-20240331233451122" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331233939491.png" alt="image-20240331233939491" style="zoom:33%;"></p><h4 id="时间片轮转（Round-Robin"><a href="#时间片轮转（Round-Robin" class="headerlink" title="时间片轮转（Round-Robin)"></a>时间片轮转（Round-Robin)</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331235211864.png" alt="image-20240331235211864" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331235248536.png" alt="image-20240331235248536"></p><h4 id="优先级调度"><a href="#优先级调度" class="headerlink" title="优先级调度"></a>优先级调度</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331235416056.png" alt="image-20240331235416056" style="zoom:33%;"></p><h4 id="多级反馈队列"><a href="#多级反馈队列" class="headerlink" title="多级反馈队列"></a>多级反馈队列</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240331235950486.png" alt="image-20240331235950486" style="zoom:33%;"></p><h3 id="进程的同步和互斥"><a href="#进程的同步和互斥" class="headerlink" title="进程的同步和互斥"></a>进程的同步和互斥</h3><h4 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401092423993.png" alt="image-20240401092423993" style="zoom:33%;"></p><h4 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401092616916.png" alt="image-20240401092616916" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401092927040.png" alt="image-20240401092927040" style="zoom:33%;"></p><h3 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h3><ul><li>单标志法</li><li>双标志先检查</li><li>双标志后检查</li><li>Peterson算法</li></ul><h4 id="单标志法"><a href="#单标志法" class="headerlink" title="单标志法"></a>单标志法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401094254630.png" alt="image-20240401094254630" style="zoom:33%;"></p><p>缺陷:</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401094619192.png" alt="image-20240401094619192"></p><h4 id="双标志先检查法"><a href="#双标志先检查法" class="headerlink" title="双标志先检查法"></a>双标志先检查法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401095010555.png" alt="image-20240401095010555" style="zoom:33%;"></p><h4 id="双标志后检查法"><a href="#双标志后检查法" class="headerlink" title="双标志后检查法"></a>双标志后检查法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401095241562.png" alt="image-20240401095241562" style="zoom:33%;"></p><h4 id="Peterson算法"><a href="#Peterson算法" class="headerlink" title="Peterson算法"></a>Peterson算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401095953874.png" alt="image-20240401095953874" style="zoom:33%;"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401100017982.png" alt="image-20240401100017982" style="zoom:33%;"></p><h3 id="进程互斥的硬件实现方法"><a href="#进程互斥的硬件实现方法" class="headerlink" title="进程互斥的硬件实现方法"></a>进程互斥的硬件实现方法</h3><ul><li>中断屏蔽方法</li><li>TestAndSet(TS指令/TSL指令)</li><li>Swap指令</li></ul><h4 id="中断屏蔽方法"><a href="#中断屏蔽方法" class="headerlink" title="中断屏蔽方法"></a>中断屏蔽方法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401100430216.png" alt="image-20240401100430216" style="zoom:33%;"></p><h4 id="TestAndSet指令"><a href="#TestAndSet指令" class="headerlink" title="TestAndSet指令"></a>TestAndSet指令</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401100808496.png" alt="image-20240401100808496" style="zoom:33%;"></p><h4 id="Swap指令"><a href="#Swap指令" class="headerlink" title="Swap指令"></a>Swap指令</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401101100489.png" alt="image-20240401101100489" style="zoom:33%;"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401101134298.png" alt="image-20240401101134298" style="zoom:33%;"></p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401101350222.png" alt="image-20240401101350222" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401101412640.png" alt="image-20240401101412640" style="zoom:33%;"></p><h3 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h3><ul><li>整型信号量</li><li>记录型信号量</li></ul><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401102402021.png" alt="image-20240401102402021" style="zoom:33%;"></p><h4 id="信号量机制-1"><a href="#信号量机制-1" class="headerlink" title="信号量机制"></a>信号量机制</h4><pre><code>                                             &lt;img src=&quot;操作系统/image-20240401103540739.png&quot; alt=&quot;image-20240401103540739&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401104524695.png" alt="image-20240401104524695" style="zoom:33%;"></p><h4 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401105112654.png" alt="image-20240401105112654" style="zoom:33%;"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401105734937.png" alt="image-20240401105734937" style="zoom:33%;"></p><h3 id="信号量机制实现进程互斥、同步和前驱关系"><a href="#信号量机制实现进程互斥、同步和前驱关系" class="headerlink" title="信号量机制实现进程互斥、同步和前驱关系"></a>信号量机制实现进程互斥、同步和前驱关系</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401110923594.png" alt="image-20240401110923594" style="zoom:33%;"></p><h4 id="信号量机制实现进程互斥"><a href="#信号量机制实现进程互斥" class="headerlink" title="信号量机制实现进程互斥"></a>信号量机制实现进程互斥</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401111219479.png" alt="image-20240401111219479" style="zoom:33%;"></p><h4 id="信号量机制实现同步"><a href="#信号量机制实现同步" class="headerlink" title="信号量机制实现同步"></a>信号量机制实现同步</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401111738525.png" alt="image-20240401111738525" style="zoom:33%;"></p><h4 id="信号量机制实现进程前驱关系"><a href="#信号量机制实现进程前驱关系" class="headerlink" title="信号量机制实现进程前驱关系"></a>信号量机制实现进程前驱关系</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401112004610.png" alt="image-20240401112004610" style="zoom:33%;"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401112250329.png" alt="image-20240401112250329" style="zoom:33%;"></p><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401113201092.png" alt="image-20240401113201092" style="zoom:33%;"></p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401144331656.png" alt="image-20240401144331656" style="zoom:33%;"></p><p>不能改变相邻P、V操作的顺序，因为可能会发生死锁</p><pre><code>                                             &lt;img src=&quot;操作系统/image-20240401144625031.png&quot; alt=&quot;image-20240401144625031&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h3 id="多生产者多消费者问题"><a href="#多生产者多消费者问题" class="headerlink" title="多生产者多消费者问题"></a>多生产者多消费者问题</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><pre><code>                                 &lt;img src=&quot;操作系统/image-20240401150006736.png&quot; alt=&quot;image-20240401150006736&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401150314106.png" alt="image-20240401150314106" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401150731670.png" alt="image-20240401150731670" style="zoom:33%;"></p><p>本题中缓冲区大小为1，所以在任何时刻，apple、orange、plate三个同步信号量做多只有一个是1，因此在任何时刻，做多只有一个进程的p操作不会被阻塞，并顺利进入临界区</p><h3 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401151540571.png" alt="image-20240401151540571" style="zoom:33%;"></p><h4 id="问题解决-1"><a href="#问题解决-1" class="headerlink" title="问题解决"></a>问题解决</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401152727525.png" alt="image-20240401152727525" style="zoom:33%;"></p><h3 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401154621589.png" alt="image-20240401154621589" style="zoom:33%;"></p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p> 这个问题比前面几个问题都要复杂，因为写进程与写进程之间是可以同时进行的，读进程与写进程之间是互斥的</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401155355869.png" alt="image-20240401155355869" style="zoom:33%;"></p><p>上述方案存在的潜在问题：只要有读进程还在读，写进程就要一直阻塞，可能饿死，在这种算法中，读进程是优先的</p><p>写进程优先的解决方案</p><pre><code>                                 &lt;img src=&quot;操作系统/image-20240401155954921.png&quot; alt=&quot;image-20240401155954921&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h3 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401160425529.png" alt="image-20240401160425529" style="zoom:33%;"></p><p>存在的问题：如果5个哲学家并发执行，都拿起了自己左手边的筷子，那么就会出现死锁问题</p><p>那么如何防止死锁的发生？</p><p>方案一：</p><p>可以对哲学家进程施加一些限制，比如每次做多允许四个哲学家同时进餐。这样可以保证至少有一个哲学家能够同时拿到左右两只筷子</p><p>方案二：</p><p>要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家正好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有一个可以拿起第一只筷子，另一个会直接阻塞。</p><p>方案三：仅当一个哲学家左右两只筷子都可用时，才允许他抓起筷子</p><h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><h4 id="背景：什么要引入管程？"><a href="#背景：什么要引入管程？" class="headerlink" title="背景：什么要引入管程？"></a>背景：什么要引入管程？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401161846510.png" alt="image-20240401161846510" style="zoom:33%;"></p><h4 id="管程的定义和特征"><a href="#管程的定义和特征" class="headerlink" title="管程的定义和特征"></a>管程的定义和特征</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401162249333.png" alt="image-20240401162249333" style="zoom:33%;"></p><h4 id="管程例子：解决生产者消费者问题"><a href="#管程例子：解决生产者消费者问题" class="headerlink" title="管程例子：解决生产者消费者问题"></a>管程例子：解决生产者消费者问题</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401162512261.png" alt="image-20240401162512261" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401162828756.png" alt="image-20240401162828756" style="zoom:33%;"></p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="死锁的概述"><a href="#死锁的概述" class="headerlink" title="死锁的概述"></a>死锁的概述</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401163512406.png" alt="image-20240401163512406" style="zoom:33%;"></p><h4 id="死锁-vs-死循环-vs-饥饿"><a href="#死锁-vs-死循环-vs-饥饿" class="headerlink" title="死锁 vs 死循环 vs 饥饿"></a>死锁 vs 死循环 vs 饥饿</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401163719224.png" alt="image-20240401163719224" style="zoom:33%;"></p><h4 id="死锁产生的必要条件"><a href="#死锁产生的必要条件" class="headerlink" title="死锁产生的必要条件"></a>死锁产生的必要条件</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401164054846.png" alt="image-20240401164054846" style="zoom:33%;"></p><h4 id="发生死锁的例子"><a href="#发生死锁的例子" class="headerlink" title="发生死锁的例子"></a>发生死锁的例子</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401164221699.png" alt="image-20240401164221699" style="zoom:33%;"></p><h4 id="死锁的处理策略"><a href="#死锁的处理策略" class="headerlink" title="死锁的处理策略"></a>死锁的处理策略</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401164300209.png" alt="image-20240401164300209" style="zoom:33%;"></p><h5 id="预防死锁"><a href="#预防死锁" class="headerlink" title="预防死锁"></a>预防死锁</h5><h6 id="破坏互斥条件"><a href="#破坏互斥条件" class="headerlink" title="破坏互斥条件"></a>破坏互斥条件</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170030811.png" alt="image-20240401170030811" style="zoom:33%;"></p><h6 id="破坏不剥夺条件"><a href="#破坏不剥夺条件" class="headerlink" title="破坏不剥夺条件"></a>破坏不剥夺条件</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170102218.png" alt="image-20240401170102218" style="zoom:33%;"></p><h6 id="破坏请求和保持条件"><a href="#破坏请求和保持条件" class="headerlink" title="破坏请求和保持条件"></a>破坏请求和保持条件</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170129540.png" alt="image-20240401170129540" style="zoom:33%;"></p><h6 id="破坏循环等待条件"><a href="#破坏循环等待条件" class="headerlink" title="破坏循环等待条件"></a>破坏循环等待条件</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170223020.png" alt="image-20240401170223020" style="zoom:33%;"></p><h5 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170416397.png" alt="image-20240401170416397" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170648093.png" alt="image-20240401170648093" style="zoom:33%;"></p><h6 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170721430.png" alt="image-20240401170721430" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401170935904.png" alt="image-20240401170935904" style="zoom:33%;"></p><h5 id="死锁检测和解除"><a href="#死锁检测和解除" class="headerlink" title="死锁检测和解除"></a>死锁检测和解除</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401171058693.png" alt="image-20240401171058693" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401171208372.png" alt="image-20240401171208372" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240401171234908.png" alt="image-20240401171234908" style="zoom:33%;"></p><h2 id="CH3内存管理"><a href="#CH3内存管理" class="headerlink" title="CH3内存管理"></a>CH3内存管理</h2><h3 id="内存的基础知识"><a href="#内存的基础知识" class="headerlink" title="内存的基础知识"></a>内存的基础知识</h3><h4 id="什么是内存？内存有什么作用？"><a href="#什么是内存？内存有什么作用？" class="headerlink" title="什么是内存？内存有什么作用？"></a>什么是内存？内存有什么作用？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402093505547.png" alt="image-20240402093505547" style="zoom:33%;"></p><h4 id="相对地址的转换"><a href="#相对地址的转换" class="headerlink" title="相对地址的转换"></a>相对地址的转换</h4><p>程序经过编译、链接之后生成的指令中指明的是相对地址，是相对进程起始地址而言的地址，那么如何将相对地址转换为物理地址？</p><p>常见的装入方式：</p><ul><li>绝对装入</li><li>可重定位装入</li><li>动态运行时装入</li></ul><h5 id="绝对装入"><a href="#绝对装入" class="headerlink" title="绝对装入"></a>绝对装入</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402095545432.png" alt="image-20240402095545432" style="zoom:33%;"></p><p>灵活性低，如果绝对装入，换了一台电脑运行，可能就不行了</p><h5 id="可重定位装入"><a href="#可重定位装入" class="headerlink" title="可重定位装入"></a>可重定位装入</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402095748633.png" alt="image-20240402095748633" style="zoom:33%;"></p><h5 id="动态运行时装入"><a href="#动态运行时装入" class="headerlink" title="动态运行时装入"></a>动态运行时装入</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402100032950.png" alt="image-20240402100032950" style="zoom:33%;"></p><h4 id="写程序到程序运行流程"><a href="#写程序到程序运行流程" class="headerlink" title="写程序到程序运行流程"></a>写程序到程序运行流程</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402100340432.png" alt="image-20240402100340432" style="zoom:33%;"></p><h4 id="链接的方式"><a href="#链接的方式" class="headerlink" title="链接的方式"></a>链接的方式</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402100452123.png" alt="image-20240402100452123" style="zoom:33%;"></p><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><h4 id="内存空间的分配与回收"><a href="#内存空间的分配与回收" class="headerlink" title="内存空间的分配与回收"></a>内存空间的分配与回收</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402101453649.png" alt="image-20240402101453649" style="zoom:33%;"></p><h4 id="虚拟技术：操作系统需要提供某种技术从逻辑上对内存空间进行扩充"><a href="#虚拟技术：操作系统需要提供某种技术从逻辑上对内存空间进行扩充" class="headerlink" title="虚拟技术：操作系统需要提供某种技术从逻辑上对内存空间进行扩充"></a>虚拟技术：操作系统需要提供某种技术从逻辑上对内存空间进行扩充</h4><pre><code>                                     &lt;img src=&quot;操作系统/image-20240402101637091.png&quot; alt=&quot;image-20240402101637091&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="操作系统需要提供地址转换功能，负责程序的逻辑地址和物理地址的转换"><a href="#操作系统需要提供地址转换功能，负责程序的逻辑地址和物理地址的转换" class="headerlink" title="操作系统需要提供地址转换功能，负责程序的逻辑地址和物理地址的转换"></a>操作系统需要提供地址转换功能，负责程序的逻辑地址和物理地址的转换</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402101744861.png" alt="image-20240402101744861" style="zoom:33%;"></p><h4 id="操作系统需要提供内存保护功能，保证各个进程在各自存储-空间运行，互不干扰"><a href="#操作系统需要提供内存保护功能，保证各个进程在各自存储-空间运行，互不干扰" class="headerlink" title="操作系统需要提供内存保护功能，保证各个进程在各自存储 空间运行，互不干扰"></a>操作系统需要提供内存保护功能，保证各个进程在各自存储 空间运行，互不干扰</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402102319744.png" alt="image-20240402102319744" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402102446478.png" alt="image-20240402102446478" style="zoom:33%;"></p><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402102545024.png" alt="image-20240402102545024" style="zoom:33%;"></p><h3 id="内存空间扩充"><a href="#内存空间扩充" class="headerlink" title="内存空间扩充"></a>内存空间扩充</h3><ul><li>覆盖技术</li><li>交换技术</li><li>虚拟存储技术</li></ul><h4 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h4><pre><code>                                 &lt;img src=&quot;操作系统/image-20240402110123096.png&quot; alt=&quot;image-20240402110123096&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402110435908.png" alt="image-20240402110435908" style="zoom:33%;"></p><h4 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402111427650.png" alt="image-20240402111427650" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402143107871.png" alt="image-20240402143107871" style="zoom:33%;"></p><h3 id="内存空间的分配与回收-1"><a href="#内存空间的分配与回收-1" class="headerlink" title="内存空间的分配与回收"></a>内存空间的分配与回收</h3><h4 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h4><p>连续分配：指为用户进程分配的必须是一个连续的内存空间 </p><h5 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402144828511.png" alt="image-20240402144828511" style="zoom:33%;"></p><h5 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402145124314.png" alt="image-20240402145124314" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402145943111.png" alt="image-20240402145943111" style="zoom:33%;"></p><h5 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402150217254.png" alt="image-20240402150217254" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402150408786.png" alt="image-20240402150408786" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151307492.png" alt="image-20240402151307492" style="zoom:33%;"></p><p>内存分配</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151406451.png" alt="image-20240402151406451" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151522519.png" alt="image-20240402151522519" style="zoom:33%;"></p><p>内存回收</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151643847.png" alt="image-20240402151643847" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151751962.png" alt="image-20240402151751962" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402151826215.png" alt="image-20240402151826215" style="zoom:33%;"></p><pre><code>                                              &lt;img src=&quot;操作系统/image-20240402151853579.png&quot; alt=&quot;image-20240402151853579&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402152235712.png" alt="image-20240402152235712" style="zoom:33%;"></p><h4 id="非连续分配管理方式"><a href="#非连续分配管理方式" class="headerlink" title="非连续分配管理方式"></a>非连续分配管理方式</h4><p>非连续分配：为用户进程分配的可以是一些分散的内存空间</p><h3 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402152725479.png" alt="image-20240402152725479" style="zoom:33%;"></p><h4 id="首次适应算法"><a href="#首次适应算法" class="headerlink" title="首次适应算法"></a>首次适应算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402153358523.png" alt="image-20240402153358523" style="zoom:33%;"></p><h4 id="最佳适应算法"><a href="#最佳适应算法" class="headerlink" title="最佳适应算法"></a>最佳适应算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402153753646.png" alt="image-20240402153753646" style="zoom:33%;"></p><h4 id="最坏适应算法"><a href="#最坏适应算法" class="headerlink" title="最坏适应算法"></a>最坏适应算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402153957703.png" alt="image-20240402153957703" style="zoom:33%;"></p><h4 id="邻近适应算法"><a href="#邻近适应算法" class="headerlink" title="邻近适应算法"></a>邻近适应算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402154435594.png" alt="image-20240402154435594" style="zoom:33%;"></p><h3 id="连续分配管理方式-1"><a href="#连续分配管理方式-1" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h3><h4 id="基本分页存储管理"><a href="#基本分页存储管理" class="headerlink" title="基本分页存储管理"></a>基本分页存储管理</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402163232103.png" alt="image-20240402163232103" style="zoom:33%;"></p><p>问题一：如何存储逻辑页面与物理页面的对应关系—页表</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402163600999.png" alt="image-20240402163600999" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402163820921.png" alt="image-20240402163820921" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402163929309.png" alt="image-20240402163929309" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402164132995.png" alt="image-20240402164132995" style="zoom:33%;"></p><p>如何实现地址的转换？</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402164513364.png" alt="image-20240402164513364" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402164826838.png" alt="image-20240402164826838" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402165123334.png" alt="image-20240402165123334" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402165359715.png" alt="image-20240402165359715" style="zoom:33%;"></p><p>总结</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402165457383.png" alt="image-20240402165457383" style="zoom:33%;"></p><h5 id="基本地址转换结构"><a href="#基本地址转换结构" class="headerlink" title="基本地址转换结构"></a>基本地址转换结构</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402170125722.png" alt="image-20240402170125722" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402171018980.png" alt="image-20240402171018980" style="zoom:33%;"></p><h5 id="具有快表的地址变换机构"><a href="#具有快表的地址变换机构" class="headerlink" title="具有快表的地址变换机构"></a>具有快表的地址变换机构</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402191211264.png" alt="image-20240402191211264" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402192026060.png" alt="image-20240402192026060" style="zoom:33%;"></p><pre><code>                                      &lt;img src=&quot;操作系统/image-20240402192314710.png&quot; alt=&quot;image-20240402192314710&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402192744066.png" alt="image-20240402192744066" style="zoom:33%;"></p><h5 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h5><h6 id="单级页表存在的问题"><a href="#单级页表存在的问题" class="headerlink" title="单级页表存在的问题"></a>单级页表存在的问题</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402193228050.png" alt="image-20240402193228050" style="zoom:33%;"></p><h6 id="如何解决单级页表存在的问题"><a href="#如何解决单级页表存在的问题" class="headerlink" title="如何解决单级页表存在的问题"></a>如何解决单级页表存在的问题</h6><p>采用多级页表解决页表必须连续存放的问题</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402193605231.png" alt="image-20240402193605231" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402194124240.png" alt="image-20240402194124240" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402194304083.png" alt="image-20240402194304083" style="zoom:33%;"></p><p>采用虚拟技术解决没有必要让整个页表常驻内存的问题</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402194512651.png" alt="image-20240402194512651" style="zoom:33%;"></p><p>例题：</p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402194923971.png" alt="image-20240402194923971" style="zoom:33%;"></p><p>两级页表与一级页表相比的缺点：</p><p>一级页表只需访问两次内存，二级页表需要访问三次内存</p><h6 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h6><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402195140403.png" alt="image-20240402195140403" style="zoom:33%;"></p><h4 id="基本分段存储管理"><a href="#基本分段存储管理" class="headerlink" title="基本分段存储管理"></a>基本分段存储管理</h4><h5 id="分段管理"><a href="#分段管理" class="headerlink" title="分段管理"></a>分段管理</h5><pre><code>                                     &lt;img src=&quot;操作系统/image-20240402195537504.png&quot; alt=&quot;image-20240402195537504&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402200425466.png" alt="image-20240402200425466" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402200816780.png" alt="image-20240402200816780" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402202256535.png" alt="image-20240402202256535" style="zoom:33%;"></p><h5 id="分段-vs-分页管理"><a href="#分段-vs-分页管理" class="headerlink" title="分段 vs 分页管理"></a>分段 vs 分页管理</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402202836672.png" alt="image-20240402202836672" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402202950649.png" alt="image-20240402202950649" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402203051009.png" alt="image-20240402203051009" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402203140419.png" alt="image-20240402203140419" style="zoom:33%;"></p><h4 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h4><h5 id="分页、分段的优缺点"><a href="#分页、分段的优缺点" class="headerlink" title="分页、分段的优缺点"></a>分页、分段的优缺点</h5><pre><code>                                         &lt;img src=&quot;操作系统/image-20240402203837533.png&quot; alt=&quot;image-20240402203837533&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h5 id="分段-分页—-段页式管理方式"><a href="#分段-分页—-段页式管理方式" class="headerlink" title="分段+分页—-段页式管理方式"></a>分段+分页—-段页式管理方式</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402203935865.png" alt="image-20240402203935865" style="zoom:33%;"></p><h5 id="段表、页表"><a href="#段表、页表" class="headerlink" title="段表、页表"></a>段表、页表</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402204159873.png" alt="image-20240402204159873" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402204452230.png" alt="image-20240402204452230" style="zoom:33%;"></p><h5 id="如何实现地址转换"><a href="#如何实现地址转换" class="headerlink" title="如何实现地址转换"></a>如何实现地址转换</h5><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402204546951.png" alt="image-20240402204546951" style="zoom:33%;"></p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><h4 id="传统存储管理方式的特征、缺点"><a href="#传统存储管理方式的特征、缺点" class="headerlink" title="传统存储管理方式的特征、缺点"></a>传统存储管理方式的特征、缺点</h4><pre><code>                                         &lt;img src=&quot;操作系统/image-20240402205246881.png&quot; alt=&quot;image-20240402205246881&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="虚拟内存的定义和特征"><a href="#虚拟内存的定义和特征" class="headerlink" title="虚拟内存的定义和特征"></a>虚拟内存的定义和特征</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402205721274.png" alt="image-20240402205721274" style="zoom:33%;"></p><h4 id="如何实现虚拟内存技术？"><a href="#如何实现虚拟内存技术？" class="headerlink" title="如何实现虚拟内存技术？"></a>如何实现虚拟内存技术？</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402205925768.png" alt="image-20240402205925768" style="zoom:33%;"></p><h3 id="请求分页管理方式"><a href="#请求分页管理方式" class="headerlink" title="请求分页管理方式"></a>请求分页管理方式</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402210152436.png" alt="image-20240402210152436" style="zoom:33%;"></p><h4 id="请求页表"><a href="#请求页表" class="headerlink" title="请求页表"></a>请求页表</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402210344072.png" alt="image-20240402210344072" style="zoom:33%;"></p><h4 id="缺页中断机制"><a href="#缺页中断机制" class="headerlink" title="缺页中断机制"></a>缺页中断机制</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402210803244.png" alt="image-20240402210803244" style="zoom:33%;"></p><pre><code>                                             &lt;img src=&quot;操作系统/image-20240402211008408.png&quot; alt=&quot;image-20240402211008408&quot; style=&quot;zoom:33%;&quot; /&gt;</code></pre><h4 id="地址变换机构"><a href="#地址变换机构" class="headerlink" title="地址变换机构"></a>地址变换机构</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211124688.png" alt="image-20240402211124688" style="zoom:33%;"></p><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211224479.png" alt="image-20240402211224479" style="zoom:25%;"></p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211306225.png" alt="image-20240402211306225" style="zoom:33%;"></p><h4 id="最佳置换算法"><a href="#最佳置换算法" class="headerlink" title="最佳置换算法"></a>最佳置换算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211637510.png" alt="image-20240402211637510" style="zoom:33%;"></p><h4 id="先进先出置换算法"><a href="#先进先出置换算法" class="headerlink" title="先进先出置换算法"></a>先进先出置换算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211707918.png" alt="image-20240402211707918" style="zoom:33%;"></p><h4 id="最近最久未使用置换"><a href="#最近最久未使用置换" class="headerlink" title="最近最久未使用置换"></a>最近最久未使用置换</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211737449.png" alt="image-20240402211737449" style="zoom:33%;"></p><h4 id="时钟置换算法"><a href="#时钟置换算法" class="headerlink" title="时钟置换算法"></a>时钟置换算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211814968.png" alt="image-20240402211814968" style="zoom:33%;"></p><h4 id="改进型的时钟置换算法"><a href="#改进型的时钟置换算法" class="headerlink" title="改进型的时钟置换算法"></a>改进型的时钟置换算法</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402211946798.png" alt="image-20240402211946798" style="zoom:33%;"></p><h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/01%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240402212043180.png" alt="image-20240402212043180" style="zoom:33%;"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 与 CSS</title>
      <link href="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/07_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF_HTML&amp;CSS/"/>
      <url>/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/07_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF_HTML&amp;CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-与-CSS"><a href="#HTML-与-CSS" class="headerlink" title="HTML 与 CSS"></a>HTML 与 CSS</h1><p>HTML 是什么：即 HyperText Markup language 超文本标记语言，咱们熟知的网页就是用它编写的，HTML 的作用是定义网页的内容和结构。</p><ul><li>HyperText 是指用超链接的方式组织网页，把网页联系起来</li><li>Markup 是指用 <code>&lt;标签&gt;</code> 的方式赋予内容不同的功能和含义</li></ul><p>CSS 是什么：即 Cascading  Style  Sheets 级联（层叠）样式表，它描述了网页的表现与展示效果</p><h2 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML 元素"></a>HTML 元素</h2><p>HTML 由一系列元素 <code>elements</code> 组成，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>整体称之为元素</li><li><code>&lt;p&gt;</code> 和 <code>&lt;/p&gt;</code> 分别称为起始和结束标签</li><li><p>标签包围起来的 Hello, world 称之为内容</p></li><li><p>p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落</p></li></ul><p>元素还可以有属性，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识</li></ul><p>元素之间可以嵌套，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大<span class="tag">&lt;/<span class="name">b</span>&gt;</span>的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误嵌套写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不包含内容的元素称之为空元素，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>img 作用是用来展示图片</li><li>src 属性用来指明图片路径</li></ul><h2 id="HTML-页面"><a href="#HTML-页面" class="headerlink" title="HTML 页面"></a>HTML 页面</h2><p>前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>html</code> 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素</li><li><code>head</code> 元素包含的是那些不用于展现内容的元素，如 <code>title</code>，<code>link</code>，<code>meta</code> 等</li><li><code>body</code> 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素</li></ul><h2 id="常见元素"><a href="#常见元素" class="headerlink" title="常见元素"></a>常见元素</h2><h3 id="1-文本"><a href="#1-文本" class="headerlink" title="1) 文本"></a>1) 文本</h3><h4 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a>Heading</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2号标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3号标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4号标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>5号标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>6号标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>无序列表 unordered list</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多级列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    北京市</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>海淀区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>朝阳区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>昌平区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    河北省</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>石家庄<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>保定<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h4><p>锚，超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;网页地址&quot;</span>&gt;</span>超链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-多媒体"><a href="#2-多媒体" class="headerlink" title="2) 多媒体"></a>2) 多媒体</h3><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>src 格式有 3 种</p><ul><li><p>文件地址</p></li><li><p>data URL，格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:媒体类型;base64,数据</span><br></pre></td></tr></table></figure></li><li><p>object URL，需要配合 javascript 使用</p></li></ul><h4 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-表单"><a href="#3-表单" class="headerlink" title="3) 表单"></a>3) 表单</h3><h4 id="作用与语法"><a href="#作用与语法" class="headerlink" title="作用与语法"></a>作用与语法</h4><p>表单的作用：<strong>收集</strong>用户填入的<strong>数据</strong>，并将这些数据<strong>提交给服务器</strong></p><p>表单的语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;服务器地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;请求方式&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;数据格式&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单项 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>method 请求方式有 <ul><li>get （默认）提交时，数据跟在 URL 地址之后</li><li>post 提交时，数据在请求体内</li></ul></li><li>enctype 在 post 请求时，指定请求体的数据格式<ul><li>application/x-www-form-urlencoded（默认）</li><li>multipart/form-data</li></ul></li><li>其中表单项提供多种收集数据的方式<ul><li>有 name 属性的表单项数据，才会被发送给服务器</li></ul></li></ul><h4 id="常见的表单项"><a href="#常见的表单项" class="headerlink" title="常见的表单项"></a>常见的表单项</h4><p>文本框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uesrname&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>密码框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>隐藏框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日期框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;唱歌&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;逛街&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h2><h3 id="1-请求组成"><a href="#1-请求组成" class="headerlink" title="1) 请求组成"></a>1) 请求组成</h3><p>请求由三部分组成</p><ol><li>请求行</li><li>请求头</li><li>请求体</li></ol><p>可以用 telnet 程序测试</p><h3 id="2-请求方式与数据格式"><a href="#2-请求方式与数据格式" class="headerlink" title="2) 请求方式与数据格式"></a>2) 请求方式与数据格式</h3><h4 id="get-请求示例"><a href="#get-请求示例" class="headerlink" title="get 请求示例"></a>get 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /test2?name=%E5%BC%A0&amp;age=20 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><ul><li>%E5%BC%A0 是【张】经过 URL 编码后的结果</li></ul><h4 id="post-请求示例"><a href="#post-请求示例" class="headerlink" title="post 请求示例"></a>post 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 21</span><br><span class="line"></span><br><span class="line">name=%E5%BC%A0&amp;age=18</span><br></pre></td></tr></table></figure><p>application/x-www-form-urlencoed 格式细节：</p><ul><li>参数分成名字和值，中间用 = 分隔</li><li>多个参数使用 &amp; 进行分隔</li><li>【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送</li></ul><h4 id="json-请求示例"><a href="#json-请求示例" class="headerlink" title="json 请求示例"></a>json 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test3 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 25</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure><p>json 对象格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;属性名&quot;:属性值&#125;</span><br></pre></td></tr></table></figure><p>其中属性值可以是</p><ul><li>字符串 “”</li><li>数字</li><li>true, false</li><li>null</li><li>对象</li><li>数组</li></ul><p>json 数组格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[元素1, 元素2, ...]</span><br></pre></td></tr></table></figure><h4 id="multipart-请求示例"><a href="#multipart-请求示例" class="headerlink" title="multipart 请求示例"></a>multipart 请求示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: multipart/form-data; boundary=123</span><br><span class="line">Content-Length: 125</span><br><span class="line"></span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">lisi</span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;age&quot;</span><br><span class="line"></span><br><span class="line">30</span><br><span class="line">--123--</span><br></pre></td></tr></table></figure><ul><li>boundary=123 用来定义分隔符</li><li>起始分隔符是 <code>--分隔符</code></li><li>结束分隔符是 <code>--分隔符--</code></li></ul><h4 id="数据格式小结"><a href="#数据格式小结" class="headerlink" title="数据格式小结"></a>数据格式小结</h4><p>客户端发送</p><ul><li>编码 <ul><li>application/x-www-form-urlencoded ：url 编码</li><li>application/json：utf-8 编码</li><li>multipart/form-data：每部分编码可以不同</li></ul></li><li>表单只支持以 application/x-www-form-urlencoded 和 multipart/form-data 格式发送数据</li><li>文件上传需要用 multipart/form-data 格式</li><li>js 代码可以支持任意格式发送数据 </li></ul><p>服务端接收</p><ul><li>对 application/x-www-form-urlencoded 和 multipart/form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可</li><li>对于 applicaiton/json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式</li></ul><h3 id="3-session-原理"><a href="#3-session-原理" class="headerlink" title="3) session 原理"></a>3) session 原理</h3><p>Http 无状态，有会话</p><ul><li>无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用</li><li>有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享</li></ul><p>服务端使用了 session 技术来暂存数据</p><p>存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /s1?name=zhang HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /s2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Cookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D</span><br></pre></td></tr></table></figure><p>session 技术实现身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line">participant Session</span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L -&gt;&gt; +Session : 存入用户名</span><br><span class="line">Session --&gt;&gt; -L: </span><br><span class="line">L --&gt;&gt; -Client: 登录成功</span><br><span class="line">end</span><br><span class="line">rect rgb(200, 190, 255)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求</span><br><span class="line">i -&gt;&gt; +Session : 获取用户名</span><br><span class="line">Session --&gt;&gt; -i : </span><br><span class="line">i -&gt;&gt; i: 用户名存在，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="4-jwt-原理"><a href="#4-jwt-原理" class="headerlink" title="4) jwt 原理"></a>4) jwt 原理</h3><p>jwt 技术实现身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line"></span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L --&gt;&gt; -Client : 登录成功，返回token</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rect rgb(150, 190, 155)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求，携带token</span><br><span class="line">i -&gt;&gt; i : 校验token，校验无误，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>生成 token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /j1?name=zhang&amp;pass=123 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>校验 token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /j2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Authorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28</span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>即 Cascading  Style  Sheets，它描述了网页的表现与展示效果</p><p>先用选择器定位到对应的元素，然后用属性对对应的元素赋值</p><h3 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1) 选择器"></a>1) 选择器</h3><ul><li>type 选择器 - 根据标签名进行匹配（元素选择器）</li><li><p>class 选择器 - 根据元素的 class 属性进行匹配</p></li><li><p>id 选择器  - 根据元素的 id 属性进行匹配</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 元素(type)选择器 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">243</span>, <span class="number">136</span>, <span class="number">42</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* class 选择器 */</span></span><br><span class="line"><span class="selector-class">.c1</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">151</span>, <span class="number">211</span>, <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* id 选择器 */</span></span><br><span class="line"><span class="selector-id">#p3</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: cyan;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line">//多个选择器之间可以用逗号分隔</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三个选择器之间存在一定的优先级:</span></span><br><span class="line"><span class="comment">优先级: id选择器&gt;class选择器&gt;type选择器</span></span><br><span class="line"><span class="comment">即同一个元素被三个选择器同时命中时，只有id选择器会生效</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-属性和值"><a href="#2-属性和值" class="headerlink" title="2) 属性和值"></a>2) 属性和值</h3><p>属性与值太多太多，使用时根据需要上网搜索即可</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS">前端参考文档</a></p><ul><li>background-color : red;</li><li>…</li><li>display</li></ul><h3 id="3-布局"><a href="#3-布局" class="headerlink" title="3) 布局"></a>3) 布局</h3><p>与布局相关的 html 元素</p><ul><li>div</li><li>template</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript</title>
      <link href="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/"/>
      <url>/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p>它是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等</p><p>例子</p><ul><li>修改页面内容</li></ul><p>js 代码位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// js 代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 js 脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js脚本路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意，到了框架之后，引入方式会有不同</li></ul><h2 id="变量与数据类型"><a href="#变量与数据类型" class="headerlink" title="变量与数据类型"></a>变量与数据类型</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><h4 id="1-let-star"><a href="#1-let-star" class="headerlink" title="1) let :star:"></a>1) let :star:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名 = 值;</span><br></pre></td></tr></table></figure><ul><li>let 声明的变量可以被多次赋值，例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;  <span class="comment">// 初始值是 100</span></span><br><span class="line">a = <span class="number">200</span>;  <span class="comment">// ok, 被重新赋值为 200</span></span><br></pre></td></tr></table></figure><h4 id="2-const-star"><a href="#2-const-star" class="headerlink" title="2) const :star:"></a>2) const :star:</h4><ul><li>const 修饰的叫常量，只能赋值一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="number">300</span>; <span class="comment">// 初始值是 300</span></span><br><span class="line">b = <span class="number">400</span>;   <span class="comment">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure><ul><li>const 并不意味着它引用的内容不可修改，例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">c[<span class="number">2</span>] = <span class="number">4</span>;         <span class="comment">// ok, 数组内容被修改成 [1,2,4]</span></span><br><span class="line">c = [<span class="number">5</span>,<span class="number">6</span>];<span class="comment">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure><h4 id="3-var"><a href="#3-var" class="headerlink" title="3) var"></a>3) var</h4><p>var 声明的变量可以被多次赋值，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="number">100</span>;</span><br><span class="line">f = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="1-2-undefined-和-null"><a href="#1-2-undefined-和-null" class="headerlink" title="1,2) undefined 和 null"></a>1,2) undefined 和 null</h4><ul><li>执行表达式或函数，没有返回结果，出现 undefined</li><li>访问数组不存在的元素，访问对象不存在的属性，出现 undefined</li><li>定义变量，没有初始化，出现 undefined</li></ul><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);  <span class="comment">// 函数没有返回值, 结果是  undefined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>; <span class="comment">// 表达式没有返回值, 结果是 undefined</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b[<span class="number">10</span>]); <span class="comment">// 数组未定义元素是 undefined</span></span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="property">age</span>); <span class="comment">// 对象未定义属性是 undefined</span></span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">// 变量未初始化是 undefined</span></span><br></pre></td></tr></table></figure><p>二者共同点</p><ul><li>都没有属性、方法</li><li>二者合称 Nullish</li></ul><p>二者区别</p><ul><li>undefined 由 js 产生</li><li>null 由程序员提供</li></ul><h4 id="3-string-star"><a href="#3-string-star" class="headerlink" title="3) string :star:"></a>3) string :star:</h4><p>js 字符串三种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;hello&quot;</span>;  <span class="comment">// 双引号</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&quot;world&quot;</span>;  <span class="comment">// 单引号</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">`hello`</span>;  <span class="comment">// 反引号</span></span><br></pre></td></tr></table></figure><p>html 代码如下，用 java 和 js 中的字符串如何表示？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.html&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java 显得比较繁琐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;&lt;a href=\&quot;1.html\&quot;&gt;超链接&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>js 就比较灵活</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&#x27;&lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">`&lt;a href=&quot;1.html&quot;&gt;超链接&lt;/a&gt;`</span>;</span><br></pre></td></tr></table></figure><p>模板字符串（Template strings）</p><p>需求：拼接 URI 的请求参数，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/test?name=zhang&amp;age=18</span><br><span class="line">/test?name=li&amp;age=20</span><br></pre></td></tr></table></figure><p>传统方法拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ; <span class="comment">// zhang li ...</span></span><br><span class="line"><span class="keyword">let</span> age = ; <span class="comment">// 18 20 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;/test?name=&quot;</span> + name + <span class="string">&quot;&amp;age=&quot;</span> + age;</span><br></pre></td></tr></table></figure><p>模板字符串方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ; <span class="comment">// zhang li ...</span></span><br><span class="line"><span class="keyword">let</span> age = ; <span class="comment">// 18 20 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">`/test?name=<span class="subst">$&#123;name&#125;</span>&amp;age=<span class="subst">$&#123;age&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h4 id="4-5-number-和-bigint-star"><a href="#4-5-number-和-bigint-star" class="headerlink" title="4,5) number 和 bigint:star:"></a>4,5) number 和 bigint:star:</h4><p>number 类型标识的是双精度浮动小数，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">3</span>;   <span class="comment">// 结果 3.3333333333333335</span></span><br></pre></td></tr></table></figure><p>既然是浮点小数，那么可以除零</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">0</span>;  <span class="comment">// 结果 Infinity 正无穷大</span></span><br><span class="line">-<span class="number">10</span> / <span class="number">0</span>;  <span class="comment">// 结果 -Infinity 负无穷大</span></span><br></pre></td></tr></table></figure><p>浮点小数都有运算精度问题，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.0</span> - <span class="number">1.1</span>; <span class="comment">// 结果 0.8999999999999999</span></span><br></pre></td></tr></table></figure><p>字符串转数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>); <span class="comment">// 结果是数字 10 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10.5&quot;</span>);<span class="comment">// 结果是数字 10, 去除了小数部分</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>) / <span class="number">3</span>; <span class="comment">// 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 转换失败，结果是特殊值 NaN (Not a Number)</span></span><br></pre></td></tr></table></figure><p>要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10n</span> / <span class="number">3n</span>;<span class="comment">// 结果 3n, 按整数除法处理</span></span><br></pre></td></tr></table></figure><h4 id="6-boolean-star"><a href="#6-boolean-star" class="headerlink" title="6) boolean :star:"></a>6) boolean :star:</h4><ul><li>Truthy</li><li>Falsy</li></ul><p>在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】… 作为判断条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b) &#123; <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy</p><p>下面值都是 falsy</p><ul><li><code>false</code></li><li><code>Nullish (null, undefined)</code></li><li><code>0, 0n, NaN</code></li><li><code>&quot;&quot; &#39;&#39; `` </code>  即长度为零的字符串</li></ul><p>剩余的值绝大部分都是 truthy</p><p>有几个容易被当作 falsy 实际是 truthy 的</p><ul><li><code>&quot;false&quot;, &quot;0&quot;</code> 即字符串的 false 和 字符串的零</li><li><code>[]</code> 空数组</li><li><code>&#123;&#125;</code> 空对象</li></ul><h4 id="7-symbol"><a href="#7-symbol" class="headerlink" title="7) symbol"></a>7) symbol</h4><ul><li>很少使用</li></ul><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><h4 id="1-Function-star-star"><a href="#1-Function-star-star" class="headerlink" title="1) Function :star::star:"></a>1) Function :star::star:</h4><h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(实参);</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);     <span class="comment">// 返回 3</span></span><br></pre></td></tr></table></figure><p>js 中的函数调用特点：对参数的<strong>类型</strong>和<strong>个数</strong>都没有限制，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);  <span class="comment">// 返回 ab</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);   <span class="comment">// 返回 9, 第三个参数没有被用到, 不会报错</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>);<span class="comment">// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN</span></span><br></pre></td></tr></table></figure><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p>java 中（spring）要实现默认参数的效果得这么做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">page</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(defaultValue=&quot;1&quot;)</span> <span class="type">int</span> page, </span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(defaultValue=&quot;10&quot;)</span> <span class="type">int</span> size</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pagination</span>(<span class="params">page = <span class="number">1</span>, size = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(page, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">参数</span>) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第一种场景：定义完毕后立刻调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>第二种场景：作为其它对象的方法，例如</p><p>页面有元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>点我啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此元素有一个 onclick 方法，会在鼠标单击这个元素后被执行，onclick 方法刚开始是 null，需要赋值后才能使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标单击了...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(参数) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有参数，() 还是要保留</li><li>如果只有一个参数，() 可以省略</li><li>如果函数体内只有一行代码，{} 可以省略</li><li>如果这一行代码就是结果，return 可以省略</li></ul><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span>  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aa&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="函数是对象"><a href="#函数是对象" class="headerlink" title="函数是对象"></a>函数是对象</h5><p>以下形式在 js 中非常常见！</p><ol><li>可以参与赋值，例，具名函数也能参与赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">onclick</span> = abc;</span><br></pre></td></tr></table></figure><ol><li>有属性、有方法，执行 <code>console.dir(abc)</code>，输出结果如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ƒ abc()</span><br><span class="line">    arguments: null</span><br><span class="line">    caller: null</span><br><span class="line">    length: 0</span><br><span class="line">    name: &quot;abc&quot;</span><br><span class="line">    ➡prototype: &#123;constructor: ƒ&#125;</span><br><span class="line">    [[FunctionLocation]]: VM1962:1</span><br><span class="line">    ➡[[Prototype]]: ƒ ()</span><br><span class="line">    ➡[[Scopes]]: Scopes[1]</span><br></pre></td></tr></table></figure><ul><li>其中带有 f 标记的是方法，不带的是属性</li><li><p>带有 ➡ 符号的可以继续展开，限于篇幅省略了</p></li><li><p>带有 <code>[[ ]]</code> 的是内置属性，不能访问，只能查看</p></li><li>相对重要的是 <code>[[Prototype]]</code> 和 <code>[[Scopes]]</code> 会在后面继承和作用域时讲到</li></ul><ol><li>可以作为方法参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">fn</span>) &#123;          <span class="comment">// fn 将来可以是一个函数对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="title function_">fn</span>();                 <span class="comment">// 调用函数对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">b</span>(a)</span><br></pre></td></tr></table></figure><ol><li>可以作为方法返回值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">c</span>()()</span><br></pre></td></tr></table></figure><h5 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h5><p>函数可以嵌套（js 代码中很常见，只是嵌套的形式更多是匿名函数，箭头函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 看这里</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>();</span><br></pre></td></tr></table></figure><ul><li>以函数为分界线划定作用域，所有函数之外是全局作用域</li><li>查找变量时，由内向外查找<ul><li>在内层作用域找到变量，就会停止查找，不会再找外层</li><li>所有作用域都找不到变量，报错</li></ul></li><li>作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试</li></ul><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()();  <span class="comment">// 在外面执行了 b</span></span><br></pre></td></tr></table></figure><ul><li>函数定义时，它的作用域已经确定好了，因此无论函数将来去了哪，都能从它的作用域中找到当时那些变量</li><li>别被概念忽悠了，闭包就是指<strong>函数能够访问自己的作用域中变量</strong></li></ul><h5 id="let、var-与作用域"><a href="#let、var-与作用域" class="headerlink" title="let、var 与作用域"></a>let、var 与作用域</h5><p>如果函数外层引用的是 let 变量，那么外层普通的 {} 也会作为作用域边界，最外层的 let 也占一个 script 作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 因为是同一个变量，还是打印 20</span></span><br></pre></td></tr></table></figure><p>如果是 let，则视为两个作用域中的两个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">// 打印 10</span></span><br></pre></td></tr></table></figure><p>要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br></pre></td></tr></table></figure><h4 id="2-Array-star"><a href="#2-Array-star" class="headerlink" title="2) Array :star:"></a>2) Array :star:</h4><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]); <span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组元素</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="number">5</span>; <span class="comment">// 数组元素变成了 [5,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组元素，其中 length 是数组属性，代表数组长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API</p><ul><li>push、shift、splice</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);    <span class="comment">// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]</span></span><br><span class="line">arr.<span class="title function_">shift</span>();<span class="comment">// 从数组头部(左侧)移除元素, 结果 [2,3,4]</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]</span></span><br></pre></td></tr></table></figure><ul><li>join</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">join</span>(); <span class="comment">// 默认使用【,】作为连接符，结果 &#x27;a,b,c&#x27;</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);<span class="comment">// 结果 &#x27;abc&#x27;</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>);<span class="comment">// 结果 &#x27;a-b-c&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>map、filter、forEach</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">i</span>) &#123;   <span class="comment">// 代表的新旧元素之间的变换规则</span></span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map(a) // 具名函数，结果 [10,20,30,60]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map( (i) =&gt; &#123;return i * 10&#125; ); // 箭头函数</span></span><br><span class="line">arr.<span class="title function_">map</span>( <span class="function"><span class="params">i</span> =&gt;</span> i * <span class="number">10</span> ); <span class="comment">// 箭头函数</span></span><br></pre></td></tr></table></figure><ul><li>传给 map 的函数，参数代表旧元素，返回值代表新元素</li></ul><p>map 的内部实现（伪代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">a</span>) &#123; <span class="comment">// 参数是一个函数</span></span><br><span class="line">    <span class="keyword">let</span> narr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> o = arr[i]; <span class="comment">// 旧元素</span></span><br><span class="line">        <span class="keyword">let</span> n = <span class="title function_">a</span>(o);   <span class="comment">// 新元素</span></span><br><span class="line">        narr.<span class="title function_">push</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> narr;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>filter 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line">arr.<span class="title function_">filter</span>( <span class="function">(<span class="params">i</span>)=&gt;</span> i % <span class="number">2</span> == <span class="number">1</span> ); <span class="comment">// 结果 [1,3]</span></span><br></pre></td></tr></table></figure><ul><li>传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素</li></ul><p>forEach 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for(let i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">    console.log(arr[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>( <span class="function">(<span class="params">i</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i) );</span><br></pre></td></tr></table></figure><p>两个称呼</p><ul><li>高阶函数，map，filter，forEach</li><li>回调函数，例如作为参数传入的函数</li></ul><h4 id="3-Object-star-star"><a href="#3-Object-star-star" class="headerlink" title="3) Object :star::star:"></a>3) Object :star::star:</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    属性名: 值,</span><br><span class="line">    方法名: 函数,</span><br><span class="line">    get 属性名() &#123;&#125;,</span><br><span class="line">    set 属性名(新值) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">study</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;小黑&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> study = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123; name, age, study &#125;</span><br></pre></td></tr></table></figure><p>例3（重点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu3 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="title function_">study</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;爱学习&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：对象方法这么写，仅限于对象内部</li></ul><p>例4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu4 = &#123;</span><br><span class="line">    <span class="attr">_name</span>: <span class="literal">null</span>, <span class="comment">/*类似于java中私有成员变量*/</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了get&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入了set&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 get，set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu4.<span class="property">name</span> = <span class="string">&quot;小白&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu4.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><h5 id="特色：属性增删"><a href="#特色：属性增删" class="headerlink" title="特色：属性增删"></a>特色：属性增删</h5><p>对比一下 Java 中的 Object</p><ul><li>Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的</li><li>js 的对象，不需要什么模板，它的属性和方法可以随时加减</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;;</span><br><span class="line">stu.<span class="property">age</span> = <span class="number">18</span>;<span class="comment">// 添加属性</span></span><br><span class="line"><span class="keyword">delete</span> stu.<span class="property">age</span>;<span class="comment">// 删除属性</span></span><br><span class="line"></span><br><span class="line">stu.<span class="property">study</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">// 添加方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 get，set，需要借助 Object.definePropery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">_name</span>:<span class="literal">null</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(stu, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>参数1：目标对象</li><li>参数2：属性名</li><li>参数3：get，set 的定义</li></ul><h5 id="特色：this"><a href="#特色：this" class="headerlink" title="特色：this"></a>特色：this</h5><p>先来对 Java 中的 this 有个理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">(Student <span class="built_in">this</span>, String subject)</span> &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;在学习 &quot;</span> + subject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下面的代码，本质上是执行 study(stu, &quot;java&quot;)，因此 this 就是 stu</span></span><br><span class="line">        stu.study(<span class="string">&quot;java&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java 中的 this 是个隐式参数</li><li>Java 中，我们说 this 代表的就是调用方法的那个对象</li></ul><p>js 中的 this 也是隐式参数，但它与函数运行时上下文相关</p><p>例如，一个“落单”的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">study</span>(<span class="params">subject</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在学习 &quot;</span> + subject)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">study</span>(<span class="string">&quot;js&quot;</span>);  <span class="comment">// 输出 在学习 js</span></span><br></pre></td></tr></table></figure><p>这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串</p><p>同样的函数，如果作为对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;小白&quot;</span>,</span><br><span class="line">    study</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，会将当前对象作为 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stu.<span class="title function_">study</span>(<span class="string">&#x27;js&#x27;</span>); <span class="comment">// 输出 小白在学习 js</span></span><br></pre></td></tr></table></figure><p>还可以动态改变 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">name</span>:<span class="string">&quot;小黑&quot;</span>&#125;;</span><br><span class="line">study.<span class="title function_">call</span>(stu, <span class="string">&quot;js&quot;</span>);<span class="comment">// 输出 小黑在学习 js</span></span><br></pre></td></tr></table></figure><p>这回 study 执行时，就把 call 的第一个参数 stu 作为 this</p><p>一个例外是，在<strong>箭头函数</strong>内出现的 this，以外层 this 理解 </p><p>用匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">stu.<span class="title function_">play</span>()</span><br></pre></td></tr></table></figure><ul><li>this.name 所在的函数是【落单】的函数，因此 this 代表 window</li></ul><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">与小白在玩耍</span><br><span class="line">与小黑在玩耍</span><br><span class="line">与小明在玩耍</span><br></pre></td></tr></table></figure><p>用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象</li></ul><p>输出结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小花与小白在玩耍</span><br><span class="line">小花与小黑在玩耍</span><br><span class="line">小花与小明在玩耍</span><br></pre></td></tr></table></figure><p>不用箭头函数的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小花&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;小白&quot;</span>,<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;小明&quot;</span>],</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> me = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(me.<span class="property">name</span> + <span class="string">&quot;与&quot;</span> + e + <span class="string">&quot;在玩耍&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="特色：原型继承"><a href="#特色：原型继承" class="headerlink" title="特色：原型继承"></a>特色：原型继承</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> father = &#123;</span><br><span class="line">    <span class="attr">f1</span>: <span class="string">&#x27;父属性&#x27;</span>,</span><br><span class="line">    <span class="attr">m1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="title class_">Object</span>.<span class="title function_">create</span>(father);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">f1</span>);  <span class="comment">// 打印 父属性</span></span><br><span class="line">son.<span class="title function_">m1</span>();  <span class="comment">// 打印 父方法</span></span><br></pre></td></tr></table></figure><ul><li>father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找</li><li>son 自己可以添加自己的属性和方法</li><li>son 里有特殊属性 <code>__proto__</code> 代表它的父对象，js 术语： son 的原型对象</li><li>不同浏览器对打印 son 的 <code>__proto__</code> 属性时显示不同<ul><li>Edge 打印 console.dir(son) 显示 <code>[[Prototype]]</code></li><li>Firefox 打印 console.dir(son) 显示 <code>&lt;prototype&gt;</code></li></ul></li></ul><h5 id="特色：基于函数的原型继承"><a href="#特色：基于函数的原型继承" class="headerlink" title="特色：基于函数的原型继承"></a>特色：基于函数的原型继承</h5><p>出于方便的原因，js 又提供了一种基于函数的原型继承</p><blockquote><p><strong>函数职责</strong></p><ol><li><p>负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法</p></li><li><p>函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象</p><p><strong>注意！</strong>名字有差异，这个属性的作用就是为新对象提供原型</p></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cons</span>(<span class="params">f2</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建子对象(this), 给子对象提供属性和方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">f2</span> = f2;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">m2</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cons.prototype 就是父对象</span></span><br><span class="line">cons.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">f1</span> = <span class="string">&quot;父属性&quot;</span>;</span><br><span class="line">cons.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">m1</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合 new 关键字，创建子对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title function_">cons</span>(<span class="string">&quot;子属性&quot;</span>)</span><br></pre></td></tr></table></figure><p>子对象的 <code>__proto__</code> 就是函数的 <code>prototype</code> 属性</p><h5 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h5><p>之前我们讲 http 请求格式时，讲过 json 这种数据格式，它的语法看起来与 js 对象非常相似，例如：</p><p>一个 json 对象可以长这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>一个 js 对象长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么他们的区别在哪儿呢？我总结了这么几点</p><ol><li>本质不同<ul><li>json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货</li><li>js 对象是切切实实的对象，可以有属性方法</li></ul></li><li>语法细节不同<ul><li>json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组</li><li>json 中不能有除以上的其它 js 对象的特性，如方法等</li><li>json 中的属性必须用双引号引起来</li></ul></li></ol><p>json 字符串与 js 对象的转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(json字符串);  <span class="comment">// 返回js对象</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(js对象);  <span class="comment">// 返回json字符串</span></span><br></pre></td></tr></table></figure><h3 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h3><p>静态类型语言，如 Java，值有类型，变量也有类型、赋值给变量时，类型要相符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;  <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>而 js 属于动态类型语言，值有类型，但变量没有类型，赋值给变量时，没要求</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100</span>;</span><br><span class="line">b = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">b = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>动态类型看起来比较灵活，但变量没有类型，会给后期维护带来困难，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// obj 的类型未知，必须根据不同类型做出相应的容错处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><ul><li><code>+ - * / % **</code></li><li><code>+= -= *= /= %= **=</code></li><li><code>++ --</code></li><li>位运算、移位运算</li><li><code>== != &gt; &gt;= &lt; &lt;=</code></li><li><code>=== !==</code> :star:</li><li><code>&amp;&amp; || !</code> :star:</li><li><code>?? ?.</code> :star:</li><li><code>...</code> :star:</li><li>解构赋值 :star:</li></ul><h3 id="1"><a href="#1" class="headerlink" title="1) ==="></a>1) ===</h3><p>严格相等运算符，用作逻辑判等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1</span>    <span class="comment">// 返回 true </span></span><br><span class="line"><span class="number">1</span> == <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 true，会先将右侧的字符串转为数字，再做比较</span></span><br><span class="line"><span class="number">1</span> === <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 false，类型不等，直接返回 false</span></span><br></pre></td></tr></table></figure><p>typeof 查看某个值的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span><span class="comment">// 返回 &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;1&#x27;</span><span class="comment">// 返回 &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2) ||"></a>2) ||</h3><p>需求，如果参数 n 没有传递，给它一个【男】</p><p><strong>推荐</strong>做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n = <span class="string">&#x27;男&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        n = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可能是这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = (n === <span class="literal">undefined</span>) ? <span class="string">&#x27;男&#x27;</span> : n;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些老旧代码中可能的做法（不推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = n || <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的语法是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值<span class="number">1</span> || 值<span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2</p><h3 id="3-与"><a href="#3-与" class="headerlink" title="3) ?? 与 ?."></a>3) ?? 与 ?.</h3><h4 id><a href="#" class="headerlink" title="??"></a>??</h4><p>需求，如果参数 n 没有传递或是 null，给它一个【男】</p><p>如果用传统办法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="literal">undefined</span> || n === <span class="literal">null</span>) &#123;</span><br><span class="line">        n = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 ??</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = n ?? <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值1 ?? 值2</span><br></pre></td></tr></table></figure><ul><li>值1 是 nullish，返回值2</li><li>值1 不是 nullish，返回值1</li></ul><h4 id="-1"><a href="#-1" class="headerlink" title="?."></a>?.</h4><p>需求，函数参数是一个对象，可能包含有子属性</p><p>例如，参数可能是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu3 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在要访问子属性（有问题）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>?.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用传统办法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(stu.<span class="property">address</span> === <span class="literal">undefined</span> || stu.<span class="property">address</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-…"><a href="#4-…" class="headerlink" title="4) …"></a>4) …</h3><p>展开运算符</p><p>作用1：打散数组，把元素传递给多个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b,c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求，把数组元素依次传递给函数参数</p><p>传统写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>]);<span class="comment">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure><p>展开运算符写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(...arr);<span class="comment">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure><ul><li>打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素</li></ul><p>作用2：复制数组或对象</p><p>数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1];<span class="comment">// 复制数组</span></span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;...obj1&#125;;<span class="comment">// 复制对象</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：展开运算符复制属于浅拷贝，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">address</span>: &#123;<span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span>&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;...o1&#125;;</span><br></pre></td></tr></table></figure><p>作用3：合并数组或对象</p><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> a2 = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b1 = [...a1,...a2];<span class="comment">// 结果 [1,2,3,4]</span></span><br><span class="line"><span class="keyword">let</span> b2 = [...a2,<span class="number">5</span>,...a1]<span class="comment">// 结果 [3,4,5,1,2]</span></span><br></pre></td></tr></table></figure><p>合并对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o3 = &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n1 = &#123;...o1, ...o2&#125;;<span class="comment">// 结果 &#123;name:&#x27;张三&#x27;,age:18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n2 = &#123;...o3, ...o2, ...o1&#125;; <span class="comment">// 结果&#123;name:&#x27;李四&#x27;,age:18&#125;</span></span><br></pre></td></tr></table></figure><ul><li>复制对象时出现同名属性，后面的会覆盖前面的</li></ul><h3 id="5"><a href="#5" class="headerlink" title="5) [] {}"></a>5) [] {}</h3><p>解构赋值</p><h4 id="-2"><a href="#-2" class="headerlink" title="[]"></a>[]</h4><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;<span class="comment">// 结果 a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">[a,b,c]</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c) <span class="comment">// 结果 a=1, b=2, c=3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(arr);</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title="{}"></a>{}</h4><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = obj;<span class="comment">// 结果 name=张三, age=18</span></span><br></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">&#123;name, age&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age); <span class="comment">// 结果 name=张三, age=18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(obj)</span><br></pre></td></tr></table></figure><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><ul><li><code>if ... else</code></li><li><code>switch</code></li><li><code>while</code></li><li><code>do ... while</code></li><li><code>for</code> </li><li><code>for ... in</code> :star:</li><li><code>for ... of</code> :star:</li><li><code>try ... catch</code> :star:</li></ul><h3 id="1-for-in"><a href="#1-for-in" class="headerlink" title="1) for in"></a>1) for in</h3><p>主要用来遍历对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> father = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">study</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> father) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中 const n 代表遍历出来的属性名</li><li>注意1：方法名也能被遍历出来（它其实也算一种特殊属性）</li><li>注意2：遍历子对象时，父对象的属性会跟着遍历出来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="title class_">Object</span>.<span class="title function_">create</span>(father);</span><br><span class="line">son.<span class="property">sex</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> son) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> son) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n, son[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-for-of"><a href="#2-for-of" class="headerlink" title="2) for of"></a>2) for of</h3><p>主要用来遍历数组，也可以是其它可迭代对象，如 Map，Set 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> a1) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a2 = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>:<span class="number">22</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> obj <span class="keyword">of</span> a2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> &#123;name,age&#125; <span class="keyword">of</span> a2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-try-catch"><a href="#3-try-catch" class="headerlink" title="3) try catch"></a>3) try catch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">address</span>: &#123;<span class="attr">city</span>:<span class="string">&#x27;北京&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">stu</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">address</span>.<span class="property">city</span>)   </span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现了异常&#x27;</span>, e.<span class="property">message</span>)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>前端与后端一样，也需要自己的服务器，前端一般基于<code>node.js</code>来开发的</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="1-安装-nvm"><a href="#1-安装-nvm" class="headerlink" title="1) 安装 nvm"></a>1) 安装 nvm</h4><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p><p><a href="https://blog.csdn.net/HuangsTing/article/details/113857145">nvm的安装教程</a></p><p>安装注意事项</p><ol><li>要卸载掉现有的 nodejs</li><li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li><li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li><li>首次运行前设置好国内镜像地址</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror http://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><p>首先查看有哪些可用版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |</span><br><span class="line">|--------------|--------------|--------------|--------------|</span><br><span class="line">|    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    |</span><br><span class="line">|    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    |</span><br><span class="line">|    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    |</span><br><span class="line">|    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    |</span><br><span class="line">|    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    |</span><br><span class="line">|    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    |</span><br><span class="line">|    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    |</span><br><span class="line">|    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    |</span><br><span class="line">|    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    |</span><br><span class="line">|    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    |</span><br><span class="line">|    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    |</span><br><span class="line">|    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    |</span><br><span class="line">|    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    |</span><br><span class="line">|    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    |</span><br><span class="line">|    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    |</span><br><span class="line">|    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    |</span><br><span class="line">|    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    |</span><br><span class="line">|    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    |</span><br><span class="line">|    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    |</span><br><span class="line">|    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |</span><br></pre></td></tr></table></figure><p>建议安装 LTS（长期支持版）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install 16.16.0</span><br><span class="line">nvm install 14.20.0</span><br></pre></td></tr></table></figure><p>执行 <code>nvm list</code> 会列出已安装版本</p><p>切换到 16.16.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 16.16.0</span><br></pre></td></tr></table></figure><p>切换到 14.20.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 14.20.0</span><br></pre></td></tr></table></figure><p>安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量</p><h4 id="2-检查-npm"><a href="#2-检查-npm" class="headerlink" title="2) 检查 npm"></a>2) 检查 npm</h4><p>npm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p><p>检查镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure><p>如果返回的不是 <code>https://registry.npm.taobao.org/</code>，需要做如下设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><h4 id="3-搭建前端服务器"><a href="#3-搭建前端服务器" class="headerlink" title="3) 搭建前端服务器"></a>3) 搭建前端服务器</h4><p>新建一个保存项目的 client 文件夹，进入文件夹执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save-dev</span><br></pre></td></tr></table></figure><p>安装依赖,express服务器，—save-dev表明以后在程序打包时，express不会打包</p><p>安装之后目录下会出现如下文件：</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240106112802902.png" alt="image-20240106112802902"></p><p>其中:</p><ul><li><code>package.json</code>相当于<code>maven</code>中的<code>pom.xml</code>，下载的依赖包及其版本号都会在该文件中申明</li><li><code>node_modules</code>存放安装js依赖包的目录</li></ul><p>修改 package.json 文件</p><p>添加type的目的是为了在main.js中能够直接使用import语法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.18.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>其中 devDependencies 是 npm install —save-dev 添加的</li></ul><p>express服务器必须编写启动脚本main.js才能运行启动该服务器</p><p>编写 main.js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>(); <span class="comment">//服务器对象</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;./&quot;</span>)) <span class="comment">//设置静态资源目录，便于映射</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">7070</span>); <span class="comment">//服务器启动端口</span></span><br></pre></td></tr></table></figure><p>在当前目录下新建一个静态资源:<code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello,Welcom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 js 代码（运行前端服务器）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node main.js</span><br></pre></td></tr></table></figure><p>在浏览器中输入<code>localhost:7070</code>即可显示如下页面</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240110211216759.png" alt="image-20240110211216759"></p><h3 id="前端案例"><a href="#前端案例" class="headerlink" title="前端案例"></a>前端案例</h3><ul><li>前端只有静态页面，使用 Express 服务器</li><li>后端使用 Tomcat 服务器，通过 SpringBoot、MyBatis 等框架获取数据库数据</li></ul><p>前端的核心：</p><ul><li>用html搭建前端页面的基础架构</li><li>用css样式展示前端效果</li><li>用javascript代码操控html中组件标签，绑定实践，使页面能够交互和动态化</li></ul><h4 id="1-查找元素"><a href="#1-查找元素" class="headerlink" title="1) 查找元素"></a>1) 查找元素</h4><ul><li>document.getElementById - 根据 id 值查找一个元素</li><li><p>[document|元素].querySelector - 根据选择器查找第一个匹配元素</p><ul><li>三大选择器<ul><li>标签名选择器</li><li>class选择器,格式<code>.class名</code></li><li>id选择器,格式<code>#id</code></li></ul></li></ul></li><li><p>[document|元素].querySelectorAll - 根据选择器查找所有匹配元素</p></li></ul><p>例如，有下面的 html 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thead&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row bold&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>); <span class="comment">// 找到 &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.col&#x27;</span>); <span class="comment">// 找到 &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.col&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  找到的是一个集合</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;1&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;张三&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;男&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;18&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thead = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.thead&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只在 thead 元素范围内找</span></span><br><span class="line">thead.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.col&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  找到的是一个集合</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111160837053.png" alt="image-20240111160837053"></p><p>根据 id 属性查找既可以用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id值&quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以用 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#id值&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-修改元素内容"><a href="#2-修改元素内容" class="headerlink" title="2) 修改元素内容"></a>2) 修改元素内容</h4><ul><li>元素.innerHTML</li><li>元素.textContent</li></ul><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;侠客列表&#x27;</span></span><br></pre></td></tr></table></figure><p>innerHTML  会解析内容中的标签</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111161314954.png" alt="image-20240111161314954"></p><p>textContext 不会解析内容中的标签</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111161335183.png" alt="image-20240111161335183"></p><p>给 innerHTML 或 textContent 赋值空串，可以实现清空标签内容的效果</p><h4 id="3-利用模板"><a href="#3-利用模板" class="headerlink" title="3) 利用模板"></a>3) 利用模板</h4><p>模拟场景：后端从数据库中查询学生信息列表，以json数组形式返回，前端如何动态的将他们展示出来(学生人数是动态的)</p><p>使用模板，模板定义可重用的部分，模板标签内部的内容并不会在页面显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thead&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row bold&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将来这些数据从 java 端返回</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> array = [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    ];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">        c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">        c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">        c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">        c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//importNode复制元素，第一个元素是待复制的对象，true代表递归复制其下的所有子标签元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.importNode(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 建立父子关系，左边父，右边子</span></span></span><br><span class="line"><span class="language-javascript">        tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-Fetch-API"><a href="#4-Fetch-API" class="headerlink" title="4) Fetch API"></a>4) Fetch API</h4><p>Fetch API 可以用来获取远程数据，它有两种方式接收结果，同步方式与异步方式</p><p>同步与异步的区别：</p><ul><li>同步：主线程会阻塞，知道获取子线程的结果才会继续向下执行</li><li>异步：主线程直接继续执行无需等待中间的子线程的执行结果，子线程结束之后会返回结果</li></ul><p>格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, options) <span class="comment">// 返回 Promise，并不是请求的最终结果</span></span><br><span class="line"><span class="comment">//url资源地址,options请求头请求参数等信息</span></span><br></pre></td></tr></table></figure><p>同步方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 结果 = <span class="keyword">await</span> <span class="title class_">Promise</span></span><br><span class="line"><span class="comment">// 后续代码</span></span><br></pre></td></tr></table></figure><ul><li>await 关键字必须在一个标记了 async 的 function 内来使用</li><li>后续代码不会在结果返回前执行</li></ul><p>异步方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">then</span>(结果 =&gt; &#123; ... &#125;)</span><br><span class="line"><span class="comment">// 后续代码                 </span></span><br></pre></td></tr></table></figure><ul><li>后续代码不必等待结果返回就可以执行</li></ul><p>例：</p><p>在 express 服务器上有 students.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">17</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>现在用 fetch api 获取这些数据，并展示</p><p>同步方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findStudents</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取响应对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;students.json&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取响应体, 按json格式转换为js数组</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> array = <span class="keyword">await</span> resp.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 显示数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">                c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">                c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">                c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">                c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.importNode(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 建立父子关系</span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">findStudents</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>fetch(‘students.json’) 内部会发送请求，但响应结果不能立刻返回，因此 await 就是等待响应结果返回</li><li>其中 resp.json() 也不是立刻能返回结果，它返回的也是 Promise 对象，也要配合 await 取结果</li></ul><p>异步方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&#x27;students.json&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>( <span class="function"><span class="params">resp</span> =&gt;</span> resp.<span class="title function_">json</span>() )</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>( <span class="function"><span class="params">array</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 显示数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;tp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> row = tp.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> [c1,c2,c3,c4] = row.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.col&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="language-javascript">                c1.<span class="property">textContent</span> = id;</span></span><br><span class="line"><span class="language-javascript">                c2.<span class="property">textContent</span> = name;</span></span><br><span class="line"><span class="language-javascript">                c3.<span class="property">textContent</span> = sex;</span></span><br><span class="line"><span class="language-javascript">                c4.<span class="property">textContent</span> = age;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> newRow = <span class="variable language_">document</span>.importNode(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 建立父子关系</span></span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">appendChild</span>(newRow);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>( <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e) )  <span class="comment">//捕获异常</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第一个 then 是在响应返回后，才会调用它里面的箭头函数，箭头函数参数即 resp  响应对象</li><li>第二个 then 是在 json 解析完成后，才会调用它里面的箭头函数，箭头函数参数即解析结果（本例是 array 数组）</li><li>上一个 then 返回的是 Promise 对象时，才能链式调用下一个 then</li></ul><h5 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h5><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111213945679.png" alt="image-20240111213945679" style="zoom:800%;"></p><ul><li>只要协议、主机、端口之一不同，就不同源，例如<ul><li><a href="http://localhost:7070/a">http://localhost:7070/a</a> 和 <a href="https://localhost:7070/b">https://localhost:7070/b</a> 就不同源</li></ul></li><li>同源检查是浏览器的行为，而且只针对 fetch、xhr 请求<ul><li>如果是其它客户端，例如 java http client，postman，它们是不做同源检查的</li><li>通过表单提交、浏览器直接输入 url 地址这些方式发送的请求，也不会做同源检查</li></ul></li><li>更多相关知识请参考<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></li></ul></li></ul><p>跨域现象分析</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111214437118.png" alt="image-20240111214437118"></p><p>上图中，如果请求时服务器与请求方来自于不同源，则会在请求头中携带Origin字段，指明发送者的<strong>源</strong></p><p>对于后端服务器而言，如果允许不同源的访问，则会在响应头中携带<code>Access-Control-Allow-Origin</code>，知名其响应允许来自于<code>http://localhost:7070</code>的源访问使用</p><p>请求响应头解决</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111215900034.png" alt="image-20240111215900034"></p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111215930378.png" alt="image-20240111215930378"></p><ul><li>fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域<ul><li>我们的例子中：student.html 发送 fetch 请求，告诉 tomcat，我源自 localhost:7070</li><li><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111215557707.png" alt="image-20240111215557707"></li></ul></li><li>目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】<ul><li>我们的例子中：tomcat 返回 fetch 响应，告诉浏览器，这个响应允许源自 localhost:7070 的资源使用</li><li><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111215626343.png" alt="image-20240111215626343"></li></ul></li></ul><p>代理解决</p><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111220344221.png" alt="image-20240111220344221"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-proxy-middleware --save-dev</span><br></pre></td></tr></table></figure><p>在 express 服务器启动代码中加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createProxyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;http-proxy-middleware&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, <span class="title function_">createProxyMiddleware</span>(&#123; <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>, <span class="attr">changeOrigin</span>: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure><p>fetch 代码改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:7070/api/students&#x27;</span>)</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/students&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2024/01/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/image-20240111220640614.png" alt="image-20240111220640614"></p><h4 id="5-模块化"><a href="#5-模块化" class="headerlink" title="5) 模块化"></a>5) 模块化</h4><p>项目中，通常存在很多JS文件，各个JS之间会存在相互引用，所以需要用到不同JS之间的导入导出</p><p>在源文件中中用<code>export</code>导出，在使用文件中用<code>import</code>导入</p><p>没加export只能同一JS内部使用，外部无法使用</p><p>单个导出 const、let、function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一齐导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;a,b,c&#125;</span><br></pre></td></tr></table></figure><p>导出 default，只能有一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> b;</span><br></pre></td></tr></table></figure><p>import 语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> 语句(<span class="keyword">import</span> &#123;xx,xxx&#125; form xx.<span class="property">js</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>import 需要遵循同源策略</li></ul><p>整个导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable language_">module</span> <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">a</span>)<span class="comment">// 输出10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">b</span>)<span class="comment">// 输出20</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">c</span>()<span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><p>单个导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a,c&#125; <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// 输出10</span></span><br><span class="line"><span class="title function_">c</span>()<span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><p>导入默认</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> x <span class="keyword">from</span> <span class="string">&#x27;/1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)<span class="comment">// 输出20</span></span><br></pre></td></tr></table></figure><h4 id="6-scrip标签引入外部文件的两种写法"><a href="#6-scrip标签引入外部文件的两种写法" class="headerlink" title="6) scrip标签引入外部文件的两种写法"></a>6) scrip标签引入外部文件的两种写法</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>写法1,两个JS文件之间可以不同源</span><br><span class="line">&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="params">#</span>写法2 这种方法引用时，JS文件之间必须遵从同源策略</span><br><span class="line">&lt;script type=&quot;module&quot;&gt;</span><br><span class="line">import xxx</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码生成器</title>
      <link href="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h1><h2 id="代码生成器概述"><a href="#代码生成器概述" class="headerlink" title="代码生成器概述"></a>代码生成器概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>基于<code>MVC</code>架构的传统进行模块开发的步骤：</p><ul><li>创建数据库表</li><li>根据表字段设计对应的实体类(PO)</li><li>编写增删改查持久层(dao)代码</li><li>根据业务逻辑编写service层代码</li><li>controller层代码和前端页面</li></ul><p>通常只要知道了一个表的结构，增删改查的前后台代码格式基本上就是固定的，比如<code>controller</code>、<code>service</code>、<code>dao</code>、<code>实体类Po</code>、前端<code>jsp</code>等模块的代码在不同数据库表基础上都具有类似的结构，所以正对这部分代码，可以让计算机自动帮我们生成，让精力聚焦于更复杂业务代码的编写上</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>代码生成器依据公共的模板和数据库表中的信息自动生成代码</p><ul><li>传统开发中，由于不同数据库基础增删改查代码结构相似，程序员通常都是将一份已经写好的代码进行复制和修改，再根据不同业务需求在此基础上进行代码的完善，可以将这份代码称之为<strong>代码模板</strong></li><li>生成的基础代码与对应数据库密切相关，所以除代码模板之外还需要数据库表的信息来对模板相关内容进行填充</li></ul><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231214225027020.png" alt="image-20231214225027020" style="zoom: 50%;"></p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231214225902481.png" alt="image-20231214225902481" style="zoom:50%;"></p><p>代码生成自动生成代码的几个重点需要解决的问题</p><ol><li><p>数据库以及表的解析，用于生成实体类以及其他代码</p><p>从数据库中解析出数据库中表的名称以及表字段等属性：可以根据表名确定实体类名称，根据字段确定实体类中的属性</p></li><li><p>模板开发生成代码文件</p><p>模板中定义公共的基础代码和需要替换的占位符内容，然后根据解析好的数据库信息进行数据替换并生成对应代码文件</p></li><li><p>基础框架模板代码的抽取</p></li></ol><h2 id="FreeMaker的使用"><a href="#FreeMaker的使用" class="headerlink" title="FreeMaker的使用"></a>FreeMaker的使用</h2><h3 id="FreeMaker概述"><a href="#FreeMaker概述" class="headerlink" title="FreeMaker概述"></a>FreeMaker概述</h3><p><code>FreeMaker</code>是一款模板引擎：一种基于模板的，用来输出文本的通用工具。</p><p>它是为Java程序员提供的一个开发包或者类库，它并不面向最终用户，而是面向程序员提供的嵌入他们开发产品过程中的一款应用程序。</p><p><code>FreeMaker</code>最早是用来设计生成HTML网页的。使用 MVC 模式的动态网页的构思使得你可以将前端设计者(编写 HTML)从 程序员中分离出来。所有人各司其职，发挥其擅长的一面。网页设计师可以改写页面的显示效果而不受程序员编译 代码的影响，因为应用程序的逻辑(Java 程序)和页面设计(FreeMarker 模板)已经分开了。页面模板代码不会受到复 杂的程序代码影响。这种分离的思想即便对一个程序员和页面设计师是同一个人的项目来说都是非常有用的，因为 分离使得代码保持简洁而且便于维护。</p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231214231403258.png" alt="image-20231214231403258" style="zoom: 67%;"></p><h3 id="FreeMaker的应用场景"><a href="#FreeMaker的应用场景" class="headerlink" title="FreeMaker的应用场景"></a>FreeMaker的应用场景</h3><h4 id="动态页面"><a href="#动态页面" class="headerlink" title="动态页面"></a>动态页面</h4><p>基于模板配置和表达式生成页面文件，可以像jsp一样被客户端访问</p><h4 id="页面静态化"><a href="#页面静态化" class="headerlink" title="页面静态化"></a>页面静态化</h4><p>对于系统中频繁使用数据库进行查询但是内容更新很小的应用，都可以用FreeMarker将网页静态化，这样就避免 了大量的数据库访问请求，从而提高网站的性能</p><h4 id="代码生成器-1"><a href="#代码生成器-1" class="headerlink" title="代码生成器"></a>代码生成器</h4><p>可以自动根据后台配置生成页面或者代码</p><h3 id="FreeMaker的优势"><a href="#FreeMaker的优势" class="headerlink" title="FreeMaker的优势"></a>FreeMaker的优势</h3><ul><li>强大的模板语言：有条件的块，迭代，赋值，字符串和算术运算和格式化，宏和函数，编码等更多的功能；</li><li>多用途且轻量：零依赖，输出任何格式，可以从任何地方加载模板（可插拔），配置选项丰富；</li><li>智能的国际化和本地化：对区域设置和日期/时间格式敏感；</li><li>XML处理功能：将dom-s放入到XML数据模型并遍历它们，甚至处理他们的声明；</li><li>通用的数据模型：通过可插拔适配器将java对象暴露于模板作为变量树；</li></ul><h3 id="FreeMaker的基本使用"><a href="#FreeMaker的基本使用" class="headerlink" title="FreeMaker的基本使用"></a>FreeMaker的基本使用</h3><p>使用<code>FreeMaker</code>的重点</p><ul><li>编写模板文件</li><li>使用FreeMaker解析模板，并将模板中的对应内容替换掉</li></ul><h4 id="导入pom依赖"><a href="#导入pom依赖" class="headerlink" title="导入pom依赖"></a>导入pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="FreeMaker使用步骤"><a href="#FreeMaker使用步骤" class="headerlink" title="FreeMaker使用步骤"></a>FreeMaker使用步骤</h4><h5 id="编写对应的模板文件"><a href="#编写对应的模板文件" class="headerlink" title="编写对应的模板文件"></a>编写对应的模板文件</h5><p><code>FreeMaker</code>的模板文件一般以<code>.ftl</code>结尾，以什么后缀结尾并不影响最终的处理</p><h5 id="模板数据填充替换"><a href="#模板数据填充替换" class="headerlink" title="模板数据填充替换"></a>模板数据填充替换</h5><p>解析模板文件，将数据替换到模板中对应位置，并生成需要的文件，此过程一般需要经历以下5个步骤</p><ol><li>创建FreeMaker的配置类</li><li>指定模板加载器，将模板存入缓存</li><li>获取模板</li><li>构造数据模型</li><li>输出生成的文件</li></ol><h4 id="入门案例：文件模板"><a href="#入门案例：文件模板" class="headerlink" title="入门案例：文件模板"></a>入门案例：文件模板</h4><h5 id="创建模板文件template01-ftl"><a href="#创建模板文件template01-ftl" class="headerlink" title="创建模板文件template01.ftl"></a>创建模板文件template01.ftl</h5><p>在工程<code>src</code>同级目录下新建文件<code>templates/template01.ftl</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中国欢迎您:<span class="built_in">$</span>&#123;username&#125;</span><br></pre></td></tr></table></figure><h5 id="使用FreeMaker进行数据填充，生成指定文件"><a href="#使用FreeMaker进行数据填充，生成指定文件" class="headerlink" title="使用FreeMaker进行数据填充，生成指定文件"></a>使用FreeMaker进行数据填充，生成指定文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMakerParse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="comment">//1.创建FreeMaker配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">//2.选择模板加载器</span></span><br><span class="line">        <span class="comment">//2.1指定模板路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateFolder</span> <span class="operator">=</span> <span class="string">&quot;templates&quot;</span>;</span><br><span class="line">        <span class="comment">//2.2选择文件模板加载器</span></span><br><span class="line">        <span class="type">FileTemplateLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileTemplateLoader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(templateFolder));</span><br><span class="line">        <span class="comment">//2.3设置模板加载器</span></span><br><span class="line">        cfg.setTemplateLoader(loader);</span><br><span class="line">        <span class="comment">//3.获取模板</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templatePath</span> <span class="operator">=</span> <span class="string">&quot;template01.ftl&quot;</span>;</span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfg.getTemplate(templatePath);</span><br><span class="line">        <span class="comment">//4.构造数据模型,FreeMaker中数据模型以HashMap的形式存在,key为模板中占位符,value为替换数据</span></span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        dataMap.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        <span class="comment">//5.处理模板,输出文件</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * process参数:</span></span><br><span class="line"><span class="comment">         *     参数1:数据模型,HashMap</span></span><br><span class="line"><span class="comment">         *     参数2:writer对象，可以输出到文件或者控制台</span></span><br><span class="line"><span class="comment">         *       文件用: new FileWriter(文件名)</span></span><br><span class="line"><span class="comment">         *       控制台用: new PrintWriter()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//输出到控制台</span></span><br><span class="line">        <span class="comment">//template.process(dataMap,new PrintWriter(System.out));</span></span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">outPath</span> <span class="operator">=</span> <span class="string">&quot;Files/out1.txt&quot;</span>;</span><br><span class="line">        template.process(dataMap,<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(outPath)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>项目目录结构</strong></p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231214235525320.png" alt="image-20231214235525320"></p><h4 id="入门案例：字符模板"><a href="#入门案例：字符模板" class="headerlink" title="入门案例：字符模板"></a>入门案例：字符模板</h4><p>模板通过字符串的形式在代码中直接定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMakerStringParse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="comment">//1.创建FreeMaker配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">//2.选择模板加载器</span></span><br><span class="line">        cfg.setTemplateLoader(<span class="keyword">new</span> <span class="title class_">StringTemplateLoader</span>());</span><br><span class="line">        <span class="comment">//3.创建模板</span></span><br><span class="line">        <span class="comment">//3.1定义字模板字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateStr</span> <span class="operator">=</span> <span class="string">&quot;你来自于哪个城市:$&#123;cityName&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">//3.2创建模板</span></span><br><span class="line">        <span class="comment">//第一参数:模板名 第二个参数:读取字符模板 第三个参数:配置类</span></span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Template</span>(<span class="string">&quot;strYemplate&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringReader</span>(templateStr), cfg);</span><br><span class="line">        <span class="comment">//4.构造数据模型,FreeMaker中数据模型以HashMap的形式存在,key为模板中占位符,value为替换数据</span></span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        dataMap.put(<span class="string">&quot;cityName&quot;</span>,<span class="string">&quot;安徽&quot;</span>);</span><br><span class="line">        <span class="comment">//5.输出文件</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * process参数:</span></span><br><span class="line"><span class="comment">         *     参数1:数据模型,HashMap</span></span><br><span class="line"><span class="comment">         *     参数2:writer对象，可以输出到文件或者控制台</span></span><br><span class="line"><span class="comment">         *       文件用: new FileWriter(文件名)</span></span><br><span class="line"><span class="comment">         *       控制台用: new PrintWriter()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//输出到控制台</span></span><br><span class="line">        template.process(dataMap,<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(System.out));</span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line"><span class="comment">//        String outPath = &quot;Files/out1.txt&quot;;</span></span><br><span class="line"><span class="comment">//        template.process(dataMap,new FileWriter(new File(outPath)));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231215000952116.png" alt="image-20231215000952116"></p><h3 id="FreeMaker模板"><a href="#FreeMaker模板" class="headerlink" title="FreeMaker模板"></a>FreeMaker模板</h3><p>经过前面案例，明显感觉到<code>FreeMaker</code>的<code>Java</code>代码部分编写的步骤比较固定，<code>FreeMaker</code>的重点部分在于模板的创建编写</p><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p><code>FreeMaker</code>模板文件主要由以下5个部分组成：</p><ul><li>数据模型：模板中用到的数据</li><li>文本：直接输出的部分</li><li>注释：模板中的注释格式<code>&lt;#-- 注释内容 --&gt;</code></li><li>插值：即<code>$&#123;&#125;</code>或者<code>#&#123;&#125;</code>部分，将会使用数据模型中的部分来对这部分进行替换</li><li>FTL指令：<code>FreeMaker</code>指令，和HTML标记类似，名字前面加<code>#</code>区分，不会输出</li></ul><h5 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h5><p>FreeMarker（还有模板开发者）并不关心数据是如何计算的，FreeMarker 只是知道真实的数据是什么。模板能用 的所有数据被包装成 data-model 数据模型</p><p>数据模型结构</p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231215002110262.png" alt="image-20231215002110262" style="zoom:67%;"></p><p>比如要获取user数据，模板中应该写为:<code>$&#123;user&#125;</code>，要获取url数据，模板中应该写为：<code>$&#123;latestProduct.url&#125;</code></p><h5 id="模板常用标签"><a href="#模板常用标签" class="headerlink" title="模板常用标签"></a>模板常用标签</h5><ul><li><code>$&#123;&#125;</code>，插值(占位符)，<code>FreeMaker</code>在输出时，会用数据模型中的实际值进行替代</li><li><code>&lt;#..&gt;</code>: FTL标记，类似于HTML标记，<code>#</code>主要是为了与HTML进行区分</li><li><code>&lt;@&gt;</code>：宏，自定义标签</li><li><code>&lt;#-- --&gt;</code>注释符</li></ul><h5 id="模板中常用的指令-FTL标记"><a href="#模板中常用的指令-FTL标记" class="headerlink" title="模板中常用的指令(FTL标记)"></a>模板中常用的指令(FTL标记)</h5><h6 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h6><p>条件分支控制语句</p><p>在<code>&lt;#</code>内写的占位符，无需用<code>#&#123;&#125;</code>包裹</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="params">#</span>if flag=1&gt;</span><br><span class="line">    传入的数据是1</span><br><span class="line">    &lt;<span class="params">#</span>elseif flag=2&gt;</span><br><span class="line">    传入的数据据是2</span><br><span class="line">    &lt;<span class="params">#</span>else&gt;</span><br><span class="line">    传入的数据是其他</span><br><span class="line">&lt;/<span class="params">#</span>if&gt;</span><br></pre></td></tr></table></figure><p><strong>对应的FreeMaker解析的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMakerParse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="comment">//1.创建FreeMaker配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">//2.选择模板加载器</span></span><br><span class="line">        <span class="comment">//2.1指定模板路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateFolder</span> <span class="operator">=</span> <span class="string">&quot;templates&quot;</span>;</span><br><span class="line">        <span class="comment">//2.2选择文件模板加载器</span></span><br><span class="line">        <span class="type">FileTemplateLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileTemplateLoader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(templateFolder));</span><br><span class="line">        <span class="comment">//2.3设置模板加载器</span></span><br><span class="line">        cfg.setTemplateLoader(loader);</span><br><span class="line">        <span class="comment">//3.获取模板</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templatePath</span> <span class="operator">=</span> <span class="string">&quot;template01.ftl&quot;</span>;</span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfg.getTemplate(templatePath);</span><br><span class="line">        <span class="comment">//4.构造数据模型,FreeMaker中数据模型以HashMap的形式存在,key为模板中占位符,value为替换数据</span></span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        dataMap.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        dataMap.put(<span class="string">&quot;flag&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//5.输出文件</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * process参数:</span></span><br><span class="line"><span class="comment">         *     参数1:数据模型,HashMap</span></span><br><span class="line"><span class="comment">         *     参数2:writer对象，可以输出到文件或者控制台</span></span><br><span class="line"><span class="comment">         *       文件用: new FileWriter(文件名)</span></span><br><span class="line"><span class="comment">         *       控制台用: new PrintWriter()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//输出到控制台</span></span><br><span class="line">        template.process(dataMap,<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(System.out));</span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line"><span class="comment">//        String outPath = &quot;Files/out1.txt&quot;;</span></span><br><span class="line"><span class="comment">//        template.process(dataMap,new FileWriter(new File(outPath)));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="list指令"><a href="#list指令" class="headerlink" title="list指令"></a>list指令</h6><p><code>list</code>指令是迭代输出指令，用于迭代输出数据模型中的集合数据</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="params">#</span>list userList as user&gt;</span><br><span class="line">    当前登录用户:<span class="built_in">$</span>&#123;user&#125;</span><br><span class="line">&lt;/<span class="params">#</span>list&gt;</span><br></pre></td></tr></table></figure><p><strong>对应的FreeMaker解析的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMakerParse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="comment">//1.创建FreeMaker配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">//2.选择模板加载器</span></span><br><span class="line">        <span class="comment">//2.1指定模板路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateFolder</span> <span class="operator">=</span> <span class="string">&quot;templates&quot;</span>;</span><br><span class="line">        <span class="comment">//2.2选择文件模板加载器</span></span><br><span class="line">        <span class="type">FileTemplateLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileTemplateLoader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(templateFolder));</span><br><span class="line">        <span class="comment">//2.3设置模板加载器</span></span><br><span class="line">        cfg.setTemplateLoader(loader);</span><br><span class="line">        <span class="comment">//3.获取模板</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templatePath</span> <span class="operator">=</span> <span class="string">&quot;template01.ftl&quot;</span>;</span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfg.getTemplate(templatePath);</span><br><span class="line">        <span class="comment">//4.构造数据模型,FreeMaker中数据模型以HashMap的形式存在,key为模板中占位符,value为替换数据</span></span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        dataMap.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        dataMap.put(<span class="string">&quot;flag&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;曹阿满&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;刘大耳&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;孙十万&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;诸葛村夫&quot;</span>);</span><br><span class="line">        dataMap.put(<span class="string">&quot;userList&quot;</span>,list);</span><br><span class="line">        <span class="comment">//5.输出文件</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * process参数:</span></span><br><span class="line"><span class="comment">         *     参数1:数据模型,HashMap</span></span><br><span class="line"><span class="comment">         *     参数2:writer对象，可以输出到文件或者控制台</span></span><br><span class="line"><span class="comment">         *       文件用: new FileWriter(文件名)</span></span><br><span class="line"><span class="comment">         *       控制台用: new PrintWriter()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//输出到控制台</span></span><br><span class="line">        template.process(dataMap,<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(System.out));</span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line"><span class="comment">//        String outPath = &quot;Files/out1.txt&quot;;</span></span><br><span class="line"><span class="comment">//        template.process(dataMap,new FileWriter(new File(outPath)));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong></p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231215004420106.png" alt="image-20231215004420106"></p><h6 id="list结合break指令使用"><a href="#list结合break指令使用" class="headerlink" title="list结合break指令使用"></a>list结合break指令使用</h6><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="params">#</span>list userList as user&gt;</span><br><span class="line">    当前登录用户:<span class="built_in">$</span>&#123;user&#125;,当前用户编号:<span class="built_in">$</span>&#123;user<span class="built_in">_</span>index+1&#125;</span><br><span class="line">    &lt;<span class="params">#</span>if user<span class="built_in">_</span>has<span class="built_in">_</span>next&gt;=========&lt;/<span class="params">#</span>if&gt;</span><br><span class="line">    &lt;<span class="params">#</span>if user=&quot;孙十万&quot;&gt;&lt;<span class="params">#</span>break&gt;&lt;/<span class="params">#</span>if&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="params">#</span>list&gt;</span><br></pre></td></tr></table></figure><ul><li><code>xxx_index</code>：当前变量的索引值</li><li><code>xxx_has_next</code>：是否存在下一个对象</li><li><code>&lt;#break&gt;</code>：跳出循环迭代</li></ul><p><strong>运行结果</strong></p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231215005053032.png" alt="image-20231215005053032"></p><h6 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h6><p>模板包含，一个模板中包含另一个模板内容</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="params">#</span>include &quot;需要导入包含模板路径，支持相对路径的写法，只是要用引号括起来&quot;&gt;</span><br></pre></td></tr></table></figure><h6 id="assign指令"><a href="#assign指令" class="headerlink" title="assign指令"></a>assign指令</h6><p><code>assign</code>指令用于在模板中自定义个变量，可以存储到数据模型中，在模板其他部分引用</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="params">#</span>assign age=27&gt;</span><br></pre></td></tr></table></figure><p>模板其他位置可以通过<code>$&#123;age&#125;</code>来引用该变量</p><h6 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h6><p>FreeMarker还提供了一些内建函数来转换输出，可以在任何变量后紧跟?,?后紧跟内建函数，就可通过内建函 数来转换输出变量。</p><p>使用语法:<code>$&#123;username?upper_case&#125;</code></p><p>下面是常用的内建的字符串函数：</p><ul><li>?html:html字符转义</li><li>?cap_first: 字符串的第一个字母变为大写形式</li><li>?lower_case :字符串的小写形式</li><li>?upper_case :字符串的大写形式</li><li>?trim:去掉字符串首尾的空格</li><li>?substring:截字符串</li><li>?lenth: 取长度</li><li>?size: 序列中元素的个数</li><li>?int : 数字的整数部分（比如- 1.9?int 就是- 1）</li><li>?replace:字符串替换</li></ul><h2 id="数据库元数据"><a href="#数据库元数据" class="headerlink" title="数据库元数据"></a>数据库元数据</h2><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><h4 id="什么是数据库元数据"><a href="#什么是数据库元数据" class="headerlink" title="什么是数据库元数据"></a>什么是数据库元数据</h4><p>元数据(<code>meta data</code>)是指定义数据结构的数据，数据库元数据是指定义数据库各类对象结构的数据，例如数据库中的数据库名、表名、列名、用户名、版本名以及从SQL语句得到的结果中大部分字符串都是元数据</p><h4 id="数据库元数据作用"><a href="#数据库元数据作用" class="headerlink" title="数据库元数据作用"></a>数据库元数据作用</h4><ul><li>在应用设计时，能够充分利用数据库元数据</li><li>深入理解了数据库组织结构，再去理解数据访问相关框架的实现原理会更加容易</li></ul><h4 id="如何获取数据库元数据"><a href="#如何获取数据库元数据" class="headerlink" title="如何获取数据库元数据"></a>如何获取数据库元数据</h4><p>JDBC来处理数据库的接口主要有三个，即<code>Connection</code>，<code>PreparedStatement</code>和<code>ResultSet</code>这三个， 而对于这三个接口，还可以获取不同类型的元数据，通过这些元数据类获得一些数据库的信息。</p><h3 id="数据库元数据-1"><a href="#数据库元数据-1" class="headerlink" title="数据库元数据"></a>数据库元数据</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>数据库元数据（<code>DatabaseMetaData</code>）：是由<code>Connection</code>对象通过<code>getMetaData</code>方法获取而来，主要封装了是对 数据库本身的一些整体综合信息，例如数据库的产品名称，数据库的版本号，数据库的URL，是否支持事务等等</p><p>下面是<code>getMetaData</code>的一些常用方法:</p><ul><li>getDatabaseProductName：获取数据库的产品名称</li><li>getDatabaseProductVersion：获取数据库的版本号</li><li>getUserName：获取数据库的用户名</li><li>getURL：获取数据库连接的URL</li><li>getDriverName：获取数据库的驱动名称</li><li>driverVersion：获取数据库的驱动版本号</li><li>isReadOnly：查看数据库是否只允许读操作</li><li>supportsTransactions：查看数据库是否支持事务</li></ul><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><h5 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Connection conn;</span><br><span class="line">    <span class="comment">//建立数据库连接</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.配置连接基本属性</span></span><br><span class="line">        <span class="comment">//url不指定数据据库名，便于获取当前服务器下所有数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;train_member&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passWd</span> <span class="operator">=</span> <span class="string">&quot;wu123456&quot;</span>;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;user&quot;</span>,userName);</span><br><span class="line">        props.put(<span class="string">&quot;password&quot;</span>,passWd);</span><br><span class="line">        props.put(<span class="string">&quot;remarksReporting&quot;</span>,<span class="string">&quot;true&quot;</span>); <span class="comment">//获取表的REMARK(备注信息)</span></span><br><span class="line">        <span class="comment">//3.获取连接</span></span><br><span class="line">        conn = (Connection) DriverManager.getConnection(url, props);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="获取数据库综合信息"><a href="#获取数据库综合信息" class="headerlink" title="获取数据库综合信息"></a>获取数据库综合信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数据库综合信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//获取数据库元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">//获取数据库产品名称</span></span><br><span class="line">        System.out.println(metaData.getDatabaseProductName());</span><br><span class="line">        <span class="comment">//获取数据库版本号</span></span><br><span class="line">        System.out.println(metaData.getDatabaseProductVersion());</span><br><span class="line">        <span class="comment">//获取数据库的用户名</span></span><br><span class="line">        System.out.println(metaData.getUserName());</span><br><span class="line">        <span class="comment">//获取数据库连接的URL</span></span><br><span class="line">        System.out.println(metaData.getURL());</span><br><span class="line">        <span class="comment">//获取数据库的驱动名称</span></span><br><span class="line">        System.out.println(metaData.getDriverName());</span><br><span class="line">        <span class="comment">//获取数据库的驱动版本号</span></span><br><span class="line">        System.out.println(metaData.getDriverVersion());</span><br><span class="line">        <span class="comment">//查看数据库是否只允许读操作</span></span><br><span class="line">        System.out.println(metaData.isReadOnly());</span><br><span class="line">        <span class="comment">//查看数据库是否支持事务</span></span><br><span class="line">        System.out.println(metaData.supportsTransactions());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>运行结果</span><br><span class="line">MySQL</span><br><span class="line">5.7.35-log</span><br><span class="line">train<span class="built_in">_</span>member@localhost</span><br><span class="line">jdbc:mysql://127.0.0.1:3306?useUnicode=true<span class="built_in">&amp;</span>characterEncoding=utf8</span><br><span class="line">MySQL-AB JDBC Driver</span><br><span class="line">mysql-connector-java-5.1.6 ( Revision: <span class="built_in">$</span>&#123;svn.Revision&#125; )</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h5 id="获取数据库列表"><a href="#获取数据库列表" class="headerlink" title="获取数据库列表"></a>获取数据库列表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数据列表</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//获取元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">//获取数据库列表</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">catalogs</span> <span class="operator">=</span> metaData.getCatalogs();</span><br><span class="line">        <span class="comment">//年里数据库列表</span></span><br><span class="line">        <span class="keyword">while</span> (catalogs.next())&#123;</span><br><span class="line">            System.out.println(catalogs.getString(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        catalogs.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>运行结果</span><br><span class="line">information<span class="built_in">_</span>schema</span><br><span class="line">train<span class="built_in">_</span>member</span><br></pre></td></tr></table></figure><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231216102339977.png" alt="image-20231216102339977"></p><h5 id="获取数据库中表信息"><a href="#获取数据库中表信息" class="headerlink" title="获取数据库中表信息"></a>获取数据库中表信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数据库表的信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1.获取元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">//2.数据库表信息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * getTables有四个参数:</span></span><br><span class="line"><span class="comment">         *      String catalog: 数据库名称</span></span><br><span class="line"><span class="comment">         *      String schemaPattern: mysql此项参数为空</span></span><br><span class="line"><span class="comment">*               String tableNamePattern：表名,为空则为所有表</span></span><br><span class="line"><span class="comment">*               String types[]：表类型，可以为 TABLE:数据库表 VIEW:视图</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> metaData.getTables(<span class="string">&quot;train_member&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;TABLE&quot;</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//所属数据库</span></span><br><span class="line">            System.out.println(rs.getString(<span class="number">1</span>));</span><br><span class="line">            <span class="comment">//所属schema</span></span><br><span class="line">            System.out.println(rs.getString(<span class="number">2</span>));</span><br><span class="line">            <span class="comment">//表名</span></span><br><span class="line">            System.out.println(rs.getString(<span class="number">3</span>));</span><br><span class="line">            <span class="comment">//数据库表类型</span></span><br><span class="line">            System.out.println(rs.getString(<span class="number">4</span>));</span><br><span class="line">            <span class="comment">//数据库备注</span></span><br><span class="line">            System.out.println(rs.getString(<span class="number">5</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>运行结果</span><br><span class="line">train<span class="built_in">_</span>member</span><br><span class="line">null</span><br><span class="line">member</span><br><span class="line">TABLE</span><br><span class="line"></span><br><span class="line">train<span class="built_in">_</span>member</span><br><span class="line">null</span><br><span class="line">passenger</span><br><span class="line">TABLE</span><br><span class="line"></span><br><span class="line">train<span class="built_in">_</span>member</span><br><span class="line">null</span><br><span class="line">ticket</span><br><span class="line">TABLE</span><br></pre></td></tr></table></figure><h5 id="获取指定表中的字段信息"><a href="#获取指定表中的字段信息" class="headerlink" title="获取指定表中的字段信息"></a>获取指定表中的字段信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数据库表字段信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//获取元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        getColumns有四个参数</span></span><br><span class="line"><span class="comment">        String catalog: 数据库名</span></span><br><span class="line"><span class="comment">        String schemaPattern: mysql可以为空</span></span><br><span class="line"><span class="comment">        String tableNamePattern: 表名</span></span><br><span class="line"><span class="comment">        String columnNamePattern: 列名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> metaData.getColumns(<span class="string">&quot;train_member&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;passenger&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//rs结果集中对应属性获取建议参考JDK官方文档</span></span><br><span class="line">            System.out.println(rs.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>)); <span class="comment">//字段名获取</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        rs.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体详细用法，可以参考JDK官方文档</p><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231216104929224.png" alt="image-20231216104929224" style="zoom:50%;"></p><h3 id="参数元数据"><a href="#参数元数据" class="headerlink" title="参数元数据"></a>参数元数据</h3><p>参数元数据（<code>ParameterMetaData</code>）：是由<code>PreparedStatement</code>对象通过<code>getParameterMetaData</code>方法获取而 来，主要是针对<code>PreparedStatement</code>对象和其预编译的SQL命令语句提供一些信息，<code>ParameterMetaData</code>能提供 占位符参数的个数，获取指定位置占位符的SQL类型等等</p><p>参数元数据在实际应用场景中一般很少用到，只需了解即可，主要常用方法:</p><ul><li>getParameterCount：获取预编译SQL语句中占位符参数的个数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数元数据简单使用</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.配置连接基本属性</span></span><br><span class="line">        <span class="comment">//url不指定数据据库名，便于获取当前服务器下所有数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/train_member?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;train_member&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passWd</span> <span class="operator">=</span> <span class="string">&quot;wu123456&quot;</span>;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;user&quot;</span>,userName);</span><br><span class="line">        props.put(<span class="string">&quot;password&quot;</span>,passWd);</span><br><span class="line">        props.put(<span class="string">&quot;remarksReporting&quot;</span>,<span class="string">&quot;true&quot;</span>); <span class="comment">//获取表的REMARK(备注信息)</span></span><br><span class="line">        <span class="comment">//3.获取连接</span></span><br><span class="line">        conn = (Connection) DriverManager.getConnection(url, props);</span><br><span class="line">        <span class="comment">//4.编写SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from passenger where id=?&quot;</span>;</span><br><span class="line">        <span class="comment">//5.编译SQL</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//6.填充参数</span></span><br><span class="line">        pstm.setString(<span class="number">1</span>,<span class="string">&quot;1733754970974588928&quot;</span>);</span><br><span class="line">        <span class="comment">//7.获取参数元数据</span></span><br><span class="line">        <span class="type">ParameterMetaData</span> <span class="variable">parameterMetaData</span> <span class="operator">=</span> pstm.getParameterMetaData();</span><br><span class="line">        <span class="comment">//8.获取参数个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> parameterMetaData.getParameterCount();</span><br><span class="line">        System.out.println(count);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="结果集元数据"><a href="#结果集元数据" class="headerlink" title="结果集元数据"></a>结果集元数据</h3><p>结果集元数据（<code>ResultSetMetaData</code>）：是由<code>ResultSet</code>对象通过<code>getMetaData</code>方法获取而来，主要是针对由数据 库执行的SQL脚本命令获取的结果集对象<code>ResultSet</code>中提供的一些信息，比如结果集中的列数、指定列的名称、指定 列的SQL类型等等，可以说这个是对于框架来说非常重要的一个对象</p><p>关于ResultSetMetaData的常用方法：</p><ul><li>getColumnCount：获取结果集中列项的个数</li><li>.getColumnName： 获取列名</li><li>getColumnTypeName：getColumnTypeName：获取指定列的SQL数据类型</li><li>getColumnClassName：获取指定列SQL类型对应于Java中的数据类型(包名加类名)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结果集元数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.配置连接基本属性</span></span><br><span class="line">        <span class="comment">//url不指定数据据库名，便于获取当前服务器下所有数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/train_member?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;train_member&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passWd</span> <span class="operator">=</span> <span class="string">&quot;wu123456&quot;</span>;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;user&quot;</span>,userName);</span><br><span class="line">        props.put(<span class="string">&quot;password&quot;</span>,passWd);</span><br><span class="line">        props.put(<span class="string">&quot;remarksReporting&quot;</span>,<span class="string">&quot;true&quot;</span>); <span class="comment">//获取表的REMARK(备注信息)</span></span><br><span class="line">        <span class="comment">//3.获取连接</span></span><br><span class="line">        conn = (Connection) DriverManager.getConnection(url, props);</span><br><span class="line">        <span class="comment">//4.编写SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from passenger where id=?&quot;</span>;</span><br><span class="line">        <span class="comment">//5.编译SQL</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//6.填充参数</span></span><br><span class="line">        pstm.setString(<span class="number">1</span>,<span class="string">&quot;1733754970974588928&quot;</span>);</span><br><span class="line">        <span class="comment">//7.执行获取结果集</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstm.executeQuery();</span><br><span class="line">        <span class="comment">//8.获取结果集元数据</span></span><br><span class="line">        <span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">        <span class="comment">//获取列个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> metaData.getColumnCount();</span><br><span class="line">        <span class="comment">//获取列信息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=columnCount;i++)&#123;</span><br><span class="line">            <span class="comment">//1.获取列名</span></span><br><span class="line">            System.out.println(metaData.getColumnName(i));</span><br><span class="line">            <span class="comment">//2.获取列对应的SQL数据类型</span></span><br><span class="line">            System.out.println(metaData.getColumnTypeName(i));</span><br><span class="line">            <span class="comment">//3.获取列对应Java数据类型</span></span><br><span class="line">            System.out.println(metaData.getColumnClassName(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>运行结果</span><br><span class="line">id</span><br><span class="line">BIGINT</span><br><span class="line">java.lang.Long</span><br><span class="line">================================</span><br><span class="line">member<span class="built_in">_</span>id</span><br><span class="line">BIGINT</span><br><span class="line">java.lang.Long</span><br><span class="line">================================</span><br><span class="line">name</span><br><span class="line">VARCHAR</span><br><span class="line">java.lang.String</span><br><span class="line">================================</span><br><span class="line">id<span class="built_in">_</span>card</span><br><span class="line">VARCHAR</span><br><span class="line">java.lang.String</span><br><span class="line">================================</span><br><span class="line">type</span><br><span class="line">CHAR</span><br><span class="line">java.lang.String</span><br><span class="line">================================</span><br><span class="line">create<span class="built_in">_</span>time</span><br><span class="line">DATETIME</span><br><span class="line">java.sql.Timestamp</span><br><span class="line">================================</span><br><span class="line">update<span class="built_in">_</span>time</span><br><span class="line">DATETIME</span><br><span class="line">java.sql.Timestamp</span><br><span class="line">================================</span><br></pre></td></tr></table></figure><h2 id="代码生成器制作"><a href="#代码生成器制作" class="headerlink" title="代码生成器制作"></a>代码生成器制作</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><img src="/2023/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/image-20231216144427656.png" alt="image-20231216144427656" style="zoom:67%;"></p><p>完成代码生成器需要以下几个步骤：</p><ul><li>用户填写数据库相关信息，相关信息封装到实体类，便于后续操作</li><li>借助元数据，将数据库表信息、数据库字段信息封装到对应实体类</li><li>构建FreeMaker数据模型，将数据库表对象和相关配置存入Map集合</li><li>利用FreeMaker完成代码生成</li><li>自定义公共代码模板</li></ul><h3 id="项目环境搭建"><a href="#项目环境搭建" class="headerlink" title="项目环境搭建"></a>项目环境搭建</h3><h4 id="引入pom依赖-1"><a href="#引入pom依赖-1" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建对应实体类"><a href="#创建对应实体类" class="headerlink" title="创建对应实体类"></a>创建对应实体类</h4><p>在整个项目中设计如下实体类的封装</p><h5 id="数据库信息实体类"><a href="#数据库信息实体类" class="headerlink" title="数据库信息实体类"></a>数据库信息实体类</h5><p>在代码生成过程中，用户需要提供数据库类型、数据名、用户名、密码、数据库地址等数据信息，为便于后续操作，可以将这些信息统一封装成一个对应的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库信息对应实体类</span></span><br><span class="line"><span class="comment"> * 用户需要提供以下信息:</span></span><br><span class="line"><span class="comment"> * ①数据库类型 ②数据库名称 ③数据库ip地址以及端口号 ④用户名 ⑤用户密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataBase</span> &#123;</span><br><span class="line">    <span class="comment">//数据库连接，支持Mysql和Oracale两种数据库类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">mysqlUrl</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://[ip]:[port]/[db]?useUnicode=true&amp;amp;characterEncoding=UTF8&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">oracleUrl</span> <span class="operator">=</span> <span class="string">&quot;jdbc:oracle:thin:@[ip]:[port]:[db]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dbType=<span class="string">&quot;MYSQL&quot;</span>;<span class="comment">//数据库类型,需要用户输入，默认为</span></span><br><span class="line">    <span class="keyword">private</span> String dbName; <span class="comment">//数据库名称</span></span><br><span class="line">    <span class="keyword">private</span> String driver=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;<span class="comment">//驱动名称</span></span><br><span class="line">    <span class="keyword">private</span> String userName;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String passWord;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String ip=<span class="string">&quot;127.0.0.1&quot;</span>; <span class="comment">//数据库ip地址</span></span><br><span class="line">    <span class="keyword">private</span> String port=<span class="string">&quot;3306&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//数据库地址，包括协议类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataBase</span><span class="params">(String dbType,String dbName,String userName,String passWord,String ip,String port)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.dbType = dbType;</span><br><span class="line">        <span class="built_in">this</span>.dbName = dbName;</span><br><span class="line">        <span class="built_in">this</span>.ip=ip;</span><br><span class="line">        <span class="built_in">this</span>.port=port;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">        <span class="built_in">this</span>.passWord = passWord;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;MYSQL&quot;</span>.equals(dbType.toUpperCase()))&#123;</span><br><span class="line">            <span class="built_in">this</span>.driver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">            <span class="built_in">this</span>.url = mysqlUrl.replace(<span class="string">&quot;[ip]&quot;</span>,<span class="built_in">this</span>.ip).replace(<span class="string">&quot;[port]&quot;</span>,port).replace(<span class="string">&quot;[db]&quot;</span>,<span class="built_in">this</span>.dbName);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.driver = <span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>;</span><br><span class="line">            <span class="built_in">this</span>.url=oracleUrl.replace(<span class="string">&quot;[ip]&quot;</span>,ip).replace(<span class="string">&quot;[port]&quot;</span>,port).replace(<span class="string">&quot;[db]&quot;</span>,dbName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置信息实体类"><a href="#配置信息实体类" class="headerlink" title="配置信息实体类"></a>配置信息实体类</h5><p>用户需要输入项目的项目名称、全包名、项目的中文名等，为便于使用，也将这些数据封装成一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">项目配置信息实体类，包括项目名称、包名、项目中文名等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Settings</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String project=<span class="string">&quot;example&quot;</span>; <span class="comment">//项目名</span></span><br><span class="line">    <span class="keyword">private</span> String pPackage=<span class="string">&quot;com.example.demo&quot;</span>; <span class="comment">//全包名</span></span><br><span class="line">    <span class="keyword">private</span> String projectComment; <span class="comment">//项目中文名</span></span><br><span class="line">    <span class="keyword">private</span> String author; <span class="comment">//作者</span></span><br><span class="line">    <span class="keyword">private</span> String path1=<span class="string">&quot;com&quot;</span>; <span class="comment">//项目包名的分解，这里假定一般为三级目录</span></span><br><span class="line">    <span class="keyword">private</span> String path2=<span class="string">&quot;example&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String path3=<span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String pathAll; <span class="comment">//项目存储全路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Settings</span><span class="params">(String project, String pPackage, String projectComment, String author)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotBlank(project)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.project = project;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotBlank(pPackage)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.pPackage = pPackage;</span><br><span class="line">            String[] paths = pPackage.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.path1 = paths[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">this</span>.path2 = paths.length&gt;<span class="number">1</span>?paths[<span class="number">1</span>]:path2;</span><br><span class="line">            <span class="built_in">this</span>.path3 = paths.length&gt;<span class="number">2</span>?paths[<span class="number">2</span>]:path3;</span><br><span class="line">            <span class="built_in">this</span>.pathAll = pPackage.replaceAll(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.projectComment = projectComment;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性和值转换为map形式，便于后续生成freeMaker的数据模型</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getSettingMap</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Field[] declaredFields = Settings.class.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                map.put(field.getName(), field.get(<span class="built_in">this</span>));</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数据库表信息实体类"><a href="#数据库表信息实体类" class="headerlink" title="数据库表信息实体类"></a>数据库表信息实体类</h5><p>数据某个表的SQL表名、处理后的Java表名，以及数据库表的注释信息、字段列表等数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库表属性信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Table</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String tableName; <span class="comment">//SQL中数据库表名</span></span><br><span class="line">    <span class="keyword">private</span> String poName; <span class="comment">//SQL表对应Java实体类名</span></span><br><span class="line">    <span class="keyword">private</span> String comment; <span class="comment">//数据库表附属信息</span></span><br><span class="line">    <span class="keyword">private</span> String key; <span class="comment">//主键列</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Column&gt; columnsList; <span class="comment">//字段列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数据库字段实体类"><a href="#数据库字段实体类" class="headerlink" title="数据库字段实体类"></a>数据库字段实体类</h5><p>数据库字段SQL名称、SQL数据类型、列备注信息，是否主键，以及对应Java实体类属性名、Java数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据库字段信息实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Column</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String columnName; <span class="comment">//SQL字段名</span></span><br><span class="line">    <span class="keyword">private</span> String fieldName; <span class="comment">//Java实体类属性名</span></span><br><span class="line">    <span class="keyword">private</span> String columnType;<span class="comment">//SQL数据类型</span></span><br><span class="line">    <span class="keyword">private</span> String fieldType;<span class="comment">//SQL字段类型</span></span><br><span class="line">    <span class="keyword">private</span> String columnComment;<span class="comment">//字段附加信息</span></span><br><span class="line">    <span class="keyword">private</span> String columnKey;<span class="comment">//主键名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据库相关工具类的创建"><a href="#数据库相关工具类的创建" class="headerlink" title="数据库相关工具类的创建"></a>数据库相关工具类的创建</h4><p>将获取数据库连接，数据库资源关闭以及获取数据库表信息等功能封装成对应的工具类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataBaseUtils</span> &#123;</span><br><span class="line">    <span class="comment">//获取数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(DataBase dataBase)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(dataBase.getDriver());</span><br><span class="line">        <span class="comment">//2.配置连接基本属性</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> dataBase.getUrl();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;user&quot;</span>,dataBase.getUserName());</span><br><span class="line">        props.put(<span class="string">&quot;password&quot;</span>,dataBase.getPassWord());</span><br><span class="line">        props.put(<span class="string">&quot;remarksReporting&quot;</span>,<span class="string">&quot;true&quot;</span>); <span class="comment">//获取表的REMARK(备注信息)</span></span><br><span class="line">        <span class="comment">//3.获取连接</span></span><br><span class="line">        conn = (Connection) DriverManager.getConnection(url, props);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库中所有数据库名列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getSchema</span><span class="params">(DataBase db)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection(db);</span><br><span class="line">        <span class="comment">//2.获取元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">//获取数据库列表</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">catalogs</span> <span class="operator">=</span> metaData.getCatalogs();</span><br><span class="line">        <span class="comment">//数据库列表</span></span><br><span class="line">        List&lt;String&gt; schemaList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (catalogs.next())&#123;</span><br><span class="line">            schemaList.add(catalogs.getString(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        catalogs.close();</span><br><span class="line">        conn.close();</span><br><span class="line">        <span class="keyword">return</span> schemaList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串相关工具类创建"><a href="#字符串相关工具类创建" class="headerlink" title="字符串相关工具类创建"></a>字符串相关工具类创建</h4><p>在整个代码编写中，涉及到大量字符串处理操作，比如数据库表名、字段名与Java实体类名、属性名的映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.generator.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removeCrlf</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.join(StringUtils.tokenizeToStringArray(str,<span class="string">&quot;\t\n\r\f&quot;</span>),<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,String&gt; XML = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        XML.put(<span class="string">&quot;apos&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        XML.put(<span class="string">&quot;quot&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        XML.put(<span class="string">&quot;amp&quot;</span>, <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        XML.put(<span class="string">&quot;lt&quot;</span>, <span class="string">&quot;&lt;&quot;</span>);</span><br><span class="line">        XML.put(<span class="string">&quot;gt&quot;</span>, <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">unescapeXml</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(String key : XML.keySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> XML.get(key);</span><br><span class="line">            str = StringUtils.replace(str, <span class="string">&quot;&amp;&quot;</span>+key+<span class="string">&quot;;&quot;</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removePrefix</span><span class="params">(String str,String prefix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> removePrefix(str,prefix,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removePrefix</span><span class="params">(String str,String prefix,<span class="type">boolean</span> ignoreCase)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(prefix == <span class="literal">null</span>) <span class="keyword">return</span> str;</span><br><span class="line">        <span class="keyword">if</span>(ignoreCase) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.toLowerCase().startsWith(prefix.toLowerCase())) &#123;</span><br><span class="line">                <span class="keyword">return</span> str.substring(prefix.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.startsWith(prefix)) &#123;</span><br><span class="line">                <span class="keyword">return</span> str.substring(prefix.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBlank</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str == <span class="literal">null</span> || str.trim().length() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNotBlank</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !isBlank(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getExtension</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> str.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> str.substring(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Count the occurrences of the substring in string s.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str string to search in. Return 0 if this is null.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sub string to search for. Return 0 if this is null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countOccurrencesOf</span><span class="params">(String str, String sub)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || sub == <span class="literal">null</span> || str.length() == <span class="number">0</span> || sub.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> idx;</span><br><span class="line">        <span class="keyword">while</span> ((idx = str.indexOf(sub, pos)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            pos = idx + sub.length();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String str,String... keywords)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(keywords == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;&#x27;keywords&#x27; must be not null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String keyword : keywords) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.equals(keyword)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">defaultString</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">defaultIfEmpty</span><span class="params">(Object value,String defaultValue)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">makeAllWordFirstLetterUpperCase</span><span class="params">(String sqlName)</span> &#123;</span><br><span class="line">        String[] strs = sqlName.toLowerCase().split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">preStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preStr.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                result += strs[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result += capitalize(strs[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            preStr = strs[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOfByRegex</span><span class="params">(String input,String regex)</span> &#123;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(input);</span><br><span class="line">        <span class="keyword">if</span>(m.find()) &#123;</span><br><span class="line">            <span class="keyword">return</span> m.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJavaVariableName</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uncapitalize(toJavaClassName(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJavaClassName</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> makeAllWordFirstLetterUpperCase(StringUtils.toUnderscoreName(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removeMany</span><span class="params">(String inString, String... keywords)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String k : keywords) &#123;</span><br><span class="line">            inString = replace(inString, k, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replace</span><span class="params">(String inString, String oldPattern, String newPattern)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (oldPattern == <span class="literal">null</span> || newPattern == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> inString;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sbuf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="comment">// output StringBuffer we&#x27;ll build up</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// our position in the old string</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> inString.indexOf(oldPattern);</span><br><span class="line">        <span class="comment">// the index of an occurrence we&#x27;ve found, or -1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">patLen</span> <span class="operator">=</span> oldPattern.length();</span><br><span class="line">        <span class="keyword">while</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            sbuf.append(inString.substring(pos, index));</span><br><span class="line">            sbuf.append(newPattern);</span><br><span class="line">            pos = index + patLen;</span><br><span class="line">            index = inString.indexOf(oldPattern, pos);</span><br><span class="line">        &#125;</span><br><span class="line">        sbuf.append(inString.substring(pos));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remember to append any characters to the right of a match</span></span><br><span class="line">        <span class="keyword">return</span> sbuf.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**����ĸ��copy from spring*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">capitalize</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> changeFirstCharacterCase(str, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**����ĸСдcopy from spring*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uncapitalize</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> changeFirstCharacterCase(str, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**copy from spring*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">changeFirstCharacterCase</span><span class="params">(String str, <span class="type">boolean</span> capitalize)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str.length());</span><br><span class="line">        <span class="keyword">if</span> (capitalize) &#123;</span><br><span class="line">            buf.append(Character.toUpperCase(str.charAt(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            buf.append(Character.toLowerCase(str.charAt(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        buf.append(str.substring(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> buf.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Random</span> <span class="variable">RANDOM</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">randomNumeric</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random(count, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">random</span><span class="params">(<span class="type">int</span> count, <span class="type">boolean</span> letters, <span class="type">boolean</span> numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random(count, <span class="number">0</span>, <span class="number">0</span>, letters, numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">random</span><span class="params">(<span class="type">int</span> count, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">boolean</span> letters, <span class="type">boolean</span> numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random(count, start, end, letters, numbers, <span class="literal">null</span>, RANDOM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">random</span><span class="params">(<span class="type">int</span> count, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">boolean</span> letters,</span></span><br><span class="line"><span class="params">                                <span class="type">boolean</span> numbers, <span class="type">char</span>[] chars, Random random)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;Requested random string length &quot;</span> + count</span><br><span class="line">                            + <span class="string">&quot; is less than 0.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((start == <span class="number">0</span>) &amp;&amp; (end == <span class="number">0</span>)) &#123;</span><br><span class="line">            end = <span class="string">&#x27;z&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            start = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!letters &amp;&amp; !numbers) &#123;</span><br><span class="line">                start = <span class="number">0</span>;</span><br><span class="line">                end = Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[count];</span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> end - start;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (count-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> ch;</span><br><span class="line">            <span class="keyword">if</span> (chars == <span class="literal">null</span>) &#123;</span><br><span class="line">                ch = (<span class="type">char</span>) (random.nextInt(gap) + start);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ch = chars[random.nextInt(gap) + start];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((letters &amp;&amp; Character.isLetter(ch))</span><br><span class="line">                    || (numbers &amp;&amp; Character.isDigit(ch))</span><br><span class="line">                    || (!letters &amp;&amp; !numbers)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ch &gt;= <span class="number">56320</span> &amp;&amp; ch &lt;= <span class="number">57343</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// low surrogate, insert high surrogate after putting it</span></span><br><span class="line">                        <span class="comment">// in</span></span><br><span class="line">                        buffer[count] = ch;</span><br><span class="line">                        count--;</span><br><span class="line">                        buffer[count] = (<span class="type">char</span>) (<span class="number">55296</span> + random.nextInt(<span class="number">128</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="number">55296</span> &amp;&amp; ch &lt;= <span class="number">56191</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// high surrogate, insert low surrogate before putting</span></span><br><span class="line">                        <span class="comment">// it in</span></span><br><span class="line">                        buffer[count] = (<span class="type">char</span>) (<span class="number">56320</span> + random.nextInt(<span class="number">128</span>));</span><br><span class="line">                        count--;</span><br><span class="line">                        buffer[count] = ch;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="number">56192</span> &amp;&amp; ch &lt;= <span class="number">56319</span>) &#123;</span><br><span class="line">                    <span class="comment">// private high surrogate, no effing clue, so skip it</span></span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    buffer[count] = ch;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toUnderscoreName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filteredName</span> <span class="operator">=</span> name;</span><br><span class="line">        <span class="keyword">if</span>(filteredName.indexOf(<span class="string">&quot;_&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; filteredName.equals(filteredName.toUpperCase())) &#123;</span><br><span class="line">            filteredName = filteredName.toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(filteredName.indexOf(<span class="string">&quot;_&quot;</span>) == -<span class="number">1</span> &amp;&amp; filteredName.equals(filteredName.toUpperCase())) &#123;</span><br><span class="line">            filteredName = filteredName.toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">if</span> (filteredName != <span class="literal">null</span> &amp;&amp; filteredName.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result.append(filteredName.substring(<span class="number">0</span>, <span class="number">1</span>).toLowerCase());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; filteredName.length(); i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">preChart</span> <span class="operator">=</span> filteredName.substring(i - <span class="number">1</span>, i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> filteredName.substring(i, i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(c.equals(<span class="string">&quot;_&quot;</span>)) &#123;</span><br><span class="line">                    result.append(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(preChart.equals(<span class="string">&quot;_&quot;</span>))&#123;</span><br><span class="line">                    result.append(c.toLowerCase());</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(c.matches(<span class="string">&quot;\\d&quot;</span>)) &#123;</span><br><span class="line">                    result.append(c);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c.equals(c.toUpperCase())) &#123;</span><br><span class="line">                    result.append(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                    result.append(c.toLowerCase());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.append(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removeEndWiths</span><span class="params">(String inputString,String... endWiths)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(String endWith : endWiths) &#123;</span><br><span class="line">            <span class="keyword">if</span>(inputString.endsWith(endWith)) &#123;</span><br><span class="line">                <span class="keyword">return</span> inputString.substring(<span class="number">0</span>,inputString.length() - endWith.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inputString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将string转换为List&lt;ColumnEnum&gt; 格式为: &quot;enumAlias(enumKey,enumDesc)&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Pattern</span> <span class="variable">three</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(.*)\\((.*),(.*)\\)&quot;</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Pattern</span> <span class="variable">two</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(.*)\\((.*)\\)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Test whether the given string matches the given substring</span></span><br><span class="line"><span class="comment">     * at the given index.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str the original string (or StringBuilder)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index the index in the original string to start matching against</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> substring the substring to match at the given index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">substringMatch</span><span class="params">(CharSequence str, <span class="type">int</span> index, CharSequence substring)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; substring.length(); j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index + j;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= str.length() || str.charAt(i) != substring.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] tokenizeToStringArray(String str,String seperators) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="type">StringTokenizer</span> <span class="variable">tokenlizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(str,seperators);</span><br><span class="line">        <span class="type">List</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(tokenlizer.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">s</span> <span class="operator">=</span> tokenlizer.nextElement();</span><br><span class="line">            result.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (String[])result.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[result.size()]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">join</span><span class="params">(List list, String seperator)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> join(list.toArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]),seperator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replace</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, String str,String replacement)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">before</span> <span class="operator">=</span> str.substring(<span class="number">0</span>,start);</span><br><span class="line">        <span class="type">String</span> <span class="variable">after</span> <span class="operator">=</span> str.substring(end);</span><br><span class="line">        <span class="keyword">return</span> before + replacement + after;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">join</span><span class="params">(Object[] array, String seperator)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(array == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            result.append(array[i]);</span><br><span class="line">            <span class="keyword">if</span>(i != array.length - <span class="number">1</span>)  &#123;</span><br><span class="line">                result.append(seperator);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">containsCount</span><span class="params">(String string, String keyword)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(string == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; string.length(); i++ ) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexOf</span> <span class="operator">=</span> string.indexOf(keyword,i);</span><br><span class="line">            <span class="keyword">if</span>(indexOf &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count ++;</span><br><span class="line">            i = indexOf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构造数据模型"><a href="#构造数据模型" class="headerlink" title="构造数据模型"></a>构造数据模型</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p>借助<code>FreeMaker</code>可以方便的根据模板生成文件，对于<code>FreeMaker</code>而言，其强调<code>数据模型+模板=文件</code>的思想，所以代码生成器最重要的一个部分就是数据模型</p><p>数据模型一共以两种形式组成：</p><ul><li>数据库中表、字段等信息<ul><li>使用元数据读取，封装成对应实体类，构建数据模型</li></ul></li><li>用户自定义数据<ul><li>为使得代码生成器匹配多样的使用环境，可以让用户自定义数据，并且以key-value的形式配置到<code>propertities</code>文件中</li></ul></li></ul><h4 id="自定义数据"><a href="#自定义数据" class="headerlink" title="自定义数据"></a>自定义数据</h4><p>规定用户自定义数据存放在<code>properties</code>目录下，构建<code>PropertiesUtils</code>工具类，统一对<code>properties</code>文件夹下的所有<code>.properties</code>文件进行加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    读取Properties数据工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesUtils</span> &#123;</span><br><span class="line">    <span class="comment">//自定义数据对应的FreeMaker数据模型map集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; customMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//默认用户将自定义数据存放在properties目录下</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;File&gt; files = searchAllFile(<span class="keyword">new</span> <span class="title class_">File</span>(dir.getAbsolutePath()));</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span>(file.getName().endsWith(<span class="string">&quot;.properties&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">                    prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">                    customMap.putAll((Map) prop);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询某个目录下的所有文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;File&gt; <span class="title function_">searchAllFile</span><span class="params">(File dir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        searchFiles(dir,arrayList);</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归获取某个目录下的所有文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">searchFiles</span><span class="params">(File dir,List&lt;File&gt; collector)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span>(dir.isDirectory()) &#123;</span><br><span class="line">            File[] subFiles = dir.listFiles();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; subFiles.length; i++) &#123;</span><br><span class="line">                searchFiles(subFiles[i],collector);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            collector.add(dir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        PropertiesUtils.customMap.forEach((k,v)-&gt;&#123;</span><br><span class="line">            System.out.println(k+<span class="string">&quot;-&gt;&quot;</span>+v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="元数据处理"><a href="#元数据处理" class="headerlink" title="元数据处理"></a>元数据处理</h4><p>将元数据读取到对应数据库表和字段的信息封装到前面定义的<code>Table</code>和<code>Column</code>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *将数据库中表和字段信息封装成实体类</span></span><br><span class="line"><span class="comment">     * 操作步骤:</span></span><br><span class="line"><span class="comment">     *  ①获取连接</span></span><br><span class="line"><span class="comment">     *  ②获取dbdatabasemetaData</span></span><br><span class="line"><span class="comment">     *  ③获取数据库中所有的表</span></span><br><span class="line"><span class="comment">     *  ④获取表中的所有字段</span></span><br><span class="line"><span class="comment">     *  ⑤封装成Java对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Table&gt; <span class="title function_">getDbInfo</span><span class="params">(DataBase db)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection(db);</span><br><span class="line">        <span class="comment">//2.获取元数据</span></span><br><span class="line">        <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">        <span class="comment">//3.获取数据库下所有表名</span></span><br><span class="line">        List&lt;Table&gt; tableList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">tables</span> <span class="operator">=</span> metaData.getTables(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;TABLE&quot;</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (tables.next())&#123;</span><br><span class="line">            <span class="type">Table</span> <span class="variable">tab</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Table</span>();</span><br><span class="line">            <span class="comment">//①表名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> tables.getString(<span class="string">&quot;TABLE_NAME&quot;</span>);</span><br><span class="line">            tab.setTableName(tableName);</span><br><span class="line">            <span class="comment">//②对应Java实体类名，去掉前缀，首字母大写</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> removePrefix(tableName);</span><br><span class="line">            tab.setPoName(className);</span><br><span class="line">            <span class="comment">//③获取描述信息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">remarks</span> <span class="operator">=</span> tables.getString(<span class="string">&quot;REMARKS&quot;</span>);</span><br><span class="line">            tab.setComment(remarks);</span><br><span class="line">            <span class="comment">//④主键</span></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">primaryKeys</span> <span class="operator">=</span> metaData.getPrimaryKeys(<span class="literal">null</span>, <span class="literal">null</span>, tableName);</span><br><span class="line">            String primaryKesName=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (primaryKeys.next())&#123;</span><br><span class="line">                <span class="comment">//获取主键名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">keyName</span> <span class="operator">=</span> primaryKeys.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>);</span><br><span class="line">                primaryKesName+=keyName+<span class="string">&quot;,&quot;</span>; <span class="comment">//多个主键以逗号分隔</span></span><br><span class="line">            &#125;</span><br><span class="line">            tab.setKey(primaryKesName);</span><br><span class="line">            <span class="comment">//5表中所有字段</span></span><br><span class="line">            List&lt;Column&gt; columnList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">columns</span> <span class="operator">=</span> metaData.getColumns(<span class="literal">null</span>, <span class="literal">null</span>, tableName, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">while</span> (columns.next())&#123;</span><br><span class="line">                <span class="type">Column</span> <span class="variable">column</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Column</span>();</span><br><span class="line">                <span class="comment">//列名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> columns.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>); <span class="comment">//字段名获取</span></span><br><span class="line">                column.setColumnName(columnName);</span><br><span class="line">                <span class="comment">//Java属性名,转换规则: user_id--&gt; userId</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> StringUtils.toJavaVariableName(columnName);</span><br><span class="line">                column.setFieldName(fieldName);</span><br><span class="line">                <span class="comment">//字段SQL数据类型</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">columnType</span> <span class="operator">=</span> columns.getString(<span class="string">&quot;TYPE_NAME&quot;</span>);</span><br><span class="line">                column.setColumnType(columnType);</span><br><span class="line">                <span class="comment">//Java属性类型</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">filedType</span> <span class="operator">=</span> PropertiesUtils.customMap.get(columnType);</span><br><span class="line">                column.setFieldType(filedType);</span><br><span class="line">                <span class="comment">//备注信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">comment</span> <span class="operator">=</span> columns.getString(<span class="string">&quot;REMARKS&quot;</span>);</span><br><span class="line">                column.setColumnComment(comment);</span><br><span class="line">                <span class="comment">//是否是主键</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">pri</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(StringUtils.contains(columnName,primaryKesName.split(<span class="string">&quot;，&quot;</span>)))&#123;</span><br><span class="line">                    pri = <span class="string">&quot;PRI&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                column.setColumnKey(pri);</span><br><span class="line">                columnList.add(column);</span><br><span class="line">            &#125;</span><br><span class="line">            tab.setColumnsList(columnList);</span><br><span class="line">            tableList.add(tab);</span><br><span class="line">            columns.close();</span><br><span class="line">        &#125;</span><br><span class="line">        tables.close();</span><br><span class="line">        conn.close();</span><br><span class="line">        <span class="keyword">return</span> tableList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除字符串中指定前缀</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removePrefix</span><span class="params">(String tableName)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> PropertiesUtils.customMap.get(<span class="string">&quot;tableRemovePrefixes&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newTableName</span> <span class="operator">=</span> tableName;</span><br><span class="line">        <span class="comment">//替换指定前缀</span></span><br><span class="line">        <span class="keyword">for</span>(String pf:prefix.split(<span class="string">&quot;,&quot;</span>))&#123;</span><br><span class="line">            newTableName = newTableName.replace(pf,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首字母大写</span></span><br><span class="line">        <span class="keyword">return</span> StrUtil.upperFirst(newTableName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">DataBase</span> <span class="variable">dataBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBase</span>(<span class="string">&quot;MYSQL&quot;</span>, <span class="string">&quot;train_member&quot;</span>, <span class="string">&quot;train_member&quot;</span>, <span class="string">&quot;wu123456&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;3306&quot;</span>);</span><br><span class="line">    List&lt;Table&gt; dbInfo = DataBaseUtils.getDbInfo(dataBase);</span><br><span class="line">    <span class="keyword">for</span> (Table table : dbInfo) &#123;</span><br><span class="line">        System.out.println(table);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码生成器实现"><a href="#代码生成器实现" class="headerlink" title="代码生成器实现"></a>代码生成器实现</h3><h4 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h4><p>用户需要提供的信息</p><ul><li>数据库相关信息<ul><li>包括数据库类型、ip、端口、用户名、密码等</li></ul></li><li>工程配置信息<ul><li>项目目录、包名等</li></ul></li><li>模板路径<ul><li>模板文件根目录，程序会获取目录下的所有模板文件，集合数据模型生成对应代码文件</li></ul></li><li>输出路径<ul><li>最终生成的代码文件存储位置</li></ul></li></ul><p>中间需要生成的数据模型</p><ul><li>用户自定义数据对应的数据模型</li><li>数据库元数据对应的数据模型</li><li>工程配置信息对应的数据模型</li></ul><h4 id="数据模型构建类创建"><a href="#数据模型构建类创建" class="headerlink" title="数据模型构建类创建"></a>数据模型构建类创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户提供的数据</span></span><br><span class="line"><span class="comment"> *      模板位置</span></span><br><span class="line"><span class="comment"> *      代码生成路径</span></span><br><span class="line"><span class="comment"> *      工程配置对象 setting</span></span><br><span class="line"><span class="comment"> *      数据库对象   DataBase</span></span><br><span class="line"><span class="comment"> * 准备对应的数据模型</span></span><br><span class="line"><span class="comment"> *      1.自定义配置</span></span><br><span class="line"><span class="comment"> *      2.元数据</span></span><br><span class="line"><span class="comment"> *      3.setting</span></span><br><span class="line"><span class="comment"> * 调用核心处理类完成代码生成工作</span></span><br><span class="line"><span class="comment"> *      方法：Generator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneratorFacade</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Settings settings;</span><br><span class="line">    <span class="keyword">private</span> DataBase db;</span><br><span class="line">    <span class="keyword">private</span> Generator generator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 附加信息，templates:所用模板路径列表   tables： 需要生成代码的数据库表名列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> settings 工程配置信息类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> db 数据库信息类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeneratorFacade</span><span class="params">(HashMap&lt;String, Object&gt; map, Settings settings, DataBase db)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="built_in">this</span>.settings = settings;</span><br><span class="line">        <span class="built_in">this</span>.db = db;</span><br><span class="line">        <span class="built_in">this</span>.generator = <span class="keyword">new</span> <span class="title class_">Generator</span>(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.准备数据模型</span></span><br><span class="line"><span class="comment">     * 2.调用核心处理类完成代码生成工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generatorByDataBase</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//map为配置信息，里面包含①需要生成代码对应的数据库表名②对应模板的目录</span></span><br><span class="line">        List&lt;String&gt; tables = (List&lt;String&gt;) map.get(<span class="string">&quot;tables&quot;</span>);</span><br><span class="line">        List&lt;Table&gt; allTable = DataBaseUtils.getDbInfo(db);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; allTable.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; tables.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tables.get(j).equals(allTable.get(i).getTableName())) &#123; <span class="comment">//只为指定表生成代码</span></span><br><span class="line">                    Map&lt;String, Object&gt; dataModel = getDataModel(allTable.get(i));</span><br><span class="line">                    generator.scanAndGenerator(dataModel);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据table对象获取数据模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">getDataModel</span><span class="params">(Table table)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; dataModel = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//1.自定义配置</span></span><br><span class="line">        dataModel.putAll(PropertiesUtils.customMap);</span><br><span class="line">        <span class="comment">//2.元数据</span></span><br><span class="line">        dataModel.put(<span class="string">&quot;table&quot;</span>, table);  <span class="comment">//table.name2</span></span><br><span class="line">        <span class="comment">//3.setting</span></span><br><span class="line">        dataModel.putAll(<span class="built_in">this</span>.settings.getSettingMap());</span><br><span class="line">        <span class="comment">//4.类型</span></span><br><span class="line">        dataModel.put(<span class="string">&quot;ClassName&quot;</span>, table.getPoName());</span><br><span class="line">        <span class="comment">//5.添加数据库信息</span></span><br><span class="line">        dataModel.put(<span class="string">&quot;username&quot;</span>, db.getUserName());</span><br><span class="line">        dataModel.put(<span class="string">&quot;password&quot;</span>, db.getPassWord());</span><br><span class="line">        dataModel.put(<span class="string">&quot;url&quot;</span>, db.getUrl());</span><br><span class="line">        dataModel.put(<span class="string">&quot;driver&quot;</span>, db.getDriver());</span><br><span class="line">        dataModel.put(<span class="string">&quot;author&quot;</span>, settings.getAuthor());</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> simpleDateFormat.format(date);</span><br><span class="line">        dataModel.put(<span class="string">&quot;createTime&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FreeMaker解析输出代码文件"><a href="#FreeMaker解析输出代码文件" class="headerlink" title="FreeMaker解析输出代码文件"></a>FreeMaker解析输出代码文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码生成器的核心处理类</span></span><br><span class="line"><span class="comment"> *      使用Freemarker完成文件生成</span></span><br><span class="line"><span class="comment"> *             数据模型 + 模板</span></span><br><span class="line"><span class="comment"> *  数据：</span></span><br><span class="line"><span class="comment"> *      数据模型</span></span><br><span class="line"><span class="comment"> *      模板的位置</span></span><br><span class="line"><span class="comment"> *      生成文件的路径</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Configuration&gt; cfgs;<span class="comment">//模板加载器配置文件</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; template;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generator</span><span class="params">(HashMap&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="comment">//实例化Configuration对象</span></span><br><span class="line">        cfgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        template = (List&lt;String&gt;) map.get(<span class="string">&quot;template&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; template.size(); i++) &#123;</span><br><span class="line">            cfgs.add(i, <span class="keyword">new</span> <span class="title class_">Configuration</span>());</span><br><span class="line">            <span class="type">FileTemplateLoader</span> <span class="variable">ftl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileTemplateLoader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(template.get(i)));</span><br><span class="line">            cfgs.get(i).setTemplateLoader(ftl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据选中的表进行代码生成代码生成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scanAndGenerator</span><span class="params">(Map&lt;String, Object&gt; dataModel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取模板目录路径列表</span></span><br><span class="line">        List&lt;String&gt; template = (List&lt;String&gt;) map.get(<span class="string">&quot;template&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; template.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//1.根据模板路径找到此路径下的所有模板文件</span></span><br><span class="line">            List&lt;File&gt; fileList = FileUtils.searchAllFile(<span class="keyword">new</span> <span class="title class_">File</span>(template.get(i)));</span><br><span class="line">            <span class="comment">//2.对每个模板进行文件生成</span></span><br><span class="line">            <span class="keyword">for</span> (File file : fileList) &#123;</span><br><span class="line">                executeGenerator(dataModel, file, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对模板进行文件生成</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataModel ： 数据模型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file      ： 模板文件</span></span><br><span class="line"><span class="comment">     *                  模板文件：c：com.ihrm.system.abc.java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">executeGenerator</span><span class="params">(Map&lt;String, Object&gt; dataModel, File file, <span class="type">int</span> index)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.文件路径处理   (E:\模板\$&#123;path1&#125;\$&#123;path2&#125;\$&#123;path3&#125;\$&#123;ClassName&#125;.java)</span></span><br><span class="line">        <span class="comment">//templatePath : E:\模板\</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//file.getAbsolutePath(): E:\模板\xx.xx.xx.java</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateFileName</span> <span class="operator">=</span> file.getAbsolutePath().replace(template.get(index), <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//输出路径用FreeMaker字符串模板进行处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">outFileName</span> <span class="operator">=</span> processTemplateString(templateFileName, dataModel,index);</span><br><span class="line"><span class="comment">//        2.读取文件模板</span></span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfgs.get(index).getTemplate(templateFileName);</span><br><span class="line">        template.setOutputEncoding(<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//指定生成文件的字符集编码</span></span><br><span class="line"><span class="comment">//        3.创建文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> FileUtils.mkdir((String) map.get(<span class="string">&quot;templatePath&quot;</span>), outFileName);</span><br><span class="line"><span class="comment">//        4.模板处理（文件生成）</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file1);</span><br><span class="line">        template.process(dataModel, fw);</span><br><span class="line"></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据库的数据添加到模板里面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataModel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">processTemplateString</span><span class="params">(String templateString,Map dataModel,<span class="type">int</span> index)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Template</span>(<span class="string">&quot;ts&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringReader</span>(templateString), cfgs.get(index));</span><br><span class="line">        template.process(dataModel,out);</span><br><span class="line">        <span class="keyword">return</span> out.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板文件的编写"><a href="#模板文件的编写" class="headerlink" title="模板文件的编写"></a>模板文件的编写</h3><p>重点在于模板文件的编写，根据需求编写不同模板</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件安装和部署</title>
      <link href="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="在Linux上部署各类软件"><a href="#在Linux上部署各类软件" class="headerlink" title="在Linux上部署各类软件"></a>在Linux上部署各类软件</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>下面全部的软件安装的相关流程，90%都是取自软件自身的官方网站。</p><p>一个合格的程序员应当要有良好的信息收集能力哦</p><h1 id="MySQL数据库管理系统安装部署【简单】"><a href="#MySQL数据库管理系统安装部署【简单】" class="headerlink" title="MySQL数据库管理系统安装部署【简单】"></a>MySQL数据库管理系统安装部署【简单】</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL数据库管理系统（后续简称MySQL），是一款知名的数据库系统，其特点是：轻量、简单、功能丰富。</p><p>MySQL数据库可谓是软件行业的明星产品，无论是后端开发、大数据、AI、运维、测试等各类岗位，基本上都会和MySQL打交道。</p><p>让我们从MySQL开始，进行实战的Linux软件安装部署。</p><p>本次课程分为2个版本进行安装：</p><ul><li>MySQL 5.7版本安装</li><li>MySQL 8.x版本安装</li></ul><blockquote><p>由于MySQL5.x和8.x各自有许多使用者，所以这两个版本我们都演示安装一遍</p></blockquote><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>MySQL的安装过程中，除了会使用Linux命令外，还会使用到少量的数据库专用的：SQL语句</p><p>对于SQL语句我们并未涉及，所以可以跟随教程的内容，复制粘贴即可</p><p>如对MySQL感兴趣，可以学习BiliBili黑马程序员视频：<a href="https://www.bilibili.com/video/BV1iF411z7Pu">2022新版黑马程序员MySQL知识精讲+mysql实战案例_零基础mysql数据库入门到高级全套教程</a></p><blockquote><p>如有时间，建议可以在学习完Linux系统之后，学习一下MySQL数据库</p><p>无论从事什么方面的开发，Java后端、大数据、AI、前端、Linux运维等，都会要求掌握MySQL数据库的</p><p>可以说，MySQL是IT开发从业者必备的技能了。</p></blockquote><h2 id="MySQL5-7版本在CentOS系统安装"><a href="#MySQL5-7版本在CentOS系统安装" class="headerlink" title="MySQL5.7版本在CentOS系统安装"></a>MySQL5.7版本在CentOS系统安装</h2><blockquote><p>注意：安装操作需要root权限</p></blockquote><p>MySQL的安装我们可以通过前面学习的yum命令进行。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>配置yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182514.png" alt="image-20221012182514865"></p><blockquote><p>由于MySQL并不在CentOS的官方仓库中，所以我们通过上述rpm命令：</p><ul><li>导入MySQL仓库的密钥</li><li>配置MySQLQ的yum仓库</li></ul></blockquote></li><li><p>使用yum安装MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182556.png" alt="image-20221012182555420"></p></li><li><p>安装完成后，启动MySQL并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld# 启动</span><br><span class="line">systemctl enable mysqld# 开机自启</span><br></pre></td></tr></table></figure><blockquote><p>MySQL安装完成后，会自动配置为名称叫做：<code>mysqld</code>的服务，可以被systemctl所管理</p></blockquote></li><li><p>检查MySQL的运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182716.png" alt="image-20221012182716598"></p></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>主要配置管理员用户root的密码以及配置允许远程登录的权限。</p><ol><li><p>获取MySQL的初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182744.png" alt="image-20221012182744115"></p></li><li><p>登陆MySQL数据库系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182806.png" alt="image-20221012182805966"></p></li><li><p>修改root用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在MySQL控制台内执行</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root的简单密码</p><blockquote><p>我们可以给root设置简单密码，如123456.</p><p>请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 如果你想设置简单密码，需要降低Mysql的密码安全级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span>LOW; # 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">4</span>; # 密码长度最低<span class="number">4</span>位即可</span><br><span class="line"></span><br><span class="line"># 然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;简单密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root运行远程登录</p><blockquote><p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p><p>请注意，允许root远程登录会带来安全风险</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 授权root远程登录</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> root@&quot;IP地址&quot; identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;  </span><br><span class="line"># IP地址即允许登陆的IP地址，也可以填写<span class="operator">%</span>，表示允许任何地址</span><br><span class="line"># 密码表示给远程登录独立设置密码，和本地登陆的密码可以不同</span><br><span class="line"></span><br><span class="line"># 刷新权限，生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台页面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure></li><li><p>检查端口</p><p>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012183746.png" alt="image-20221012183746802"></p></li></ol><p>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p><h2 id="MySQL8-0版本在CentOS系统安装"><a href="#MySQL8-0版本在CentOS系统安装" class="headerlink" title="MySQL8.0版本在CentOS系统安装"></a>MySQL8.0版本在CentOS系统安装</h2><blockquote><p>注意：安装操作需要root权限</p></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ol><li><p>配置yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql8.x版本 yum库</span></span><br><span class="line">rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>使用yum安装MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，启动MySQL并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld# 启动</span><br><span class="line">systemctl enable mysqld# 开机自启</span><br></pre></td></tr></table></figure><blockquote><p>MySQL安装完成后，会自动配置为名称叫做：<code>mysqld</code>的服务，可以被systemctl所管理</p></blockquote></li><li><p>检查MySQL的运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>主要修改root密码和允许root远程登录</p><ol><li><p>获取MySQL的初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p>登录MySQL数据库系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure></li><li><p>修改root密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root的简单密码</p><blockquote><p>我们可以给root设置简单密码，如123456.</p><p>请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;# 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">4</span>;# 密码长度最低<span class="number">4</span>位即可</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>允许root远程登录，并设置远程登录密码</p><blockquote><p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p><p>请注意，允许root远程登录会带来安全风险</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 第一次设置root远程登录，并配置远程密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码!&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br><span class="line"></span><br><span class="line"># 后续修改密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台页面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure></li><li><p>检查端口</p><p>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012192303.png" alt="image-20221012192303607"></p></li></ol><p>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p><h2 id="MySQL5-7版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL5-7版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL5.7版本在Ubuntu（WSL环境）系统安装"></a>MySQL5.7版本在Ubuntu（WSL环境）系统安装</h2><blockquote><p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p><p>所以我们需要额外的步骤才可以安装5.7版本的MySQL</p></blockquote><p>安装操作需root权限，你可以：</p><ol><li><p>通过 sudo su -，切换到root用户</p><blockquote><p>课程中选择这种方式操作</p></blockquote></li><li><p>或在每一个命令前，加上sudo，用来临时提升权限</p></li></ol><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ol><li><p>下载apt仓库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载apt仓库的安装包，Ubuntu的安装包是.deb文件</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094103.png" alt="image-20221016094103315"></p></li><li><p>配置apt仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用dpkg命令安装仓库</span></span><br><span class="line">dpkg -i mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure><p>弹出框中选择：<code>ubuntu bionic</code> （Ubuntu18.04系统的代号是bionic，选择18.04的版本库用来安装）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094142.png" alt="image-20221016094142343"></p><p>弹出框中选择：<code>MySQL Server &amp; Cluster</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094216.png" alt="image-20221016094216377"></p><p>弹出框中选择：<code>mysql-5.7</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094254.png" alt="image-20221016094254397"></p><p>最后选择：<code>ok</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094306.png" alt="image-20221016094306917"></p></li><li><p>更新apt仓库的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先导入仓库的密钥信息</span></span><br><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新仓库信息</span></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure></li><li><p>检查是否成功配置MySQL5.7的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache policy mysql-server</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094546.png" alt="image-20221016094546943"></p><p>看到如图所示字样，即成功</p></li><li><p>安装MySQL5.7</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用apt安装mysql客户端和mysql服务端</span></span><br><span class="line">apt install -f -y mysql-client=5.7* mysql-community-server=5.7*</span><br></pre></td></tr></table></figure><p>弹出框中输入root密码并选择ok，密码任意，课程中以123456代替</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094941.png" alt="image-20221016094941439"></p><p>再次输入root密码确认</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094954.png" alt="image-20221016094954505"></p></li><li><p>启动MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start# 启动</span><br><span class="line">/etc/init.d/mysql stop# 停止</span><br><span class="line">/etc/init.d/mysql status# 查看状态</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095259.png" alt="image-20221016095259172"></p></li><li><p>对MySQL进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li><p>输入密码：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095458.png" alt="image-20221016095458755"></p></li><li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车（课程中选择直接回车）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095537.png" alt="image-20221016095537716"></p></li><li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车（课程不更改）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095621.png" alt="image-20221016095621386"></p></li><li><p>是否移除匿名用户，移除输入<code>y</code>回车，不移除直接回车（课程选择移除）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101232.png" alt="image-20221016101232827"></p></li><li><p>是否进制root用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车（课程选择不禁止）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101324.png" alt="image-20221016101324577"></p></li><li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车（课程选择不移除）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101404.png" alt="image-20221016101404392"></p></li><li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车（课程选择刷新）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101442.png" alt="image-20221016101442459"></p></li></ol></li><li><p>登陆MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码即可登陆成功</span></span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101524.png" alt="image-20221016101524498"></p></li></ol><p>至此，在Ubuntu上安装MySQL5.7版本成功。</p><h2 id="MySQL8-0版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL8-0版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL8.0版本在Ubuntu（WSL环境）系统安装"></a>MySQL8.0版本在Ubuntu（WSL环境）系统安装</h2><blockquote><p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p><p>所以直接可以通过apt安装即可</p><p>注意，课程是以WSL获得的Ubuntu操作系统环境。</p><p>如果你通过VMware虚拟机的方式获得了Ubuntu操作系统环境，操作步骤不用担心，和课程中使用WSL环境是==完全一致的==</p></blockquote><p>安装操作需root权限，你可以：</p><ol><li><p>通过 sudo su -，切换到root用户</p><blockquote><p>课程中选择这种方式操作</p></blockquote></li><li><p>或在每一个命令前，加上sudo，用来临时提升权限</p></li></ol><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><ol><li><p>如果已经安装过MySQL5.7版本，需要卸载仓库信息哦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载MySQL5.7版本</span></span><br><span class="line">apt remove -y mysql-client=5.7* mysql-community-server=5.7*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载5.7的仓库信息</span></span><br><span class="line">dpkg -l | grep mysql | awk &#x27;&#123;print $2&#125;&#x27; | xargs dpkg -P</span><br></pre></td></tr></table></figure></li><li><p>更新apt仓库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure></li><li><p>安装mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y mysql-server</span><br></pre></td></tr></table></figure></li><li><p>启动MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start# 启动</span><br><span class="line">/etc/init.d/mysql stop# 停止</span><br><span class="line">/etc/init.d/mysql status# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>登陆MySQL设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接执行：mysql</span></span><br><span class="line">mysql</span><br></pre></td></tr></table></figure></li><li><p>设置密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>对MySQL进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li><p>输入密码：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095458-170256022735349.png" alt="image-20221016095458755"></p></li><li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车（课程中选择直接回车）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095537-170256022969752.png" alt="image-20221016095537716"></p></li><li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车（课程不更改）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095621-170256023177855.png" alt="image-20221016095621386"></p></li><li><p>是否移除匿名用户，移除输入<code>y</code>回车，不移除直接回车（课程选择移除）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101232-170256023387458.png" alt="image-20221016101232827"></p></li><li><p>是否进制root用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车（课程选择不禁止）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101324-170256023608861.png" alt="image-20221016101324577"></p></li><li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车（课程选择不移除）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101404-170256023814164.png" alt="image-20221016101404392"></p></li><li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车（课程选择刷新）</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101442-170256023988467.png" alt="image-20221016101442459"></p></li></ol></li><li><p>重新登陆MySQL（用更改后的密码）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016110414.png" alt="image-20221016110414182"></p></li></ol><p>至此，在Ubuntu上安装MySQL5.7版本成功。</p><h1 id="Tomcat安装部署【简单】"><a href="#Tomcat安装部署【简单】" class="headerlink" title="Tomcat安装部署【简单】"></a>Tomcat安装部署【简单】</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。</p><p>简单来说，Tomcat是一个WEB应用程序的托管平台，可以让用户编写的WEB应用程序，被Tomcat所托管，并提供网站服务。</p><blockquote><p>即让用户开发的WEB应用程序，变成可以被访问的网页。</p></blockquote><h2 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h2><p>Tomcat的安装非常简单，主要分为2部分：</p><ol><li>安装JDK环境</li><li>解压并安装Tomcat</li></ol><blockquote><p>本次安装使用Tomcat版本是：10.0.27版本，需要Java（JDK）版本最低为JDK8或更高版本</p><p>课程中使用的JDK版本是：JDK8u351版本</p></blockquote><h3 id="安装JDK环境"><a href="#安装JDK环境" class="headerlink" title="安装JDK环境"></a>安装JDK环境</h3><ol><li><p>下载JDK软件</p><p><a href="https://www.oracle.com/java/technologies/downloads">https://www.oracle.com/java/technologies/downloads</a></p><p>在页面下方找到：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163411.png" alt="image-20221017163411651" style="zoom: 67%;"></p><p>下载<code>jdk-8u351-linux-x64.tar.gz</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163440.png" alt="image-20221017163440491"></p><p>==在弹出的页面中输入Oracle的账户密码即可下载（如无账户，请自行注册，注册是免费的）==</p></li><li><p>登陆Linux系统，切换到root用户</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163607.png" alt></p></li><li><p>通过FinalShell，上传下载好的JDK安装包</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163706.png" alt="image-20221017163706026"></p></li><li><p>创建文件夹，用来部署JDK，将JDK和Tomcat都安装部署到：/export/server 内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server</span><br></pre></td></tr></table></figure></li><li><p>解压缩JDK安装文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u351-linux-x64.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>配置JDK的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/jdk1.8.0_351 /export/server/jdk</span><br></pre></td></tr></table></figure></li><li><p>配置JAVA_HOME环境变量，以及将$JAVA_HOME/bin文件夹加入PATH环境变量中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑/etc/profile文件</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>生效环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>配置java执行程序的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除系统自带的java程序</span></span><br><span class="line">rm -f /usr/bin/java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接我们自己安装的java程序</span></span><br><span class="line">ln -s /export/server/jdk/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure></li><li><p>执行验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure></li></ol><h3 id="解压并部署Tomcat"><a href="#解压并部署Tomcat" class="headerlink" title="解压并部署Tomcat"></a>解压并部署Tomcat</h3><blockquote><p>Tomcat建议使用非Root用户安装并启动</p><p>可以创建一个用户：tomcat用以部署</p></blockquote><ol><li><p>首先，放行tomcat需要使用的8080端口的外部访问权限</p><blockquote><p>CentOS系统默认开启了防火墙，阻止外部网络流量访问系统内部</p><p>所以，如果想要Tomcat可以正常使用，需要对Tomcat默认使用的8080端口进行放行</p><p>放行有2种操作方式：</p><ol><li>关闭防火墙</li><li>配置防火墙规则，放行端口</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下操作2选一即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭防火墙</span><br><span class="line">systemctl disable firewalld# 停止防火墙开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：放行8080端口的外部访问</span></span><br><span class="line">firewall-cmd --add-port=8080/tcp --permanent# --add-port=8080/tcp表示放行8080端口的tcp访问，--permanent表示永久生效</span><br><span class="line">firewall-cmd --reload# 重新载入防火墙规则使其生效</span><br></pre></td></tr></table></figure><blockquote><p>方便起见，建议同学们选择方式1，直接关闭防火墙一劳永逸</p><p>防火墙的配置非常复杂，后面会视情况独立出一集防火墙配置规则的章节。</p></blockquote></li><li><p>以root用户操作，创建tomcat用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">useradd tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选，为tomcat用户配置密码</span></span><br><span class="line">passwd tomcat</span><br></pre></td></tr></table></figure></li><li><p>下载Tomcat安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果出现https相关错误，可以使用--no-check-certificate选项</span></span><br><span class="line">wget --no-check-certificate https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>如果Linux内下载过慢，可以复制下载链接在Windows系统中使用迅雷等软件加速下载然后上传到Linux内即可</p><p>或者使用课程资料中提供的安装包</p></blockquote></li><li><p>解压Tomcat安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，否则无权限解压到/export/server内，除非修改此文件夹权限</span></span><br><span class="line">tar -zxvf apache-tomcat-10.0.27.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>创建Tomcat软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">ln -s /export/server/apache-tomcat-10.0.27 /export/server/tomcat</span><br></pre></td></tr></table></figure></li><li><p>修改tomcat安装目录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，同时对软链接和tomcat安装文件夹进行修改，使用通配符*进行匹配</span></span><br><span class="line">chown -R tomcat:tomcat /export/server/*tomcat*</span><br></pre></td></tr></table></figure></li><li><p>切换到tomcat用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - tomcat</span><br></pre></td></tr></table></figure></li><li><p>启动tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure></li><li><p>tomcat启动在8080端口，可以检查是否正常启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017223814.png" alt="image-20221017223814737"></p></li><li><p>打开浏览器，输入：</p><p><a href="http://centos:8080或http://192.168.88.130:8080">http://centos:8080或http://192.168.88.130:8080</a></p><p>使用主机名（需配置好本地的主机名映射）或IP地址访问Tomcat的WEB页面</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017223915.png" alt="image-20221017223915498"></p></li></ol><p>至此，Tomcat安装配置完成。</p><h1 id="Nginx安装部署【简单】"><a href="#Nginx安装部署【简单】" class="headerlink" title="Nginx安装部署【简单】"></a>Nginx安装部署【简单】</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。</p><p>同Tomcat一样，Nginx可以托管用户编写的WEB应用程序成为可访问的网页服务，同时也可以作为流量代理服务器，控制流量的中转。</p><p>Nginx在WEB开发领域，基本上也是必备组件之一了。</p><h2 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h2><p>Nginx同样需要配置额外的yum仓库，才可以使用yum安装</p><blockquote><p>安装Nginx的操作需要root身份</p></blockquote><ol><li><p>安装yum依赖程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure></li><li><p>手动添加，nginx的yum仓库</p><p>yum程序使用的仓库配置文件，存放在：<code>/etc/yum.repo.d</code>内。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件使用vim编辑</span></span><br><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容并保存退出</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure><blockquote><p>通过如上操作，我们手动添加了nginx的yum仓库</p></blockquote></li><li><p>通过yum安装最新稳定版的nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx自动注册了systemctl系统服务</span></span><br><span class="line">systemctl start nginx# 启动</span><br><span class="line">systemctl stop nginx# 停止</span><br><span class="line">systemctl status nginx# 运行状态</span><br><span class="line">systemctl enable nginx# 开机自启</span><br><span class="line">systemctl disable nginx# 关闭开机自启</span><br></pre></td></tr></table></figure></li><li><p>配置防火墙放行</p><p>nginx默认绑定80端口，需要关闭防火墙或放行80端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent# 放行tcp规则下的80端口，永久生效</span><br><span class="line">firewall-cmd --reload# 重新加载防火墙规则</span><br></pre></td></tr></table></figure></li><li><p>启动后浏览器输入Linux服务器的IP地址或主机名即可访问</p><p><a href="http://192.168.88.130">http://192.168.88.130</a> 或 <a href="http://centos">http://centos</a></p><blockquote><p>ps：80端口是访问网站的默认端口，所以后面无需跟随端口号</p><p>显示的指定端口也是可以的比如：</p><ul><li><a href="http://192.168.88.130:80">http://192.168.88.130:80</a></li><li><a href="http://centos:80">http://centos:80</a></li></ul></blockquote></li></ol><p>至此，Nginx安装配置完成。</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221018143113.png" alt="image-20221018143113053"></p><h1 id="RabbitMQ安装部署【简单】"><a href="#RabbitMQ安装部署【简单】" class="headerlink" title="RabbitMQ安装部署【简单】"></a>RabbitMQ安装部署【简单】</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>RabbitMQ一款知名的开源消息队列系统，为企业提供消息的发布、订阅、点对点传输等消息服务。</p><p>RabbitMQ在企业开发中十分常见，课程为大家演示快速搭建RabbitMQ环境。</p><h2 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h2><blockquote><p>rabbitmq在yum仓库中的版本比较老，所以我们需要手动构建yum仓库</p></blockquote><ol><li><p>准备yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 准备gpgkey密钥</span></span><br><span class="line">rpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 准备仓库文件</span></span><br><span class="line">vim /etc/yum.repos.d/rabbitmq.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Zero dependency Erlang</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang]</span><br><span class="line">name=rabbitmq_erlang</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang-source]</span><br><span class="line">name=rabbitmq_erlang-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">PackageCloud&#x27;</span>s repository key and RabbitMQ package signing key</span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># RabbitMQ server</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_server]</span><br><span class="line">name=rabbitmq_server</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_server-source]</span><br><span class="line">name=rabbitmq_server-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br></pre></td></tr></table></figure></li><li><p>安装RabbitMQ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install erlang rabbitmq-server -y</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  erlang.x86_64 0:23.3.4.11-1.el7           rabbitmq-server.noarch 0:3.10.0-1.el7</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：rabbitmq-server</span></span><br><span class="line">systemctl enable rabbitmq-server# 开机自启</span><br><span class="line">systemctl disable rabbitmq-server# 关闭开机自启</span><br><span class="line">systemctl start rabbitmq-server# 启动</span><br><span class="line">systemctl stop rabbitmq-server# 关闭</span><br><span class="line">systemctl status rabbitmq-server# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>放行防火墙，RabbitMQ使用5672、15672、25672 3个端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行5672 25672端口</span></span><br><span class="line">firewall-cmd --add-port=5672/tcp --permanent# 放行tcp规则下的5672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=15672/tcp --permanent# 放行tcp规则下的15672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=25672/tcp --permanent# 放行tcp规则下的25672端口，永久生效</span><br><span class="line">firewall-cmd --reload# 重新加载防火墙规则</span><br></pre></td></tr></table></figure></li><li><p>启动RabbitMQ的WEB管理控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></li><li><p>添加admin用户，并赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user admin &#x27;Itheima66^&#x27;</span><br><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; &quot;admin&quot; &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>浏览器打开管理控制台</p><p><a href="http://192.168.88.130:15672">http://192.168.88.130:15672</a></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221018154824.png" alt="image-20221018154823983"></p></li></ol><p>至此，RabbitMQ已经安装完成了。</p><h1 id="Redis安装部署【简单】"><a href="#Redis安装部署【简单】" class="headerlink" title="Redis安装部署【简单】"></a>Redis安装部署【简单】</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><p>redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。</p><p>redis的特点就是：<code>快</code>，可以基于内存存储数据并提供超低延迟、超快的检索速度</p><p>一般用于在系统中提供快速缓存的能力。</p><h2 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h2><ol><li><p>配置<code>EPEL</code>仓库</p><blockquote><p>EPEL 的全称叫 Extra Packages for Enterprise Linux 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。EPEL则为服务器版本提供大量的rpm包(yum程序所使用的程序安装包，类似Windows的exe)，而且大多数rpm包在官方 repository 中是找不到的。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li><li><p>安装redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y redis</span><br></pre></td></tr></table></figure></li><li><p>启动redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：redis</span></span><br><span class="line">systemctl enable redis# 开机自启</span><br><span class="line">systemctl disable redis# 关闭开机自启</span><br><span class="line">systemctl start redis# 启动</span><br><span class="line">systemctl stop redis# 关闭</span><br><span class="line">systemctl status redis# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>放行防火墙，redis使用端口6379</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行6379端口</span></span><br><span class="line">firewall-cmd --add-port=6379/tcp --permanent# 放行tcp规则下的6379端口，永久生效</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>进入redis服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行redis-cli</span></span><br><span class="line">[root@centos ~]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set mykey hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><p>至此，redis安装完成。</p><h1 id="ElasticSearch安装部署"><a href="#ElasticSearch安装部署" class="headerlink" title="ElasticSearch安装部署"></a>ElasticSearch安装部署</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><p><a href="https://baike.baidu.com/item/全文搜索引擎">全文搜索</a>属于最常见的需求，开源的 <a href="https://www.elastic.co/">Elasticsearch</a> （以下简称 es）是目前全文搜索引擎的首选。</p><p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p><p>Elasticsearch简称es，在企业内同样是一款应用非常广泛的搜索引擎服务。</p><p>很多服务中的搜索功能，都是基于es来实现的。</p><h2 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h2><ol><li><p>添加yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入仓库密钥</span></span><br><span class="line">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加yum源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span> </span><br><span class="line">vim /etc/yum.repos.d/elasticsearch.repo</span><br><span class="line"></span><br><span class="line">[elasticsearch-7.x]</span><br><span class="line">name=Elasticsearch repository for 7.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/7.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li><li><p>安装es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>配置es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">17行，设置集群名称</span></span><br><span class="line">cluster.name: my-cluster</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">23行，设置节点名称</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">56行，允许外网访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">74行，配置集群master节点</span></span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br></pre></td></tr></table></figure></li><li><p>启动es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start | stop | status | enable | disable elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li><li><p>测试</p><p>浏览器打开：<a href="http://ip:9200/?pretty">http://ip:9200/?pretty</a></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025085432.png" alt="image-20221025085432335"></p></li></ol><h1 id="集群化环境前置准备"><a href="#集群化环境前置准备" class="headerlink" title="集群化环境前置准备"></a>集群化环境前置准备</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在前面，我们所学习安装的软件，都是以单机模式运行的。</p><p>后续，我们将要学习大数据相关的软件部署，所以后续我们所安装的软件服务，大多数都是以集群化（多台服务器共同工作）模式运行的。</p><p>所以，在当前小节，我们需要完成集群化环境的前置准备，包括创建多台虚拟机，配置主机名映射，SSH免密登录等等。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="配置多台Linux虚拟机"><a href="#配置多台Linux虚拟机" class="headerlink" title="配置多台Linux虚拟机"></a>配置多台Linux虚拟机</h3><p>安装集群化软件，首要条件就是要有多台Linux服务器可用。</p><p>我们可以使用VMware提供的克隆功能，将我们的虚拟机额外克隆出3台来使用。</p><ol><li><p>首先，关机当前CentOS系统虚拟机（可以使用root用户执行<code>init 0</code>来快速关机）</p></li><li><p>新建文件夹</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104157.png" alt="image-20221025104157628"></p><p>文件夹起名为：<code>虚拟机集群</code></p></li><li><p>克隆</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104131.png" alt="image-20221025104131303"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104312.png" alt="image-20221025104312091"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104329.png" alt="image-20221025104329109"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104345.png" alt="image-20221025104345484"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104414.png" alt="image-20221025104414576"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104427.png" alt="image-20221025104427160"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104432.png" alt="image-20221025104432927"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104446.png" alt="image-20221025104446044"></p></li><li><p>同样的操作克隆出：node2和node3</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104825.png" alt="image-20221025104825204"></p></li><li><p>开启node1，修改主机名为node1，并修改固定ip为：192.168.88.131</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改主机名</span></span><br><span class="line">hostnamectl set-hostname node1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改IP地址</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启网卡</span></span><br><span class="line">systemctl stop network</span><br><span class="line">systemctl start network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者直接</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></li><li><p>同样的操作启动node2和node3,</p><p>修改node2主机名为node2，设置ip为192.168.88.132</p><p>修改node2主机名为node3，设置ip为192.168.88.133</p></li><li><p>配置FinalShell，配置连接到node1、node2、node3的连接</p><blockquote><p>为了简单起见，建议配置root用户登录</p></blockquote></li></ol><h3 id="准备主机名映射"><a href="#准备主机名映射" class="headerlink" title="准备主机名映射"></a>准备主机名映射</h3><ol><li><p>在Windows系统中修改hosts文件，填入如下内容：</p><blockquote><p>如果同学们使用MacOS系统，请：</p><ol><li>sudo su -，切换到root</li><li>修改/etc/hosts文件</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure></li><li><p>在3台Linux的/etc/hosts文件中，填入如下内容（==3台都要添加==）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><p>SSH服务是一种用于远程登录的安全认证协议。</p><p>我们通过FinalShell远程连接到Linux，就是使用的SSH服务。</p><p>SSH服务支持：</p><ol><li>通过账户+密码的认证方式来做用户认证</li><li>通过账户+秘钥文件的方式做用户认证</li></ol><p>SSH可以让我们通过SSH命令，远程的登陆到其它的主机上，比如：</p><p>在node1执行：ssh root@node2，将以root用户登录node2服务器，输入密码即可成功登陆</p><p>或者ssh node2，将以当前用户直接登陆到node2服务器。</p><h4 id="SSH免密配置"><a href="#SSH免密配置" class="headerlink" title="SSH免密配置"></a>SSH免密配置</h4><p>后续安装的集群化软件，多数需要远程登录以及远程执行命令，我们可以简单起见，配置三台Linux服务器之间的免密码互相SSH登陆</p><ol><li><p>在每一台机器都执行：<code>ssh-keygen -t rsa -b 4096</code>，一路回车到底即可</p></li><li><p>在每一台机器都执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id node1</span><br><span class="line">ssh-copy-id node2</span><br><span class="line">ssh-copy-id node3</span><br></pre></td></tr></table></figure></li><li><p>执行完毕后，node1、node2、node3之间将完成root用户之间的免密互通</p></li></ol><h3 id="配置JDK环境"><a href="#配置JDK环境" class="headerlink" title="配置JDK环境"></a>配置JDK环境</h3><p>后续的大数据集群软件，多数是需要Java运行环境的，所以我们为==每一台==机器都配置JDK环境。</p><p>JDK配置参阅：<code>Tomcat</code>安装部署环节。</p><h3 id="关闭防火墙和SELinux"><a href="#关闭防火墙和SELinux" class="headerlink" title="关闭防火墙和SELinux"></a>关闭防火墙和SELinux</h3><p>集群化软件之间需要通过端口互相通讯，为了避免出现网络不通的问题，我们可以简单的在集群内部关闭防火墙。</p><p>==在每一台机器都执行==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>Linux有一个安全模块：SELinux，用以限制用户和程序的相关权限，来确保系统的安全稳定。</p><p>SELinux的配置同防火墙一样，非常复杂，课程中不多涉及，后续视情况可以出一章SELinux的配置课程。</p><p>在当前，我们只需要关闭SELinux功能，避免导致后面的软件运行出现问题即可，</p><p>==在每一台机器都执行==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将第七行，SELINUX=enforcing 改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出后，重启虚拟机即可，千万要注意disabled单词不要写错，不然无法启动系统</span></span><br></pre></td></tr></table></figure><h3 id="添加快照"><a href="#添加快照" class="headerlink" title="添加快照"></a>添加快照</h3><p>为了避免后续出现问题，在完成上述设置后，为==每一台虚拟机==都制作快照，留待使用。</p><h2 id="补充命令-scp"><a href="#补充命令-scp" class="headerlink" title="补充命令 - scp"></a>补充命令 - scp</h2><p>后续的安装部署操作，我们将会频繁的在多台服务器之间相互传输数据。</p><p>为了更加方面的互相传输，我们补充一个命令：scp</p><p>scp命令是cp命令的升级版，即：ssh cp，通过SSH协议完成文件的复制。</p><p>其主要的功能就是：在不同的Linux服务器之间，通过<code>SSH</code>协议互相传输文件。</p><p>只要知晓服务器的账户和密码（或密钥），即可通过SCP互传文件。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">scp [-r] 参数1 参数2</span><br><span class="line">- -r选项用于复制文件夹使用，如果复制文件夹，必须使用-r</span><br><span class="line">- 参数1：本机路径 或 远程目标路径</span><br><span class="line">- 参数2：远程目标路径 或 本机路径</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r /export/server/jdk root@node2:/export/server/</span><br><span class="line">将本机上的jdk文件夹， 以root的身份复制到node2的/export/server/内</span><br><span class="line">同SSH登陆一样，账户名可以省略（使用本机当前的同名账户登陆）</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r node2:/export/server/jdk /export/server/</span><br><span class="line">将远程node2的jdk文件夹，复制到本机的/export/server/内</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scp命令的高级用法</span></span><br><span class="line">cd /export/server</span><br><span class="line">scp -r jdk node2:`pwd`/    # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br><span class="line">scp -r jdk node2:$PWD      # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br></pre></td></tr></table></figure><h1 id="Zookeeper集群安装部署"><a href="#Zookeeper集群安装部署" class="headerlink" title="Zookeeper集群安装部署"></a>Zookeeper集群安装部署</h1><h2 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h2><p>ZooKeeper是一个<a href="https://baike.baidu.com/item/分布式/19276232?fromModule=lemma_inlink">分布式</a>的，开放源码的<a href="https://baike.baidu.com/item/分布式应用程序/9854429?fromModule=lemma_inlink">分布式应用程序</a>协调服务，是Hadoop和<a href="https://baike.baidu.com/item/Hbase/7670213?fromModule=lemma_inlink">Hbase</a>的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><p>除了为Hadoop和HBase提供协调服务外，Zookeeper也被其它许多软件采用作为其分布式状态一致性的依赖，比如Kafka，又或者一些软件项目中，也经常能见到Zookeeper作为一致性协调服务存在。</p><p>Zookeeper不论是大数据领域亦或是其它服务器开发领域，涉及到分布式状态一致性的场景，总有它的身影存在。</p><h2 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h2><p>Zookeeper是一款分布式的集群化软件，可以在多台服务器上部署，并协同组成分布式集群一起工作。</p><ol><li><p>首先，要确保已经完成了<code>集群化环境前置准备</code>环节的全部内容</p></li><li><p>【node1上操作】下载Zookeeper安装包，并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保如下目录存在，不存在就创建</span></span><br><span class="line">mkdir -p /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf apache-zookeeper-3.5.9-bin.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】创建软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /export/server/zookeeper/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper数据存储目录</span></span><br><span class="line">dataDir=/export/server/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">server.1=node1:2888:3888</span><br><span class="line">server.2=node2:2888:3888</span><br><span class="line">server.3=node3:2888:3888</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】配置<code>myid</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建Zookeeper的数据目录</span></span><br><span class="line">mkdir /export/server/zookeeper/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 创建文件，并填入1</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件内填入1即可</span></span><br></pre></td></tr></table></figure></li><li><p>【在node2和node3上操作】，创建文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】将Zookeeper 复制到node2和node3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r apache-zookeeper-3.5.9 node2:`pwd`/</span><br><span class="line">scp -r apache-zookeeper-3.5.9 node3:`pwd`/</span><br></pre></td></tr></table></figure></li><li><p>【在node2上操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为2</span></span><br></pre></td></tr></table></figure></li><li><p>【在node3上操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为3</span></span><br></pre></td></tr></table></figure></li><li><p>【在node1、node2、node3上分别执行】启动Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令</span></span><br><span class="line">/export/server/zookeeper/bin/zkServer.sh start# 启动Zookeeper</span><br></pre></td></tr></table></figure></li><li><p>【在node1、node2、node3上分别执行】检查Zookeeper进程是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果中找到有：QuorumPeerMain 进程即可</span></span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】验证Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/export/server/zookeeper/zkCli.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到Zookeeper控制台中后，执行</span></span><br><span class="line">ls /</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如无报错即配置成功</span></span><br></pre></td></tr></table></figure></li></ol><p>至此Zookeeper安装完成</p><h1 id="Kafka集群安装部署"><a href="#Kafka集群安装部署" class="headerlink" title="Kafka集群安装部署"></a>Kafka集群安装部署</h1><h2 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h2><p>Kafka是一款<code>分布式的、去中心化的、高吞吐低延迟、订阅模式</code>的消息队列系统。</p><p>同RabbitMQ一样，Kafka也是消息队列。不过RabbitMQ多用于后端系统，因其更加专注于消息的延迟和容错。</p><p>Kafka多用于大数据体系，因其更加专注于数据的吞吐能力。</p><p>Kafka多数都是运行在分布式（集群化）模式下，所以课程将以3台服务器，来完成Kafka集群的安装部署。</p><h2 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h2><ol><li><p>确保已经跟随前面的视频，安装并部署了JDK和Zookeeper服务</p><blockquote><p>Kafka的运行依赖JDK环境和Zookeeper请确保已经有了JDK环境和Zookeeper</p></blockquote></li><li><p>【在node1操作】下载并上传Kafka的安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装包</span></span><br><span class="line">wget http://archive.apache.org/dist/kafka/2.4.1/kafka_2.12-2.4.1.tgz</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server# 此文件夹如果不存在需先创建</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf kafka_2.12-2.4.1.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】修改Kafka目录内的config目录内的<code>server.properties</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node1:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】将node1的kafka复制到node2和node3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node2同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node2:`pwd`/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node3同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node3:$PWD</span><br></pre></td></tr></table></figure></li><li><p>【在node2操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node2:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>【在node3操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node3:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>启动kafka</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请先确保Zookeeper已经启动了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：【前台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">/export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：【后台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">nohup /export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties 2&gt;&amp;1 &gt;&gt; /export/server/kafka/kafka-server.log &amp;</span><br></pre></td></tr></table></figure></li><li><p>验证Kafka启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在每一台服务器执行</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025174522.png" alt="image-20221025174522487"></p></li></ol><h2 id="测试Kafka能否正常使用"><a href="#测试Kafka能否正常使用" class="headerlink" title="测试Kafka能否正常使用"></a>测试Kafka能否正常使用</h2><ol><li>创建测试主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行，创建一个主题</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-topics.sh --create --zookeeper node1:2181 --replication-factor 1 --partitions 3 --topic test</span><br></pre></td></tr></table></figure><ol><li>运行测试，请在FinalShell中打开2个node1的终端页面</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开一个终端页面，启动一个模拟的数据生产者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-producer.sh --broker-list node1:9092 --topic test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再打开一个新的终端页面，在启动一个模拟的数据消费者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-consumer.sh --bootstrap-server node1:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure><h1 id="大数据集群（Hadoop生态）安装部署"><a href="#大数据集群（Hadoop生态）安装部署" class="headerlink" title="大数据集群（Hadoop生态）安装部署"></a>大数据集群（Hadoop生态）安装部署</h1><h2 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h2><p>1）Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>2）主要解决，海量数据的存储和海量数据的分析计算问题。</p><p>Hadoop HDFS 提供分布式海量数据存储能力</p><p>Hadoop YARN 提供分布式集群资源管理能力</p><p>Hadoop MapReduce 提供分布式海量数据计算能力</p><h3 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h3><ul><li>请确保完成了集群化环境前置准备章节的内容</li><li>即：JDK、SSH免密、关闭防火墙、配置主机名映射等前置操作</li></ul><h3 id="Hadoop集群角色"><a href="#Hadoop集群角色" class="headerlink" title="Hadoop集群角色"></a>Hadoop集群角色</h3><p>Hadoop生态体系中总共会出现如下进程角色：</p><ol><li>Hadoop HDFS的管理角色：Namenode进程（<code>仅需1个即可（管理者一个就够）</code>）</li><li>Hadoop HDFS的工作角色：Datanode进程（<code>需要多个（工人，越多越好，一个机器启动一个）</code>）</li><li>Hadoop YARN的管理角色：ResourceManager进程（<code>仅需1个即可（管理者一个就够）</code>）</li><li>Hadoop YARN的工作角色：NodeManager进程（<code>需要多个（工人，越多越好，一个机器启动一个）</code>）</li><li>Hadoop 历史记录服务器角色：HistoryServer进程（<code>仅需1个即可（功能进程无需太多1个足够）</code>）</li><li>Hadoop 代理服务器角色：WebProxyServer进程（<code>仅需1个即可（功能进程无需太多1个足够）</code>）</li><li>Zookeeper的进程：QuorumPeerMain进程（<code>仅需1个即可（Zookeeper的工作者，越多越好）</code>）</li></ol><h3 id="角色和节点分配"><a href="#角色和节点分配" class="headerlink" title="角色和节点分配"></a>角色和节点分配</h3><p>角色分配如下：</p><ol><li>node1:Namenode、Datanode、ResourceManager、NodeManager、HistoryServer、WebProxyServer、QuorumPeerMain</li><li>node2:Datanode、NodeManager、QuorumPeerMain</li><li>node3:Datanode、NodeManager、QuorumPeerMain</li></ol><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026202935.png" alt="image-20221026202935745"></p><h2 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h2><h3 id="调整虚拟机内存"><a href="#调整虚拟机内存" class="headerlink" title="调整虚拟机内存"></a>调整虚拟机内存</h3><p>如上图，可以看出node1承载了太多的压力。同时node2和node3也同时运行了不少程序</p><p>为了确保集群的稳定，需要对虚拟机进行内存设置。</p><p>请在VMware中，对：</p><ol><li>node1设置4GB或以上内存</li><li>node2和node3设置2GB或以上内存</li></ol><blockquote><p>大数据的软件本身就是集群化（一堆服务器）一起运行的。</p><p>现在我们在一台电脑中以多台虚拟机来模拟集群，确实会有很大的内存压力哦。</p></blockquote><h3 id="Zookeeper集群部署"><a href="#Zookeeper集群部署" class="headerlink" title="Zookeeper集群部署"></a>Zookeeper集群部署</h3><p>略</p><h3 id="Hadoop集群部署"><a href="#Hadoop集群部署" class="headerlink" title="Hadoop集群部署"></a>Hadoop集群部署</h3><ol><li><p>下载Hadoop安装包、解压、配置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 解压</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请确保目录/export/server存在</span></span><br><span class="line">tar -zxvf hadoop-3.3.0.tar.gz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 构建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：<code>hadoop-env.sh</code></p><blockquote><p>Hadoop的配置文件要修改的地方很多，请细心</p></blockquote><p>cd 进入到/export/server/hadoop/etc/hadoop，文件夹中，配置文件都在这里</p><p>修改hadoop-env.sh文件</p><blockquote><p>此文件是配置一些Hadoop用到的环境变量</p><p>这些是临时变量，在Hadoop运行时有用</p><p>如果要永久生效，需要写到/etc/profile中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件开头加入：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Java安装路径</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Hadoop安装路径</span></span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs配置文件路径</span></span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN配置文件路径</span></span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN 日志文件夹</span></span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs 日志文件夹</span></span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop的使用启动用户配置</span></span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br><span class="line">export YARN_PROXYSERVER_USER=root</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：<code>core-site.xml</code></p><p>如下，清空文件，填入如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>hdfs-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir.perm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>700<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where the NameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1,node2,node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>List of permitted DataNodes.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>268435456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.handler.count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/dn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>mapred-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_JOB_HISTORYSERVER_HEAPSIZE=1000</span><br><span class="line">export HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA</span><br></pre></td></tr></table></figure></li><li><p>配置：<code>mapred-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/done<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>yarn-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br></pre></td></tr></table></figure></li><li><p>配置：<code>yarn-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.web-proxy.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:8089<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>proxy server hostname and port<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where intermediate data is written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where logs are written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Default time (in seconds) to retain log files on the NodeManager Only applicable if log-aggregation is disabled.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Shuffle service that needs to be set for Map Reduce applications.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改workers文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全部内容如下</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>分发hadoop到其它机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行</span></span><br><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br></pre></td></tr></table></figure></li><li><p>在node2、node3执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure></li><li><p>创建所需目录</p><ul><li><p>在node1执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nn</span><br><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li><li><p>在node2执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li><li><p>在node3执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置环境变量</p><p>在node1、node2、node3修改/etc/profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure><p>执行<code>source /etc/profile</code>生效</p></li><li><p>格式化NameNode，在node1执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><blockquote><p>hadoop这个命令来自于：$HADOOP_HOME/bin中的程序</p><p>由于配置了环境变量PATH，所以可以在任意位置执行hadoop命令哦</p></blockquote></li><li><p>启动hadoop的hdfs集群，在node1执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure><blockquote><p>start-dfs.sh这个命令来自于：$HADOOP_HOME/sbin中的程序</p><p>由于配置了环境变量PATH，所以可以在任意位置执行start-dfs.sh命令哦</p></blockquote></li><li><p>启动hadoop的yarn集群，在node1执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-yarn.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-yarn.sh</span><br></pre></td></tr></table></figure></li><li><p>启动历史服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mapred --daemon start historyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure></li><li><p>启动web代理服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn-daemon.sh start proxyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="验证Hadoop集群运行情况"><a href="#验证Hadoop集群运行情况" class="headerlink" title="验证Hadoop集群运行情况"></a>验证Hadoop集群运行情况</h4><ol><li><p>在node1、node2、node3上通过jps验证进程是否都启动成功</p></li><li><p>验证HDFS，浏览器打开：<a href="http://node1:9870">http://node1:9870</a></p><p>创建文件test.txt，随意填入内容，并执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put test.txt /test.txt</span><br><span class="line"></span><br><span class="line">hadoop fs -cat /test.txt</span><br></pre></td></tr></table></figure></li><li><p>验证YARN，浏览器打开：<a href="http://node1:8088">http://node1:8088</a></p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件words.txt，填入如下内容</span></span><br><span class="line">itheima itcast hadoop</span><br><span class="line">itheima hadoop hadoop</span><br><span class="line">itheima itcast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件上传到HDFS中</span></span><br><span class="line">hadoop fs -put words.txt /words.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令验证YARN是否正常</span></span><br><span class="line">hadoop jar /export/server/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.0.jar wordcount -Dmapred.job.queue.name=root.root /words.txt /output</span><br></pre></td></tr></table></figure></li></ol><h1 id="大数据NoSQL数据库HBase集群部署"><a href="#大数据NoSQL数据库HBase集群部署" class="headerlink" title="大数据NoSQL数据库HBase集群部署"></a>大数据NoSQL数据库HBase集群部署</h1><h2 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h2><p>HBase 是一种<a href="https://so.csdn.net/so/search?q=分布式&amp;spm=1001.2101.3001.7020">分布式</a>、可扩展、支持海量数据存储的 NoSQL 数据库。</p><p>和Redis一样，HBase是一款KeyValue型存储的数据库。</p><p>不过和Redis设计方向不同</p><ul><li>Redis设计为少量数据，超快检索</li><li>HBase设计为海量数据，快速检索</li></ul><p>HBase在大数据领域应用十分广泛，现在我们来在node1、node2、node3上部署HBase集群。</p><h2 id="安装-12"><a href="#安装-12" class="headerlink" title="安装"></a>安装</h2><ol><li><p>HBase依赖Zookeeper、JDK、Hadoop（HDFS），请确保已经完成前面</p><ul><li>集群化软件前置准备（JDK）</li><li>Zookeeper</li><li>Hadoop</li><li>这些环节的软件安装</li></ul></li><li><p>【node1执行】下载HBase安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hbase/2.1.0/hbase-2.1.0-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf hbase-2.1.0-bin.tar.gz -C /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/hbase-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在28行配置JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在126行配置：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">意思表示，不使用HBase自带的Zookeeper，而是用独立Zookeeper</span></span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在任意行，比如26行，添加如下内容：</span></span><br><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/hbase-site.xml</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件的全部内容替换成如下内容：</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;!-- HBase数据在HDFS中的存放的路径 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;hdfs://node1:8020/hbase&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- Hbase的运行模式。false是单机模式，true是分布式模式。若为false,Hbase和Zookeeper会运行在同一个JVM里面 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ZooKeeper的地址 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;node1,node2,node3&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ZooKeeper快照的存储位置 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;/export/server/apache-zookeeper-3.6.0-bin/data&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--  V2.1版本，在分布式情况下, 设置为false --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/regionservers</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，分发hbase到其它机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /export/server/hbase-2.1.0 node2:/export/server/</span><br><span class="line">scp -r /export/server/hbase-2.1.0 node3:/export/server/</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3执行】，配置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure></li><li><p>【node1、node2、node3执行】，配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置在/etc/profile内，追加如下两行</span></span><br><span class="line">export HBASE_HOME=/export/server/hbase</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】启动HBase</p><blockquote><p>请确保：Hadoop HDFS、Zookeeper是已经启动了的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可使用</span></span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure><blockquote><p>由于我们配置了环境变量export PATH=$PATH:$HBASE_HOME/bin</p><p>start-hbase.sh即在$HBASE_HOME/bin内，所以可以无论当前目录在哪，均可直接执行</p></blockquote></li><li><p>验证HBase</p><p>浏览器打开：<a href="http://node1:16010，即可看到HBase的WEB">http://node1:16010，即可看到HBase的WEB</a> UI页面</p></li><li><p>简单测试使用HBase</p><p>【node1执行】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建表</span></span><br><span class="line">create &#x27;test&#x27;, &#x27;cf&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插入数据</span></span><br><span class="line">put &#x27;test&#x27;, &#x27;rk001&#x27;, &#x27;cf:info&#x27;, &#x27;itheima&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询数据</span></span><br><span class="line">get &#x27;test&#x27;, &#x27;rk001&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫描表数据</span></span><br><span class="line">scan &#x27;test&#x27;</span><br></pre></td></tr></table></figure></li></ol><h1 id="分布式内存计算Spark环境部署"><a href="#分布式内存计算Spark环境部署" class="headerlink" title="分布式内存计算Spark环境部署"></a>分布式内存计算Spark环境部署</h1><h2 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h2><p>本小节的操作，基于：<code>大数据集群（Hadoop生态）安装部署</code>环节中所构建的Hadoop集群</p><p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p><h2 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h2><p>Spark是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p><p>Spark在大数据体系是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p><p>在大数据领域广泛应用，是目前世界上使用最多的大数据分布式计算引擎。</p><p>我们将基于前面构建的Hadoop集群，部署Spark Standalone集群。</p><h2 id="安装-13"><a href="#安装-13" class="headerlink" title="安装"></a>安装</h2><ol><li><p>【node1执行】下载并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf spark-2.4.5-bin-hadoop2.7.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改名</span></span><br><span class="line">cd /export/server/spark/conf</span><br><span class="line">mv spark-env.sh.template spark-env.sh</span><br><span class="line">mv slaves.template slaves</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件，<code>spark-env.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置JAVA安装目录</span></span></span><br><span class="line">JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</span></span></span><br><span class="line">HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line">YARN_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定spark老大Master的IP和提交任务的通信端口</span></span></span><br><span class="line">export SPARK_MASTER_HOST=node1</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line"></span><br><span class="line">SPARK_MASTER_WEBUI_PORT=8080</span><br><span class="line">SPARK_WORKER_CORES=1</span><br><span class="line">SPARK_WORKER_MEMORY=1g</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件，<code>slaves</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】分发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node2:$PWD</span><br><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node3:$PWD</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3执行】设置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】启动Spark集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/export/server/spark/sbin/start-all.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止，可以</span></span><br><span class="line">/export/server/spark/sbin/stop-all.sh</span><br></pre></td></tr></table></figure></li><li><p>打开Spark监控页面，浏览器打开：<a href="http://node1:8081">http://node1:8081</a></p></li><li><p>【node1执行】提交测试任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/spark/bin/spark-submit --master spark://node1:7077 --class org.apache.spark.examples.SparkPi /export/server/spark/examples/jars/spark-examples_2.11-2.4.5.jar</span><br></pre></td></tr></table></figure></li></ol><h1 id="分布式内存计算Flink环境部署"><a href="#分布式内存计算Flink环境部署" class="headerlink" title="分布式内存计算Flink环境部署"></a>分布式内存计算Flink环境部署</h1><h2 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h2><p>本小节的操作，基于：<code>大数据集群（Hadoop生态）安装部署</code>环节中所构建的Hadoop集群</p><p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p><h2 id="简介-12"><a href="#简介-12" class="headerlink" title="简介"></a>简介</h2><p>Flink同Spark一样，是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p><p>Flink在大数据体系同样是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p><p>在大数据领域广泛应用，是目前世界上除去Spark以外，应用最为广泛的分布式计算引擎。</p><p>我们将基于前面构建的Hadoop集群，部署Flink Standalone集群</p><p>Spark更加偏向于离线计算而Flink更加偏向于实时计算。</p><h2 id="安装-14"><a href="#安装-14" class="headerlink" title="安装"></a>安装</h2><ol><li><p>【node1操作】下载安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/flink/flink-1.10.0/flink-1.10.0-bin-scala_2.11.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf flink-1.10.0-bin-scala_2.11.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】修改配置文件，<code>conf/flink-conf.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jobManager 的IP地址</span></span><br><span class="line"><span class="attr">jobmanager.rpc.address:</span> <span class="string">node1</span></span><br><span class="line"><span class="comment"># JobManager 的端口号</span></span><br><span class="line"><span class="attr">jobmanager.rpc.port:</span> <span class="number">6123</span></span><br><span class="line"><span class="comment"># JobManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">jobmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"><span class="comment"># TaskManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">taskmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"><span class="comment"># 每个 TaskManager 提供的任务 slots 数量大小</span></span><br><span class="line"><span class="attr">taskmanager.numberOfTaskSlots:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#是否进行预分配内存，默认不进行预分配，这样在我们不使用flink集群时候不会占用集群资源</span></span><br><span class="line"><span class="attr">taskmanager.memory.preallocate:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 程序默认并行计算的个数</span></span><br><span class="line"><span class="attr">parallelism.default:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#JobManager的Web界面的端口（默认：8081）</span></span><br><span class="line"><span class="attr">jobmanager.web.port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></li><li><p>【node1操作】，修改配置文件，<code>conf/slaves</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】分发Flink安装包到其它机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line">scp -r flink-1.10.0 node2:`pwd`/</span><br><span class="line">scp -r flink-1.10.0 node3:`pwd`/</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】，启动Flink</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/flink/bin/start-cluster.sh</span><br></pre></td></tr></table></figure></li><li><p>验证Flink启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器打开</span></span><br><span class="line">http://node1:8081</span><br></pre></td></tr></table></figure></li><li><p>提交测试任务</p><p>【node1执行】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/flink/bin/flink run /export/server/flink-1.10.0/examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure></li></ol><h1 id="运维监控Zabbix部署"><a href="#运维监控Zabbix部署" class="headerlink" title="运维监控Zabbix部署"></a>运维监控Zabbix部署</h1><h2 id="简介-13"><a href="#简介-13" class="headerlink" title="简介"></a>简介</h2><p>Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。</p><p>Zabbix 是一个==企业级分布式开源监控解决方案==。</p><p>Zabbix 软件能够==监控==众多网络参数和服务器的==健康度、完整性==。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</p><h2 id="安装-15"><a href="#安装-15" class="headerlink" title="安装"></a>安装</h2><blockquote><p> 安装整体步骤:</p></blockquote><ol><li>准备Linux 服务器(虚拟机)</li><li>安装Mysql</li><li>安装zabbix( 包含 server  agent  web)</li><li>配置 mysql, 为zabbix创建表结构</li><li>配置zabbix server</li><li>启动并开启开机自启动</li></ol><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175324.png" alt="1574338996145"></p><h3 id="安装前准备-Mysql"><a href="#安装前准备-Mysql" class="headerlink" title="安装前准备 - Mysql"></a>安装前准备 - Mysql</h3><p>安装ZabbixServer需要先安装好<code>Mysql</code>数据库</p><p>课程使用<code>Mysql 5.7</code></p><p>安装步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Mysql设置开机启动</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查Mysql服务状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次启动mysql，会在日志文件中生成root用户的一个随机密码，使用下面命令查看该密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改root用户密码</span></span><br><span class="line">mysql -u root -p -h localhost</span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Root!@#$&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你想设置简单密码，需要降低Mysql的密码安全级别</span></span><br><span class="line">set global validate_password_policy=LOW; # 密码安全级别低</span><br><span class="line">set global validate_password_length=4; # 密码长度最低4位即可</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;root&#x27;</span>;</span></span><br></pre></td></tr></table></figure><h3 id="安装Zabbix-Server-和-Zabbix-Agent"><a href="#安装Zabbix-Server-和-Zabbix-Agent" class="headerlink" title="安装Zabbix Server 和 Zabbix Agent"></a>安装Zabbix Server 和 Zabbix Agent</h3><blockquote><p>初始安装，我们先安装ZabbixServer以及在Server本机安装Agent。</p></blockquote><p>打开官网下载页面：<a href="https://www.zabbix.com/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql">https://www.zabbix.com/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql</a></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175330.png" alt="1571981197131"></p><p>选择对应的版本，然后再下面官网给出了具体的安装命令，使用<code>rpm</code>和<code>yum</code>来进行安装。</p><p>需要有网络。</p><p><code>以下内容来自官方页面</code></p><h4 id="a-安装Zabbix-yum库"><a href="#a-安装Zabbix-yum库" class="headerlink" title="a. 安装Zabbix yum库"></a>a. 安装Zabbix yum库</h4><p><a href="https://www.zabbix.com/documentation/4.0/manual/installation/install_from_packages">documentation</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure><h4 id="b-安装Zabbix-Server、前端、Agent"><a href="#b-安装Zabbix-Server、前端、Agent" class="headerlink" title="b. 安装Zabbix Server、前端、Agent"></a>b. 安装Zabbix Server、前端、Agent</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只需要安装Agent的话</span></span><br><span class="line">yum -y install zabbix-agent</span><br></pre></td></tr></table></figure><h4 id="c-初始化Mysql数据库"><a href="#c-初始化Mysql数据库" class="headerlink" title="c. 初始化Mysql数据库"></a>c. 初始化Mysql数据库</h4><p><a href="https://www.zabbix.com/documentation/4.0/manual/appendix/install/db_scripts">documentation</a></p><blockquote><p>在Mysql中操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录Mysql 数据库</span></span><br><span class="line">mysql -uroot -pYourPassword</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者: grant all privileges on zabbix.* to zabbix@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit;</span></span><br></pre></td></tr></table></figure><p>测试在Zabbix Server服务器上能否远程登录Mysql，如果可以登录继续向下走。</p><p>Import initial schema and data. You will be prompted to enter your newly created password.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span></span><br></pre></td></tr></table></figure><h4 id="d-为Zabbix-Server配置数据库"><a href="#d-为Zabbix-Server配置数据库" class="headerlink" title="d. 为Zabbix Server配置数据库"></a>d. 为Zabbix Server配置数据库</h4><p>Edit file /etc/zabbix/zabbix_server.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DBPassword=password</span><br><span class="line">DBHost=mysql-host-ip-or-hostname</span><br></pre></td></tr></table></figure><h4 id="e-配置Zabbix的PHP前端"><a href="#e-配置Zabbix的PHP前端" class="headerlink" title="e. 配置Zabbix的PHP前端"></a>e. 配置Zabbix的PHP前端</h4><p>Edit file <code>/etc/httpd/conf.d/zabbix.conf</code>, uncomment and set the right timezone for you.<code># php_value date.timezone Asia/Shanghai</code></p><p>Start Zabbix server and agent processes and make it start at system boot:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent httpd # 启动、重启</span><br><span class="line">systemctl enable zabbix-server zabbix-agent httpd  # 开机自启</span><br></pre></td></tr></table></figure><p>Now your Zabbix server is up and running!</p><h3 id="配置zabbix-前端（WEB-UI）"><a href="#配置zabbix-前端（WEB-UI）" class="headerlink" title="配置zabbix 前端（WEB UI）"></a>配置zabbix 前端（WEB UI）</h3><p><strong>打开:<code>http://192.168.88.131/zabbix</code></strong></p><p>即可进入Zabbix页面，在首次打开的时候，会进入设置页面，如图：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175338.png" alt="1571993951841"></p><p><strong>点击下一步，会检查相应的设置是否都正常</strong></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175341.png" alt="1571994018126"></p><p>如果一切正常，点击下一步。</p><p><strong>配置DB连接</strong></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175344.png" alt="1571994069689"></p><p>按具体情况填写即可</p><p><strong>配置Server细节</strong></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175347.png" alt="1571994111921"></p><p>具体配置即可，Name表示这个Zabbix服务的名字，这里起名叫<code>ITHEIMA-TEST</code></p><p><strong>安装前总结预览</strong></p><p>检查确认没有问题就下一步</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175349.png" alt="1571994206902"></p><p><strong>配置完成</strong></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175351.png" alt="1571994221531"></p><p><strong>初始管理员账户Admin密码zabbix</strong></p><p>输入账户密码后，就能进入zabbix页面了。</p><p>如下图：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175354.png" alt="1571994287036"></p><p>现在是一个崭新的zabbix等待我们去探索。</p><h1 id="运维监控Grafana部署"><a href="#运维监控Grafana部署" class="headerlink" title="运维监控Grafana部署"></a>运维监控Grafana部署</h1><h2 id="简介-14"><a href="#简介-14" class="headerlink" title="简介"></a>简介</h2><h2 id="安装-16"><a href="#安装-16" class="headerlink" title="安装"></a>安装</h2><h3 id="部署形式"><a href="#部署形式" class="headerlink" title="部署形式"></a>部署形式</h3><p><code>Grafana</code>支持两种部署形式</p><ol><li>自行部署, 可以部署在操作系统之上. 自行提供服务器, 域名等.</li><li><code>Grafana</code>官方托管. 无需安装, 在线注册即可得到一个专属于自己的<code>Grafana</code>, 但是要花钱的. 是一种<code>SaaS</code>服务</li></ol><p>我们课程选择方式1</p><h3 id="安装-17"><a href="#安装-17" class="headerlink" title="安装"></a>安装</h3><p><code>Grafana</code>支持常见的绝大多数操作系统, 如<code>windows</code> <code>mac</code> <code>linux</code> 同时也支持部署在<code>docker</code>中.</p><p>大多数情况下, <code>Grafana</code>都是部署在<code>linux</code>服务器之上. 所以本课程也是基于<code>Linux</code>系统来讲解.</p><p>对<code>windows</code> <code>mac</code>系统 或 <code>docker</code>部署有兴趣的同学, 请参考:  <a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></p><p>我们部署<code>Grafana</code>可以使用<code>YUM</code>来进行部署.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件</span></span><br><span class="line">vim /etc/yum.repos.d/grafana.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下面的内容复制进去</span></span><br><span class="line">[grafana]</span><br><span class="line">name=grafana</span><br><span class="line">baseurl=https://packages.grafana.com/oss/rpm</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.grafana.com/gpg.key</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后安装</span></span><br><span class="line">yum install grafana</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p><code>grafana-server</code>具有许多配置选项，这些选项可以在<code>.ini</code>配置文件中指定，也可以使用环境变量指定。</p><blockquote><p> <strong>Note.</strong> <code>Grafana</code> needs to be restarted for any configuration changes to take effect. </p></blockquote><h4 id="配置文件注释"><a href="#配置文件注释" class="headerlink" title="配置文件注释"></a>配置文件注释</h4><p><code>;</code>符号在<code>.ini</code>文件中全局表示注释 ()</p><h4 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h4><p>如果是自己解压安装, 或者自行编译的方式安装, 配置文件在:</p><ul><li>默认: <code>$WORKING_DIR/conf/defaults.ini</code></li><li>自定义:<code>$WORKING_DIR/conf/custom.ini</code></li><li>自定义配置文件路径可以被参数<code>--config</code>覆盖</li></ul><blockquote><p>对于<code>YUM</code> <code>RPM</code> 安装的方式, 配置文件在: <code>/etc/grafana/grafana.ini</code></p></blockquote><h4 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h4><p>可以使用以下语法使用环境变量来覆盖配置文件中的所有选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GF_&lt;SectionName&gt;_&lt;KeyName&gt;</span><br></pre></td></tr></table></figure><p>其中<code>SectionName</code>是方括号内的文本。一切都应为大写，<code>.</code>应替换为<code>_</code> 例如，给定以下配置设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default section</span></span><br><span class="line">instance_name = <span class="variable">$&#123;HOSTNAME&#125;</span></span><br><span class="line"></span><br><span class="line">[security]</span><br><span class="line">admin_user = admin</span><br><span class="line"></span><br><span class="line">[auth.google]</span><br><span class="line">client_secret = 0ldS3cretKey</span><br></pre></td></tr></table></figure><p>Then you can override them using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GF_DEFAULT_INSTANCE_NAME=my-instance</span><br><span class="line"><span class="built_in">export</span> GF_SECURITY_ADMIN_USER=<span class="literal">true</span><span class="comment"># GF_ 固定 SECURITY 是SectionName ADMIN_USER 是配置的key 转大写 . 转 _</span></span><br><span class="line"><span class="built_in">export</span> GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey</span><br></pre></td></tr></table></figure><h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><p><code>Grafana</code>支持使用<code>Sqlite3</code> <code>Postgresql</code> <code>Mysql</code>这三种数据库作为其<code>元数据</code>的存储.</p><p>我们课程使用<code>Mysql</code>. 和<code>zabbix</code>的元数据mysql共用一个实例</p><p>只需要配置如下内容即可:</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175713.png" alt="1573635500521"></p><p>并登陆mysql, 执行:</p><p><code>create database grafana CHARACTER SET utf8 COLLATE utf8_general_ci;</code></p><p>创建<code>Grafana</code>使用的数据库作为元数据存储.</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start grafana-server</span><br><span class="line">systemctl <span class="built_in">enable</span> grafana-server</span><br></pre></td></tr></table></figure><p>浏览器打开：<a href="http://node1:3000">http://node1:3000</a></p><p>默认账户密码：admin/admin</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>/home/itheima/a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，==非==<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，==以==<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前，比如./a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test/，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符<em>， 比如：`</em>`test表示搜索任意以test结尾的文件</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h2 id="反引号"><a href="#反引号" class="headerlink" title="`反引号"></a>`反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027215841.png" alt="image-20221027215841573"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220010.png" alt="image-20221027220009949"></p><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221149.png" alt="image-20221027221148964">`</p><p>-O 指定文件下载后本地的存储路径</p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221201.png" alt="image-20221027221201079"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221440.png" alt="image-20221027221439990"></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>临时设置：export 变量名=变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027221939.png" alt="image-20221027221939899"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222157.png" alt="image-20221027222157276"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222446.png" alt="image-20221027222446514"></p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="/2023/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、会员基础功能实现</title>
      <link href="/2023/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/06%2012306%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%91%98%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/06%2012306%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%91%98%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="12306会员基础功能实现"><a href="#12306会员基础功能实现" class="headerlink" title="12306会员基础功能实现"></a>12306会员基础功能实现</h1><p>主要目的：完成前后端，单表增删改查功能的开发</p><h2 id="乘车人-数据库表的设计"><a href="#乘车人-数据库表的设计" class="headerlink" title="乘车人 数据库表的设计"></a>乘车人 数据库表的设计</h2><h3 id="乘客表的设计"><a href="#乘客表的设计" class="headerlink" title="乘客表的设计"></a>乘客表的设计</h3><p><code>member</code>表代表系统登录用户的信息，对于乘车系统，同一个用户不仅可以为自己，也可以为其他人购买车票</p><p>所以设计一张新表<code>passenger</code>表示对应乘客信息，与车票对应</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `passenger` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `member_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;会员id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `id_card` <span class="type">varchar</span>(<span class="number">18</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;身份证&#x27;</span>,</span><br><span class="line">  `type` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;旅客类型|枚举[PassengerTypeEnum]&#x27;</span>,</span><br><span class="line">  `create_time` datetime(<span class="number">3</span>) comment <span class="string">&#x27;新增时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime(<span class="number">3</span>) comment <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (`id`),</span><br><span class="line">  index `member_id_index` (`member_id`)</span><br><span class="line">) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4 comment<span class="operator">=</span><span class="string">&#x27;乘车人&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="利用Mybatis生成器生成乘车人表对应持久层代码"><a href="#利用Mybatis生成器生成乘车人表对应持久层代码" class="headerlink" title="利用Mybatis生成器生成乘车人表对应持久层代码"></a>利用Mybatis生成器生成乘车人表对应持久层代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;Mysql&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--覆盖生成XML文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的实体类添加toString()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不生成注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据源，需要根据自己的项目修改 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/train_member?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;train_member&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;wu123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- domain类的位置 targetProject是相对pom.xml的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.domain&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper xml的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/resources&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper类的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;table tableName=&quot;member&quot; domainObjectName=&quot;Member&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;passenger&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Passenger&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;table tableName=&quot;ticket&quot; domainObjectName=&quot;Ticket&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="乘客类型枚举类的设计"><a href="#乘客类型枚举类的设计" class="headerlink" title="乘客类型枚举类的设计"></a>乘客类型枚举类的设计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PassengerTypeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    ADULT(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;成人&quot;</span>),</span><br><span class="line">    CHILD(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;儿童&quot;</span>),</span><br><span class="line">    STUDENT(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;学生&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    PassengerTypeEnum(String code, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;HashMap&lt;String,String&gt;&gt; <span class="title function_">getEnumList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;HashMap&lt;String, String&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (PassengerTypeEnum anEnum : EnumSet.allOf(PassengerTypeEnum.class)) &#123;</span><br><span class="line">            HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>,anEnum.code);</span><br><span class="line">            map.put(<span class="string">&quot;desc&quot;</span>,anEnum.desc);</span><br><span class="line">            list.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增乘车人接口设计"><a href="#新增乘车人接口设计" class="headerlink" title="新增乘车人接口设计"></a>新增乘车人接口设计</h2><h3 id="设计接口请求类"><a href="#设计接口请求类" class="headerlink" title="设计接口请求类"></a>设计接口请求类</h3><p>请求实体类与数据库对应的Po实体类一致，并利用Validation进行参数校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增乘车人接口对应请求实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerSaveReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//@NotBlank不能用来修饰long类型数据</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;【会员ID】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【乘客姓名】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【乘客身份证号】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【乘客类型】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务层代码"><a href="#服务层代码" class="headerlink" title="服务层代码"></a>服务层代码</h3><p>新增<code>IPassengerService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPassengerService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增<code>PassengerServiceImpl</code>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IPassengerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PassengerMapper passengerMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span> &#123;</span><br><span class="line">        <span class="comment">//1.将请求类转换为po对象</span></span><br><span class="line">        <span class="type">Passenger</span> <span class="variable">savePassenger</span> <span class="operator">=</span> BeanUtil.copyProperties(passenger, Passenger.class);</span><br><span class="line">        <span class="comment">//2.设置相关字段</span></span><br><span class="line">        <span class="comment">//乘车人ID，以及记录创建时间和更新时间,ID利用雪花算法生成</span></span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line">        savePassenger.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">        savePassenger.setCreateTime(now);</span><br><span class="line">        savePassenger.setUpdateTime(now);</span><br><span class="line">        <span class="comment">//3.存入数据库</span></span><br><span class="line">        passengerMapper.insert(savePassenger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层代码"><a href="#控制层代码" class="headerlink" title="控制层代码"></a>控制层代码</h3><p>新增<code>PassengerController</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/passenger&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IPassengerService passengerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> PassengerSaveReq req)</span>&#123;</span><br><span class="line">        passengerService.save(req);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpClient测试"><a href="#HttpClient测试" class="headerlink" title="HttpClient测试"></a>HttpClient测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">###新增乘车人</span><br><span class="line">POST http://localhost:8001/member/passenger/save</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;memberId&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;张飞&quot;,</span><br><span class="line">  &quot;idCard&quot;: &quot;33456789&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用HttpClient保存登录用户信息"><a href="#使用HttpClient保存登录用户信息" class="headerlink" title="使用HttpClient保存登录用户信息"></a>使用HttpClient保存登录用户信息</h2><p>在进行网关<code>gateway</code>请求时，由于有<code>JWT</code>登录校验过滤器，所以其他接口测试时，若请求头不带上<code>token</code>字段，则会被拦截</p><p>可以在HttpClient中，登录请求之后，为整个文件中所有其他请求的请求头加上<code>token</code>字段</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">###登录</span><br><span class="line">POST http://localhost:8000/member/member/login</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;mobile&quot;:&quot;12345678908&quot;,</span><br><span class="line">  &quot;code&quot;:&quot;8888&quot;</span><br><span class="line">&#125;</span><br><span class="line">//以下语句将token数据进行全局缓存</span><br><span class="line">&gt; &#123;%</span><br><span class="line">  client.log(JSON.stringify(response.body));</span><br><span class="line">  client.log(JSON.stringify(response.body.content.token));</span><br><span class="line">  client.global.set(&quot;token&quot;,response.body.content.token)</span><br><span class="line">%&#125;</span><br></pre></td></tr></table></figure><p>在其他http请求中可以直接通过<code>&#123;&#123;token&#125;&#125;</code>引用缓存中的token`值</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">###其他测试</span><br><span class="line">GET http://localhost:8000/member/member/count</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br><span class="line"></span><br><span class="line">###新增乘车人</span><br><span class="line">POST http://localhost:8000/member/passenger/save</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;memberId&quot;: 1,</span><br><span class="line">  &quot;name&quot;: &quot;张飞&quot;,</span><br><span class="line">  &quot;idCard&quot;: &quot;33456789&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用线程本地变量存储会员信息"><a href="#使用线程本地变量存储会员信息" class="headerlink" title="使用线程本地变量存储会员信息"></a>使用线程本地变量存储会员信息</h2><p><strong>背景:</strong>新增乘车人记录时，实体类里面有个属性是当前登录的会员ID，如何将当前登录用户的信息保存在本地？</p><p><strong>方案</strong>：在接口入口处获取会员信息，并放在线程本地变量，则在controller、service中都可以直接从线程本地变量获取会员信息</p><p><strong>考点</strong>：此处可能面试会涉及到<code>ThreadLocal</code>线程本地变量的概念和理解</p><h3 id="ThreadLocal存储登录会员信息"><a href="#ThreadLocal存储登录会员信息" class="headerlink" title="ThreadLocal存储登录会员信息"></a>ThreadLocal存储登录会员信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginMemberContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LoginMemberContext.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;MemberLoginResp&gt; member = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MemberLoginResp <span class="title function_">getMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> member.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setMember</span><span class="params">(MemberLoginResp member)</span> &#123;</span><br><span class="line">        LoginMemberContext.member.set(member);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//memberId频繁使用，单独抽象成一个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> member.get().getId();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;获取登录会员信息异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC过滤器将会员信息存入线程本地变量"><a href="#SpringMVC过滤器将会员信息存入线程本地变量" class="headerlink" title="SpringMVC过滤器将会员信息存入线程本地变量"></a>SpringMVC过滤器将会员信息存入线程本地变量</h3><p>请求通过网关过滤器之后，经过网关路由，进入其他微服务时，其他微服务内部应该将JWT解析得到payloads，获取当前登录会员信息，并存储到对应的线程本地变量中，以便后续代码逻辑使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器：Spring框架特有的，常用于登录校验，权限校验，请求日志打印</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(MemberInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;MemberInterceptor开始&quot;</span>);</span><br><span class="line">        <span class="comment">//获取header的token参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(token)) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;获取会员登录token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">loginMember</span> <span class="operator">=</span> JwtUtil.getJSONObject(token);</span><br><span class="line">            LOG.info(<span class="string">&quot;当前登录会员：&#123;&#125;&quot;</span>, loginMember);</span><br><span class="line">            <span class="type">MemberLoginResp</span> <span class="variable">member</span> <span class="operator">=</span> JSONUtil.toBean(loginMember, MemberLoginResp.class);</span><br><span class="line">            <span class="comment">//会员信息存储在线程本地变量</span></span><br><span class="line">            LoginMemberContext.setMember(member);</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">&quot;MemberInterceptor结束&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC注册对应过滤器"><a href="#SpringMVC注册对应过滤器" class="headerlink" title="SpringMVC注册对应过滤器"></a>SpringMVC注册对应过滤器</h3><p>在<code>member</code>模块下编写<code>SpringMVC</code>的配置类，配置登录拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Resource</span></span><br><span class="line">   MemberInterceptor memberInterceptor;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 路径不要包含context-path,添加白名单</span></span><br><span class="line">       registry.addInterceptor(memberInterceptor)</span><br><span class="line">               .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">               .excludePathPatterns(</span><br><span class="line">                       <span class="string">&quot;/hello&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/member/send-code&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/member/login&quot;</span></span><br><span class="line">               );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改新增乘客服务层方法"><a href="#修改新增乘客服务层方法" class="headerlink" title="修改新增乘客服务层方法"></a>修改新增乘客服务层方法</h3><p><code>memeberID</code>此时无需从前端传入，直接从线程本地变量读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span> &#123;</span><br><span class="line">    <span class="comment">//1.将请求类转换为po对象</span></span><br><span class="line">    <span class="type">Passenger</span> <span class="variable">savePassenger</span> <span class="operator">=</span> BeanUtil.copyProperties(passenger, Passenger.class);</span><br><span class="line">    <span class="comment">//2.会员ID通过线程本地变量获取</span></span><br><span class="line">    savePassenger.setMemberId(LoginMemberContext.getId());</span><br><span class="line">    <span class="comment">//3.设置相关字段</span></span><br><span class="line">    <span class="comment">//乘车人ID，以及记录创建时间和更新时间,ID利用雪花算法生成</span></span><br><span class="line">    <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line">    savePassenger.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">    savePassenger.setCreateTime(now);</span><br><span class="line">    savePassenger.setUpdateTime(now);</span><br><span class="line">    <span class="comment">//4.存入数据库</span></span><br><span class="line">    passengerMapper.insert(savePassenger);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘车人列表查询后端接口"><a href="#乘车人列表查询后端接口" class="headerlink" title="乘车人列表查询后端接口"></a>乘车人列表查询后端接口</h2><h3 id="新增查询请求参数对应实体类"><a href="#新增查询请求参数对应实体类" class="headerlink" title="新增查询请求参数对应实体类"></a>新增查询请求参数对应实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定会员对应的乘车人列表请求实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增响应结果对应实体类"><a href="#新增响应结果对应实体类" class="headerlink" title="新增响应结果对应实体类"></a>新增响应结果对应实体类</h3><p>对于规范而言，domain中的po对象一般最好只在持久层使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryResp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询乘车人列表服务层开发"><a href="#查询乘车人列表服务层开发" class="headerlink" title="查询乘车人列表服务层开发"></a>查询乘车人列表服务层开发</h3><p><code>IPassengerService</code>中新增抽象方法<code>queryList</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span>;</span><br></pre></td></tr></table></figure><p><code>PassengerServiceImpl</code>中新增抽象方法重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//1.条件查询</span></span><br><span class="line">    <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">    PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">        criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">    <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充说明：</strong></p><p>这个位置之所以写的比较复杂，是为了让服务层代码能够更加通用，对于用户界面而言，是查询当前登录用户对应的所有乘车人列表；但是，对于控台管理系统管理员而言，其需要查询所有的乘车人列表</p><h3 id="控制层开发"><a href="#控制层开发" class="headerlink" title="控制层开发"></a>控制层开发</h3><p>前端无需传入任何参数，会员ID通过线程本地变量获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;List&lt;PassengerQueryResp&gt;&gt; <span class="title function_">queryList</span><span class="params">(<span class="meta">@Valid</span> PassengerQueryReq req)</span>&#123;</span><br><span class="line">        req.setMemberId(LoginMemberContext.getId());</span><br><span class="line">        List&lt;PassengerQueryResp&gt; passengerQueryRespList = passengerService.queryList(req);</span><br><span class="line">        CommonResp&lt;List&lt;PassengerQueryResp&gt;&gt; commonResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commonResp.setContent(passengerQueryRespList);</span><br><span class="line">        <span class="keyword">return</span> commonResp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="http测试"><a href="#http测试" class="headerlink" title="http测试"></a>http测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###乘车人列表查询</span><br><span class="line">GET http://localhost:8000/member/passenger/query-list</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis分页插件PageHelper的使用"><a href="#Mybatis分页插件PageHelper的使用" class="headerlink" title="Mybatis分页插件PageHelper的使用"></a>Mybatis分页插件PageHelper的使用</h2><h3 id="引入PageHelper依赖"><a href="#引入PageHelper依赖" class="headerlink" title="引入PageHelper依赖"></a>引入PageHelper依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PageHelper的用法"><a href="#PageHelper的用法" class="headerlink" title="PageHelper的用法"></a>PageHelper的用法</h3><p>在SQL查询语句之前的上一行加上如下语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PageHelper分页</span></span><br><span class="line">PageHelper.startPage(页码,分页大小);</span><br></pre></td></tr></table></figure><h3 id="PassengerService代码变化"><a href="#PassengerService代码变化" class="headerlink" title="PassengerService代码变化"></a>PassengerService代码变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//1.条件查询</span></span><br><span class="line">    <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">    PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">        criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// PageHelper分页</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">    <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集成PageHelper实现后端分页"><a href="#集成PageHelper实现后端分页" class="headerlink" title="集成PageHelper实现后端分页"></a>集成PageHelper实现后端分页</h2><h3 id="分页查询请求实体类的创建"><a href="#分页查询请求实体类的创建" class="headerlink" title="分页查询请求实体类的创建"></a>分页查询请求实体类的创建</h3><p>整个项目中，可能后续会有很多地方会用到分页查询，为了方便扩展，我们将分页参数单独抽象成一个实体类，让其他有分页查询需求的请求对应实体类继承自分页实体类，实现其他查询的分页功能</p><p>在<code>common</code>模块下的<code>com.bang.train.common.req</code>下新建<code>PageReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageReq</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;【页码】不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;【每页条数】不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 100, message = &quot;【每页条数】不能超过100&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乘客请求实体类继承自分页实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定会员对应的乘车人列表请求实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryReq</span> <span class="keyword">extends</span> <span class="title class_">PageReq</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改PassengerServiceImpl"><a href="#修改PassengerServiceImpl" class="headerlink" title="修改PassengerServiceImpl"></a>修改PassengerServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//1.条件查询</span></span><br><span class="line">    <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">    PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">        criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// PageHelper分页</span></span><br><span class="line">    PageHelper.startPage(req.getPage(),req.getSize());</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">    <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写分页查询结果实体类"><a href="#编写分页查询结果实体类" class="headerlink" title="编写分页查询结果实体类"></a>编写分页查询结果实体类</h3><p>实体类应该包含总条数以及当前页数据列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResp</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页的列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PassengerServiceImpl修改"><a href="#PassengerServiceImpl修改" class="headerlink" title="PassengerServiceImpl修改"></a>PassengerServiceImpl修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResp&lt;PassengerQueryResp&gt; <span class="title function_">queryList</span><span class="params">(PassengerQueryReq req)</span> &#123;</span><br><span class="line">        <span class="comment">//1.条件查询</span></span><br><span class="line">        <span class="type">PassengerExample</span> <span class="variable">passengerExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassengerExample</span>();</span><br><span class="line">        PassengerExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> passengerExample.createCriteria();</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtil.isNotNull(req.getMemberId()))&#123;</span><br><span class="line">            criteria.andMemberIdEqualTo(req.getMemberId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.PageHelper分页</span></span><br><span class="line">        PageHelper.startPage(req.getPage(),req.getSize());</span><br><span class="line">        <span class="comment">//3.查询</span></span><br><span class="line">        List&lt;Passenger&gt; passengerList = passengerMapper.selectByExample(passengerExample);</span><br><span class="line">        <span class="comment">//4.获取总页数和总条数</span></span><br><span class="line">        PageInfo&lt;Passenger&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(passengerList);</span><br><span class="line">        LOG.info(<span class="string">&quot;总行数:&#123;&#125;&quot;</span>,pageInfo.getTotal());</span><br><span class="line">        LOG.info(<span class="string">&quot;总页数:&#123;&#125;&quot;</span>,pageInfo.getPages());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.接口数据类型转换</span></span><br><span class="line">        List&lt;PassengerQueryResp&gt; passengerQueryRespList = BeanUtil.copyToList(passengerList, PassengerQueryResp.class);</span><br><span class="line">        <span class="comment">//4.封装成分页查询结果</span></span><br><span class="line">        PageResp&lt;PassengerQueryResp&gt; pageResp = <span class="keyword">new</span> <span class="title class_">PageResp</span>&lt;&gt;();</span><br><span class="line">        pageResp.setTotal(pageInfo.getTotal());</span><br><span class="line">        pageResp.setList(passengerQueryRespList);</span><br><span class="line">        <span class="keyword">return</span> pageResp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="PassengerController修改"><a href="#PassengerController修改" class="headerlink" title="PassengerController修改"></a>PassengerController修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query-list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;PageResp&lt;PassengerQueryResp&gt;&gt; <span class="title function_">queryList</span><span class="params">(<span class="meta">@Valid</span> PassengerQueryReq req)</span>&#123;</span><br><span class="line">    req.setMemberId(LoginMemberContext.getId());</span><br><span class="line">    PageResp&lt;PassengerQueryResp&gt; pageResp = passengerService.queryList(req);</span><br><span class="line">    CommonResp&lt;PageResp&lt;PassengerQueryResp&gt;&gt; commonResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commonResp.setContent(pageResp);</span><br><span class="line">    <span class="keyword">return</span> commonResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http测试-1"><a href="#http测试-1" class="headerlink" title="http测试"></a>http测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###乘车人列表查询</span><br><span class="line">GET http://localhost:8000/member/passenger/query-list?page=1&amp;size=50</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="解决Long精度丢失的问题"><a href="#解决Long精度丢失的问题" class="headerlink" title="解决Long精度丢失的问题"></a>解决Long精度丢失的问题</h2><p>不同的语言，虽然都有int long等类型，但他们的精度不太一样，在数据传递时需要特别注意精度丢失。</p><p>在本项目中乘车查询数据返回给前端时，乘客id和membertId字段的数据精度会丢失</p><p>解决方法：将long传成string</p><p>在相关的返回结果实体类的对应字段上加上如下注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize(using= ToStringSerializer.class)</span></span><br></pre></td></tr></table></figure><p><strong>乘客数据查询结果返回实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassengerQueryResp</span> &#123;</span><br><span class="line">    <span class="comment">//对应字段转换为字符串</span></span><br><span class="line">    <span class="meta">@JsonSerialize(using= ToStringSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@JsonSerialize(using= ToStringSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">//日期格式转换</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘车人编辑接口开发"><a href="#乘车人编辑接口开发" class="headerlink" title="乘车人编辑接口开发"></a>乘车人编辑接口开发</h2><p>乘车人编辑和乘车人新增可以向后端同一个接口进行访问，后端可以共用同一套代码，只是对于乘车人新增而言，前端的请求数据中ID为空，对于编辑而言，前端的请求数据中ID不为空，在服务层可以依据此区别做不同的处理</p><p><code>PassengerServiceImpl</code>中代码的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(PassengerSaveReq passenger)</span> &#123;</span><br><span class="line">    <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.将请求类转换为po对象</span></span><br><span class="line">    <span class="type">Passenger</span> <span class="variable">savePassenger</span> <span class="operator">=</span> BeanUtil.copyProperties(passenger, Passenger.class);</span><br><span class="line">    <span class="comment">//2.会员ID通过线程本地变量获取</span></span><br><span class="line">    savePassenger.setMemberId(LoginMemberContext.getId());</span><br><span class="line">    <span class="comment">//3.设置相关字段</span></span><br><span class="line">    <span class="comment">//4.依据请求参数中ID是否为空，判断时乘车人新增业务还是乘车人编辑业务</span></span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(savePassenger.getId()))&#123;<span class="comment">//新增业务</span></span><br><span class="line">        <span class="comment">//乘车人ID，以及记录创建时间和更新时间,ID利用雪花算法生成</span></span><br><span class="line">        savePassenger.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">        savePassenger.setCreateTime(now);</span><br><span class="line">        savePassenger.setUpdateTime(now);</span><br><span class="line">        <span class="comment">//存入数据库</span></span><br><span class="line">        passengerMapper.insert(savePassenger);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">//编辑业务</span></span><br><span class="line">        <span class="comment">//更新乘车人数据,依据主键进行更新</span></span><br><span class="line">        savePassenger.setUpdateTime(now);</span><br><span class="line">        passengerMapper.updateByPrimaryKey(savePassenger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘车人删除接口开发"><a href="#乘车人删除接口开发" class="headerlink" title="乘车人删除接口开发"></a>乘车人删除接口开发</h2><h3 id="服务层代码-1"><a href="#服务层代码-1" class="headerlink" title="服务层代码"></a>服务层代码</h3><p><strong>IPassengerService</strong>j接口新增抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p><strong>PassengerServiceImpl</strong>实现了实现对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    passengerMapper.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层代码-1"><a href="#控制层代码-1" class="headerlink" title="控制层代码"></a>控制层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    passengerService.deleteById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http测试-2"><a href="#http测试-2" class="headerlink" title="http测试"></a>http测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###乘车人删除</span><br><span class="line">DELETE http://localhost:8000/member/passenger/delete/1734597882838913024</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">token</span><span class="punctuation">: </span>&#123;&#123;token&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 12306买票系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、前端系统搭建简介</title>
      <link href="/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="系统前端模块的搭建"><a href="#系统前端模块的搭建" class="headerlink" title="系统前端模块的搭建"></a>系统前端模块的搭建</h1><p>本系统使用<code>Vue3</code>+<code>Vue CLI</code>实现系统前端模块的搭建</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><a href="https://cli.vuejs.org/zh/guide/">Vue CLI官方文档</a></p><p>安装<code>node</code>得到<code>npm</code>，使用<code>npm</code>安装<code>vue cli</code>(脚手架)，使用<code>vue cli</code>创建项目</p><p>npm可设置淘宝镜像，<a href="https://blog.csdn.net/zz00008888/article/details/134241558?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-134241558-blog-126960754.235%5Ev39%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-134241558-blog-126960754.235%5Ev39%5Epc_relevant_default_base&amp;utm_relevant_index=3">淘宝镜像的域名换了</a>，加快组件下载速度<code>npm config set registry https://registry.npmmirror.com</code></p><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>依据官方文档，创建项目<code>web-train</code></p><p><a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">vue cli创建项目官方文档</a></p><p><strong>创建的项目目录</strong></p><p><a href="https://blog.csdn.net/weixin_49827467/article/details/129046119?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-129046119-blog-107966840.235%5Ev39%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-129046119-blog-107966840.235%5Ev39%5Epc_relevant_default_base&amp;utm_relevant_index=1">项目目录各个文件介绍 参考资料</a></p><p><img src="/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/image-20231206231748676.png" alt="image-20231206231748676"></p><p>进入项目目录，执行<code>npm run serve</code>即可启动前端项目</p><p><a href="https://blog.csdn.net/qq_45594237/article/details/115302876">vue项目启动端口号的修改方法</a>，默认采用8080端口，如果8080被占用，则自动加1</p><h2 id="前端模块集成Ant-Design-Vue"><a href="#前端模块集成Ant-Design-Vue" class="headerlink" title="前端模块集成Ant Design Vue"></a>前端模块集成Ant Design Vue</h2><p>UI组件有很多选择，一种是基于CSS的Bootstrap，适用于各种前端框架；另一种是基于Vue的UI组件，只能用于Vue框架</p><p><a href="https://3x.antdv.com/docs/vue/getting-started-cn">Ant Design Vue官方文档教程</a></p><h3 id="Ant-Design-Vue使用流程"><a href="#Ant-Design-Vue使用流程" class="headerlink" title="Ant Design Vue使用流程"></a><strong>Ant Design Vue</strong>使用流程</h3><ul><li>下载资源，安装依赖</li><li>全局注册或者部分注册</li><li>在vue中即可直接使用相关组件</li></ul><h3 id="小插曲：关于Ant-Design-Vue图标组件的使用"><a href="#小插曲：关于Ant-Design-Vue图标组件的使用" class="headerlink" title="小插曲：关于Ant Design Vue图标组件的使用"></a><strong>小插曲：关于Ant Design Vue图标组件的使用</strong></h3><p><a href="https://3x.antdv.com/components/icon-cn">icon组件官方文档</a></p><ul><li><p>需要手动再次下载依赖</p><ul><li><code>npm install --save @ant-design/icons-vue</code></li></ul></li><li><p>在<code>main.js</code>中全局注册(官方文档只讲解了局部注册)</p><ul><li><p>全局注册方法</p><ul><li><p>```javascript<br>import { createApp } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’<br>import Antd from ‘ant-design-vue’<br>import ‘ant-design-vue/dist/reset.css’<br>import * as Icons from ‘@ant-design/icons-vue’</p><p>const app = createApp(App)<br>app.use(store).use(router).use(Antd).mount(‘#app’);</p><p>//全局使用图标<br>const icons = Icons;<br>for(const i in icons){</p><pre><code>app.component(i,icons[i]);</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 短信验证码登录流程</span><br><span class="line"></span><br><span class="line">使用手机号+验证码的方式进行用户的登录注册</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;04 系统前端模块的搭建/image-20231207001544054.png&quot; alt=&quot;image-20231207001544054&quot; style=&quot;zoom:33%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">登录和注册共用同一个页面，如果手机号存在直接登录，否则后台自动进行注册</span><br><span class="line"></span><br><span class="line">流程：用户输入手机号-&gt;点击获取验证码按钮-&gt;输入用户码-&gt;点击登录</span><br><span class="line"></span><br><span class="line">**补充说明：**</span><br><span class="line"></span><br><span class="line">该登录注册流程容易受到黑客攻击</span><br><span class="line"></span><br><span class="line">- 同一手机号重复请求验证码</span><br><span class="line">  - 后台可以将对应手机号加入黑名单或者单个手机号当天验证码请求次数设置上限</span><br><span class="line">- 大量不同手机号请求验证码</span><br><span class="line">  - 设置图像验证码，增大被攻击难度</span><br><span class="line">    - &lt;img src=&quot;04 系统前端模块的搭建/image-20231207002409475.png&quot; alt=&quot;image-20231207002409475&quot; style=&quot;zoom:33%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不带图像验证码的登录注册流程</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;04 系统前端模块的搭建/640bfc3c0994a1fb07522184-1701880296038-2.jpg&quot; alt=&quot;640bfc3c0994a1fb07522184&quot; style=&quot;zoom: 25%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">带图像验证码的登录注册流程</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;04 系统前端模块的搭建/640bfc7609fdf6fb12562184.jpg&quot; alt=&quot;640bfc7609fdf6fb12562184&quot; style=&quot;zoom: 25%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">## 登陆注册二合一界面开发</span><br><span class="line"></span><br><span class="line">新增登录注册页面，同时在`web-train/src/router/index.js`中添加对应的路由(router)配置</span><br><span class="line"></span><br><span class="line">```tex</span><br><span class="line">对于router配置，大型项目，页面多，80%页面不常用，可以用懒加载的方式，减少编译后文件的大小，提高初始访问速度；小型目，页面少，可以用静态导入的方式，对编译后的文件大小影响不大</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><strong>Vue页面的编写</strong></p><p>一个vue页面，由三个部分组件，都不是必须的</p><ul><li>template，相当于html</li><li>script，JS脚本</li><li>style，CSS样式</li></ul><h2 id="发送短信验证码端口开发"><a href="#发送短信验证码端口开发" class="headerlink" title="发送短信验证码端口开发"></a>发送短信验证码端口开发</h2><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p><code>mapper</code>直接使用以前<code>mybatis generator</code>生成的代码</p><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><p><strong>新建发送验证码对应请求的实体类</strong><code>com.bang.train.member.req.MemberSendCodeReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberSendCodeReq</span> &#123;</span><br><span class="line">    <span class="comment">//@NotBlank:该参数不能为空，为空返回message，不能进入对应请求</span></span><br><span class="line">    <span class="comment">//@Pattern:校验手机号格式，用正则表达式，第一位是1，后十位是数字</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【手机号】不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1\\d&#123;10&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在服务层接口中定义新的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">sendCode</span><span class="params">(MemberSendCodeReq req)</span>;</span><br></pre></td></tr></table></figure><p><strong>服务层实现类中编写新增方法的具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送验证码接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sendCode</span><span class="params">(MemberSendCodeReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> getMembersByMobile(mobile);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(member))&#123;<span class="comment">//2.手机号为空，将用户数据插入数据库</span></span><br><span class="line">        <span class="type">Member</span> <span class="variable">newMember</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">        <span class="comment">//采用雪花算法生成注册用户在数据库中对应的ID</span></span><br><span class="line">        newMember.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">        newMember.setMobile(mobile);</span><br><span class="line">        memberMapper.insert(newMember);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.生成验证码，随机4为字符串</span></span><br><span class="line">    <span class="comment">//        String code = RandomUtil.randomString(4);</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;8888&quot;</span>;</span><br><span class="line">    <span class="comment">//4.将验证码保存短信记录，用于后续用户输入的验证码进行验证</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        一般可以建立一个专门数据库，该数据库包含字段:</span></span><br><span class="line"><span class="comment">            手机号</span></span><br><span class="line"><span class="comment">            短信验证码</span></span><br><span class="line"><span class="comment">            有效期</span></span><br><span class="line"><span class="comment">            是否已使用：避免单个验证码重复使用</span></span><br><span class="line"><span class="comment">            业务类型：可能多个业务需要验证码，比如找回密码，避免用户用验证码攻击其他业务</span></span><br><span class="line"><span class="comment">            发送时间：便于分析，比如统计一段时间内某个手机号请求的次数</span></span><br><span class="line"><span class="comment">            使用时间：</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">//5.对接第三方短信通道(比如阿里云等)，将验证码发送用户</span></span><br><span class="line">    <span class="comment">//6.返回生成的验证码</span></span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四要素:</span><br><span class="line">请求地址url: localhost:8080/member/send-code</span><br><span class="line">请求方法: post</span><br><span class="line">请求参数: MemberSendCodeReq req</span><br><span class="line">响应结果: CommonResp&lt;String&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/send-code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;String&gt; <span class="title function_">sendCode</span><span class="params">(<span class="meta">@Valid</span> MemberSendCodeReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;String&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.sendCode(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="短信验证码登录接口开发"><a href="#短信验证码登录接口开发" class="headerlink" title="短信验证码登录接口开发"></a>短信验证码登录接口开发</h2><h3 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h3><p><code>mapper</code>直接使用以前<code>mybatis generator</code>生成的代码</p><h3 id="业务层-1"><a href="#业务层-1" class="headerlink" title="业务层"></a>业务层</h3><p><strong>新建登录对应请求的实体类</strong><code>com.bang.train.member.req.MemberLoginReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberLoginReq</span> &#123;</span><br><span class="line">    <span class="comment">//@NotBlank:该参数不能为空，为空返回message，不能进入对应请求</span></span><br><span class="line">    <span class="comment">//@Pattern:校验手机号格式，用正则表达式，第一位是1，后十位是数字</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【手机号】不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1\\d&#123;10&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    String mobile; <span class="comment">//手机号</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【短信验证码】不能为空&quot;)</span></span><br><span class="line">    String code; <span class="comment">//短信验证码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在服务层接口中定义新的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MemberLoginResp <span class="title function_">login</span><span class="params">(MemberLoginReq req)</span>;</span><br></pre></td></tr></table></figure><p><strong>服务层实现类中编写新增方法的具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证码登录接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> MemberLoginResp <span class="title function_">login</span><span class="params">(MemberLoginReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> req.getCode();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> getMembersByMobile(mobile);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(member))&#123;<span class="comment">//2.手机号为空，提示用户需要先获取验证码</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.验证校验，实际应查询验证码短信记录数据库，这里为了测试简便，直接写死</span></span><br><span class="line">    <span class="comment">//实际可能包含验证码正确性、时效性、业务类型匹配等多种校验</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="string">&quot;8888&quot;</span>.equals(code))&#123; <span class="comment">//验证码错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_CODE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.校验通过，返回用户对象</span></span><br><span class="line">    <span class="comment">//对于系统而言，用户只需登录一次，登录对象中可能包含用户昵称、头像等数据信息，所以应该直接返回整个用户对象</span></span><br><span class="line">    <span class="comment">//但是又不能直接将后台数据完整返回前端，所以需要创建一个响应实体类，并将后台数据转换为响应类</span></span><br><span class="line">    <span class="type">MemberLoginResp</span> <span class="variable">memberLoginResp</span> <span class="operator">=</span> BeanUtil.copyProperties(member,MemberLoginResp.class);</span><br><span class="line">    <span class="keyword">return</span> memberLoginResp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层-1"><a href="#控制层-1" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四要素:</span><br><span class="line">请求地址url: localhost:8080/member/login</span><br><span class="line">请求方法: post</span><br><span class="line">请求参数: MemberLoginReq req</span><br><span class="line">响应结果: CommonResp&lt;MemberLoginResp&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;MemberLoginResp&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> MemberLoginReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;MemberLoginResp&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.login(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集成Axios完成登录功能"><a href="#集成Axios完成登录功能" class="headerlink" title="集成Axios完成登录功能"></a>集成Axios完成登录功能</h2><p>下载第三方依赖：</p><ul><li>进入web前端工程目录</li><li><code>npm install axios</code>安装依赖</li></ul><p>使用流程</p><ol><li><p>在对应Vue文件中引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>编写点击发送验证码事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const sendCode = () =&gt; &#123;</span><br><span class="line">      axios.post(&quot;http://localhost:8000/member/send-code&quot;, &#123;</span><br><span class="line">        mobile: loginForm.mobile</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        if (data.success) &#123;</span><br><span class="line">          notification.success(&#123; description: &#x27;发送验证码成功！&#x27; &#125;);</span><br><span class="line">          loginForm.code = &quot;8888&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          notification.error(&#123; description: data.message &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li><li><p>编写点击登录事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const login = () =&gt; &#123;</span><br><span class="line">      axios.post(&quot;http://localhost:8000/member/login&quot;, loginForm).then((response) =&gt; &#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        if (data.success) &#123;</span><br><span class="line">          notification.success(&#123; description: &#x27;登录成功！&#x27; &#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          notification.error(&#123; description: data.message &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li><li><p>问题一：解决前后端跨域问题：</p><ul><li><p>问题描述：前后端不在同一个域。IP一样，端口不一样，也算跨域。跨域是前后端分离不可避免的问题</p></li><li><p>问题解决：在后端网关模块<code>applicatio.yaml</code>文件中进行配置，允许跨域访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      globalcors:</span><br><span class="line">        corsConfigurations:</span><br><span class="line">          &#x27;[/**]&#x27;:</span><br><span class="line">            # 允许携带认证信息</span><br><span class="line">            allow-credentials: true</span><br><span class="line">            # 允许跨域的源(网站域名/ip)，设置*为全部</span><br><span class="line">            allowedOriginPatterns: &quot;*&quot;</span><br><span class="line">            # 允许跨域的method， 默认为GET和OPTIONS，设置*为全部</span><br><span class="line">            allowedMethods: &quot;*&quot;</span><br><span class="line">            # 允许跨域请求里的head字段，设置*为全部</span><br><span class="line">            allowedHeaders: &quot;*&quot;</span><br><span class="line">            #跨域检测有效期</span><br><span class="line">            maxAge: 3600</span><br></pre></td></tr></table></figure></li></ul></li><li><p>问题二：解决前后端参数传递问题</p><ul><li><p>前端参数传递是以<code>json</code>形式传递的，后端目前只支持以表单的形式访问，在后端请求参数前加上<code>@RequestBody</code>注解即可改为支持<code>json</code>方式的请求数据，此时就不再支持以表单形式提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/send-code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;String&gt; <span class="title function_">sendCode</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> MemberSendCodeReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;String&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.sendCode(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;MemberLoginResp&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> MemberLoginReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;MemberLoginResp&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.login(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对应的请求格式</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">### 验证码获取</span><br><span class="line">POST http://localhost:8000/member/send-code</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;mobile&quot;: &quot;12345678908&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">###登录</span><br><span class="line">POST http://localhost:8000/member/login</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;mobile&quot;:&quot;12345678908&quot;,</span><br><span class="line">  &quot;code&quot;:&quot;8888&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="增加Axios拦截器配置"><a href="#增加Axios拦截器配置" class="headerlink" title="增加Axios拦截器配置"></a>增加Axios拦截器配置</h2><p><code>axios</code>发送请求获取响应结果，应该能够打印对应日志信息，便于前后端联调</p><p>在<code>main.js</code>中进行<code>axios</code>拦截器配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * axios拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截请求</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求参数：&#x27;</span>, config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//拦截响应</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回结果：&#x27;</span>, response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回错误：&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在浏览器的控制台能够看到每次请求的日志信息</p><p><img src="/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/image-20231209111736666.png" alt="image-20231209111736666" style="zoom:80%;"></p><h2 id="Vue-CLI多环境配置"><a href="#Vue-CLI多环境配置" class="headerlink" title="Vue CLI多环境配置"></a>Vue CLI多环境配置</h2><p>现在前端请求后端接口的<code>url</code>是写死的，但在实际开发过程中，应该让后端接口的域名能够动态配置(开发环境、测试环境、部署环境的接口地址都不一样)</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在前端根目录下增加文件 .env.xxx，xxx表是不同的环境</span><br><span class="line">启动命令里增加 --mode xxx，就启动xxx环境的配置</span><br><span class="line"></span><br><span class="line">.env.xx文件编写:</span><br><span class="line">增加多环境变量：</span><br><span class="line">NODE<span class="built_in">_</span>ENV是内置变量</span><br><span class="line">自定义变量用“VUE<span class="built_in">_</span>APP<span class="built_in">_</span>”开头</span><br><span class="line">使用变量：</span><br><span class="line">process.env. xxx </span><br></pre></td></tr></table></figure><p><strong>编写多个env文件</strong></p><p><code>.env.dev</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE<span class="built_in">_</span>ENV=development</span><br><span class="line">VUE<span class="built_in">_</span>APP<span class="built_in">_</span>SERVER=http://localhost:8000</span><br></pre></td></tr></table></figure><p><code>.env.prod</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE<span class="built_in">_</span>ENV=production</span><br><span class="line">VUE<span class="built_in">_</span>APP<span class="built_in">_</span>SERVER=http://train-server.bang.com</span><br></pre></td></tr></table></figure><p><strong>在main.js中引用对应变量，让其生效</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_SERVER</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;环境：&#x27;</span>, process.<span class="property">env</span>.<span class="property">NODE_ENV</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务端：&#x27;</span>, process.<span class="property">env</span>.<span class="property">VUE_APP_SERVER</span>);</span><br></pre></td></tr></table></figure><p><strong>在各个Vue页面中，可以省略请求前缀URL编写</strong></p><p><img src="/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04%20%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%AD%E5%BB%BA/image-20231209114124939.png" alt="image-20231209114124939" style="zoom:80%;"></p><p><strong>启动命令中指定对应环境</strong></p><p><code>npm run serve --port 80 --mode xxx</code></p><p>其中<code>xxx</code>为<code>.env</code>文件名后缀</p><h2 id="新增web控台主页面"><a href="#新增web控台主页面" class="headerlink" title="新增web控台主页面"></a>新增web控台主页面</h2><p>可以选择<code>Ant Design Vue</code>中的<a href="https://www.antdv.com/components/layout-cn"><code>Layout</code>布局</a>作为基础进行修改</p><ul><li>新增控台主页面<code>main.vue</code></li><li>在<code>index.js</code>中新增对应路由</li><li>实现跳转，由登录页面登陆成功跳转至主页面</li></ul>]]></content>
      
      
      <categories>
          
          <category> 12306买票系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、实现JWT单点登录功能</title>
      <link href="/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/05%20%E5%AE%9E%E7%8E%B0JWT%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
      <url>/2023/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/05%20%E5%AE%9E%E7%8E%B0JWT%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="实现JWT单点登录功能"><a href="#实现JWT单点登录功能" class="headerlink" title="实现JWT单点登录功能"></a>实现JWT单点登录功能</h1><p>单点登录：直观意义就是对于一个系统，只需登录一次就可以处处访问</p><h2 id="两种单点登录的设计方案"><a href="#两种单点登录的设计方案" class="headerlink" title="两种单点登录的设计方案"></a>两种单点登录的设计方案</h2><h3 id="方案一：redis-token"><a href="#方案一：redis-token" class="headerlink" title="方案一：redis+token"></a>方案一：redis+token</h3><p><strong>登录阶段</strong></p><p><code>登录开始</code>-&gt;<code>校验用户名和密码</code>-&gt;<code>生成随机的token，每次都不一样</code>-&gt;<code>将token放入redis</code>-&gt;<code>结束</code></p><p><strong>校验阶段</strong></p><p><code>从header中获取token</code>-&gt;<code>根据token到redis获取数据</code>-&gt;<code>是否有数据</code>-&gt;<code>有数据登录校验成功，反之校验失败</code></p><h3 id="方案二：JWT"><a href="#方案二：JWT" class="headerlink" title="方案二：JWT"></a>方案二：JWT</h3><p><strong>登录阶段</strong></p><p><code>登陆开始</code>-&gt;<code>校验用户名和密码</code>-&gt;<code>生成JWT Token,每次都不一样</code>-&gt;<code>结束</code></p><p><strong>校验阶段</strong></p><p><code>校验开始</code>-&gt;<code>从header获取token</code>-&gt;<code>使用工具包校验token</code>-&gt;<code>校验是否成功</code></p><h2 id="JWT原理"><a href="#JWT原理" class="headerlink" title="JWT原理"></a>JWT原理</h2><p><a href="https://hutool.cn/docs/#/jwt/%E6%A6%82%E8%BF%B0?id=%e7%94%b1%e6%9d%a5">JWT原理及其用法</a></p><h3 id="JWT存在的问题"><a href="#JWT存在的问题" class="headerlink" title="JWT存在的问题"></a>JWT存在的问题</h3><p><strong>问题一：token被解密破解</strong></p><p>给密钥加盐值，每个项目盐值不一样，减小被破解风险</p><p><strong>问题二：token被第三方使用</strong></p><p>背景：自己的产品，被第三方包装成一个界面，做成他们自己的收费产品</p><p>此类问题无好的解决办法，可以通过限流进行一定程度缓解，如果某个相同的token有大量请求，则可能被第三方利用</p><h2 id="生成JWT单点登录token"><a href="#生成JWT单点登录token" class="headerlink" title="生成JWT单点登录token"></a>生成JWT单点登录token</h2><p>本项目中，我们利用Hutool工具包提供的JWT模块进行单点登录的开发</p><h3 id="将JWT-token生成和校验功能封装为一个工具类"><a href="#将JWT-token生成和校验功能封装为一个工具类" class="headerlink" title="将JWT  token生成和校验功能封装为一个工具类"></a>将JWT  token生成和校验功能封装为一个工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateField;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateTime;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.crypto.GlobalBouncyCastleProvider;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.jwt.JWTPayload;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.jwt.JWTUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(JwtUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 盐值很重要，不能泄漏，且每个项目都应该不一样，可以放到配置文件中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;train-12306&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">(Long id, String mobile)</span> &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;开始生成JWT token，id：&#123;&#125;，mobile：&#123;&#125;&quot;</span>, id, mobile);</span><br><span class="line">        GlobalBouncyCastleProvider.setUseBouncyCastle(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> DateTime.now();</span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">expTime</span> <span class="operator">=</span> now.offsetNew(DateField.HOUR, <span class="number">24</span>);</span><br><span class="line">        Map&lt;String, Object&gt; payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 签发时间</span></span><br><span class="line">        payload.put(JWTPayload.ISSUED_AT, now);</span><br><span class="line">        <span class="comment">// 过期时间</span></span><br><span class="line">        payload.put(JWTPayload.EXPIRES_AT, expTime);</span><br><span class="line">        <span class="comment">// 生效时间</span></span><br><span class="line">        payload.put(JWTPayload.NOT_BEFORE, now);</span><br><span class="line">        <span class="comment">// 内容</span></span><br><span class="line">        payload.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">        payload.put(<span class="string">&quot;mobile&quot;</span>, mobile);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtil.createToken(payload, key.getBytes());</span><br><span class="line">        LOG.info(<span class="string">&quot;生成JWT token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;开始JWT token校验，token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        GlobalBouncyCastleProvider.setUseBouncyCastle(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">JWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWTUtil.parseToken(token).setKey(key.getBytes());</span><br><span class="line">        <span class="comment">// validate包含了verify</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validate</span> <span class="operator">=</span> jwt.validate(<span class="number">0</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;JWT token校验结果：&#123;&#125;&quot;</span>, validate);</span><br><span class="line">        <span class="keyword">return</span> validate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">getJSONObject</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        GlobalBouncyCastleProvider.setUseBouncyCastle(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">JWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWTUtil.parseToken(token).setKey(key.getBytes());</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">payloads</span> <span class="operator">=</span> jwt.getPayloads();</span><br><span class="line">        payloads.remove(JWTPayload.ISSUED_AT);</span><br><span class="line">        payloads.remove(JWTPayload.EXPIRES_AT);</span><br><span class="line">        payloads.remove(JWTPayload.NOT_BEFORE);</span><br><span class="line">        LOG.info(<span class="string">&quot;根据token获取原始内容：&#123;&#125;&quot;</span>, payloads);</span><br><span class="line">        <span class="keyword">return</span> payloads;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> createToken(<span class="number">1L</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String token = &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYmYiOjE2NzY4OTk4MjcsIm1vYmlsZSI6IjEyMyIsImlkIjoxLCJleHAiOjE2NzY4OTk4MzcsImlhdCI6MTY3Njg5OTgyN30.JbFfdeNHhxKhAeag63kifw9pgYhnNXISJM5bL6hM8eU&quot;;</span></span><br><span class="line">        validate(token);</span><br><span class="line"></span><br><span class="line">        getJSONObject(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改登录功能service层代码"><a href="#修改登录功能service层代码" class="headerlink" title="修改登录功能service层代码"></a>修改登录功能service层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证码登录接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> MemberLoginResp <span class="title function_">login</span><span class="params">(MemberLoginReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> req.getCode();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> getMembersByMobile(mobile);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNull(member))&#123;<span class="comment">//2.手机号为空，提示用户需要先获取验证码</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.验证校验，实际应查询验证码短信记录数据库，这里为了测试简便，直接写死</span></span><br><span class="line">    <span class="comment">//实际可能包含验证码正确性、时效性、业务类型匹配等多种校验</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="string">&quot;8888&quot;</span>.equals(code))&#123; <span class="comment">//验证码错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_MOBILE_CODE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.校验通过，返回用户对象</span></span><br><span class="line">    <span class="comment">//对于系统而言，用户只需登录一次，登录对象中可能包含用户昵称、头像等数据信息，所以应该直接返回整个用户对象</span></span><br><span class="line">    <span class="comment">//但是又不能直接将后台数据完整返回前端，所以需要创建一个响应实体类，并将后台数据转换为响应类</span></span><br><span class="line">    <span class="type">MemberLoginResp</span> <span class="variable">memberLoginResp</span> <span class="operator">=</span> BeanUtil.copyProperties(member,MemberLoginResp.class);</span><br><span class="line">    <span class="comment">//5.生成对应的JWT token，并返回给前端</span></span><br><span class="line">    <span class="comment">//JWT Token包含信息: header,payload,signature</span></span><br><span class="line">    <span class="comment">//生成token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createToken(memberLoginResp.getId(),memberLoginResp.getMobile());</span><br><span class="line">    memberLoginResp.setToken(token);</span><br><span class="line">    <span class="keyword">return</span> memberLoginResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用vuex保存登录信息"><a href="#使用vuex保存登录信息" class="headerlink" title="使用vuex保存登录信息"></a>使用vuex保存登录信息</h2><p><strong>在store index.js中定义登录信息对应的全局变量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; <span class="comment">//定义全局变量member</span></span><br><span class="line">    <span class="attr">member</span>:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">setMember</span>(<span class="params">state,_member</span>)&#123;</span><br><span class="line">      state.<span class="property">member</span> = _member;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>修改login.vue</strong></p><p>登录成功之后，将后端数据存储至全部变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const login = () =&gt; &#123;</span><br><span class="line">      axios.post(&quot;/member/login&quot;, loginForm).then((response) =&gt; &#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        if (data.success) &#123;</span><br><span class="line">          notification.success(&#123; description: &#x27;登录成功！&#x27; &#125;);</span><br><span class="line">          // 登录成功，跳到控台主页</span><br><span class="line">          router.push(&quot;/&quot;);</span><br><span class="line">          //使用vuex保存会员登录信息,里面包含JWT TOKEN</span><br><span class="line">          store.commit(&quot;setMember&quot;, data.content);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          notification.error(&#123; description: data.message &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h2 id="vuex配置后的session解决浏览器刷新问题"><a href="#vuex配置后的session解决浏览器刷新问题" class="headerlink" title="vuex配置后的session解决浏览器刷新问题"></a>vuex配置后的session解决浏览器刷新问题</h2><h2 id="gateway拦截器的简单使用使用"><a href="#gateway拦截器的简单使用使用" class="headerlink" title="gateway拦截器的简单使用使用"></a>gateway拦截器的简单使用使用</h2><ul><li>自定义过滤器<ul><li>继承接口<code>GlobalFilter</code>，实现<code>filter</code>方法</li></ul></li><li>多个过滤器存在时，如何确定执行的先后顺序<ul><li>继承<code>Ordered</code>接口，实现<code>getOrder</code>方法，按照返回数值由小到大执行</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在网关增加登录校验过滤器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(AuthGlobalFilter.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;网关登录校验拦截器:&#123;&#125;&quot;</span>,<span class="string">&quot;AuthGlobalFilter&quot;</span>);</span><br><span class="line">        <span class="comment">//网关校验链，进入下一个校验器</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当存在多个过滤器时，按照getOrder的顺序从小到大去执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写会员登录校验拦截器"><a href="#编写会员登录校验拦截器" class="headerlink" title="编写会员登录校验拦截器"></a>编写会员登录校验拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.train.gateway.util.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GateWay登录校验</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginMemberFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LoginMemberFilter.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取登录路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequest().getURI().getPath();</span><br><span class="line">        <span class="comment">//2.排除不需要拦截的请求</span></span><br><span class="line">        <span class="keyword">if</span> (path.contains(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">                || path.contains(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line">                || path.contains(<span class="string">&quot;/member/login&quot;</span>)</span><br><span class="line">                || path.contains(<span class="string">&quot;/member/send-code&quot;</span>)) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;不需要登录验证：&#123;&#125;&quot;</span>, path);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;需要登录验证：&#123;&#125;&quot;</span>, path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.获取header的token参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;会员登录验证开始，token：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || token.isEmpty()) &#123;</span><br><span class="line">            LOG.info( <span class="string">&quot;token为空，请求被拦截&quot;</span> );</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.校验token是否有效，包括token是否被改过，是否过期</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validate</span> <span class="operator">=</span> JwtUtil.validate(token);</span><br><span class="line">        <span class="keyword">if</span> (validate) &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;token有效，放行该请求&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.warn( <span class="string">&quot;token无效，请求被拦截&quot;</span> );</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为axios请求增加统一拦截器"><a href="#为axios请求增加统一拦截器" class="headerlink" title="为axios请求增加统一拦截器"></a>为axios请求增加统一拦截器</h2><p>在<code>main.js</code>中修改拦截器代码，为所有的axios请求头加上token参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截请求</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求参数：&#x27;</span>, config);</span><br><span class="line">    <span class="comment">//为所有的axios请求加上token</span></span><br><span class="line">    <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">member</span>.<span class="property">token</span>;</span><br><span class="line">    <span class="keyword">if</span>(token)&#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">token</span> = token;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;为请求header增加token:&quot;</span>,token);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了增加用户请求，在token失效之后(后端返货401)时，应该让页面自动跳转到登录页面，并提示用户登录超时</p><p>修改<code>main.js</code>中响应拦截器代码，对401做出特定动作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截响应</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回结果：&#x27;</span>, response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回错误：&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">const</span> response = error.<span class="property">response</span>;</span><br><span class="line">    <span class="keyword">const</span> status = response.<span class="property">status</span>;</span><br><span class="line">    <span class="keyword">if</span>(status === <span class="number">401</span>)&#123;</span><br><span class="line">        <span class="comment">//提示用户登录超时，并跳转至登陆页面</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未登录或者登录超时，跳转至登录页面&quot;</span>);</span><br><span class="line">        <span class="comment">//清空缓存中用户登录历史数据</span></span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&quot;setMember&quot;</span>,&#123;&#125;);</span><br><span class="line">        <span class="comment">//异常提醒窗口</span></span><br><span class="line">        notification.<span class="title function_">error</span>(&#123;<span class="attr">description</span>: <span class="string">&quot;未登录或登录超时&quot;</span>&#125;);</span><br><span class="line">        <span class="comment">//跳转登录页面</span></span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="为路由页面添加拦截器"><a href="#为路由页面添加拦截器" class="headerlink" title="为路由页面添加拦截器"></a>为路由页面添加拦截器</h2><p><strong>背景</strong></p><p>通过axios发送请求，可以通过后端jwt校验验证用户权限，未登录或者登录超时会直接跳转至登录页面</p><p>但是系统中可能存在一些其他静态页面，比如帮助文档等页面，这类页面不用于后端进行交互，无法根据后端响应进行拦截,所以需要增加<strong>路由跳转拦截器</strong></p><p>在<code>router/index.js</code>中增加拦截器代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;notification&#125; <span class="keyword">from</span> <span class="string">&quot;ant-design-vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/LoginView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/main.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">loginRequire</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由登录拦截</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 要不要对meta.loginRequire属性做监控拦截</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">matched</span>.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item, <span class="string">&quot;是否需要登录校验：&quot;</span>, item.<span class="property">meta</span>.<span class="property">loginRequire</span> || <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">meta</span>.<span class="property">loginRequire</span>;</span><br><span class="line">  &#125;)) &#123;</span><br><span class="line">    <span class="keyword">const</span> _member = store.<span class="property">state</span>.<span class="property">member</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;页面登录校验开始：&quot;</span>, _member);</span><br><span class="line">    <span class="keyword">if</span> (!_member.<span class="property">token</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户未登录或登录超时！&quot;</span>);</span><br><span class="line">      notification.<span class="title function_">error</span>(&#123; <span class="attr">description</span>: <span class="string">&quot;未登录或登录超时&quot;</span> &#125;);</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 12306买票系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十七章：垃圾回收器</title>
      <link href="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
      <url>/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h1><h2 id="GC分类与性能指标"><a href="#GC分类与性能指标" class="headerlink" title="GC分类与性能指标"></a>GC分类与性能指标</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206143956293.png" alt="image-20231206143956293" style="zoom:80%;"></p><h3 id="垃圾回收器分类-了解即可"><a href="#垃圾回收器分类-了解即可" class="headerlink" title="垃圾回收器分类(了解即可)"></a>垃圾回收器分类(了解即可)</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206144635564.png" alt="image-20231206144635564" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206144809673.png" alt="image-20231206144809673" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206144958334.png" alt="image-20231206144958334" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206145120480.png" alt="image-20231206145120480" style="zoom:80%;"></p><h3 id="评估GC的性能指标"><a href="#评估GC的性能指标" class="headerlink" title="评估GC的性能指标"></a>评估GC的性能指标</h3><p>其中最重要的三个指标：<strong>吞吐量</strong>、<strong>暂停时间</strong>、<strong>内存占用</strong></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206145351204.png" alt="image-20231206145351204" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206150148183.png" alt="image-20231206150148183" style="zoom:80%;"></p><h4 id="吞吐量-throughput"><a href="#吞吐量-throughput" class="headerlink" title="吞吐量(throughput)"></a>吞吐量(throughput)</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206150606217.png" alt="image-20231206150606217" style="zoom:80%;"></p><h4 id="暂停时间-pause-time"><a href="#暂停时间-pause-time" class="headerlink" title="暂停时间(pause time)"></a>暂停时间(pause time)</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206151018571.png" alt="image-20231206151018571" style="zoom:80%;"></p><h4 id="吞吐量-VS-暂停时间"><a href="#吞吐量-VS-暂停时间" class="headerlink" title="吞吐量 VS 暂停时间"></a>吞吐量 VS 暂停时间</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206151342489.png" alt="image-20231206151342489" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206151700030.png" alt="image-20231206151700030" style="zoom:80%;"></p><h2 id="不同垃圾回收器概述-了解即可"><a href="#不同垃圾回收器概述-了解即可" class="headerlink" title="不同垃圾回收器概述(了解即可)"></a>不同垃圾回收器概述(了解即可)</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206152215044.png" alt="image-20231206152215044" style="zoom:80%;"></p><h3 id="七款经典的垃圾回收器"><a href="#七款经典的垃圾回收器" class="headerlink" title="七款经典的垃圾回收器"></a>七款经典的垃圾回收器</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206153005242.png" alt="image-20231206153005242" style="zoom:80%;"></p><h3 id="经典垃圾回收器与垃圾分代之间的关系"><a href="#经典垃圾回收器与垃圾分代之间的关系" class="headerlink" title="经典垃圾回收器与垃圾分代之间的关系"></a>经典垃圾回收器与垃圾分代之间的关系</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206153728847.png" alt="image-20231206153728847" style="zoom:80%;"></p><h3 id="不同垃圾回收器之间的组合关系"><a href="#不同垃圾回收器之间的组合关系" class="headerlink" title="不同垃圾回收器之间的组合关系"></a>不同垃圾回收器之间的组合关系</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206154143439.png" alt="image-20231206154143439" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206154726132.png" alt="image-20231206154726132" style="zoom:80%;"></p><h3 id="不同垃圾回收器概述"><a href="#不同垃圾回收器概述" class="headerlink" title="不同垃圾回收器概述"></a>不同垃圾回收器概述</h3><p>没有最好的，只有最合适的</p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206155031988.png" alt="image-20231206155031988" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231206155517505.png" alt="image-20231206155517505" style="zoom:80%;"></p><h2 id="Serial回收器：串行回收"><a href="#Serial回收器：串行回收" class="headerlink" title="Serial回收器：串行回收"></a>Serial回收器：串行回收</h2><h3 id="Serial原理"><a href="#Serial原理" class="headerlink" title="Serial原理"></a>Serial原理</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207091551949.png" alt="image-20231207091551949" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207092318930.png" alt="image-20231207092318930" style="zoom:80%;"></p><h3 id="Serial优劣与参数设置"><a href="#Serial优劣与参数设置" class="headerlink" title="Serial优劣与参数设置"></a>Serial优劣与参数设置</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207092519220.png" alt="image-20231207092519220" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207092726561.png" alt="image-20231207092726561" style="zoom:80%;"></p><h2 id="ParNew回收器：并行回收"><a href="#ParNew回收器：并行回收" class="headerlink" title="ParNew回收器：并行回收"></a>ParNew回收器：并行回收</h2><h3 id="ParNew原理"><a href="#ParNew原理" class="headerlink" title="ParNew原理"></a>ParNew原理</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207093151404.png" alt="image-20231207093151404" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207093319098.png" alt="image-20231207093319098" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207093551349.png" alt="image-20231207093551349" style="zoom:80%;"></p><h3 id="ParNew参数设置"><a href="#ParNew参数设置" class="headerlink" title="ParNew参数设置"></a>ParNew参数设置</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207094226776.png" alt="image-20231207094226776" style="zoom:80%;"></p><h2 id="Parallel回收器：吞吐量优先"><a href="#Parallel回收器：吞吐量优先" class="headerlink" title="Parallel回收器：吞吐量优先"></a>Parallel回收器：吞吐量优先</h2><h3 id="Parallel原理"><a href="#Parallel原理" class="headerlink" title="Parallel原理"></a>Parallel原理</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095130138.png" alt="image-20231207095130138" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095508215.png" alt="image-20231207095508215" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095847753.png" alt="image-20231207095847753" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207095911456.png" alt="image-20231207095911456" style="zoom:80%;"></p><h3 id="Parrallel的参数设置"><a href="#Parrallel的参数设置" class="headerlink" title="Parrallel的参数设置"></a>Parrallel的参数设置</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207100050770.png" alt="image-20231207100050770" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207102259638.png" alt="image-20231207102259638" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207102709054.png" alt="image-20231207102709054" style="zoom:80%;"></p><h2 id="CMS回收器：低延迟"><a href="#CMS回收器：低延迟" class="headerlink" title="CMS回收器：低延迟"></a>CMS回收器：低延迟</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103202999.png" alt="image-20231207103202999" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103617966.png" alt="image-20231207103617966" style="zoom:80%;"></p><p>CMS与Parallel的底层框架不一致，所以导致二者不兼容</p><h3 id="CMS工作原理"><a href="#CMS工作原理" class="headerlink" title="CMS工作原理"></a><strong>CMS工作原理</strong></h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103822401.png" alt="image-20231207103822401" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207103939319.png" alt="image-20231207103939319" style="zoom:80%;"></p><h3 id="CMS的特点与弊端分析"><a href="#CMS的特点与弊端分析" class="headerlink" title="CMS的特点与弊端分析"></a>CMS的特点与弊端分析</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207104703680.png" alt="image-20231207104703680" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207105000297.png" alt="image-20231207105000297" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207105131765.png" alt="image-20231207105131765" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207105343956.png" alt="image-20231207105343956" style="zoom:80%;"></p><h3 id="CMS参数设置"><a href="#CMS参数设置" class="headerlink" title="CMS参数设置"></a>CMS参数设置</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207163418544.png" alt="image-20231207163418544" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207162458421.png" alt="image-20231207162458421" style="zoom:80%;"></p><h3 id="CSM总结"><a href="#CSM总结" class="headerlink" title="CSM总结"></a>CSM总结</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207164013003.png" alt="image-20231207164013003" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231207164117998.png" alt="image-20231207164117998" style="zoom:80%;"></p><h2 id="G1回收器：区域化分代式"><a href="#G1回收器：区域化分代式" class="headerlink" title="G1回收器：区域化分代式"></a>G1回收器：区域化分代式</h2><h3 id="G1回收器概述"><a href="#G1回收器概述" class="headerlink" title="G1回收器概述"></a>G1回收器概述</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208093158963.png" alt="image-20231208093158963" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208093731562.png" alt="image-20231208093731562" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094125569.png" alt="image-20231208094125569" style="zoom:80%;"></p><h3 id="G1回收器特点"><a href="#G1回收器特点" class="headerlink" title="G1回收器特点"></a>G1回收器特点</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094407616.png" alt="image-20231208094407616" style="zoom:80%;"></p><p><strong>G1分区示意图</strong></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094816879.png" alt="image-20231208094816879" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208094918626.png" alt="image-20231208094918626" style="zoom:80%;"></p><p>  <img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208095219293.png" alt="image-20231208095219293" style="zoom:80%;"></p><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208095815959.png" alt="image-20231208095815959" style="zoom:80%;"></p><h3 id="G1回收器的参数设置"><a href="#G1回收器的参数设置" class="headerlink" title="G1回收器的参数设置"></a>G1回收器的参数设置</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208100128411.png" alt="image-20231208100128411" style="zoom:80%;"></p><h3 id="G1回收器的常见操作步骤"><a href="#G1回收器的常见操作步骤" class="headerlink" title="G1回收器的常见操作步骤"></a>G1回收器的常见操作步骤</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208100931854.png" alt="image-20231208100931854" style="zoom:80%;"></p><h3 id="G1回收器的适用场景"><a href="#G1回收器的适用场景" class="headerlink" title="G1回收器的适用场景"></a>G1回收器的适用场景</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101103639.png" alt="image-20231208101103639" style="zoom:80%;"></p><h3 id="分区Region：化整为零"><a href="#分区Region：化整为零" class="headerlink" title="分区Region：化整为零"></a>分区Region：化整为零</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101448056.png" alt="image-20231208101448056" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101656902.png" alt="image-20231208101656902" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208101954513.png" alt="image-20231208101954513" style="zoom:80%;"></p><h3 id="G1回收器垃圾回收过程"><a href="#G1回收器垃圾回收过程" class="headerlink" title="G1回收器垃圾回收过程"></a>G1回收器垃圾回收过程</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208102458335.png" alt="image-20231208102458335" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208103133680.png" alt="image-20231208103133680" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208103258626.png" alt="image-20231208103258626" style="zoom:80%;"></p><h4 id="记忆集-Remembered-Set"><a href="#记忆集-Remembered-Set" class="headerlink" title="记忆集(Remembered Set)"></a>记忆集(Remembered Set)</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208103745705.png" alt="image-20231208103745705" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208104145557.png" alt="image-20231208104145557" style="zoom:80%;"></p><h4 id="G1回收过程一：年轻代GC"><a href="#G1回收过程一：年轻代GC" class="headerlink" title="G1回收过程一：年轻代GC"></a>G1回收过程一：年轻代GC</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208105148788.png" alt="image-20231208105148788" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208110952401.png" alt="image-20231208110952401" style="zoom: 67%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208111017024.png" alt="image-20231208111017024" style="zoom:80%;"></p><h4 id="G1回收过程二：并发标记过程"><a href="#G1回收过程二：并发标记过程" class="headerlink" title="G1回收过程二：并发标记过程"></a>G1回收过程二：并发标记过程</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208111725531.png" alt="image-20231208111725531" style="zoom:80%;"></p><h4 id="G1回收过程三：混合回收"><a href="#G1回收过程三：混合回收" class="headerlink" title="G1回收过程三：混合回收"></a>G1回收过程三：混合回收</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208112026842.png" alt="image-20231208112026842" style="zoom:80%;"></p><h4 id="G1回收过程：补充"><a href="#G1回收过程：补充" class="headerlink" title="G1回收过程：补充"></a>G1回收过程：补充</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208142412341.png" alt="image-20231208142412341" style="zoom:80%;"></p><h3 id="G1回收器优化建议"><a href="#G1回收器优化建议" class="headerlink" title="G1回收器优化建议"></a>G1回收器优化建议</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208142728237.png" alt="image-20231208142728237" style="zoom:80%;"></p><h2 id="垃圾回收器总结"><a href="#垃圾回收器总结" class="headerlink" title="垃圾回收器总结"></a>垃圾回收器总结</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208144344748.png" alt="image-20231208144344748" style="zoom:80%;"></p><h3 id="如何选择合适的垃圾回收器"><a href="#如何选择合适的垃圾回收器" class="headerlink" title="如何选择合适的垃圾回收器"></a>如何选择合适的垃圾回收器</h3><ul><li>没有最好的收集器，更没有万能的收集器</li><li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li></ul><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208145652771.png" alt="image-20231208145652771" style="zoom:80%;"></p><h3 id="面试相关"><a href="#面试相关" class="headerlink" title="面试相关"></a>面试相关</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150040649.png" alt="image-20231208150040649" style="zoom:80%;"></p><h2 id="GC日志分析"><a href="#GC日志分析" class="headerlink" title="GC日志分析"></a>GC日志分析</h2><h3 id="相关参数设置"><a href="#相关参数设置" class="headerlink" title="相关参数设置"></a>相关参数设置</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150246883.png" alt="image-20231208150246883" style="zoom:80%;"></p><h3 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150643372.png" alt="image-20231208150643372" style="zoom:67%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150714092.png" alt="image-20231208150714092" style="zoom:67%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150736336.png" alt="image-20231208150736336" style="zoom:67%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208150747770.png" alt="image-20231208150747770" style="zoom:67%;"></p><h3 id="GC日志中垃圾回收数据的分析"><a href="#GC日志中垃圾回收数据的分析" class="headerlink" title="GC日志中垃圾回收数据的分析"></a>GC日志中垃圾回收数据的分析</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208151523258.png" alt="image-20231208151523258" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208152000413.png" alt="image-20231208152000413" style="zoom: 80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208152334594.png" alt="image-20231208152334594" style="zoom:80%;"></p><h4 id="Minor-GC日志分析"><a href="#Minor-GC日志分析" class="headerlink" title="Minor GC日志分析"></a>Minor GC日志分析</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208152536904.png" alt="image-20231208152536904" style="zoom:80%;"></p><h4 id="Full-GC日志分析"><a href="#Full-GC日志分析" class="headerlink" title="Full GC日志分析"></a>Full GC日志分析</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208153026721.png" alt="image-20231208153026721" style="zoom:80%;"></p><h4 id="日志分析工具的使用"><a href="#日志分析工具的使用" class="headerlink" title="日志分析工具的使用"></a>日志分析工具的使用</h4><p>参数:<code>-Xloggc:./logs/gc.log</code>，将GC日志存储到对应的文件</p><p>可以使用一些工具去分析这些gc日志，常用的日志分析工具有：<code>GCViewer</code>、<code>GCEasy</code>、<code>GCHisto</code>、<code>GCLogViewer</code>、<code>Hpjmeter</code>、<code>garbagecat</code>等</p><p>建议GCEasy，在线，可视化更好</p><h2 id="垃圾回收器新发展-了解即可"><a href="#垃圾回收器新发展-了解即可" class="headerlink" title="垃圾回收器新发展(了解即可)"></a>垃圾回收器新发展(了解即可)</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208162923493.png" alt="image-20231208162923493" style="zoom:80%;"></p><h3 id="Shenandoah-GC"><a href="#Shenandoah-GC" class="headerlink" title="Shenandoah GC"></a>Shenandoah GC</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163147442.png" alt="image-20231208163147442" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163239693.png" alt="image-20231208163239693" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163430280.png" alt="image-20231208163430280" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163553376.png" alt="image-20231208163553376" style="zoom:80%;"></p><h3 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163653887.png" alt="image-20231208163653887" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163739444.png" alt="image-20231208163739444" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163913062.png" alt="image-20231208163913062" style="zoom:80%;"></p><h3 id="其他垃圾回收器"><a href="#其他垃圾回收器" class="headerlink" title="其他垃圾回收器"></a>其他垃圾回收器</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/image-20231208163943545.png" alt="image-20231208163943545" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十六章：垃圾回收相关概念</title>
      <link href="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收相关概念"><a href="#垃圾回收相关概念" class="headerlink" title="垃圾回收相关概念"></a>垃圾回收相关概念</h1><h2 id="System-gc-的理解"><a href="#System-gc-的理解" class="headerlink" title="System.gc()的理解"></a>System.gc()的理解</h2><p> <img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204093200425.png" alt="image-20231204093200425" style="zoom:80%;"></p><p><strong>实例一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TTest</span>(); <span class="comment">//没有引用的对象</span></span><br><span class="line">            <span class="comment">//垃圾回收,只是显示地提醒系统进行垃圾回收，但是无法保证垃圾回收会百分百进行;</span></span><br><span class="line">            <span class="comment">//其底层是直接调用：Runtime.getRuntime().gc();</span></span><br><span class="line">            System.gc(); </span><br><span class="line">            <span class="comment">//此方法强制调用失去引用对象地finalize方法</span></span><br><span class="line">            System.runFinalization();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TTest 重写了 finalize()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        System.gc(); <span class="comment">//无法进行回收,buffer变量会指向byte数组的引用</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;10728K(76288K)] 15493K-&gt;10960K(251392K), 0.0344941 secs] [Times: user=0.11 sys=0.06, real=0.05 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 10728K-&gt;0K(76288K)] [ParOldGen: 232K-&gt;10889K(175104K)] 10960K-&gt;10889K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0066511 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        buffer=<span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//数组失去引用，可以被垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;888K(76288K)] 15493K-&gt;896K(251392K), 0.0010141 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 888K-&gt;0K(76288K)] [ParOldGen: 8K-&gt;649K(175104K)] 896K-&gt;649K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0039533 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func3</span><span class="params">()</span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分析：代码块中定义变量，在代码块外buffer变量失效，理论上可以进行垃圾回收</span></span><br><span class="line"><span class="comment">            但是分析字节码可知，局部变量表中最少有两个插槽(slot),this占用一个，此时buffer占用另一个，所以无法回收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;10728K(76288K)] 15493K-&gt;10984K(251392K), 0.0058958 secs] [Times: user=0.14 sys=0.05, real=0.01 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 10728K-&gt;0K(76288K)] [ParOldGen: 256K-&gt;10889K(175104K)] 10984K-&gt;10889K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0055648 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func4</span><span class="params">()</span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">//10MB</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> value=<span class="number">2</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分析：</span></span><br><span class="line"><span class="comment">            局部变量表中有两个插槽(slot),this占用一个，value占用另一个，数组失去引用，所以可以回收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;904K(76288K)] 15493K-&gt;912K(251392K), 0.0009706 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 904K-&gt;0K(76288K)] [ParOldGen: 8K-&gt;649K(175104K)] 912K-&gt;649K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0037296 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func5</span><span class="params">()</span>&#123;</span><br><span class="line">        func1();</span><br><span class="line">        <span class="comment">//函数调用结束，栈帧弹出，变量销毁，数组失去引用，可以回收</span></span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 15493K-&gt;10728K(76288K)] 15493K-&gt;10972K(251392K), 0.0055075 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 10728K-&gt;0K(76288K)] [ParOldGen: 244K-&gt;10889K(175104K)] 10972K-&gt;10889K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0064298 secs] [Times: user=0.06 sys=0.14, real=0.01 secs] </span></span><br><span class="line"><span class="comment">         * [GC (System.gc()) [PSYoungGen: 0K-&gt;0K(76288K)] 10889K-&gt;10889K(251392K), 0.0003798 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span><br><span class="line"><span class="comment">         * [Full GC (System.gc()) [PSYoungGen: 0K-&gt;0K(76288K)] [ParOldGen: 10889K-&gt;649K(175104K)] 10889K-&gt;649K(251392K), [Metaspace: 3273K-&gt;3273K(1056768K)], 0.0025422 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TTest</span> <span class="variable">tTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TTest</span>();</span><br><span class="line">        tTest.func5();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存溢出与内存泄露"><a href="#内存溢出与内存泄露" class="headerlink" title="内存溢出与内存泄露"></a>内存溢出与内存泄露</h2><h3 id="内存溢出-OOM"><a href="#内存溢出-OOM" class="headerlink" title="内存溢出(OOM)"></a>内存溢出(OOM)</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204100603722.png" alt="image-20231204100603722" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204101253072.png" alt="image-20231204101253072" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204101617960.png" alt="image-20231204101617960" style="zoom:80%;"></p><h3 id="内存泄漏-Memory-Leak"><a href="#内存泄漏-Memory-Leak" class="headerlink" title="内存泄漏(Memory Leak)"></a>内存泄漏(Memory Leak)</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204101815297.png" alt="image-20231204101815297" style="zoom:80%;"></p><p>宽泛意义上的内存泄漏的例子</p><ul><li>大量类的静态变量<ul><li>静态变量随着类的加载而加载，类的消亡而消亡</li></ul></li><li>web应用中，将大量数据设置成会话(session)或者应用(ApplicationContext)级别，会导致这些数据生成周期变得很长</li></ul><p><strong>内存泄漏示意图</strong></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204103147788.png" alt="image-20231204103147788" style="zoom:80%;"></p><p><strong>内存泄漏举例</strong></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204103357680.png" alt="image-20231204103357680" style="zoom:80%;"></p><h2 id="Stop-The-World"><a href="#Stop-The-World" class="headerlink" title="Stop The World"></a>Stop The World</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204103659921.png" alt="image-20231204103659921" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204104119879.png" alt="image-20231204104119879" style="zoom:80%;"></p><p><strong>STW直观感受的例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">STWTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GCThread</span> <span class="variable">gcThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GCThread</span>();</span><br><span class="line">        <span class="type">PrintThread</span> <span class="variable">printThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintThread</span>();</span><br><span class="line">        printThread.start();</span><br><span class="line">        gcThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GCThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            list.clear();</span><br><span class="line">            System.gc(); <span class="comment">//显示调用gc</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此线程作用:每个1s打印一次时间</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrintThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">t</span> <span class="operator">=</span> System.currentTimeMillis()-startTime;</span><br><span class="line">                System.out.println(t/<span class="number">1000</span>+<span class="string">&quot;.&quot;</span>+t%<span class="number">1000</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垃圾回收的并发与并行"><a href="#垃圾回收的并发与并行" class="headerlink" title="垃圾回收的并发与并行"></a>垃圾回收的并发与并行</h2><h3 id="操作系统中的并发与并行"><a href="#操作系统中的并发与并行" class="headerlink" title="操作系统中的并发与并行"></a>操作系统中的并发与并行</h3><h4 id="并发-concurrent"><a href="#并发-concurrent" class="headerlink" title="并发(concurrent)"></a>并发(concurrent)</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204105303662.png" alt="image-20231204105303662" style="zoom:80%;"></p><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204105623973.png" alt="image-20231204105623973" style="zoom:80%;"></p><h4 id="并发-vs-并行"><a href="#并发-vs-并行" class="headerlink" title="并发 vs 并行"></a>并发 vs 并行</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204105801589.png" alt="image-20231204105801589" style="zoom:80%;"></p><h3 id="垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）"><a href="#垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）" class="headerlink" title="垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）"></a>垃圾回收中的并发与并行（这个点讲的不好，有机会在其他渠道进行补充）</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204110005980.png" alt="image-20231204110005980" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204142924507.png" alt="image-20231204142924507" style="zoom:80%;"></p><h2 id="安全点与安全区域"><a href="#安全点与安全区域" class="headerlink" title="安全点与安全区域"></a>安全点与安全区域</h2><h3 id="安全点-safepoint"><a href="#安全点-safepoint" class="headerlink" title="安全点(safepoint)"></a>安全点(safepoint)</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204144329268.png" alt="image-20231204144329268" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204144751710.png" alt="image-20231204144751710" style="zoom:80%;"></p><h3 id="安全区域-safe-Region"><a href="#安全区域-safe-Region" class="headerlink" title="安全区域(safe Region)"></a>安全区域(safe Region)</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204145215230.png" alt="image-20231204145215230" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204145605854.png" alt="image-20231204145605854" style="zoom:80%;"></p><h2 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204150004345.png" alt="image-20231204150004345" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204150453101.png" alt="image-20231204150453101" style="zoom:80%;"></p><h3 id="再谈引用：强引用"><a href="#再谈引用：强引用" class="headerlink" title="再谈引用：强引用"></a>再谈引用：强引用</h3><p> <img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204152905636.png" alt="image-20231204152905636" style="zoom:80%;"></p><p> <img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204191125058.png" alt="image-20231204191125058" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204191200081.png" alt="image-20231204191200081" style="zoom:80%;"></p><h3 id="再谈引用：软引用"><a href="#再谈引用：软引用" class="headerlink" title="再谈引用：软引用"></a>再谈引用：软引用</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204191305349.png" alt="image-20231204191305349" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204192056968.png" alt="image-20231204192056968" style="zoom:80%;"></p><p><strong>软引用实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoftReferenceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建软引用</span></span><br><span class="line">        SoftReference&lt;User&gt; user = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;李白&quot;</span>));</span><br><span class="line">        System.out.println(user.get());</span><br><span class="line">        <span class="comment">//垃圾回收，空间充足情况下，不会回收软引用可达对象</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;After GC&quot;</span>);</span><br><span class="line">        <span class="comment">//获取软引用对应对象</span></span><br><span class="line">        System.out.println(user.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内存不足情况下，在OOM之前，会回收所有的软引用的可达对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//7M</span></span><br><span class="line">            <span class="comment">//对空间设置为: -Xms10m -Xmx10m,则新生代：老年代=1:2，两者均不足7m</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">7</span>];</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(user.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line">        User(Integer age,String name)&#123;</span><br><span class="line">            <span class="built_in">this</span>.name=name;</span><br><span class="line">            <span class="built_in">this</span>.age=age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204193451956.png" alt="image-20231204193451956" style="zoom:80%;"></p><h3 id="再谈引用：弱引用"><a href="#再谈引用：弱引用" class="headerlink" title="再谈引用：弱引用"></a>再谈引用：弱引用</h3><p>发现即回收</p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204194011334.png" alt="image-20231204194011334" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204194620085.png" alt="image-20231204194620085" style="zoom:80%;"></p><p><strong>弱引用实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoftReferenceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建软引用</span></span><br><span class="line">        WeakReference&lt;User&gt; user = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;李白&quot;</span>));</span><br><span class="line">        System.out.println(user.get());</span><br><span class="line">        <span class="comment">//垃圾回收,直接会将弱引用的可达对象进行回收，不管当前空间是否充足</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;After GC&quot;</span>);</span><br><span class="line">        <span class="comment">//获取弱引用对应对象</span></span><br><span class="line">        System.out.println(user.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line">        User(Integer age,String name)&#123;</span><br><span class="line">            <span class="built_in">this</span>.name=name;</span><br><span class="line">            <span class="built_in">this</span>.age=age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再谈引用：虚引用"><a href="#再谈引用：虚引用" class="headerlink" title="再谈引用：虚引用"></a>再谈引用：虚引用</h3><p>对象回收跟踪</p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204195048645.png" alt="image-20231204195048645" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204195315204.png" alt="image-20231204195315204" style="zoom:80%;"></p><h3 id="再谈引用：终结器引用"><a href="#再谈引用：终结器引用" class="headerlink" title="再谈引用：终结器引用"></a>再谈引用：终结器引用</h3><p>了解即可</p><p>  <img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/image-20231204200057416.png" alt="image-20231204200057416" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十四章：垃圾回收概述</title>
      <link href="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收概述"><a href="#垃圾回收概述" class="headerlink" title="垃圾回收概述"></a>垃圾回收概述</h1><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130094117977.png" alt="image-20231130094117977"></p><h2 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130095050581.png" alt="image-20231130095050581"></p><h2 id="为什么需要GC"><a href="#为什么需要GC" class="headerlink" title="为什么需要GC"></a>为什么需要GC</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130095918432.png" alt="image-20231130095918432"></p><h2 id="早期的垃圾回收"><a href="#早期的垃圾回收" class="headerlink" title="早期的垃圾回收"></a>早期的垃圾回收</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130100531006.png" alt="image-20231130100531006" style="zoom:80%;"></p><p> <img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130100813819.png" alt="image-20231130100813819" style="zoom:80%;"></p><h2 id="Java的垃圾回收机制"><a href="#Java的垃圾回收机制" class="headerlink" title="Java的垃圾回收机制"></a>Java的垃圾回收机制</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101130119.png" alt="image-20231130101130119"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101316294.png" alt="image-20231130101316294" style="zoom:80%;"></p><h2 id="垃圾回收的重点区域"><a href="#垃圾回收的重点区域" class="headerlink" title="垃圾回收的重点区域"></a>垃圾回收的重点区域</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101637771.png" alt="image-20231130101637771"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130101722357.png" alt="image-20231130101722357"></p><h2 id="经典大厂面试题"><a href="#经典大厂面试题" class="headerlink" title="经典大厂面试题"></a>经典大厂面试题</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130094709671.png" alt="image-20231130094709671" style="zoom: 80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/image-20231130094809137.png" alt="image-20231130094809137" style="zoom: 80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十五章：垃圾回收相关算法</title>
      <link href="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"/>
      <url>/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收相关算法"><a href="#垃圾回收相关算法" class="headerlink" title="垃圾回收相关算法"></a>垃圾回收相关算法</h1><p>基本思路：</p><ul><li>确定内存中什么是垃圾？</li><li>对这些垃圾如何处理进行回收？</li></ul><h2 id="垃圾标记阶段：对象存活判断"><a href="#垃圾标记阶段：对象存活判断" class="headerlink" title="垃圾标记阶段：对象存活判断"></a>垃圾标记阶段：对象存活判断</h2><p><strong><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130103042521.png" alt="image-20231130103042521"></strong></p><h3 id="垃圾标记阶段算法之引用计数算法"><a href="#垃圾标记阶段算法之引用计数算法" class="headerlink" title="垃圾标记阶段算法之引用计数算法"></a>垃圾标记阶段算法之引用计数算法</h3><h4 id="引用计数算法概述"><a href="#引用计数算法概述" class="headerlink" title="引用计数算法概述"></a>引用计数算法概述</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130103610017.png" alt="image-20231130103610017"></p><h4 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h4><p>如下图所示，为循环引用实例，实际程序中可能变量<code>p</code>不再使用时，其所指向的内存区域也不会再使用，但由于循环引用问题，导致执行的内存区域引用计数器的值非0，从而无法被垃圾回收，即出现内存泄漏问题</p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130103938439.png" alt="image-20231130103938439"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130104701315.png" alt="image-20231130104701315"></p><h3 id="垃圾标记阶段算法之可达性分析算法"><a href="#垃圾标记阶段算法之可达性分析算法" class="headerlink" title="垃圾标记阶段算法之可达性分析算法"></a>垃圾标记阶段算法之可达性分析算法</h3><h4 id="可达性分析算法概述"><a href="#可达性分析算法概述" class="headerlink" title="可达性分析算法概述"></a>可达性分析算法概述</h4><p><strong>可达性分析</strong>，又称之为<strong>根搜索算法</strong>或者<strong>追踪性垃圾收集</strong></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130105121100.png" alt="image-20231130105121100"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130105431861.png" alt="image-20231130105431861"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130105740157.png" alt="image-20231130105740157"></p><h4 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h4><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130110122576.png" alt="image-20231130110122576" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130110740489.png" alt="image-20231130110740489" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130110922587.png" alt="image-20231130110922587" style="zoom:80%;"></p><h2 id="对象的finalization机制"><a href="#对象的finalization机制" class="headerlink" title="对象的finalization机制"></a>对象的finalization机制</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130143106038.png" alt="image-20231130143106038"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130143500029.png" alt="image-20231130143500029"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130143819557.png" alt="image-20231130143819557"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130144120914.png" alt="image-20231130144120914"></p><p><strong>finalize方法使得对象存活实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象的Finalization机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalizeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FinalizeTest obj; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;重写finalize方法，企图自救&quot;</span>);</span><br><span class="line">        obj = <span class="built_in">this</span>; <span class="comment">//当前对象与GC roots中的obj(类静态属性)建立联系</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        obj = <span class="keyword">new</span> <span class="title class_">FinalizeTest</span>();</span><br><span class="line"></span><br><span class="line">        obj=<span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行第一次gc&quot;</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">//演示2S，因为finalize线程优先级比较低，主线程阻塞等待finalize线程执行</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象已经死亡&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象仍然存活&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        obj=<span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行第二次gc&quot;</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象已经死亡&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象仍然存活&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130145824079.png" alt="image-20231130145824079"></p><h2 id="MAT与JProfiler的GC-Roots朔源"><a href="#MAT与JProfiler的GC-Roots朔源" class="headerlink" title="MAT与JProfiler的GC Roots朔源"></a>MAT与JProfiler的GC Roots朔源</h2><h3 id="MAT-Memory-Analyzer"><a href="#MAT-Memory-Analyzer" class="headerlink" title="MAT(Memory Analyzer)"></a>MAT(Memory Analyzer)</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130150719600.png" alt="image-20231130150719600"></p><h3 id="dump文件"><a href="#dump文件" class="headerlink" title="dump文件"></a>dump文件</h3><h4 id="什么是dump文件"><a href="#什么是dump文件" class="headerlink" title="什么是dump文件"></a>什么是dump文件</h4><ul><li>dump文件是一个进程或者系统在某一个给定的时间的快照</li><li>dump文件是用来给驱动程序编写人员调试驱动程序用的，这种文件必须用专用工具软件打开。</li><li>dump文件中包含了程序运行的模块信息、线程信息、堆栈调用信息、异常信息等数据。</li><li>在服务器运行我们的Java程序时，是无法跟踪代码的，所以当发生线上事故时，dump文件就成了一个很关键的分析点。</li></ul><h4 id="获取dump文件"><a href="#获取dump文件" class="headerlink" title="获取dump文件"></a>获取dump文件</h4><h5 id="方式1：命令行使用jmap"><a href="#方式1：命令行使用jmap" class="headerlink" title="方式1：命令行使用jmap"></a>方式1：命令行使用jmap</h5><ul><li>首先通过<code>jps</code>获取对应java进程的pid</li><li>使用jmap命令生成对应的dump文件</li></ul><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130151606843.png" alt="image-20231130151606843"></p><h5 id="方式2：使用JVisualVM导出"><a href="#方式2：使用JVisualVM导出" class="headerlink" title="方式2：使用JVisualVM导出"></a>方式2：使用<code>JVisualVM</code>导出</h5><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130153102063.png" alt="image-20231130153102063"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130153914788.png" alt="image-20231130153914788"></p><h5 id="方式3：被动生成"><a href="#方式3：被动生成" class="headerlink" title="方式3：被动生成"></a>方式3：被动生成</h5><p>很多时候需要对程序<code>OOM</code>进行分析，但是不知道程序什么时候会发生<code>OOM</code>，所以需要在程序发生<code>OOM</code>时能够自动生成<code>dump</code>文件</p><p>通过添加<code>VM Options</code>参数，即可实现上述功能</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:<span class="keyword">\tmp</span></span><br></pre></td></tr></table></figure><p>其中HeapDumpPath表示生成dump文件保存的目录</p><h3 id="MAT查看GC-Roots"><a href="#MAT查看GC-Roots" class="headerlink" title="MAT查看GC Roots"></a>MAT查看GC Roots</h3><p>使用MAT打开dump文件，可以查看GC Roots列表</p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130155435272.png" alt="image-20231130155435272" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130155520639.png" alt="image-20231130155520639" style="zoom:80%;"></p><h3 id="JProfiler的GC-Roots朔源"><a href="#JProfiler的GC-Roots朔源" class="headerlink" title="JProfiler的GC Roots朔源"></a>JProfiler的GC Roots朔源</h3><p><code>IDEA</code>安装<code>JProfiler</code>插件，可以对当前程序利用<code>JProfiler</code>进行分析</p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160245711.png" alt="image-20231130160245711"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160416543.png" alt="image-20231130160416543" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160651932.png" alt="image-20231130160651932" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160740840.png" alt="image-20231130160740840" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160839853.png" alt="image-20231130160839853" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130160907272.png" alt="image-20231130160907272" style="zoom:80%;"></p><h3 id="JProfiler分析OOM"><a href="#JProfiler分析OOM" class="headerlink" title="JProfiler分析OOM"></a>JProfiler分析OOM</h3><p><strong>OOM程序示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对空间OMM情况分析</span></span><br><span class="line"><span class="comment"> * -Xms8m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapOOM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        List&lt;HeapOOM&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">HeapOOM</span>());</span><br><span class="line">                count+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;count=&quot;</span>+count);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130162336328.png" alt="image-20231130162336328"></p><p>利用<code>JProfiler</code>打开其自动生成的<code>dump</code>文件</p><p>查看内存中的超大对象，发现<code>ArrayList</code>对象占据了整个内存的<code>89%</code></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130162720129.png" alt="image-20231130162720129"></p><p>查看进程dump，可以发现<code>main</code>线程中存在异常，且异常位于24行</p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231130162823405.png" alt="image-20231130162823405"></p><h2 id="垃圾清除阶段"><a href="#垃圾清除阶段" class="headerlink" title="垃圾清除阶段"></a>垃圾清除阶段</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201093119873.png" alt="image-20231201093119873"></p><h3 id="垃圾清除阶段之标记-清除-Mark-Sweep-算法"><a href="#垃圾清除阶段之标记-清除-Mark-Sweep-算法" class="headerlink" title="垃圾清除阶段之标记-清除(Mark-Sweep)算法"></a>垃圾清除阶段之标记-清除(Mark-Sweep)算法</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201093524180.png" alt="image-20231201093524180" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201093943267.png" alt="image-20231201093943267" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201094514124.png" alt="image-20231201094514124" style="zoom:80%;"></p><h3 id="垃圾清除阶段之复制算法"><a href="#垃圾清除阶段之复制算法" class="headerlink" title="垃圾清除阶段之复制算法"></a>垃圾清除阶段之复制算法</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201095207972.png" alt="image-20231201095207972" style="zoom:67%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201101020057.png" alt="image-20231201101020057" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201102111776.png" alt="image-20231201102111776" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201103312797.png" alt="image-20231201103312797" style="zoom:80%;"></p><h3 id="垃圾清除阶段之标记-压缩-整理-算法"><a href="#垃圾清除阶段之标记-压缩-整理-算法" class="headerlink" title="垃圾清除阶段之标记-压缩(整理)算法"></a>垃圾清除阶段之标记-压缩(整理)算法</h3><p>标记-压缩(或标记-整理、Mark-Compact)算法</p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201103734129.png" alt="image-20231201103734129" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201104011304.png" alt="image-20231201104011304" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201104545349.png" alt="image-20231201104545349" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201104930808.png" alt="image-20231201104930808" style="zoom:80%;"></p><h3 id="垃圾清除阶段总结"><a href="#垃圾清除阶段总结" class="headerlink" title="垃圾清除阶段总结"></a>垃圾清除阶段总结</h3><p>垃圾清除阶段三种算法对比</p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201105234751.png" alt="image-20231201105234751" style="zoom:80%;"></p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201111203833.png" alt="image-20231201111203833" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201111627792.png" alt="image-20231201111627792" style="zoom:80%;"></p><p> <img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201112244353.png" alt="image-20231201112244353" style="zoom:80%;"></p><h2 id="增量收集算法、分区算法"><a href="#增量收集算法、分区算法" class="headerlink" title="增量收集算法、分区算法"></a>增量收集算法、分区算法</h2><h3 id="增量收集算法"><a href="#增量收集算法" class="headerlink" title="增量收集算法"></a>增量收集算法</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201112505753.png" alt="image-20231201112505753" style="zoom:80%;"></p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201143437543.png" alt="image-20231201143437543" style="zoom:80%;"></p><h3 id="分区算法"><a href="#分区算法" class="headerlink" title="分区算法"></a>分区算法</h3><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201144454338.png" alt="image-20231201144454338" style="zoom:80%;"></p><p> 根据停顿时间要求，合理规划需要垃圾回收区域的数目和范围</p><p><img src="/2023/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%EF%BC%9A%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/image-20231201144846213.png" alt="image-20231201144846213" style="zoom:80%;"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述内容只是常见垃圾标记和回收算法的基本思路，实际GC过程远远要比其复杂，目前前沿主流的GC算法大多都是复合算法，并且要同时考虑并发和并行的要求</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、项目前置配置</title>
      <link href="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/"/>
      <url>/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="项目前置配置"><a href="#项目前置配置" class="headerlink" title="项目前置配置"></a>项目前置配置</h1><h2 id="IDEA设置热部署"><a href="#IDEA设置热部署" class="headerlink" title="IDEA设置热部署"></a>IDEA设置热部署</h2><p><a href="https://blog.csdn.net/qq_19007335/article/details/124069635">2022版本IDEA配置参考博客</a></p><p><strong>step1:</strong> <code>setting-&gt;Compiler</code></p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127231931248.png" alt="image-20231127231931248" style="zoom:67%;"></p><p><strong>step2:</strong><code>setting-Advance Settings</code></p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127232101600.png" alt="image-20231127232101600" style="zoom:67%;"></p><h2 id="实现代码关联远程git仓库"><a href="#实现代码关联远程git仓库" class="headerlink" title="实现代码关联远程git仓库"></a>实现代码关联远程git仓库</h2><p>实际场景中，完成一个小功能应当及时提交远程仓库</p><p><code>vcs-&gt;enable Version Control</code>:相当于<code>git init</code></p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127233059818.png" alt="image-20231127233059818"></p><p>IDEA右上角出现<code>git</code>相关的功能按钮</p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127233400586.png" alt="image-20231127233400586"></p><p>左下角<code>git</code>可以查看对应的信息，比如日志、未提交的文件等</p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231127233536503.png" alt="image-20231127233536503" style="zoom:67%;"></p><p>在<code>Terminal</code>下关联自己的github`执行以下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关联自己的github(以前设置后无需重复设置,ssh key免登录)</span></span><br><span class="line">git config --global user.name xxx</span><br><span class="line">git config --global user.email xxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将其与远程仓库关联起来,其中origin是别名</span></span><br><span class="line">git remote add origin 远程github地址(注意是ssh形式地址)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提交至远程仓库</span></span><br><span class="line">git push -u  origin 分支名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除关联远程仓库</span></span><br><span class="line">git remote remove origin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看关联远程仓库列表</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h2 id="新建子模块"><a href="#新建子模块" class="headerlink" title="新建子模块"></a>新建子模块</h2><p>整个<code>project</code>由不同的子<code>Module</code>组成，<code>project</code>下的<code>pom.xml</code>只做模块管理</p><p>整个项目目录如下：</p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231128225726688.png" alt="image-20231128225726688"></p><h2 id="日志的相关配置"><a href="#日志的相关配置" class="headerlink" title="日志的相关配置"></a>日志的相关配置</h2><h3 id="项目启动信息配置"><a href="#项目启动信息配置" class="headerlink" title="项目启动信息配置"></a><strong>项目启动信息配置</strong></h3><p>改写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberApplication</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(MemberApplication.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        SpringApplication.run(MemberApplication.class, args);</span></span><br><span class="line">        <span class="comment">//获取项目启动环境</span></span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(MemberApplication.class);</span><br><span class="line">        <span class="type">Environment</span> <span class="variable">env</span> <span class="operator">=</span> app.run(args).getEnvironment();</span><br><span class="line">        LOG.info(<span class="string">&quot;启动成功&quot;</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;地址:\thttp://127.0.0.1:&#123;&#125;&quot;</span>,env.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231128230602153.png" alt="image-20231128230602153"></p><p><a href="https://www.bootschool.net/ascii-art/search">banner.txt在线生成工具</a></p><h3 id="项目运行日志"><a href="#项目运行日志" class="headerlink" title="项目运行日志"></a>项目运行日志</h3><p>在<code>resource</code>目录下新建日志配置文件<code>loggback-spring.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log日志文件存储路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;./log/memeber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;Pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight(%-5level) %blue(%-50logger&#123;50&#125;:%-4line) %thread %green(%-18X&#123;LOG_ID&#125;) %msg%n&lt;/Pattern&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;hh:mm:ss.SSS&#125; %highlight(%-5level) %blue(%-30logger&#123;30&#125;:%-4line) %thread %green(%-18X&#123;LOG_ID&#125;) %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;TRACE_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;PATH&#125;/trace.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;PATH&#125;/trace.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %-50logger&#123;50&#125;:%-4line %green(%-18X&#123;LOG_ID&#125;) %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;PATH&#125;/error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;PATH&#125;/error.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %-50logger&#123;50&#125;:%-4line %green(%-18X&#123;LOG_ID&#125;) %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;TRACE&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;TRACE_FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用Http-Client完成测试接口"><a href="#使用Http-Client完成测试接口" class="headerlink" title="使用Http Client完成测试接口"></a>使用Http Client完成测试接口</h2><p><code>IDEA</code>自带<code>Http Clinet</code>插件，只要新建<code>.http</code>文件，即可发起<code>http</code>请求</p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129000739903.png" alt="image-20231129000739903"></p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129000858213.png" alt="image-20231129000858213"></p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129000956969.png" alt="image-20231129000956969" style="zoom:67%;"></p><h2 id="增加AOP打印请求参数和返回结果"><a href="#增加AOP打印请求参数和返回结果" class="headerlink" title="增加AOP打印请求参数和返回结果"></a>增加AOP打印请求参数和返回结果</h2><p><code>AOP</code>和<code>Interceptor</code>都可以实现此功能，但是<code>Interceptor</code>只能处理<code>Controller</code>层的处理结果，</p><p>在<code>memeber</code>模块下新建<code>AOP</code>打印日志类<code>aspect.LogAspect</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.member.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.PropertyPreFilters;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogAspect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Common LogAspect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切点:作用于package com.bang下的所有类名中带有Controller的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.bang..*Controller.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">controllerPointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;controllerPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始打印请求日志</span></span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印请求信息</span></span><br><span class="line">        LOG.info(<span class="string">&quot;------------- 开始 -------------&quot;</span>);</span><br><span class="line">        LOG.info(<span class="string">&quot;请求地址: &#123;&#125; &#123;&#125;&quot;</span>, request.getRequestURL().toString(), request.getMethod());</span><br><span class="line">        LOG.info(<span class="string">&quot;类名方法: &#123;&#125;.&#123;&#125;&quot;</span>, signature.getDeclaringTypeName(), name);</span><br><span class="line">        LOG.info(<span class="string">&quot;远程地址: &#123;&#125;&quot;</span>, request.getRemoteAddr());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印请求参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="comment">// LOG.info(&quot;请求参数: &#123;&#125;&quot;, JSONObject.toJSONString(args));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排除特殊类型的参数，如文件类型</span></span><br><span class="line">        Object[] arguments = <span class="keyword">new</span> <span class="title class_">Object</span>[args.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> ServletRequest</span><br><span class="line">                    || args[i] <span class="keyword">instanceof</span> ServletResponse</span><br><span class="line">                    || args[i] <span class="keyword">instanceof</span> MultipartFile) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arguments[i] = args[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排除字段，敏感字段或太长的字段不显示：身份证、手机号、邮箱、密码等</span></span><br><span class="line">        String[] excludeProperties = &#123;&#125;;</span><br><span class="line">        <span class="type">PropertyPreFilters</span> <span class="variable">filters</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyPreFilters</span>();</span><br><span class="line">        PropertyPreFilters.<span class="type">MySimplePropertyPreFilter</span> <span class="variable">excludefilter</span> <span class="operator">=</span> filters.addFilter();</span><br><span class="line">        excludefilter.addExcludes(excludeProperties);</span><br><span class="line">        LOG.info(<span class="string">&quot;请求参数: &#123;&#125;&quot;</span>, JSONObject.toJSONString(arguments, excludefilter));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;controllerPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        <span class="comment">// 排除字段，敏感字段或太长的字段不显示：身份证、手机号、邮箱、密码等</span></span><br><span class="line">        String[] excludeProperties = &#123;&#125;;</span><br><span class="line">        <span class="type">PropertyPreFilters</span> <span class="variable">filters</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyPreFilters</span>();</span><br><span class="line">        PropertyPreFilters.<span class="type">MySimplePropertyPreFilter</span> <span class="variable">excludefilter</span> <span class="operator">=</span> filters.addFilter();</span><br><span class="line">        excludefilter.addExcludes(excludeProperties);</span><br><span class="line">        LOG.info(<span class="string">&quot;返回结果: &#123;&#125;&quot;</span>, JSONObject.toJSONString(result, excludefilter));</span><br><span class="line">        LOG.info(<span class="string">&quot;------------- 结束 耗时：&#123;&#125; ms -------------&quot;</span>, System.currentTimeMillis() - startTime);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129233256857.png" alt="image-20231129233256857" style="zoom:67%;"></p><h2 id="新建公共子模块common"><a href="#新建公共子模块common" class="headerlink" title="新建公共子模块common"></a>新建公共子模块common</h2><p>微服务项目一般存在多个模块，每个模块对应一个服务，负责某一项功能，各个模块可能存在许多公共的代码和相同的依赖，此时为了减小代码冗余和代码管理和修改，我们在项目下新建一个子模块<code>common</code></p><ul><li>将公共代码放在此模块下<ul><li>比如：工具类、拦截器、AOP、常量、枚举类、公共配置等</li></ul></li><li>将公共的依赖包放在此模块下的<code>pom</code>文件中<ul><li>根目录下的<code>pom</code>文件负责依赖包的版本管理</li><li>公共模块下的<code>pom</code>文件负责管理需要导入的包</li></ul></li></ul><p>比如：上述AOP实现打印请求和返回结果的日志代码就可以移除到该模块下，但要注意，此时应该修改<code>memeber</code>模块下启动类的扫描范围，即<code>@ComponentScan(&quot;com.bang.train.*&quot;)</code></p><p>增加公共模块后的项目目录</p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231129235041656.png" alt="image-20231129235041656"></p><h2 id="新建网关模块"><a href="#新建网关模块" class="headerlink" title="新建网关模块"></a>新建网关模块</h2><p>网关模块主要用于：路由转发、请求校验</p><p>网关模块的配置文件<code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">memeber</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8001</span> <span class="comment">#目前项目中未使用注册中心Nacos,所以只能使用ip地址＋端口号的形式表明需要转发的地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/member/**</span></span><br></pre></td></tr></table></figure><h2 id="本地数据库的构建"><a href="#本地数据库的构建" class="headerlink" title="本地数据库的构建"></a>本地数据库的构建</h2><p>对于各个项目而言，最好能够做到配置<strong>专库专用</strong>，对于一个项目，新建对应数据库的同时，创建一个专门的用户，将该用户的权限局限于对本项目对应数据库的增删改查，避免影响服务器中其他数据库里的数据。</p><h2 id="集成Mybatis持久层框架"><a href="#集成Mybatis持久层框架" class="headerlink" title="集成Mybatis持久层框架"></a>集成Mybatis持久层框架</h2><p>引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 集成mysql连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据库连接</p><p>在<code>application.yaml</code>配置文件中进行设置</p><h2 id="集成Mybatis官方生成器"><a href="#集成Mybatis官方生成器" class="headerlink" title="集成Mybatis官方生成器"></a>集成Mybatis官方生成器</h2><p>利用<code>mybatis</code>框架，需要：<code>编写持久层接口</code>-&gt;<code>编写对应的mapper.xml</code>文件(需要手动编写对应的SQL语句)</p><p>以上过程需要耗费较多经历，为简化开发可以使用以下两种替代方案</p><ul><li><code>Mybatis-Plus</code>第三方框架</li><li><code>Mybatis</code>＋官方生成器</li></ul><p>这里我们采用第二种方案<code>Mybatis</code>+官方生成器</p><p>使用<code>Mybatis</code>官方生成器步骤</p><ol><li><p>新建一个新的<code>maven</code>项目<code>generator</code></p></li><li><p>在<code>generator</code>项目的<code>pom</code>文件中引入<code>mybatis generator</code>自动生成代码插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置文件申明，为什么数据库、什么表生成代码，都需要在该配置文件中定义--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;configurationFile&gt;src/main/resources/generator-config-member.xml&lt;/configurationFile&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generator-config-business.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;configurationFile&gt;src/main/resources/generator-config-batch.xml&lt;/configurationFile&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写对应的配置文件<code>src/main/resources/generator-config-member.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;Mysql&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--覆盖生成XML文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的实体类添加toString()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不生成注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据源，需要根据自己的项目修改 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/train_member?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;train_member&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;wu123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- domain类的位置 targetProject是相对pom.xml的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.domain&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper xml的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/resources&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper类的位置 targetProject是相对pom.xml的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;../member/src/main/java&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.bang.train.member.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;member&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Member&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;table tableName=&quot;passenger&quot; domainObjectName=&quot;Passenger&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;table tableName=&quot;ticket&quot; domainObjectName=&quot;Ticket&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>点击<code>mybatis generator</code>对应maven插件，会生成对应的代码文件</p><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231203231111219.png" alt="image-20231203231111219" style="zoom:80%;"></p></li><li><p>生成的代码文件</p><ul><li><code>com.bang.train.member.domain.Member</code>：数据库<code>train_member</code>的<code>member</code>表对应的<code>java实体类</code>（PO）</li><li><code>com.bang.train.member.domain.MemberExample</code>:组装SQL语句中<code>where</code>后面的条件对应的实体类;条件构建器，用于构建SQL语句中的各种条件</li><li><code>com.bang.train.member.mapper.MemberMapper</code>:持久层对应的接口</li><li><code>src/main/resources/mapper/memberMapper.xml</code>:对应的<code>mapper.xml</code>文件，里面含有各种<code>SQL</code>语句</li></ul><p><img src="/2023/12/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C/image-20231203231302379.png" alt="image-20231203231302379"></p></li><li><p>注意：</p><p>以上四个文件一定不要去动，每次重新店家genartor maven插件，这四个文件都会被覆盖重写；如果官方生成器对应插件无法满足项目需求，自定义的代码应编写在新的文件里，千万不要直接在这四个文件后面追加。</p></li></ol><h2 id="会员注册接口开发"><a href="#会员注册接口开发" class="headerlink" title="会员注册接口开发"></a>会员注册接口开发</h2><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><p>在<code>com.bang.train.member.IMemberService</code>接口下新建抽象方法<code>register</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile 用户提供的手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">register</span><span class="params">(String mobile)</span>;</span><br></pre></td></tr></table></figure><p>在<code>com.bang.train.member.MemberServiceImpl</code>类下实现对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(String mobile)</span> &#123;</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">MemberExample</span> <span class="variable">memberExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberExample</span>();</span><br><span class="line">    memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">    List&lt;Member&gt; memberList = memberMapper.selectByExample(memberExample);</span><br><span class="line">    <span class="keyword">if</span>(!CollUtil.isEmpty(memberList))&#123;<span class="comment">//非空，说明手机号已被注册</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;手机号已被注册&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">    member.setId(System.currentTimeMillis());</span><br><span class="line">    member.setMobile(mobile);</span><br><span class="line">    memberMapper.insert(member);</span><br><span class="line">    <span class="keyword">return</span> member.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(String mobile)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> memberService.register(mobile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写http文件利用Http-Client进行测试"><a href="#编写http文件利用Http-Client进行测试" class="headerlink" title="编写http文件利用Http Client进行测试"></a>编写http文件利用Http Client进行测试</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://localhost:8001/member/register</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">mobile=15823209537</span><br></pre></td></tr></table></figure><h2 id="封装请求参数和结果-此模块的代码个人认为没有电脑商城项目好"><a href="#封装请求参数和结果-此模块的代码个人认为没有电脑商城项目好" class="headerlink" title="封装请求参数和结果(此模块的代码个人认为没有电脑商城项目好))"></a>封装请求参数和结果(此模块的代码个人认为没有电脑商城项目好))</h2><h3 id="封装请求参数"><a href="#封装请求参数" class="headerlink" title="封装请求参数"></a>封装请求参数</h3><p>对于每个功能模块，将对应的请求参数封装成一个实体类，注意实体类的属性名与请求参数名要一致，这样前端请求会自动映射到实体类对应属性值</p><p>新建<code>member</code>模块下用户注册对应的请求参数实体类<code>com.bang.train.member.req.MemberRegReq</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberRegReq</span> &#123;</span><br><span class="line">    String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装响应结果"><a href="#封装响应结果" class="headerlink" title="封装响应结果"></a>封装响应结果</h3><p>响应结果包含三大基本信息：响应状态、响应状态描述信息、响应数据</p><p>在<code>common</code>模块新建公共响应实体类<code>com.bang.train.common.resp.CommonResp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应公共实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 响应数据类类型，这里用泛型表示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResp</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">//响应状态，true表示成功，false表示失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> success=<span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//响应状态描述信息</span></span><br><span class="line">    <span class="keyword">public</span> String message;</span><br><span class="line">    <span class="comment">//响应数据</span></span><br><span class="line">    <span class="keyword">public</span> T content;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResp</span><span class="params">(T content)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content=content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对应控制层代码修改"><a href="#对应控制层代码修改" class="headerlink" title="对应控制层代码修改"></a>对应控制层代码修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Long&gt; <span class="title function_">register</span><span class="params">(MemberRegReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;Long&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.register(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一异常处理（此模块的代码个人认为没有电脑商城项目好"><a href="#统一异常处理（此模块的代码个人认为没有电脑商城项目好" class="headerlink" title="统一异常处理（此模块的代码个人认为没有电脑商城项目好)"></a>统一异常处理（此模块的代码个人认为没有电脑商城项目好)</h2><p>业务层根据业务逻辑和执行结果，会向上层抛出各种类型异常，控制层需要对异常进行处理，直接将异常抛给前端不友好，需要针对异常，转换成统一的响应结果数据格式，所以需要构建统一异常处理类，借助于<code>Spring</code>的<code>@ExceptionHandler</code>注解来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">controller层统一的异常处理拦截</span></span><br><span class="line"><span class="comment">@ControllerAdvice使得该类对所有的Controller均有效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(ControllerExceptionHandler.class);</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        commResp.setMessage(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> commResp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>根据业务层的业务逻辑，自定义对应的异常类，可以考虑利用枚举类进行异常的管理</p><p><strong>定义枚举类，统一管理自定义异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">BusinessExceptionEnum</span> &#123;</span><br><span class="line">    MEMBER_EXIST_ERROR(<span class="string">&quot;手机号已注册&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    BusinessExceptionEnum(String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BusinessExceptionEnum&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义业务异常类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> BusinessExceptionEnum E;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(BusinessExceptionEnum E)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.E = E;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改统一的异常处理模块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.train.common.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.train.common.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.bang.train.common.resp.CommonResp;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">controller层统一的异常处理拦截</span></span><br><span class="line"><span class="comment">@ControllerAdvice使得该类对所有的Controller均有效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(ControllerExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//未知类型异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException1</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        commResp.setMessage(<span class="string">&quot;未知类型异常,请联系管理员&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> commResp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//业务类型异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException2</span><span class="params">(BusinessException e)</span>&#123;</span><br><span class="line">        CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">        commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        commResp.setMessage(e.getE().getDesc());</span><br><span class="line">        <span class="keyword">return</span> commResp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集成校验框架Validation"><a href="#集成校验框架Validation" class="headerlink" title="集成校验框架Validation"></a>集成校验框架Validation</h2><p>在实际生产环境中，大多数情况下需要对用户的输入参数进行校验，比如校验输入是否有特殊字符、手机号位数是否正确等；当然，输入的校验也可在前端进行</p><p>校验框架<code>Validation</code>的使用步骤</p><p><strong>引入对应的pom依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Validation校验框架 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过注解方式进行参数校验</strong></p><p>在<code>member</code>模块中注册功能对应的请求参数实体类进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberRegReq</span> &#123;</span><br><span class="line">    <span class="comment">//@NotBlank:该参数不能为空，为空返回message，不能进入对应请求</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;【手机号】不能为空&quot;)</span></span><br><span class="line">    String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在注册功能对应<code>controller</code>类的请求处理方法上加上注解<code>@Valid</code>让校验功能起效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Long&gt; <span class="title function_">register</span><span class="params">(<span class="meta">@Valid</span> MemberRegReq req)</span>&#123;</span><br><span class="line">    CommonResp&lt;Long&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setContent(memberService.register(req));</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增校验异常处理代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> CommonResp&lt;Void&gt; <span class="title function_">handleException1</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">    CommonResp&lt;Void&gt; commResp = <span class="keyword">new</span> <span class="title class_">CommonResp</span>&lt;&gt;();</span><br><span class="line">    commResp.setSuccess(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span>(e <span class="keyword">instanceof</span> BindException)&#123;</span><br><span class="line">        <span class="type">BindException</span> <span class="variable">be</span> <span class="operator">=</span> (BindException) e;</span><br><span class="line">        <span class="comment">//获取异常提示信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> be.getBindingResult().getAllErrors().get(<span class="number">0</span>).getDefaultMessage();</span><br><span class="line">        commResp.setMessage(message);</span><br><span class="line">        LOG.error(<span class="string">&quot;校验异常:&#123;&#125;&quot;</span>,message);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        commResp.setMessage(<span class="string">&quot;未知类型异常,请联系管理员&quot;</span>);</span><br><span class="line">        LOG.error(<span class="string">&quot;未知类型异常，请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> commResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h2><p><code>member</code>模块注册功能业务层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(MemberRegReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">MemberExample</span> <span class="variable">memberExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberExample</span>();</span><br><span class="line">    memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">    List&lt;Member&gt; memberList = memberMapper.selectByExample(memberExample);</span><br><span class="line">    <span class="keyword">if</span>(!CollUtil.isEmpty(memberList))&#123;<span class="comment">//非空，说明手机号已被注册</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_EXIST_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">    member.setId(System.currentTimeMillis());</span><br><span class="line">    member.setMobile(mobile);</span><br><span class="line">    memberMapper.insert(member);</span><br><span class="line">    <span class="keyword">return</span> member.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前，新注册用户的<code>ID</code>是用当前时间戳来表示，在高并发场景下存在非唯一性问题，因为同一时刻存在大量请求</p><p>目前的可采取的其他方法及其对应的问题</p><ul><li><p>采用时间戳+随机数问题：并发数大的情况下，仍然无法保证唯一性</p></li><li><p>ID自增：自增ID不适用于分布式数据库，分表分库场景，只适用于小型项目</p></li><li><p>UUID</p><ul><li>UUID会影响索引效率，因为UUID是无序的，用一堆无序的ID来构建一个有序的索引目录，性能上肯定有问题</li></ul></li><li><p>雪花算法：全局唯一、有序增长、生成效率高</p><ul><li><p>hutool工具内部集成了雪花算法</p><ul><li>```java<br>//参数1为终端ID<br>//参数2为数据中心ID<br>//参数1和参数2保证了每台机器生成ID的唯一性<br>Snowflake snowflake = IdUtil.createSnowflake(1, 1);<br>long id = snowflake.nextId();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - [hutool工具参考链接](https://www.bookstack.cn/read/hutool/bfd2d43bcada297e.md)</span><br><span class="line"></span><br><span class="line">### 雪花算法原理</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;03 项目配置前置工作/image-20231205232621491.png&quot; alt=&quot;image-20231205232621491&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">### 雪花算法使用过程的注意点</span><br><span class="line"></span><br><span class="line">- 数据中心以及机器ID怎么设置？</span><br><span class="line">  - 方法1：利用redis自增序列，这样每台机器启动时，从redis获取一个ID，不重复</span><br><span class="line">  - 方法2：利用数据库，为每台机器分配ID，保存ip和workID的关系</span><br><span class="line">- 时钟回拨</span><br><span class="line">  - [时钟回拨解决方法参考](https://blog.csdn.net/qq_34687559/article/details/115910152)</span><br><span class="line"></span><br><span class="line">### `member`模块`service`层代码变更</span><br><span class="line"></span><br><span class="line">将雪花算法获取ID代码进行封装</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class SnowUtil &#123;</span><br><span class="line">    //workerId和datacenterId两个属性值，在项目启动时，可以通过redis或者数据库读取，读取之后，该值就会固定不变</span><br><span class="line">    private static int workerId = 1;</span><br><span class="line">    private static int datacenterId = 1;</span><br><span class="line">    public static long getSnowflakeId()&#123;</span><br><span class="line">        return IdUtil.getSnowflake(workerId,datacenterId).nextId();</span><br><span class="line">    &#125;</span><br><span class="line">    public static String getSnowflakeStr()&#123;</span><br><span class="line">        return IdUtil.getSnowflake(workerId,datacenterId).nextIdStr();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>更改<code>service</code>层注册功能代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">register</span><span class="params">(MemberRegReq req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> req.getMobile();</span><br><span class="line">    <span class="comment">//1.判断当前手机号是否已被注册</span></span><br><span class="line">    <span class="type">MemberExample</span> <span class="variable">memberExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberExample</span>();</span><br><span class="line">    memberExample.createCriteria().andMobileEqualTo(mobile);</span><br><span class="line">    List&lt;Member&gt; memberList = memberMapper.selectByExample(memberExample);</span><br><span class="line">    <span class="keyword">if</span>(!CollUtil.isEmpty(memberList))&#123;<span class="comment">//非空，说明手机号已被注册</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(BusinessExceptionEnum.MEMBER_EXIST_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line">    <span class="comment">//采用雪花算法生成注册用户在数据库中对应的ID</span></span><br><span class="line">    member.setId(SnowUtil.getSnowflakeId());</span><br><span class="line">    member.setMobile(mobile);</span><br><span class="line">    memberMapper.insert(member);</span><br><span class="line">    <span class="keyword">return</span> member.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 12306买票系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十二章：执行引擎</title>
      <link href="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
      <url>/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h1><h2 id="执行引擎的作用及工作过程概述"><a href="#执行引擎的作用及工作过程概述" class="headerlink" title="执行引擎的作用及工作过程概述"></a>执行引擎的作用及工作过程概述</h2><h3 id="执行引擎概述"><a href="#执行引擎概述" class="headerlink" title="执行引擎概述"></a>执行引擎概述</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127094459845.png" alt="image-20231127094459845"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127095144384.png" alt="image-20231127095144384"></p><h3 id="执行引擎的工作过程"><a href="#执行引擎的工作过程" class="headerlink" title="执行引擎的工作过程"></a>执行引擎的工作过程</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127095630093.png" alt="image-20231127095630093"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127100153350.png" alt="image-20231127100153350"></p><h2 id="Java代码编译和执行的过程"><a href="#Java代码编译和执行的过程" class="headerlink" title="Java代码编译和执行的过程"></a>Java代码编译和执行的过程</h2><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127100342897.png" alt="image-20231127100342897"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101115701.png" alt="image-20231127101115701"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101157223.png" alt="image-20231127101157223"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101253276.png" alt="image-20231127101253276"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127101724143.png" alt="image-20231127101724143"></p><h2 id="机器码、指令、汇编语言"><a href="#机器码、指令、汇编语言" class="headerlink" title="机器码、指令、汇编语言"></a>机器码、指令、汇编语言</h2><h3 id="机器码"><a href="#机器码" class="headerlink" title="机器码"></a>机器码</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102308898.png" alt="image-20231127102308898"></p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102505973.png" alt="image-20231127102505973"></p><h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102648186.png" alt="image-20231127102648186"></p><h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102756988.png" alt="image-20231127102756988"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127102953222.png" alt="image-20231127102953222"></p><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127103123575.png" alt="image-20231127103123575"></p><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127103522274.png" alt="image-20231127103522274"></p><h3 id="解释器的工作机制-工作任务"><a href="#解释器的工作机制-工作任务" class="headerlink" title="解释器的工作机制(工作任务)"></a>解释器的工作机制(工作任务)</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104215822.png" alt="image-20231127104215822"></p><h3 id="解释器分类"><a href="#解释器分类" class="headerlink" title="解释器分类"></a>解释器分类</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104308534.png" alt="image-20231127104308534"></p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104504559.png" alt="image-20231127104504559"></p><h2 id="JIT编译器"><a href="#JIT编译器" class="headerlink" title="JIT编译器"></a>JIT编译器</h2><h3 id="Java代码的执行分类"><a href="#Java代码的执行分类" class="headerlink" title="Java代码的执行分类"></a>Java代码的执行分类</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104906668.png" alt="image-20231127104906668"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127104951399.png" alt="image-20231127104951399"></p><h3 id="为什么需要解释器和编译器并存"><a href="#为什么需要解释器和编译器并存" class="headerlink" title="为什么需要解释器和编译器并存"></a>为什么需要解释器和编译器并存</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127105434082.png" alt="image-20231127105434082"></p><h3 id="HotSpot-JVM的执行方式"><a href="#HotSpot-JVM的执行方式" class="headerlink" title="HotSpot JVM的执行方式"></a>HotSpot JVM的执行方式</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127105629966.png" alt="image-20231127105629966"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127110222170.png" alt="image-20231127110222170"></p><h3 id="JIT编译器概述"><a href="#JIT编译器概述" class="headerlink" title="JIT编译器概述"></a>JIT编译器概述</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127111440086.png" alt="image-20231127111440086"></p><h3 id="啥时候选择JIT-热点代码及探测方式"><a href="#啥时候选择JIT-热点代码及探测方式" class="headerlink" title="啥时候选择JIT(热点代码及探测方式)"></a>啥时候选择JIT(热点代码及探测方式)</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127111952987.png" alt="image-20231127111952987"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127143119261.png" alt="image-20231127143119261"></p><h4 id="方法调用计数器"><a href="#方法调用计数器" class="headerlink" title="方法调用计数器"></a>方法调用计数器</h4><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127143628745.png" alt="image-20231127143628745"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127144131258.png" alt="image-20231127144131258" style="zoom: 80%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127144331908.png" alt="image-20231127144331908"></p><h4 id="回边计数器"><a href="#回边计数器" class="headerlink" title="回边计数器"></a>回边计数器</h4><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127145407140.png" alt="image-20231127145407140"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127145552778.png" alt="image-20231127145552778"></p><h2 id="HotSpot-VM设置模式"><a href="#HotSpot-VM设置模式" class="headerlink" title="HotSpot VM设置模式"></a>HotSpot VM设置模式</h2><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127145732658.png" alt="image-20231127145732658"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127150608208.png" alt="image-20231127150608208"></p><h2 id="HotSpot-VM中JIT分类"><a href="#HotSpot-VM中JIT分类" class="headerlink" title="HotSpot VM中JIT分类"></a>HotSpot VM中JIT分类</h2><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127151358422.png" alt="image-20231127151358422"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152002002.png" alt="image-20231127152002002"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152025530.png" alt="image-20231127152025530"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152421873.png" alt="image-20231127152421873"></p><h2 id="最近的发展-了解即可"><a href="#最近的发展-了解即可" class="headerlink" title="最近的发展(了解即可)"></a>最近的发展(了解即可)</h2><h3 id="Graal编译器"><a href="#Graal编译器" class="headerlink" title="Graal编译器"></a>Graal编译器</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152528812.png" alt="image-20231127152528812"></p><h3 id="AOT"><a href="#AOT" class="headerlink" title="AOT"></a>AOT</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152616643.png" alt="image-20231127152616643"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/image-20231127152830130.png" alt="image-20231127152830130"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三章：String Table</title>
      <link href="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/"/>
      <url>/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/</url>
      
        <content type="html"><![CDATA[<h1 id="String-Table"><a href="#String-Table" class="headerlink" title="String Table"></a>String Table</h1><h2 id="String的基本特性"><a href="#String的基本特性" class="headerlink" title="String的基本特性"></a>String的基本特性</h2><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128094301344.png" alt="image-20231128094301344" style="zoom:67%;"></p><h3 id="String存储结构变更"><a href="#String存储结构变更" class="headerlink" title="String存储结构变更"></a>String存储结构变更</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128094641545.png" alt="image-20231128094641545" style="zoom:67%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128094736318.png" alt="image-20231128094736318" style="zoom:67%;"></p><h3 id="String-不可变性"><a href="#String-不可变性" class="headerlink" title="String 不可变性"></a>String 不可变性</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128095746523.png" alt="image-20231128095746523" style="zoom:67%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(a==b); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(c==d); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经典面试题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span>[] c = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DemoTest</span> <span class="variable">demoTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DemoTest</span>();</span><br><span class="line">        demoTest.change(demoTest.s, demoTest.c);</span><br><span class="line">        System.out.println(demoTest.s);<span class="comment">// hello</span></span><br><span class="line">        System.out.println(demoTest.c); <span class="comment">//bold</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str,<span class="type">char</span>[] b)</span>&#123;</span><br><span class="line">        str = <span class="string">&quot;we are ok!&quot;</span>;</span><br><span class="line">        b[<span class="number">0</span>]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//string不可变数据类型，传参时，形参与实参之间引用同意内存地址，对形参的改变会导致其指向一个新的内存区域，而实参不会发生改变</span></span><br></pre></td></tr></table></figure><h3 id="字符串常量池特性"><a href="#字符串常量池特性" class="headerlink" title="字符串常量池特性"></a>字符串常量池特性</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128101250198.png" alt="image-20231128101250198" style="zoom:67%;"></p><h2 id="String的内存分配"><a href="#String的内存分配" class="headerlink" title="String的内存分配"></a>String的内存分配</h2><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128102616031.png" alt="image-20231128102616031" style="zoom:67%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128102713976.png" alt="image-20231128102713976" style="zoom:67%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128103131148.png" alt="image-20231128103131148" style="zoom:67%;"></p><h2 id="字符串的拼接操作"><a href="#字符串的拼接操作" class="headerlink" title="字符串的拼接操作"></a>字符串的拼接操作</h2><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128105057865.png" alt="image-20231128105057865"></p><h3 id="典型面试题"><a href="#典型面试题" class="headerlink" title="典型面试题"></a><strong>典型面试题</strong></h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128105620269.png" alt="image-20231128105620269" style="zoom:67%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128110112601.png" alt="image-20231128110112601" style="zoom:67%;"></p><h3 id="字符串拼接底层原理"><a href="#字符串拼接底层原理" class="headerlink" title="字符串拼接底层原理"></a>字符串拼接底层原理</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128111309977.png" alt="image-20231128111309977" style="zoom:67%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128111523694.png" alt="image-20231128111523694" style="zoom:67%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128111801056.png" alt="image-20231128111801056"></p><p>字符串的拼接操作不一定使用的是<code>StringBuilder</code>，如果拼接符号左右两边都是字符串常量或常量引用，则仍然使用的是编译器优化</p><h3 id="字符串拼接与append的效率比对"><a href="#字符串拼接与append的效率比对" class="headerlink" title="字符串拼接与append的效率比对"></a>字符串拼接与append的效率比对</h3><p>通过<code>StringBuilder</code>得<code>append</code>方式添加字符串效率远高于字符串拼接方式</p><ul><li><p><code>String</code>拼接操作每次拼接都会创建一个新的<code>StringBuilder</code>和<code>String</code>对象，内存占用也会更大，如果进行<code>GC</code>，需要花费额外的时间</p></li><li><p>而<code>StringBuilder</code>自始至终只会存在唯一一个<code>StringBuilder</code>对象</p><ul><li>改进空间：如果基本确定字符串长度不高于某个限定值，建议使用构造器指定大小方式创建StringBuilder对象<ul><li><code>StringBuilder sb=new StringBuilder(capacity)</code></li></ul></li></ul></li></ul><h2 id="intern-的使用"><a href="#intern-的使用" class="headerlink" title="intern()的使用"></a>intern()的使用</h2><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128160833583.png" alt="image-20231128160833583"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128161149023.png" alt="image-20231128161149023"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128161326620.png" alt="image-20231128161326620"></p><h3 id="典型例题"><a href="#典型例题" class="headerlink" title="典型例题"></a>典型例题</h3><ul><li><code>new String(&quot;ab&quot;)</code>会创建几个对象？<ul><li>如下图字节码所示，两个对象<ul><li>一个对象是: new 关键字在堆空间创建的</li><li>另一个对象是：字符串常量池中的对象</li></ul></li></ul></li></ul><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128162224977.png" alt="image-20231128162224977"></p><ul><li><code>new String(&quot;a&quot;)+new String(&quot;b&quot;)</code>会创建几个对象？<ul><li>六个对象<ul><li><code>StringBuilder</code></li><li><code>new String(&quot;a&quot;)</code></li><li><code>常量池中的a</code></li><li><code>new String(&quot;b&quot;)</code></li><li><code>常量池中的b</code></li><li><code>StringBuilder的toString方法</code></li></ul></li><li>但是常量池中最终不会生成ab</li></ul></li></ul><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128162734386.png" alt="image-20231128162734386"></p><ul><li>例题3</li></ul><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231128161441921.png" alt="image-20231128161441921" style="zoom:67%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129104643177.png" alt="image-20231129104643177" style="zoom:67%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129104158052.png" alt="image-20231129104158052" style="zoom:67%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129105020368.png" alt="image-20231129105020368" style="zoom:67%;"></p><h3 id="intern的使用总结"><a href="#intern的使用总结" class="headerlink" title="intern的使用总结"></a>intern的使用总结</h3><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129105059173.png" alt="image-20231129105059173"></p><ul><li>对于程序中大量存在的字符串，尤其其中存在大量重复字符串时，使用intern可以节省内存空间</li><li><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129112401083.png" alt="image-20231129112401083"></p></li><li><p>注意的问题：Q:使用intern的好处？为什么使用inrtern可以大大节省内存空间？</p></li></ul><h2 id="String-Table的垃圾回收"><a href="#String-Table的垃圾回收" class="headerlink" title="String Table的垃圾回收"></a>String Table的垃圾回收</h2><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129113022254.png" alt="image-20231129113022254"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129141941425.png" alt="image-20231129141941425" style="zoom:67%;"></p><p><img src="/2023/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9AString%20Table/image-20231129142115097.png" alt="image-20231129142115097" style="zoom:67%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、新版本JDK和SpringBoot特性介绍</title>
      <link href="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/"/>
      <url>/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="新版本JDK和SpringBoot特性"><a href="#新版本JDK和SpringBoot特性" class="headerlink" title="新版本JDK和SpringBoot特性"></a>新版本JDK和SpringBoot特性</h1><p>本项目采用<code>JDK17</code>和<code>SpringBoot3</code>，在进行项目开发之前，先要了解<code>JDK9-JDK17</code>的新特性和<code>SpringBoot3</code>的新特性</p><h2 id="JDK9新特性"><a href="#JDK9新特性" class="headerlink" title="JDK9新特性"></a>JDK9新特性</h2><h3 id="jshell交互式工具"><a href="#jshell交互式工具" class="headerlink" title="jshell交互式工具"></a>jshell交互式工具</h3><p><code>JDK9</code>中引入了命令行交互工具<code>jshell</code>，直接可以运行对应<code>Java</code>代码</p><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231119233027637.png" alt="image-20231119233027637"></p><h3 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h3><p><code>JDK8</code>及以前将<code>package</code>作为顶级组件，<code>JDK9</code>将模块作为顶级组件</p><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231119234445748.png" alt="image-20231119234445748"></p><p>不同模块之间的相互引用问题，可以通过<code>Maven</code>加入依赖的方式引用</p><p>在<code>JDK9</code>之后，可以通过模块化方式引用</p><ol><li>使用<code>module-info.java</code>来申明一个模块，一个模块只能有一个该文件，且该文件在顶层包同目录</li><li>使用<code>exports</code>来申明可以被外部引用的包，可以有多个<code>exports</code>语句<ul><li>一个<code>module</code>中能够被外部调用的包都需要在<code>module-info.java</code>中用<code>exports</code>语句申明<ul><li><code>exports 包名</code></li></ul></li></ul></li><li>使用<code>requires</code>来申明依赖的外部模块，可以有多个<code>requires</code>语句<ul><li>一个<code>module</code>中需要调用外部模块都需要在<code>module-info.java</code>中用<code>requires</code>语句申明<ul><li><code>requires 模块名</code></li></ul></li></ul></li></ol><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231119235341393.png" alt="image-20231119235341393"></p><h2 id="JDK10新特性"><a href="#JDK10新特性" class="headerlink" title="JDK10新特性"></a>JDK10新特性</h2><h3 id="var局部变量推导"><a href="#var局部变量推导" class="headerlink" title="var局部变量推导"></a>var局部变量推导</h3><p>使用var基本要求</p><ul><li>必须能够推导出实际类型</li><li>只能用于局部变量</li></ul><p>该特性一般不推荐使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test1</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        <span class="type">var</span> <span class="variable">test11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        <span class="type">Test2</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK11新特性"><a href="#JDK11新特性" class="headerlink" title="JDK11新特性"></a>JDK11新特性</h2><h3 id="单文件程序"><a href="#单文件程序" class="headerlink" title="单文件程序"></a>单文件程序</h3><p>以前运行<code>.java</code>文件需要：</p><ul><li><code>javac xxx.java</code>编译得到对应的字节码文件<code>xxx.class</code></li><li><code>java xxx.class</code>运行对应java程序</li></ul><p>新特性只需：<code>java xxx.java</code>即可运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JDK11 new property,Single File Program&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120000851511.png" alt="image-20231120000851511"></p><h3 id="shebang脚本"><a href="#shebang脚本" class="headerlink" title="shebang脚本"></a>shebang脚本</h3><ul><li><code>#!</code>符号叫做<code>shebang</code>，音译为<strong>释伴</strong>，即解释伴随行</li><li><code>#!/bin/bash</code>，以此开头的文件，在执行时会实际调用<code>/bin/bash</code>程序来执行</li></ul><p>编写一个非Java文件，文件首行添加shebang语句，在<code>git bash</code>中可以直接执行</p><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120001817144.png" alt="image-20231120001817144"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!D:\ProgramTools\java_tools\JDK17\bin\java --source <span class="number">11</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JDK11 new property,Single File Program&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120001952472.png" alt="image-20231120001952472"></p><p>该功能应用场景：用Java语言编写脚本</p><h2 id="JDK14新特性"><a href="#JDK14新特性" class="headerlink" title="JDK14新特性"></a>JDK14新特性</h2><h3 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h3><p>多行字符串：比如<code>json</code>、<code>html</code>、<code>sql</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String json1=<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;name\&quot;:\&quot;张飞\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;age\&quot;:27\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;&quot;</span>;</span><br><span class="line">        <span class="comment">//JDK14新特性：文本块，使得多行字符串定义更美观和可读性</span></span><br><span class="line">        String json2= <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    &quot;name&quot;:&quot;张飞&quot;,</span></span><br><span class="line"><span class="string">                    &quot;age&quot;:27</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(json1);</span><br><span class="line">        System.out.println(json2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="instanceof增强"><a href="#instanceof增强" class="headerlink" title="instanceof增强"></a>instanceof增强</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;we are&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(str1 <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            String str2=(String) str1;</span><br><span class="line">            System.out.println(str2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//JDK14 instanceof写法增强，将判断和赋值写在了一条语句</span></span><br><span class="line">        <span class="keyword">if</span>(str1 <span class="keyword">instanceof</span> String str2)&#123;</span><br><span class="line">            System.out.println(str2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空指针提示"><a href="#空指针提示" class="headerlink" title="空指针提示"></a>空指针提示</h3><p>可以提示空指针异常具体产生的位置和原因</p><p>下面代码在两个不同<code>JDK</code>版本运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">12</span>;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(a+b+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JDK8版本</strong></p><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120003842812.png" alt="image-20231120003842812"></p><p><strong>JDK14版本</strong></p><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120003753190.png" alt="image-20231120003753190"></p><h2 id="JDK16新特性"><a href="#JDK16新特性" class="headerlink" title="JDK16新特性"></a>JDK16新特性</h2><h3 id="record类"><a href="#record类" class="headerlink" title="record类"></a>record类</h3><ul><li>record是一个final类，初始化后就不能修改属性值</li><li>自动生成toString, hashCode, equals方法</li><li>一般应用场景：数据类，比如<code>MVC</code>机构中的<code>DTO</code>、<code>VO</code>、<code>PO</code>等</li></ul><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120004349675.png" alt="image-20231120004349675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">UserDto</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120004534276.png" alt="image-20231120004534276"></p><h2 id="JDK17新特性"><a href="#JDK17新特性" class="headerlink" title="JDK17新特性"></a>JDK17新特性</h2><h3 id="sealed类"><a href="#sealed类" class="headerlink" title="sealed类"></a>sealed类</h3><p><strong>背景：</strong>类的继承很难管理，使用<code>sealed</code>可以显示管理</p><ul><li>父类如果是<code>sealed</code>类，则其必须至少有一个子类</li><li><code>sealed</code>类的子类，必须是<code>final</code>、<code>sealed</code>、<code>non-sealed</code>之一</li></ul><p>其实实际上没多大用处，只是在如果一个类需要继承其他类，或者一个类需要被其他子类继承，需要强制申明一些关键字，在一定程度上可以避免继承的泛滥</p><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120231224546.png" alt="image-20231120231224546"></p><h3 id="Switch增强"><a href="#Switch增强" class="headerlink" title="Switch增强"></a>Switch增强</h3><p>其实没啥用</p><p>下面举个例子简单介绍一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Switch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="number">23F</span>;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> String b)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Sting类型,b=&quot;</span>+b);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Integer b)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Integer类型,b=&quot;</span>+b);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Float b)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Float类型,b=&quot;</span>+b);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;其他类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//switch增强版写法</span></span><br><span class="line">        <span class="keyword">switch</span>(o)&#123;</span><br><span class="line">            <span class="keyword">case</span> String b -&gt; System.out.println(<span class="string">&quot;Sting类型,b=&quot;</span>+b);</span><br><span class="line">            <span class="keyword">case</span> Integer b -&gt; System.out.println(<span class="string">&quot;Integer类型,b=&quot;</span>+b);</span><br><span class="line">            <span class="keyword">case</span> Float b -&gt; System.out.println(<span class="string">&quot;Float类型,b=&quot;</span>+b);</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;其他类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot3新特性"><a href="#SpringBoot3新特性" class="headerlink" title="SpringBoot3新特性"></a>SpringBoot3新特性</h2><h3 id="AOT与JIT介绍"><a href="#AOT与JIT介绍" class="headerlink" title="AOT与JIT介绍"></a>AOT与JIT介绍</h3><p><code>JIT(Just-in-Time，实时编译)</code></p><p><code>AOT（Ahead-of-Time，预编译或提前编译）</code></p><p><strong>AOT的优势</strong></p><ul><li>启动和运行速度快<ul><li>传统<code>SpringBoot</code>空项目启动时间大概是2秒，<code>AOT</code>的启动时间大概是100毫秒</li></ul></li><li>打包体积小</li></ul><p><strong>AOT的缺点</strong></p><ul><li>编译后的程序不支持跨平台</li><li>不支持动态功能，比如AOP</li></ul><p>AOP在正常项目一般用不到，其主要特点是可以将项目打包成exe的模式，在单机应用中可以直接运行，而无需另外的JDK环境</p><h3 id="JIT在高并发场景中的生产问题"><a href="#JIT在高并发场景中的生产问题" class="headerlink" title="JIT在高并发场景中的生产问题"></a>JIT在高并发场景中的生产问题</h3><p>生产问题现象：热点应用重启后，出现业务超时，几分钟后恢复正常，所谓的热点应用只有在并发量超过一定阈值之后才会出现</p><p><strong>原因：</strong><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120233923088.png" alt="image-20231120233923088"></p><p><img src="/2023/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02%20%E6%96%B0%E7%89%88%E6%9C%ACJDK%E5%92%8CSpringBoot%E7%89%B9%E6%80%A7/image-20231120233202709.png" alt="image-20231120233202709" style="zoom: 67%;"></p><p><strong>解决办法</strong>：</p><ul><li><p>预热：初始让程序自动运行热点代码几百次</p></li><li><p>流量控制：启动时小流量，运行几分钟后再放到正常流量</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 12306买票系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第九章：方法区</title>
      <link href="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/"/>
      <url>/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><h2 id="栈、堆、方法区的交互关系"><a href="#栈、堆、方法区的交互关系" class="headerlink" title="栈、堆、方法区的交互关系"></a>栈、堆、方法区的交互关系</h2><h3 id="运行时数据区结构图"><a href="#运行时数据区结构图" class="headerlink" title="运行时数据区结构图"></a>运行时数据区结构图</h3><p><strong>从线程共享与否的角度来看</strong></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028093341818.png" alt="image-20231028093341818"></p><h3 id="栈、堆、方法区的交互关系-1"><a href="#栈、堆、方法区的交互关系-1" class="headerlink" title="栈、堆、方法区的交互关系"></a>栈、堆、方法区的交互关系</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028093630090.png" alt="image-20231028093630090"></p><h2 id="方法区的理解"><a href="#方法区的理解" class="headerlink" title="方法区的理解"></a>方法区的理解</h2><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028094033233.png" alt="image-20231028094033233"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028094459160.png" alt="image-20231028094459160"></p><p> <img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028094726523.png" alt="image-20231028094726523"></p><p>定义太多类会导致方法区溢出</p><ul><li>加载大量第三方的jar包</li><li>Tomcat部署工程项目过多</li><li>大量动态生成反射类</li></ul><h3 id="HotSpot中方法区的演进"><a href="#HotSpot中方法区的演进" class="headerlink" title="HotSpot中方法区的演进"></a>HotSpot中方法区的演进</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028095648853.png" alt="image-20231028095648853"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028100036153.png" alt="image-20231028100036153"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028100146185.png" alt="image-20231028100146185"></p><h2 id="设置方法区的大小和OOM"><a href="#设置方法区的大小和OOM" class="headerlink" title="设置方法区的大小和OOM"></a>设置方法区的大小和OOM</h2><h3 id="设置方法区大小"><a href="#设置方法区大小" class="headerlink" title="设置方法区大小"></a>设置方法区大小</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028100524310.png" alt="image-20231028100524310"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028101217453.png" alt="image-20231028101217453"></p><h3 id="如何解决OOM"><a href="#如何解决OOM" class="headerlink" title="如何解决OOM"></a>如何解决OOM</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028101959841.png" alt="image-20231028101959841"></p><h2 id="方法区的内部结构"><a href="#方法区的内部结构" class="headerlink" title="方法区的内部结构"></a>方法区的内部结构</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028102414892.png" alt="image-20231028102414892"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028102616983.png" alt="image-20231028102616983"></p><p>随着JDK版本的更新，方法区内存结构可能会发生变化，上图只代表经典版本</p><h3 id="内部组成信息"><a href="#内部组成信息" class="headerlink" title="内部组成信息"></a>内部组成信息</h3><h4 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h4><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028103150691.png" alt="image-20231028103150691"></p><h4 id="域-Field-信息"><a href="#域-Field-信息" class="headerlink" title="域(Field)信息"></a>域(Field)信息</h4><p>类的成员变量</p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028103916522.png" alt="image-20231028103916522"></p><h4 id="方法-Method-信息"><a href="#方法-Method-信息" class="headerlink" title="方法(Method)信息"></a>方法(Method)信息</h4><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028104125782.png" alt="image-20231028104125782"></p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028110729771.png" alt="image-20231028110729771"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111042907.png" alt="image-20231028111042907"></p><h5 id="为什么需要常量池"><a href="#为什么需要常量池" class="headerlink" title="为什么需要常量池"></a>为什么需要常量池</h5><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111153115.png" alt="image-20231028111153115"></p><h5 id="常量池中的信息"><a href="#常量池中的信息" class="headerlink" title="常量池中的信息"></a>常量池中的信息</h5><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111731911.png" alt="image-20231028111731911"></p><h5 id="常量池总结"><a href="#常量池总结" class="headerlink" title="常量池总结"></a>常量池总结</h5><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028111837482.png" alt="image-20231028111837482"></p><h5 id="运行时常量池-1"><a href="#运行时常量池-1" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028112002834.png" alt="image-20231028112002834"></p><h3 id="查看-class文件，可以反应方法区结构"><a href="#查看-class文件，可以反应方法区结构" class="headerlink" title="查看.class文件，可以反应方法区结构"></a>查看.class文件，可以反应方法区结构</h3><p><code>javap -v -p xxx.class</code></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="non-final的类变量"><a href="#non-final的类变量" class="headerlink" title="non-final的类变量"></a>non-final的类变量</h4><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028105346681.png" alt="image-20231028105346681"></p><h4 id="final类变量"><a href="#final类变量" class="headerlink" title="final类变量"></a>final类变量</h4><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028105558985.png" alt="image-20231028105558985"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231028110557151.png" alt="image-20231028110557151"></p><h2 id="方法区使用举例"><a href="#方法区使用举例" class="headerlink" title="方法区使用举例"></a>方法区使用举例</h2><h2 id="方法区的演进细节"><a href="#方法区的演进细节" class="headerlink" title="方法区的演进细节"></a>方法区的演进细节</h2><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231030124050896.png" alt="image-20231030124050896"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119091844329.png" alt="image-20231119091844329"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119091907686.png" alt="image-20231119091907686"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119091947146.png" alt="image-20231119091947146"></p><h3 id="Q-为什么永久代要被元空间替换？"><a href="#Q-为什么永久代要被元空间替换？" class="headerlink" title="Q:为什么永久代要被元空间替换？"></a>Q:为什么永久代要被元空间替换？</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119092444204.png" alt="image-20231119092444204"></p><h3 id="Q：字符串常量池-StringTable-为什么要调整？"><a href="#Q：字符串常量池-StringTable-为什么要调整？" class="headerlink" title="Q：字符串常量池(StringTable)为什么要调整？"></a>Q：字符串常量池(StringTable)为什么要调整？</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119093345062.png" alt="image-20231119093345062"></p><h3 id="Q：静态变量的存放位置？"><a href="#Q：静态变量的存放位置？" class="headerlink" title="Q：静态变量的存放位置？"></a>Q：静态变量的存放位置？</h3><p>JDK7及其以后的版本的HotSPot虚拟机选择把静态变量与类型在Java语言一端的映射Class对象存放在一起，存储在Java堆中</p><h2 id="方法区的垃圾回收"><a href="#方法区的垃圾回收" class="headerlink" title="方法区的垃圾回收"></a>方法区的垃圾回收</h2><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119094813081.png" alt="image-20231119094813081"></p><h3 id="常量的回收"><a href="#常量的回收" class="headerlink" title="常量的回收"></a>常量的回收</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119095217118.png" alt="image-20231119095217118"></p><h3 id="未使用类的收回"><a href="#未使用类的收回" class="headerlink" title="未使用类的收回"></a>未使用类的收回</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119095416249.png" alt="image-20231119095416249"></p><h2 id="方法去总结"><a href="#方法去总结" class="headerlink" title="方法去总结"></a>方法去总结</h2><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119100152015.png" alt="image-20231119100152015"></p><h2 id="方法区常见面试题"><a href="#方法区常见面试题" class="headerlink" title="方法区常见面试题"></a>方法区常见面试题</h2><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119100523344.png" alt="image-20231119100523344"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E6%96%B9%E6%B3%95%E5%8C%BA/image-20231119100602356.png" alt="image-20231119100602356"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十一章：直接内存</title>
      <link href="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/"/>
      <url>/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h1><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119144311374.png" alt="image-20231119144311374"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//分配1G内存</span></span><br><span class="line">        System.out.println(<span class="string">&quot;直接分配内存完毕&quot;</span>);</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocateDirect(capacity);</span><br><span class="line">        scanner.next();</span><br><span class="line">        <span class="comment">//释放内存</span></span><br><span class="line">        buffer=<span class="literal">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;释放内存完毕&quot;</span>);</span><br><span class="line">        scanner.next();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放前后占用内存情况：</p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119151301334.png" alt="image-20231119151301334"></p><p>IO方式读取过程效率低</p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119151646287.png" alt="image-20231119151646287"></p><p>NIO方式读取过程效率更高</p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119151744968.png" alt="image-20231119151744968"></p><p>关于IO与NIO的具体细节，后续详细了解</p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119152435871.png" alt="image-20231119152435871"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;ByteBuffer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buff</span> <span class="operator">=</span> ByteBuffer.allocateDirect(capacity);</span><br><span class="line">            list.add(buff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119152839490.png" alt="image-20231119152839490"></p><p>总结</p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/image-20231119153508203.png" alt="image-20231119153508203"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十章：对象的实例化、内存布局与访问定位</title>
      <link href="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/"/>
      <url>/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="对象的实例化、内存布局与访问定位"><a href="#对象的实例化、内存布局与访问定位" class="headerlink" title="对象的实例化、内存布局与访问定位"></a>对象的实例化、内存布局与访问定位</h1><h2 id="对象的实例化"><a href="#对象的实例化" class="headerlink" title="对象的实例化"></a>对象的实例化</h2><h3 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119101141798.png" alt="image-20231119101141798"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119101518158.png" alt="image-20231119101518158"></p><h3 id="对象创建的方式"><a href="#对象创建的方式" class="headerlink" title="对象创建的方式"></a>对象创建的方式</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119102103099.png" alt="image-20231119102103099"></p><h3 id="对象创建的步骤"><a href="#对象创建的步骤" class="headerlink" title="对象创建的步骤"></a>对象创建的步骤</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103101386.png" alt="image-20231119103101386"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103117152.png" alt="image-20231119103117152"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103325996.png" alt="image-20231119103325996"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103454016.png" alt="image-20231119103454016"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119103741536.png" alt="image-20231119103741536"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119104135836.png" alt="image-20231119104135836"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119104255156.png" alt="image-20231119104255156"></p><p>init方法包含了对象属性的显示赋值、代码块赋值和构造器赋值</p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119105425026.png" alt="image-20231119105425026"></p><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119105950211.png" alt="image-20231119105950211"></p><h3 id="内存布局示例"><a href="#内存布局示例" class="headerlink" title="内存布局示例"></a>内存布局示例</h3><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110425270.png" alt="image-20231119110425270"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110347569.png" alt="image-20231119110347569"></p><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>Q：JVM是如何通过栈帧中的对象引用访问到其内部的对象实例的呢？</p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110820562.png" alt="image-20231119110820562"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119110930494.png" alt="image-20231119110930494"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119111019580.png" alt="image-20231119111019580"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119111418366.png" alt="image-20231119111418366"></p><p><img src="/2023/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/%E7%AC%AC10%E7%AB%A0%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/image-20231119111234611.png" alt="image-20231119111234611"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、项目背景和概述</title>
      <link href="/2023/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h1><h2 id="高并发秒杀场景中常见的问题"><a href="#高并发秒杀场景中常见的问题" class="headerlink" title="高并发秒杀场景中常见的问题"></a>高并发秒杀场景中常见的问题</h2><ul><li>秒杀还没开始，页面就崩了</li><li>秒杀刚开始，服务器就崩了</li><li>秒杀结束后，库存崩了(比如商品超卖问题)</li><li>秒杀过程没有问题，但服务器响应很慢</li></ul><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>采用前后端分离架构，前端采用<code>vue</code>，后端采用<code>SpringBoot</code></p><ul><li>千万级流量的大型分布式系统架构设计</li><li>高并发、高性能、高可用场景的解决方案</li></ul><h2 id="项目进度安排"><a href="#项目进度安排" class="headerlink" title="项目进度安排"></a>项目进度安排</h2><ul><li>架构搭建，使用前后端分离架构<ul><li>如何利用<code>SpringBoot</code>和<code>VUE-CLI</code>快速搭建前后端分离项目</li></ul></li><li>业务功能开发，实现基本的选座排队购票功能</li><li>引入高并发技术，实现高性能抢票</li></ul><h2 id="设计到的主要框架及其版本"><a href="#设计到的主要框架及其版本" class="headerlink" title="设计到的主要框架及其版本"></a>设计到的主要框架及其版本</h2><ul><li><p>JDK17</p></li><li><p>SpringBoot 3.0.0</p><ul><li>Spring 3.0.0版本只支持JDK 17及以上</li></ul></li><li><p>SpringCloud Alibaba 2022.0.0.0</p></li><li><p>第三方依赖为适应JDK17，也会做相应版本升级</p></li><li><p>常用的高并发技术解决方案</p><p><img src="/2023/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/image-20231113233116600.png" alt="image-20231113233116600" style="zoom:67%;"></p></li></ul><h1 id="12306系统架构"><a href="#12306系统架构" class="headerlink" title="12306系统架构"></a>12306系统架构</h1><h2 id="生活中常见的高并发场景"><a href="#生活中常见的高并发场景" class="headerlink" title="生活中常见的高并发场景"></a>生活中常见的高并发场景</h2><ul><li>商品秒杀，比如淘宝双11</li><li>微信支付宝等第三方支付平台</li><li>微博突发热点</li><li>用户操作日志</li><li>12306购票平台</li></ul><h2 id="12306系统的特点"><a href="#12306系统的特点" class="headerlink" title="12306系统的特点"></a>12306系统的特点</h2><h3 id="业务复杂度高"><a href="#业务复杂度高" class="headerlink" title="业务复杂度高"></a>业务复杂度高</h3><h4 id="动态库存"><a href="#动态库存" class="headerlink" title="动态库存"></a>动态库存</h4><p>车票途径多站，可能一张座位会对应多张票，你如<code>上海-&gt;南京-&gt;武汉</code>，如果分开卖的话<code>上海-&gt;南京</code>和<code>南京-&gt;武汉</code>两张票</p><h4 id="选座功能"><a href="#选座功能" class="headerlink" title="选座功能"></a>选座功能</h4><p>用户购买的票可以对应不同类型的座位</p><h4 id="线上线下"><a href="#线上线下" class="headerlink" title="线上线下"></a>线上线下</h4><p>票既可以线下购买，也可以线上购买</p><h3 id="高并发设计要求更高"><a href="#高并发设计要求更高" class="headerlink" title="高并发设计要求更高"></a>高并发设计要求更高</h3><h4 id="不停刷票"><a href="#不停刷票" class="headerlink" title="不停刷票"></a>不停刷票</h4><h4 id="绝对不能超卖"><a href="#绝对不能超卖" class="headerlink" title="绝对不能超卖"></a>绝对不能超卖</h4><p>绝不容许一个座位同时卖给多个人，商品系统不用100%保证不超卖，因为可以临时补充库存补救</p><h3 id="如何解决高并发的问题"><a href="#如何解决高并发的问题" class="headerlink" title="如何解决高并发的问题"></a>如何解决高并发的问题</h3><h4 id="提高处理能力：QPS和TPS"><a href="#提高处理能力：QPS和TPS" class="headerlink" title="提高处理能力：QPS和TPS"></a>提高处理能力：QPS和TPS</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">补充：QPS和TPS的介绍</span><br><span class="line">QPS：Queries Per Second</span><br><span class="line">意思是每秒查询率，是一台服务器每秒能够响应的查询次数（数据库中的每秒执行查询sql的次数），显然，这个不够全面，不能描述增删改</span><br><span class="line">QPS = 并发量 / 平均响应时间</span><br><span class="line">并发量 = QPS * 平均响应时间</span><br><span class="line">===============================================================================================================</span><br><span class="line">TPS：Transactions Per Second</span><br><span class="line">即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问</span><br><span class="line">TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</span><br><span class="line">一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。</span><br><span class="line">例如：天猫双十一，一秒完成多少订单</span><br><span class="line">=============================================================================================================</span><br><span class="line">qps每秒接收了多少（流量进来多少）</span><br><span class="line">tps每秒接收后实际能处理多少（我服务端响应了多少）</span><br></pre></td></tr></table></figure><ul><li>堆积硬件</li><li>借用第三方软件，比如Gemfire</li><li>算法：模型、逻辑</li></ul><h4 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h4><ul><li>业务上：验证码、分时段、排队<ul><li>验证码：每个用户破解验证码所用时间不同，从而可以将同一时刻的请求分散开</li><li>分时段：票在一天不同时段放出</li><li>排队：购票等待时间</li></ul></li><li>技术上：限流、异步<ul><li>限流：超过指定数目流量直接快速反馈结果，不会执行后续业务</li><li>异步：请求进来，不会立即处理，会进入队列等待</li></ul></li></ul><h3 id="补充：持续秒杀高并发技术解决方案"><a href="#补充：持续秒杀高并发技术解决方案" class="headerlink" title="补充：持续秒杀高并发技术解决方案"></a>补充：持续秒杀高并发技术解决方案</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul><li>针对静态资源做CDN</li><li>页面静态化</li><li>倒计时&amp;Loading</li><li>使用验证码削峰</li></ul><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><ul><li>微服务-服务拆分</li><li>负载均衡</li><li>限流降级</li><li>缓存</li><li>令牌</li><li>异步处理</li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li>分库：业务分库、读写分离</li><li>分表：横向分表、纵向分表</li><li>冗余设计，反范式，空间换时间</li><li>分布式数据库</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>分时段秒杀</li><li>弹性扩容</li><li>候补+排队</li></ul><h3 id="模型设计和逻辑设计上的优化"><a href="#模型设计和逻辑设计上的优化" class="headerlink" title="模型设计和逻辑设计上的优化"></a>模型设计和逻辑设计上的优化</h3><h4 id="余票查询"><a href="#余票查询" class="headerlink" title="余票查询"></a>余票查询</h4><p>按照车站区间，记录站站余票，提高查询效率</p><p>具体例子如下图所示</p><p><img src="/2023/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/image-20231116225841695.png" alt="image-20231116225841695"></p><h4 id="座位购买"><a href="#座位购买" class="headerlink" title="座位购买"></a>座位购买</h4><p>记录各个座位在对应车站区间的销售详情</p><p>可以借助二进制数据表示，提高效率</p><p>比如：<code>A-E</code>五个车站，共4段区间<code>A-B</code>、<code>B-C</code>、<code>C-D</code>、<code>D-E</code>，即可用4位二进制记录销售详情，比如:<code>1000</code>即代表该座位区间<code>A-B</code>的票已经卖出</p><h3 id="系统功能介绍"><a href="#系统功能介绍" class="headerlink" title="系统功能介绍"></a>系统功能介绍</h3><p> <img src="/2023/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/系统功能.jpg" alt="系统功能" style="zoom:50%;"></p><h3 id="系统微服务模块划分"><a href="#系统微服务模块划分" class="headerlink" title="系统微服务模块划分"></a>系统微服务模块划分</h3><ul><li>gateway 网关模块：路由转发、登录校验</li><li>member 会员模块：会员、乘客、已购买的车票</li><li>business 业务模块：所有的车次数据、余票信息</li><li>batch 跑批模块：所有的定时任务，可通过界面启停</li><li>web 模块：会员相关界面</li><li>admin 模块：管理员相关界面</li></ul><h3 id="系统架构设计"><a href="#系统架构设计" class="headerlink" title="系统架构设计"></a>系统架构设计</h3><p><img src="/2023/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/12306%E9%A1%B9%E7%9B%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/系统架构.jpg" alt="系统架构" style="zoom:67%;"></p><h3 id="数据库表的设计"><a href="#数据库表的设计" class="headerlink" title="数据库表的设计"></a>数据库表的设计</h3>]]></content>
      
      
      <categories>
          
          <category> 12306买票系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/"/>
      <url>/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>快速构建、运行、管理应用的工具</p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="Linux环境安装"><a href="#Linux环境安装" class="headerlink" title="Linux环境安装"></a>Linux环境安装</h3><ul><li>利用<code>VMWare</code>搭建<code>CentOS7</code>虚拟机</li><li>修改网络配置，使用固定<code>IP</code>地址</li><li>利用<code>VMWare</code>镜像和克隆，创建多个虚拟机</li><li><code>windows</code>系统使用<code>xshell</code>工具进行远程连接虚拟机</li><li><code>windows</code>系统使用<code>WinScp</code>工具与虚拟机进行文件传输</li></ul><p>虚拟机搭建和网络配置修改参考之前所写的博客:<a href="https://bangwu2001.github.io/2023/09/07/Linux%E5%9F%BA%E7%A1%80/">Linux安装与网络配置</a></p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>虚拟化容器技术。Docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行 环境，容器之间互相隔离</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018193923036.png" alt="image-20231018193923036"></p><p><a href="https://docs.docker.com/engine/install/centos/">官方文档—安装指南</a></p><h4 id="卸载系统旧版本的docker"><a href="#卸载系统旧版本的docker" class="headerlink" title="卸载系统旧版本的docker"></a>卸载系统旧版本的docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="安装docker-1"><a href="#安装docker-1" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker  </span><br></pre></td></tr></table></figure><h4 id="验证docker是否安装成功"><a href="#验证docker是否安装成功" class="headerlink" title="验证docker是否安装成功"></a>验证docker是否安装成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h4 id="设置docker开机自启动"><a href="#设置docker开机自启动" class="headerlink" title="设置docker开机自启动"></a>设置docker开机自启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h4 id="配置docker镜像加速"><a href="#配置docker镜像加速" class="headerlink" title="配置docker镜像加速"></a>配置docker镜像加速</h4><p>阿里云，容器镜像加速服务</p><ol><li><p>登录阿里云，进入控制台</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194502910.png" alt="image-20231018194502910"></p></li><li><p>进入产品与服务列表</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194551471.png" alt="image-20231018194551471"></p></li><li><p>选择<strong>容器镜像服务</strong></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194644155.png" alt="image-20231018194644155"></p></li><li><p>选择镜像加速器</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194719463.png" alt="image-20231018194719463"></p></li><li><p>选择<code>centos</code>，可以查看对应的加速配置命令</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018194823560.png" alt="image-20231018194823560"></p></li><li><p>配置命令</p><p>修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://bfswxim9.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><h3 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h3><p><a href="https://hub.docker.com/">docker hub地址</a></p><p>安装<code>mysql 5.7</code></p><h4 id="下载mysql镜像"><a href="#下载mysql镜像" class="headerlink" title="下载mysql镜像"></a>下载mysql镜像</h4><p><code>sudo docker pull mysql:版本号</code></p><p>比如下载<code>mysql 5.7</code>版本</p><p><code>sudo docker pull mysql:5.7</code></p><p>查看<code>docker</code>内部所有镜像</p><p><code>sudo docker images</code></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018200105123.png" alt="image-20231018200105123"></p><h4 id="创建实例并启动"><a href="#创建实例并启动" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数说明:</span></span><br><span class="line">--name: 给容器命名</span><br><span class="line">-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql/：将数据文件夹挂载到主机</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root：初始化 root 用户的密码</span><br><span class="line">-d 让容器在后台运行</span><br><span class="line">mysql:5.7:镜像名</span><br></pre></td></tr></table></figure><p><strong>镜像命名规范</strong></p><ul><li><p>镜像名称一般分两部分组成：[repository]:[tag]</p><ul><li>其中repository就是镜像名</li><li>tag是镜像的版本</li></ul></li><li><p>在没有指定tag时，默认是latest，代表最新版本的镜像</p></li></ul><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023194311421.png" alt="image-20231023194311421"></p><p><code>docker ps</code>查看运行的容器实例信息</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018201140545.png" alt="image-20231018201140545"></p><h5 id="补充：docker容器文件挂载与端口映射"><a href="#补充：docker容器文件挂载与端口映射" class="headerlink" title="补充：docker容器文件挂载与端口映射"></a>补充：docker容器文件挂载与端口映射</h5><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018201529294.png" alt="image-20231018201529294"></p><ul><li><p><code>docker run</code>会启动一个对应的容器，每个容器都是一个完整的运行环境(对应一个完整的Linux环境)</p></li><li><p><code>docker exec -it 容器名 对应文件或者命令</code>：进入对应容器，与对应容器进行交互</p></li></ul><p>如下图所示：mysql:5.7 的 <code>/bin/bash</code>下的目录结构可以看出其相当于是一个完整的<code>Linux</code>环境</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018201844533.png" alt="image-20231018201844533"></p><ul><li><code>exit</code>可以直接退出对应容器</li><li>文件挂载<ul><li>类似与快捷方式，讲<code>Linux</code>系统中的文件与<code>容器</code>中的文件关联起来，这样可以直接在<code>Linux</code>系统上可以看到<code>mysql</code>的配置文件、数据文件和日志文件</li><li><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018202741744.png" alt="image-20231018202741744"></li></ul></li></ul><h4 id="修改mysql配置文件"><a href="#修改mysql配置文件" class="headerlink" title="修改mysql配置文件"></a>修改mysql配置文件</h4><p><code>vi /mydata/mysql/conf/my.cnf</code></p><p>写入如下内容</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init<span class="built_in">_</span>connect=&#x27;SET collation<span class="built_in">_</span>connection = utf8<span class="built_in">_</span>unicode<span class="built_in">_</span>ci&#x27; </span><br><span class="line">init<span class="built_in">_</span>connect=&#x27;SET NAMES utf8&#x27; </span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8<span class="built_in">_</span>unicode<span class="built_in">_</span>ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><p>写入之后保存，重启mysql容器</p><p><code>docker restart 容器名</code>：重启对应容器</p><h4 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h4><h5 id="方法一：通过容器命令行连接"><a href="#方法一：通过容器命令行连接" class="headerlink" title="方法一：通过容器命令行连接"></a>方法一：通过容器命令行连接</h5><p><code>docker exec -it mysql mysql -uroot -proot</code></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018205320588.png" alt="image-20231018205320588"></p><h5 id="方法二：远程访问"><a href="#方法二：远程访问" class="headerlink" title="方法二：远程访问"></a>方法二：远程访问</h5><p>如果失败，需要先设置远程用户访问权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option;</span><br><span class="line">flush privileges</span><br></pre></td></tr></table></figure><p><code>windows</code>远程访问</p><p><code>mysql -h ip地址 -P 端口号 -u 用户名 -p 密码</code></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018205700141.png" alt="image-20231018205700141"></p><h5 id="方法三：利用可视化工具Navicat连接测试"><a href="#方法三：利用可视化工具Navicat连接测试" class="headerlink" title="方法三：利用可视化工具Navicat连接测试"></a>方法三：利用可视化工具<code>Navicat</code>连接测试</h5><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212807013.png" alt="image-20231018212807013" style="zoom:80%;"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212819188.png" alt="image-20231018212819188" style="zoom:80%;"></p><h3 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h3><p>安装<code>redis 6.2.13</code></p><p>新版本redis默认自动持久化</p><h4 id="下载redis镜像"><a href="#下载redis镜像" class="headerlink" title="下载redis镜像"></a>下载redis镜像</h4><p><code>docker pull redis:6.2.13</code></p><h4 id="创建实例并启动-1"><a href="#创建实例并启动-1" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line">touch /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis:6.2.13 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h4 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h4><h5 id="方式一：通过容器命令行连接"><a href="#方式一：通过容器命令行连接" class="headerlink" title="方式一：通过容器命令行连接"></a>方式一：通过容器命令行连接</h5><p><code>docker exec -it redis redis-cli</code></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018211411410.png" alt="image-20231018211411410"></p><h5 id="方式二：通过其他主机远程访问"><a href="#方式二：通过其他主机远程访问" class="headerlink" title="方式二：通过其他主机远程访问"></a>方式二：通过其他主机远程访问</h5><p><code>redis-cli -h ip地址</code></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018211754523.png" alt="image-20231018211754523"></p><h5 id="补充—Redis-Desktop-Manager-Redis可视化工具安装"><a href="#补充—Redis-Desktop-Manager-Redis可视化工具安装" class="headerlink" title="补充—Redis Desktop Manager(Redis可视化工具安装)"></a>补充—Redis Desktop Manager(Redis可视化工具安装)</h5><p><a href="https://blog.csdn.net/JacaCao/article/details/106088148">安装教程和下载地址参考博客</a></p><p>连接示例</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212554795.png" alt="image-20231018212554795" style="zoom:80%;">可以查看数据据库内容</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231018212623835.png" alt="image-20231018212623835" style="zoom:80%;"></p><h2 id="Docker快速入门"><a href="#Docker快速入门" class="headerlink" title="Docker快速入门"></a>Docker快速入门</h2><h3 id="容器和镜像"><a href="#容器和镜像" class="headerlink" title="容器和镜像"></a>容器和镜像</h3><p>当我们利用Docker安装应用时，Docker会自动搜索并下载应用<strong>镜像（image</strong>）<strong>。镜像不仅包含应用本身，还包含应用运行所需要的环境、配置、系统函数库。Docker会在运行镜像时创建一个隔离环境，称为</strong>容器（<strong>container</strong>）。</p><p><strong>镜像仓库</strong>：存储和管理镜像的平台，Docker官方维护了一个公共仓库：<a href="https://hub.docker.com/">Docker Hub</a>。</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023192849389.png" alt="image-20231023192849389"></p><h2 id="Docker基础"><a href="#Docker基础" class="headerlink" title="Docker基础"></a>Docker基础</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><p>Docker最常见的命令就是操作镜像、容器的命令，详见<a href="https://docs.docker.com/">官方文档</a></p><h4 id="Docker常见命令概览"><a href="#Docker常见命令概览" class="headerlink" title="Docker常见命令概览"></a><strong>Docker常见命令概览</strong></h4><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023195219760.png" alt="image-20231023195219760"></p><h4 id="Doker常见命令列表"><a href="#Doker常见命令列表" class="headerlink" title="Doker常见命令列表"></a><strong>Doker常见命令列表</strong></h4><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">文档地址</th></tr></thead><tbody><tr><td style="text-align:center">docker pull</td><td style="text-align:center">拉取镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td></tr><tr><td style="text-align:center">docker push</td><td style="text-align:center">推送镜像到DockerRegistry</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td></tr><tr><td style="text-align:center">docker images</td><td style="text-align:center">查看本地镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td></tr><tr><td style="text-align:center">docker rmi</td><td style="text-align:center">删除本地镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td></tr><tr><td style="text-align:center">docker run</td><td style="text-align:center">创建并运行容器（不能重复创建）</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td></tr><tr><td style="text-align:center">docker stop</td><td style="text-align:center">停止指定容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td></tr><tr><td style="text-align:center">docker start</td><td style="text-align:center">启动指定容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td></tr><tr><td style="text-align:center">docker restart</td><td style="text-align:center">重新启动容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td></tr><tr><td style="text-align:center">docker rm</td><td style="text-align:center">删除指定容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docker rm</a></td></tr><tr><td style="text-align:center">docker ps</td><td style="text-align:center">查看容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td></tr><tr><td style="text-align:center">docker logs</td><td style="text-align:center">查看容器运行日志</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td></tr><tr><td style="text-align:center">docker exec</td><td style="text-align:center">进入容器</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td></tr><tr><td style="text-align:center">docker save</td><td style="text-align:center">保存镜像到本地压缩文件</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td></tr><tr><td style="text-align:center">docker load</td><td style="text-align:center">加载本地压缩文件到镜像</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td></tr><tr><td style="text-align:center">docker inspect</td><td style="text-align:center">查看容器详细信息</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td></tr></tbody></table></div><h4 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h4><p>可以给常用的Docker命令起别名，便于我们访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br><span class="line">内容如下：</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bashrc</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User specific aliases and <span class="built_in">functions</span></span></span><br><span class="line"></span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line">alias dps=&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class="line">alias dis=&#x27;docker images&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Source global definitions</span></span><br><span class="line">if [ -f /etc/bashrc ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>然后，执行命令使别名生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /root/.bashrc</span><br></pre></td></tr></table></figure><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p><strong>数据卷（volume</strong>）是一个虚拟目录，是<strong>容器内目录</strong>与宿主机目录之间映射的桥梁。</p><p>一定程度上类似于快捷方式，将容器内的文件挂载在宿主机上，这样可以通过对宿主机上对应文件修改达到改变容器内文件的目的</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023203149684.png" alt="image-20231023203149684"></p><h4 id="数据卷的相关命令"><a href="#数据卷的相关命令" class="headerlink" title="数据卷的相关命令"></a>数据卷的相关命令</h4><p>这些命令一般不会使用，容器文件挂载操作一般在容器创建时就已经完成</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">文档地址</th></tr></thead><tbody><tr><td style="text-align:center">docker volume create</td><td style="text-align:center">创建数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td></tr><tr><td style="text-align:center">docker volume ls</td><td style="text-align:center">查看所有数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docker volume ls</a></td></tr><tr><td style="text-align:center">docker volume rm</td><td style="text-align:center">删除指定数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume rm</a></td></tr><tr><td style="text-align:center">docker volume inspect</td><td style="text-align:center">查看某个数据卷的详情</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docker volume inspect</a></td></tr><tr><td style="text-align:center">docker volume prune</td><td style="text-align:center">清除数据卷</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td></tr></tbody></table></div><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023205944546.png" alt="image-20231023205944546"></p><h4 id="实例-利用Nginx容器部署静态资源"><a href="#实例-利用Nginx容器部署静态资源" class="headerlink" title="实例:利用Nginx容器部署静态资源"></a>实例:利用Nginx容器部署静态资源</h4><p>需求：</p><ul><li><p>创建Nginx容器，修改nginx容器内的html目录下的index.html文件内容</p></li><li><p>将静态资源部署到nginx的html目录</p></li></ul><p>操作</p><ul><li><p>在执行docker run命令时，使用<code>-v 数据卷:容器内目录</code>可以完成数据卷挂载</p></li><li><p>当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷</p></li></ul><p><strong>创建容器并挂载</strong></p><p><code>docker run -d --name nginx -v html:/usr/share/nginx/html -p 80:80 nginx</code></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023210627910.png" alt="image-20231023210627910"></p><p><strong>查看数据卷及其位置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls  #查看所有数据卷</span><br><span class="line">docker volume inspect html #查看数据卷html的详细信息，包括在宿主机的位置</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023210839704.png" alt="image-20231023210839704"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023210925071.png" alt="image-20231023210925071"></p><p><strong>修改html目录下文件，即可实现nginx静态部署</strong></p><p>直接访问<code>ip地址/</code>即可访问静态资源</p><p><strong>查看某个容器是否被挂载，以及挂载的数据卷信息</strong></p><p><code>docker inspect 容器名</code></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023212353220.png" alt="image-20231023212353220" style="zoom:80%;"></p><h4 id="实例-本地目录的挂载"><a href="#实例-本地目录的挂载" class="headerlink" title="实例:本地目录的挂载"></a>实例:本地目录的挂载</h4><ul><li>在执行docker run命令时，使用 <strong>-v</strong> <strong>本地目录</strong> <strong>:</strong> <strong>容器内目录</strong> 可以完成本地目录挂载</li><li>本地目录必须以“<strong>/</strong>”或 “<strong>./</strong>“ 开头，如果直接以名称开头，会被识别为数据卷而非本地目录<ul><li><code>-v mysql : /var/lib/mysql</code>会被识别为一个数据卷叫mysql</li><li><code>-v ./mysql : /var/lib/mysql</code> 会被识别为当前目录下的mysql目录</li></ul></li></ul><h3 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h3><p> 镜像就是包含了应用程序、程序运行的系统函数库、运行配置等文件的文件包。构建镜像的过程其实就是把上述文件打包的过程。</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023212959096.png" alt="image-20231023212959096"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023213143862.png" alt="image-20231023213143862"></p><h4 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h4><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerfile帮我们构建镜像</p><p><strong>DockerFile常用指令</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">说明</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center"><strong>FROM</strong></td><td style="text-align:center">指定基础镜像</td><td style="text-align:center">FROM centos:6</td></tr><tr><td style="text-align:center"><strong>ENV</strong></td><td style="text-align:center">设置环境变量，可在后面指令使用</td><td style="text-align:center">ENV key value</td></tr><tr><td style="text-align:center"><strong>COPY</strong></td><td style="text-align:center">拷贝本地文件到镜像的指定目录</td><td style="text-align:center">COPY ./xx.jar /tmp/app.jar</td></tr><tr><td style="text-align:center"><strong>RUN</strong></td><td style="text-align:center">执行Linux的shell命令，一般是安装过程的命令</td><td style="text-align:center">RUN yum install gcc</td></tr><tr><td style="text-align:center"><strong>EXPOSE</strong></td><td style="text-align:center">指定容器运行时监听的端口，是给镜像使用者看的</td><td style="text-align:center">EXPOSE 8080</td></tr><tr><td style="text-align:center"><strong>ENTRYPOINT</strong></td><td style="text-align:center">镜像中应用的启动命令，容器运行时调用</td><td style="text-align:center">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table></div><p>详细信息，可以参考<a href="https://docs.docker.com/engine/reference/builder/">官方文档</a></p><h4 id="制作Jar包的运行镜像"><a href="#制作Jar包的运行镜像" class="headerlink" title="制作Jar包的运行镜像"></a>制作Jar包的运行镜像</h4><p>我们可以基于Ubuntu基础镜像，利用Dockerfile描述镜像结构，也可以直接基于JDK为基础镜像，省略前面的步骤</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023214453287.png" alt="image-20231023214453287"></p><p>当编写好了Dockerfile，可以利用下面命令来构建镜像</p><p><code>docker build -t myImage:1.0 .</code></p><ul><li><p><code>-t</code>：是给镜像起名，格式依然是repository:tag的格式，不指定tag时，默认为latest</p></li><li><p><code>.</code>：是指定Dockerfile所在目录，如果就在当前目录，则指定为”.”</p></li></ul><p><strong>构建自定义镜像</strong></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023215948740.png" alt="image-20231023215948740"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220024629.png" alt="image-20231023220024629"></p><p><strong>启动并运行镜像</strong></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220115685.png" alt="image-20231023220115685"></p><p><strong>查看容器运行日志</strong></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220201265.png" alt="image-20231023220201265"></p><p>浏览器访问<code>ip地址:8080</code></p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>默认情况下，所有容器都是以bridge方式连接到Docker的一个虚拟网桥上</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231023220925309.png" alt="image-20231023220925309"></p><p>虽然各个容器之间网络联通，可以相互通信， 但是容器一旦重启，网络地址是动态分配的</p><p>所以需要自定义网络才可以通过<strong>容器名</strong>互相访问</p><p><code>Docker</code>常见的网络操作命令如下</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">文档地址</th></tr></thead><tbody><tr><td style="text-align:center">docker network create</td><td style="text-align:center">创建一个网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td style="text-align:center">docker network ls</td><td style="text-align:center">查看所有网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docker network ls</a></td></tr><tr><td style="text-align:center">docker network rm</td><td style="text-align:center">删除指定网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docker network rm</a></td></tr><tr><td style="text-align:center">docker network prune</td><td style="text-align:center">清除未使用的网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docker network prune</a></td></tr><tr><td style="text-align:center">docker network connect</td><td style="text-align:center">使指定容器连接加入某网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docker network connect</a></td></tr><tr><td style="text-align:center">docker network disconnect</td><td style="text-align:center">使指定容器连接离开某网络</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td style="text-align:center">docker network inspect</td><td style="text-align:center">查看网络详细信息</td><td style="text-align:center"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table></div><p>更多详细信息，查看<a href="https://docs.docker.com/engine/reference/commandline/network/">官方文档</a></p><p><code>run 命令</code>中可以通过<code>--network 网络名</code>让创建的容器加入对应的网络</p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="部署Java后端应用"><a href="#部署Java后端应用" class="headerlink" title="部署Java后端应用"></a>部署Java后端应用</h3><h4 id="编写对应的Dockerfile文件"><a href="#编写对应的Dockerfile文件" class="headerlink" title="编写对应的Dockerfile文件"></a>编写对应的<code>Dockerfile</code>文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hm-service.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h4><p><code>maven package</code></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094249542.png" alt="image-20231024094249542"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094332057.png" alt="image-20231024094332057"></p><h4 id="上传服务器"><a href="#上传服务器" class="headerlink" title="上传服务器"></a>上传服务器</h4><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094728816.png" alt="image-20231024094728816"></p><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024094853550.png" alt="image-20231024094853550"></p><h4 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h4><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024095030218.png" alt="image-20231024095030218"></p><h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><p><code>docker logs -f 容器名</code>：持续更新显示容器日志</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024095112971.png" alt="image-20231024095112971"></p><h4 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h4><p><code>192.168.80.130:8080/search/list</code></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024104121270.png" alt="image-20231024104121270"></p><h4 id="注意网络的配置"><a href="#注意网络的配置" class="headerlink" title="注意网络的配置"></a>注意网络的配置</h4><ul><li>自己创建一个网络</li><li>将<code>mysql</code>容器加入该网络</li><li>创建启动后端项目时，将后端项目加入<code>mysql</code>同一网络</li></ul><h3 id="部署前端"><a href="#部署前端" class="headerlink" title="部署前端"></a>部署前端</h3><p><strong>前端项目上传服务器</strong></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024105040433.png" alt="image-20231024105040433"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024105105757.png" alt="image-20231024105105757"></p><h4 id="容器的创建和启动"><a href="#容器的创建和启动" class="headerlink" title="容器的创建和启动"></a>容器的创建和启动</h4><ul><li>nginx配置文件的挂载</li><li>nginx静态资源文件的挂载</li><li>nginx端口的映射</li></ul><p>文件挂载参考<a href="https://hub.docker.com/_/nginx"><code>docker hub</code>官方文档</a></p><p>创建启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx \</span><br><span class="line">-p 18080:18080 \</span><br><span class="line">-p 18081:18081 \</span><br><span class="line">-v /home/front/html:/usr/share/nginx/html \</span><br><span class="line">-v /home/front/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">--network demo \</span><br><span class="line">nginx:latest</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024105916690.png" alt="image-20231024105916690"></p><h4 id="访问项目-1"><a href="#访问项目-1" class="headerlink" title="访问项目"></a>访问项目</h4><p><code>192.168.80.130:18080</code>和<code>192.168.80.130:18081</code></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>前端、后端和mysql所在容器必须要处于同一网络中，才能进行通信</p><h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><p><strong>Docker Compose</strong>通过一个单独的<strong>docker-compose.yml</strong> 模板文件（YAML 格式）来定义一组相关联的应用容器，帮助我们实现多个相互关联的Docker容器的快速部署。</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024111846289.png" alt="image-20231024111846289"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024112120132.png" alt="image-20231024112120132"></p><h4 id="docker-compose命令格式"><a href="#docker-compose命令格式" class="headerlink" title="docker compose命令格式"></a>docker compose命令格式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/docker%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Docker/image-20231024112524685.png" alt="image-20231024112524685"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus</title>
      <link href="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/"/>
      <url>/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h1><p>mybatis-plus学习笔记，<a href="https://www.bilibili.com/video/BV1Xu411A7tL/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">参考B站视频</a></p><p><a href="https://b11et3un53m.feishu.cn/wiki/PsyawI04ei2FQykqfcPcmd7Dnsc">参考博客</a></p><p><a href="https://baomidou.com/">Mybatis-Plus官方文档</a></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="使用mybatis-plus的基础步骤"><a href="#使用mybatis-plus的基础步骤" class="headerlink" title="使用mybatis-plus的基础步骤"></a>使用mybatis-plus的基础步骤</h3><ol><li><p>引入mybatisPlus的Maven依赖，代替原始Mybatis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义Mapper接口继承自BaseMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承BaseMapper接口，传入数据库对应实体类的泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单元测试即可直接使用</p><p><code>mapper</code>存在一系列增删改查的方法可以直接调用</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021195840724.png" alt="image-20231021195840724"></p></li></ol><p><strong>小插曲</strong></p><p>测试如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryByIds</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一直报错:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java: 找不到符号   符号:   方法 of(long,long,long,long)   位置: 接口 java.util.List</span><br></pre></td></tr></table></figure><p>原因：</p><p><code>List.of()</code>是<code>JDK9</code>之后才有的版本</p><p>解决方法：提升<code>java</code>编译的<code>JDK</code>版本</p><p>修改如下位置(注意：无论修改<code>ProjectStructure</code>还是<code>pom.xml</code>中的<code>java</code>版本均无效)</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021200120027.png" alt="image-20231021200120027" style="zoom:80%;"></p><h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><p><strong>MyBatisPlus</strong>通过扫描实体类，并基于反射获取实体类信息作为数据库表信息。</p><h4 id="基本约定"><a href="#基本约定" class="headerlink" title="基本约定"></a>基本约定</h4><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021200634159.png" alt="image-20231021200634159"></p><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><ul><li><strong>@TableName</strong>：用来指定表名</li><li><strong>@TableId</strong>：用来指定表中的主键字段信息</li><li><strong>@TableField</strong>：用来指定表中的普通字段信息</li></ul><p>注意的点：</p><p>当实体类和数据库不满足既定的约定的话，就必须要使用对应的注解</p><ul><li>对于<code>@TableId</code>是用来指定主键字段，对于数据库中主键存在一些属性(比如自增)，所以注解中有时也要注明主键类型<ul><li>IdType枚举：<ul><li>AUTO：数据库自增长</li><li>INPUT：通过set方法自行输入</li><li>ASSIGN_ID：分配 ID，接口IdentifierGenerator的方法nextId来生成id，默认实现类为DefaultIdentifierGenerator雪花算法</li></ul></li><li>默认采用雪花算法</li></ul></li><li>使用@TableField的常见场景：<ul><li>成员变量名与数据库字段名不一致</li><li>成员变量名以is开头，且是布尔值<ul><li>布尔变量反射时会去掉is</li></ul></li><li>成员变量名与数据库关键字冲突<ul><li>使用转义字符进行说明</li></ul></li><li>成员变量不是数据库字段<ul><li>使用<code>exist</code>说明</li></ul></li></ul></li></ul><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021202134848.png" alt="image-20231021202134848"></p><h3 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h3><p><strong>MyBatisPlus</strong>的配置项继承了MyBatis原生配置和一些自己特有的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">type-aliases-package: com.itheima.mp.domain.po # 别名扫描包</span><br><span class="line">mapper-locations: &quot;classpath*:/mapper/**/*.xml&quot; # Mapper.xml文件地址，默认值</span><br><span class="line">configuration:</span><br><span class="line">map-underscore-to-camel-case: true # 是否开启下划线和驼峰的映射</span><br><span class="line">cache-enabled: false # 是否开启二级缓存</span><br><span class="line"> global-config:</span><br><span class="line">db-config:</span><br><span class="line">id-type: assign_id # id为雪花算法生成</span><br><span class="line">update-strategy: not_null # 更新策略：只更新非空字段</span><br></pre></td></tr></table></figure><p>具体可参考官方文档：<a href="https://www.baomidou.com/pages/56bac0/">使用配置 </a><a href="https://www.baomidou.com/pages/56bac0/">| MyBatis-Plus (baomidou.com)</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>Mybatis-Plus</code>使用的基本流程</p><ul><li>引入起步依赖</li><li>自定义Mapper，继承自<code>BaseMapper</code></li><li>在实体类上添加注解申明信息</li><li>在<code>application.yml</code>中根据需要添加配置</li></ul><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p><code>Mybatis-Plus</code>支持各种复杂的<code>where</code>条件，可以满足日常开发的各种需求</p><p>下图中方法参数中的<code>wrapper</code>其实就是条件构造器</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021205520443.png" alt="image-20231021205520443"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021205627495.png" alt="image-20231021205627495" style="zoom:80%;"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021205819231.png" alt="image-20231021205819231" style="zoom:80%;"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><strong>基于QueryWrapper的查询</strong></p><p>①查询出名字中带o的，存款大于等于1000元的人的id、username、info、balance字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造查询条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;username&quot;</span>,<span class="string">&quot;info&quot;</span>,<span class="string">&quot;balance&quot;</span>)</span><br><span class="line">        .like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">        .ge(<span class="string">&quot;balance&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②更新用户名为jack的用户的余额为2000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateByQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造更新数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setBalance(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//2.构造更新条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .eq(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="comment">//3.更新</span></span><br><span class="line">    userMapper.update(user,wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基于UpdateWrapper的更新</strong></p><p>需求：更新id为1,2,4的用户的余额，扣200</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造upadteWrapper</span></span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">4L</span>);</span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">        .setSql(<span class="string">&quot;balance=balance-200&quot;</span>)</span><br><span class="line">        .in(<span class="string">&quot;id&quot;</span>,ids);</span><br><span class="line">    <span class="comment">//2.更细</span></span><br><span class="line">    userMapper.update(<span class="literal">null</span>,wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基于LambdaQueryWrapper</strong>的查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLambdaQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .select(User::getId,User::getUsername,User::getInfo,User::getBalance)</span><br><span class="line">        .like(User::getUsername,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">        .ge(User::getBalance,<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//2.查询</span></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>QueryWrapper和LambdaQueryWrapper通常用来构建select、delete、update的where条件部分</li><li>UpdateWrapper和LambdaUpdateWrapper通常只有在set语句比较特殊才使用</li><li>尽量使用LambdaQueryWrapper和LambdaUpdateWrapper，避免硬编码</li></ul><h3 id="自定义SQL"><a href="#自定义SQL" class="headerlink" title="自定义SQL"></a>自定义SQL</h3><p>我们可以利用MyBatisPlus的Wrapper来构建复杂的Where条件，然后自己定义SQL语句中剩下的部分。</p><p>需求：将id在指定范围的用户（例如1、2、4 ）的余额扣减指定值</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h4><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231021214903600.png" alt="image-20231021214903600"></p><ul><li>直接写SQL语句，<code>where</code>条件语句比较繁琐</li><li>全部用<code>Wrapper</code>来完成，不符合业务逻辑规范(参数往往只允许在<code>Service</code>层去定义)</li></ul><h4 id="自定义SQL流程"><a href="#自定义SQL流程" class="headerlink" title="自定义SQL流程"></a>自定义SQL流程</h4><p>①基于Wrapper构建where条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; ids = List.of(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">4L</span>);</span><br><span class="line"><span class="type">int</span> amount=-<span class="number">20000</span>;</span><br><span class="line">LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">    .in(User::getId,ids);</span><br><span class="line">userMapper.updateBalanceById(lambdaQueryWrapper,amount);</span><br></pre></td></tr></table></figure><p>②在mapper方法参数中用Param注解声明wrapper变量名称，必须是ew</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateBalanceById</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span>LambdaQueryWrapper&lt;User&gt; wrapper,<span class="meta">@Param(&quot;amount&quot;)</span> <span class="type">int</span> amount)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③自定义SQL，并使用Wrapper条件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBalanceById&quot;</span>&gt;</span></span><br><span class="line">    Update user SET balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h3><p><code>Mybatis-Plus</code>还提供了<code>Service</code>层的接口，有一系列可用的增删改查方法</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022110437139.png" alt="image-20231022110437139" style="zoom:80%;"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022105850973.png" alt="image-20231022105850973" style="zoom:80%;"></p><h4 id="Mybatis-Plus-Service接口使用流程"><a href="#Mybatis-Plus-Service接口使用流程" class="headerlink" title="Mybatis-Plus Service接口使用流程"></a>Mybatis-Plus Service接口使用流程</h4><ol><li><p>自定义Service接口继承IService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义Service实现类，实现自定义接口并继承ServiceImpl类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="实例一：基于Restful风格实现下面的接口"><a href="#实例一：基于Restful风格实现下面的接口" class="headerlink" title="实例一：基于Restful风格实现下面的接口"></a>实例一：基于Restful风格实现下面的接口</h4><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022113118176.png" alt="image-20231022113118176"></p><h5 id="引入对应依赖"><a href="#引入对应依赖" class="headerlink" title="引入对应依赖"></a>引入对应依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="swagger配置信息"><a href="#swagger配置信息" class="headerlink" title="swagger配置信息"></a>swagger配置信息</h5><p>本实例借助<code>Swagger</code>实现接口功能的在线测试</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">用户管理接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;用户管理接口文档&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">bang@bang.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">bang</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.bang.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.itheima.mp.controller</span></span><br></pre></td></tr></table></figure><h5 id="创建对应的实体类"><a href="#创建对应的实体类" class="headerlink" title="创建对应的实体类"></a>创建对应的实体类</h5><ul><li><code>userFormDTO</code>：代表新增用户的表单</li><li><code>UserVO</code>:代表查询的返回结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户表单实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFormDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;注册手机号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息，JSON风格&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户VO实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;使用状态（1正常 2冻结）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建响应结果实体类"><a href="#创建响应结果实体类" class="headerlink" title="创建响应结果实体类"></a>创建响应结果实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//响应数据</span></span><br><span class="line">    <span class="keyword">private</span> Integer status; <span class="comment">//响应状态码</span></span><br><span class="line">    <span class="keyword">private</span> String message; <span class="comment">//响应信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="按照restful风格编写Controller接口方法"><a href="#按照restful风格编写Controller接口方法" class="headerlink" title="按照restful风格编写Controller接口方法"></a>按照<code>restful</code>风格编写<code>Controller</code>接口方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;用户管理接口&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//构造函数注入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> UserFormDTO userFormDTO)</span>&#123;</span><br><span class="line">        <span class="comment">//1.DTO对象转换成PO对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.copyProperties(userFormDTO, User.class);</span><br><span class="line">        <span class="comment">//2.新增</span></span><br><span class="line">        userService.save(user);</span><br><span class="line"></span><br><span class="line">        <span class="type">JsonResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">200</span>,<span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        userService.removeById(id);</span><br><span class="line">        JsonResult&lt;UserVO&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">200</span>,<span class="string">&quot;删除用户成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="comment">//1.查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">        <span class="comment">//对象类型转换</span></span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(user,UserVO.class);</span><br><span class="line">        JsonResult&lt;UserVO&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(userVO,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id批量查询</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id批量查询接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;UserVO&gt;&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id集合&quot;)</span> <span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        <span class="comment">//1.查询用户集合</span></span><br><span class="line">        List&lt;User&gt; userList = userService.listByIds(ids);</span><br><span class="line">        <span class="comment">//2.类型转换</span></span><br><span class="line">        List&lt;UserVO&gt; userVOList = BeanUtil.copyToList(userList, UserVO.class);</span><br><span class="line">        JsonResult&lt;List&lt;UserVO&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOList,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id扣减余额</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id扣减余额接口&quot;)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;/deduction/&#123;money&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">reductionBalanceById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id,<span class="meta">@ApiParam(&quot;扣减金额&quot;)</span> <span class="meta">@PathVariable(&quot;money&quot;)</span> Integer money)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">r</span> <span class="operator">=</span> userService.reductionBalanceById(id,money);</span><br><span class="line">        JsonResult&lt;UserVO&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(r) result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">200</span>,<span class="string">&quot;扣减余额成功&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;UserVO&gt;(<span class="literal">null</span>,<span class="number">500</span>,<span class="string">&quot;扣减余额失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于需求5，删减指定用户金额，业务逻辑无法借助`Mybatis-plus现提供的方法，所以需要自定义方法</p><p><code>UserMapper</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateBalanceById</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span>LambdaQueryWrapper&lt;User&gt; wrapper,<span class="meta">@Param(&quot;amount&quot;)</span> <span class="type">int</span> amount)</span>;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBalanceById&quot;</span>&gt;</span></span><br><span class="line">        Update user SET balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>IUserService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reductionBalanceById</span><span class="params">(Long id,Integer money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IUserService</code>接口实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reductionBalanceById</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询用户余额</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getBalance()&lt;money)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.定义wrapper</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(User::getId,id);</span><br><span class="line">        userMapper.updateBalanceById(lambdaQueryWrapper,money);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>localhost:8080/doc.html</code>即可测试</p><h4 id="实例二：IService的Lambda查询"><a href="#实例二：IService的Lambda查询" class="headerlink" title="实例二：IService的Lambda查询"></a>实例二：IService的Lambda查询</h4><p>需求：实现一个根据复杂条件查询用户的接口，查询条件如下：</p><ul><li><p>name：用户名关键字，可以为空</p></li><li><p>status：用户状态，可以为空</p></li><li><p>minBalance：最小余额，可以为空</p></li><li><p>maxBalance：最大余额，可以为空</p></li></ul><p>上述功能其实就是多条件筛选，如果采用传统自己编写<code>SQL</code>语句的话，会非常繁琐</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022162757090.png" alt="image-20231022162757090" style="zoom:80%;"></p><p>如果采用<code>IService</code>提供的<code>lambdaQuery</code>的话会非常简洁</p><p>在<code>IUserServiceImpl</code>中实现如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUsersByCondition</span><span class="params">(String name, Integer status, Integer minBalance, Integer maxBalance)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lambdaQuery().like(name!=<span class="literal">null</span>,User::getUsername,name)</span><br><span class="line">        .eq(status!=<span class="literal">null</span>,User::getStatus,status)</span><br><span class="line">        .gt(minBalance!=<span class="literal">null</span>,User::getBalance,minBalance)</span><br><span class="line">        .lt(maxBalance!=<span class="literal">null</span>,User::getBalance,maxBalance)</span><br><span class="line">        .list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserController</code>添加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据条件进行用户查询</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据条件查询用户接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;UserVO&gt;&gt; <span class="title function_">queryUsers</span><span class="params">(UserQuery userQuery)</span>&#123;</span><br><span class="line">        <span class="comment">//1.查询</span></span><br><span class="line">        List&lt;User&gt; userList = userService.queryUsersByCondition(userQuery.getName(), userQuery.getStatus()</span><br><span class="line">                , userQuery.getMinBalance(), userQuery.getMaxBalance());</span><br><span class="line">        <span class="comment">//2.实体类型转换</span></span><br><span class="line">        List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(userList, UserVO.class);</span><br><span class="line">        JsonResult&lt;List&lt;UserVO&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOS, <span class="number">200</span>, <span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="案例三-IService的Lambda更新"><a href="#案例三-IService的Lambda更新" class="headerlink" title="案例三:IService的Lambda更新"></a>案例三:IService的Lambda更新</h4><p>需求：改造根据id修改用户余额的接口，要求如下</p><p>①完成对用户状态校验</p><p>②完成对用户余额校验</p><p>③如果扣减后余额为0，则将用户status修改为冻结状态（2）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reductionBalanceById</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询用户余额</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getBalance()&lt;money)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.计算余额,余额为零则需要将用户账户冻结</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remainBalance</span> <span class="operator">=</span> user.getBalance()-money;</span><br><span class="line">        lambdaUpdate().set(User::getBalance,remainBalance)</span><br><span class="line">                .set(remainBalance==<span class="number">0</span>,User::getStatus,<span class="number">2</span>)</span><br><span class="line">                .eq(User::getId,id)</span><br><span class="line">                .eq(User::getBalance,user.getBalance()) <span class="comment">//添加乐观锁，提高并发安全性</span></span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title=" "></a> </h4><h4 id="案例四：Iservice批量新增"><a href="#案例四：Iservice批量新增" class="headerlink" title="案例四：Iservice批量新增"></a>案例四：Iservice批量新增</h4><p>需求：批量插入10万条用户数据，并作出对比：</p><ul><li><p>普通for循环插入</p></li><li><p>IService的批量插入</p></li><li><p>开启<a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-performance-extensions.html">rewriteBatchedStatements</a><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-performance-extensions.html">=true</a>参数</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试循环插入所需时间</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveByFor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">        userService.save(buildUser(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.printf(<span class="string">&quot;耗费时间:&quot;</span>+(end-start)+<span class="string">&quot; ms&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试批次插入所需时间</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveByBatch</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">        list.add(buildUser(i));</span><br><span class="line">        <span class="comment">//每1000条批次插入一次</span></span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">1000</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            userService.saveBatch(list);</span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.printf(<span class="string">&quot;耗费时间:&quot;</span>+(end-start)+<span class="string">&quot; ms&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环插入所需时间</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184037735.png" alt="image-20231022184037735"></p><p>批次插入所需时间</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184051514.png" alt="image-20231022184051514"></p><p>开启<code>rewriteBatchedStatements</code>参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: jdbc:mysql://localhost:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184434795.png" alt="image-20231022184434795"></p><p><strong>结论</strong></p><p>批处理方案：</p><ul><li><p>普通for循环逐条插入速度极差，不推荐</p></li><li><p>MP的批量新增，基于预编译的批处理，性能不错</p></li><li><p>配置jdbc参数，开rewriteBatchedStatements，性能最好</p></li></ul><h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><p><code>Mybatis-plus</code>使用流程</p><ul><li>定义数据库对应的实体类</li><li>定义<code>mapper</code>接口并继承自<code>BaseMapper</code></li><li>定义<code>xxService</code>接口并继承自<code>IService</code></li><li>定义<code>xxService</code>实现类，并继承自<code>ServiceImpl</code></li></ul><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022184909209.png" alt="image-20231022184909209" style="zoom:80%;"></p><p><code>Mybatis-Plus</code>提供了这些代码的自动生成，<a href="https://baomidou.com/pages/ba5b24/#%E5%8A%9F%E8%83%BD">官方文档</a></p><p>利用<code>MybatisPlus</code>插件来生成对应代码</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185434944.png" alt="image-20231022185434944" style="zoom:80%;"></p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185933343.png" alt="image-20231022185933343"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185940369.png" alt="image-20231022185940369"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185915708.png" alt="image-20231022185915708"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022185949249.png" alt="image-20231022185949249"></p><h3 id="静态工具"><a href="#静态工具" class="headerlink" title="静态工具"></a>静态工具</h3><p>静态工具中的方法与<code>IService</code>中的方法比较相似，其由于是静态的，不用创建出对象即可调用；但是需要传入数据库对应实体类的<code>class</code>(泛型)</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022202619592.png" alt="image-20231022202619592"></p><h4 id="案例：静态工具查询"><a href="#案例：静态工具查询" class="headerlink" title="案例：静态工具查询"></a>案例：静态工具查询</h4><p>需求：</p><p>①改造根据id查询用户的接口，查询用户的同时，查询出用户对应的所有地址</p><p>②改造根据id批量查询用户的接口，查询用户的同时，查询出用户对应的所有地址</p><p>③实现根据用户id查询收货地址功能，需要验证用户状态，冻结用户抛出异常（练习）</p><p>上次需求的实现如果按照常规实现方式时，就会出现<strong>循环依赖</strong>，<code>UserService</code>中会注入<code>AddressService</code>，<code>AddressService</code>中也会注入<code>UserService</code></p><p>此时如借助静态工具，则无需相互注入，解决循环依赖问题</p><p><strong>创建地址数据表VO类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;收货地址VO&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressVO</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;省&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;市&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;县/区&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;联系人&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contact;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否是默认 1默认 0否&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;备注&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String notes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改写UserVO,新增地址属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户VO实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;使用状态（1正常 2冻结）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;收货地址列表&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AddressVO&gt; addresss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="根据Id查询单个用户信息及其收货地址"><a href="#根据Id查询单个用户信息及其收货地址" class="headerlink" title="根据Id查询单个用户信息及其收货地址"></a>根据Id查询单个用户信息及其收货地址</h5><p><strong>改写UserController</strong>中的<code>queryUserById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询用户接口&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;UserVO&gt; <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="comment">//        //1.查询用户</span></span><br><span class="line">    <span class="comment">//        User user = userService.getById(id);</span></span><br><span class="line">    <span class="comment">//        //对象类型转换</span></span><br><span class="line">    <span class="comment">//        UserVO userVO = BeanUtil.copyProperties(user,UserVO.class);</span></span><br><span class="line">    <span class="comment">//        JsonResult&lt;UserVO&gt; result = new JsonResult&lt;UserVO&gt;(userVO,200,&quot;查询成功&quot;);</span></span><br><span class="line">    <span class="comment">//        return result;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> userService.queryUserAndAddressById(id);</span><br><span class="line">    <span class="keyword">if</span>(userVO==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="literal">null</span>,<span class="number">600</span>,<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVO,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增IUserService</strong>中的<code>queryUserAndAddressById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserVO <span class="title function_">queryUserAndAddressById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p><strong>新增UserServiceImpl</strong>中的<code>queryUserAndAddressById</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserVO <span class="title function_">queryUserAndAddressById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//用户不存在或者用户账户被冻结</span></span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getStatus()==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.用户对象转换</span></span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line">    List&lt;Address&gt; addressList = Db.lambdaQuery(Address.class)</span><br><span class="line">        .eq(Address::getUserId, id)</span><br><span class="line">        .list();</span><br><span class="line">    <span class="comment">//3.地址对象转换</span></span><br><span class="line">    <span class="keyword">if</span>(CollUtil.isNotEmpty(addressList))&#123;</span><br><span class="line">        List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addressList, AddressVO.class);</span><br><span class="line">        userVO.setAddresses(addressVOS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据id列表查询多个用户信息及其收货地址"><a href="#根据id列表查询多个用户信息及其收货地址" class="headerlink" title="根据id列表查询多个用户信息及其收货地址"></a>根据id列表查询多个用户信息及其收货地址</h5><p><strong>改写UserController</strong>中的<code>queryUserByIds</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id批量查询</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id批量查询接口&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;UserVO&gt;&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@ApiParam(&quot;用户id集合&quot;)</span> <span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    <span class="comment">//        //1.查询用户集合</span></span><br><span class="line">    <span class="comment">//        List&lt;User&gt; userList = userService.listByIds(ids);</span></span><br><span class="line">    <span class="comment">//        //2.类型转换</span></span><br><span class="line">    <span class="comment">//        List&lt;UserVO&gt; userVOList = BeanUtil.copyToList(userList, UserVO.class);</span></span><br><span class="line">    <span class="comment">//        JsonResult&lt;List&lt;UserVO&gt;&gt; result = new JsonResult&lt;&gt;(userVOList,200,&quot;查询成功&quot;);</span></span><br><span class="line">    <span class="comment">//        return result;</span></span><br><span class="line"></span><br><span class="line">    List&lt;UserVO&gt; userVOS = userService.listUserAndAddressByIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(userVOS==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="literal">null</span>,<span class="number">600</span>,<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOS,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增IUserService</strong>中的<code>queryUserAndAddressByIds</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserVO&gt; <span class="title function_">listUserAndAddressByIds</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p><strong>新增UserServiceImpl</strong>中的<code>queryUserAndAddressByIds</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">listUserAndAddressByIds</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">//1.根据id查询用户</span></span><br><span class="line">    List&lt;User&gt; userList = listByIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(CollUtil.isEmpty(userList))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户id查出所有地址</span></span><br><span class="line">    <span class="comment">//一次性查出所有id比for循环多次查询效率要搞</span></span><br><span class="line">    <span class="comment">//时间主要在于数据库连接通信上</span></span><br><span class="line">    List&lt;Address&gt; addressList = Db.lambdaQuery(Address.class)</span><br><span class="line">        .in(Address::getUserId, ids)</span><br><span class="line">        .list();</span><br><span class="line"></span><br><span class="line">    List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(userList, UserVO.class);</span><br><span class="line">    <span class="keyword">if</span>(CollUtil.isNotEmpty(addressList))&#123;</span><br><span class="line">        List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addressList, AddressVO.class);</span><br><span class="line">        <span class="comment">//按照用户id进行分组</span></span><br><span class="line">        Map&lt;Long, List&lt;AddressVO&gt;&gt; map = addressVOS.stream().collect(Collectors.groupingBy(AddressVO::getUserId));</span><br><span class="line">        <span class="comment">//将用户与其对应地址对应起来</span></span><br><span class="line">        <span class="keyword">for</span> (UserVO userVO : userVOS) &#123;</span><br><span class="line">            userVO.setAddresses(map.get(userVO.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userVOS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//        //用户类型转换</span></span><br><span class="line">    <span class="comment">//        List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(userList, UserVO.class);</span></span><br><span class="line">    <span class="comment">//        //2.查询对应收货地址</span></span><br><span class="line">    <span class="comment">//        for (UserVO userVO : userVOS) &#123;</span></span><br><span class="line">    <span class="comment">//            List&lt;Address&gt; addressList = Db.lambdaQuery(Address.class)</span></span><br><span class="line">    <span class="comment">//                    .eq(Address::getUserId, userVO.getId())</span></span><br><span class="line">    <span class="comment">//                    .list();</span></span><br><span class="line">    <span class="comment">//            //转换地址类型</span></span><br><span class="line">    <span class="comment">//            if(CollUtil.isNotEmpty(addressList))&#123;</span></span><br><span class="line">    <span class="comment">//                List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addressList, AddressVO.class);</span></span><br><span class="line">    <span class="comment">//                userVO.setAddresses(addressVOS);</span></span><br><span class="line">    <span class="comment">//            &#125;</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//        return userVOS;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p><strong>逻辑删除</strong>就是基于代码逻辑模拟删除效果，但并不会真正删除数据。思路如下：</p><ul><li><p>在表中添加一个字段标记数据是否被删除</p></li><li><p>当删除数据时把标记置为1</p></li><li><p>查询时只查询标记为0的数据</p></li></ul><p>背景:淘宝中的购物订单模块，用户点击订单删除按钮，本地会消失，但是实际上数据库中该数据并未被删除，应为对于商家而言，订单数据比较重要；此时采用的就是<strong>逻辑删除</strong>逻辑，用户查询时不会查询该数据，但该数据在数据库中仍然存在</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022213309968.png" alt="image-20231022213309968"></p><p><strong>MybatisPlus</strong>提供了逻辑删除功能，无需改变方法调用的方式，而是在底层帮我们自动修改CRUD的语句。我们要做的就是在application.yaml文件中配置逻辑删除的字段名称和值即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">global-config:</span><br><span class="line">db-config:</span><br><span class="line">logic-delete-field: flag # 全局逻辑删除的实体字段名，字段类型可以是boolean、integer</span><br><span class="line">logic-delete-value: 1 # 逻辑已删除值(默认为 1)</span><br><span class="line">logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>逻辑删除本身也有自己的问题，比如：</p><ul><li><p>会导致数据库表垃圾数据越来越多，影响查询效率</p></li><li><p>SQL中全都需要对逻辑删除字段做判断，影响查询效率</p></li></ul><p>因此，我不太推荐采用逻辑删除功能，如果数据不能删除，可以采用把数据迁移到其它表的办法。</p><h3 id="枚举处理器"><a href="#枚举处理器" class="headerlink" title="枚举处理器"></a>枚举处理器</h3><p><code>Java</code>中的枚举类型与<code>数据库整数</code>类型之间的转换问题</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022215018724.png" alt="image-20231022215018724" style="zoom:80%;"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022214852226.png" alt="image-20231022214852226" style="zoom:80%;"></p><h5 id="实现PO类中的枚举变量与数据库字段的转换"><a href="#实现PO类中的枚举变量与数据库字段的转换" class="headerlink" title="实现PO类中的枚举变量与数据库字段的转换"></a>实现<code>PO</code>类中的枚举变量与数据库字段的转换</h5><p>①给枚举中的与数据库对应value值添加@EnumValue注解</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022215238486.png" alt="image-20231022215238486"></p><p>②在配置文件中配置统一的枚举处理器，实现类型转换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">configuration:</span><br><span class="line">default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span><br></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p><strong>定义Status字段对应的枚举类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    Normal(<span class="number">1</span>,<span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>,<span class="string">&quot;冻结&quot;</span>);</span><br><span class="line">    <span class="comment">//通过注解与数据库字段关联起来</span></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件中定义Mybatis枚举处理器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span><br></pre></td></tr></table></figure><p><strong>将UserPO和UserVO类中的Status属性改成枚举类型</strong></p><p><strong>枚举类型属性返回值的更改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    Normal(<span class="number">1</span>,<span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>,<span class="string">&quot;冻结&quot;</span>);</span><br><span class="line">    <span class="comment">//通过注解与数据库字段关联起来</span></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="comment">//通过注解@JsonValue将该属性作为枚举的返回值</span></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022220514144.png" alt="image-20231022220514144"></p><h3 id="JSON处理器"><a href="#JSON处理器" class="headerlink" title="JSON处理器"></a>JSON处理器</h3><p><code>Java</code>数据类型与<code>数据库中Json</code>数据类型的转换</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022221135194.png" alt="image-20231022221135194" style="zoom:80%;"></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022221311719.png" alt="image-20231022221311719"></p><p><strong>Json处理器使用流程</strong></p><ul><li>在VO/PO实体类的对应属性上添加<code>typeHandler</code>属性，让对应处理器生效</li><li>在实体类的<code>@TableName</code>注解中开启<code>autoResultMap</code>，对象嵌套过程中的自动映射</li></ul><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p><strong>创建数据库Json字段对应的实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改实体类User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;,autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;`username`&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 详细信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JacksonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> UserInfo info;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用状态（1正常 2冻结）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> UserStatus status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更改VO实体类</strong></p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022222341097.png" alt="image-20231022222341097" style="zoom:80%;"></p><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><p>MyBatisPlus基于MyBatis的Interceptor实现了一个基础拦截器，并在内部保存了MyBatisPlus的内置拦截器的集合</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022222800205.png" alt="image-20231022222800205"></p><p>MyBatisPlus提供的内置拦截器有下面这些</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022222545775.png" alt="image-20231022222545775"></p><p>其中最常用的是<strong>分页插件</strong></p><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><h4 id="分页插件的配置"><a href="#分页插件的配置" class="headerlink" title="分页插件的配置"></a>分页插件的配置</h4><p>首先，要在配置类中注册MyBatisPlus的核心插件，同时添加分页插件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.初始化核心插件</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加分页插件</span></span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">pageInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>();</span><br><span class="line">        pageInterceptor.setMaxLimit(<span class="number">1000L</span>); <span class="comment">//设置分页上限</span></span><br><span class="line">        <span class="comment">//加入核心插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(pageInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页API的使用"><a href="#分页API的使用" class="headerlink" title="分页API的使用"></a>分页API的使用</h4><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231022223335020.png" alt="image-20231022223335020"></p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试分页插件的使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.查询</span></span><br><span class="line">    <span class="type">int</span> pageNo=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> pageSize=<span class="number">5</span>;</span><br><span class="line">    <span class="comment">//1.1分页参数</span></span><br><span class="line">    Page&lt;User&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line">    <span class="comment">//1.2分页排序参数,通过OrderItem来指定按照某个字段升序(true)或者降序(false)</span></span><br><span class="line">    page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;balance&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">    <span class="comment">//1.3分页查询</span></span><br><span class="line">    Page&lt;User&gt; p = userService.page(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.数据总数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total=&quot;</span>+p.getTotal());</span><br><span class="line">    <span class="comment">//3.总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages=&quot;</span>+p.getPages());</span><br><span class="line">    <span class="comment">//4.分页数据</span></span><br><span class="line">    List&lt;User&gt; records = page.getRecords();</span><br><span class="line">    records.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用分页实体"><a href="#通用分页实体" class="headerlink" title="通用分页实体"></a>通用分页实体</h3><h4 id="实例：简单分页查询"><a href="#实例：简单分页查询" class="headerlink" title="实例：简单分页查询"></a>实例：简单分页查询</h4><p>需求：遵循下面的接口规范，编写一个UserController接口，实现User的分页查询</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231023101326507.png" alt="image-20231023101326507" style="zoom:80%;"></p><p>返回值类</p><p><img src="/2023/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/mybatis-plus%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/mybatis-plus/image-20231023101526797.png" alt="image-20231023101526797"></p><p><strong>创建通用的查询参数实体</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;查询通用实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页大小&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否升序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isAsc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用户查询继承与查询实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">PageQuery</span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建通用的查询结果实体</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;通用查询结果实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;数据总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页面总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;当前页面数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service层编写对应方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> QueryDTO&lt;UserVO&gt; <span class="title function_">queryUsersByPage</span><span class="params">(UserQuery query)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="comment">//1.1构造分页查询条件</span></span><br><span class="line">    Page&lt;User&gt; page = Page.of(query.getPageNo(), query.getPageSize());</span><br><span class="line">    <span class="keyword">if</span>(StrUtil.isNotEmpty(query.getSortBy()))&#123;</span><br><span class="line">        page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(query.getSortBy(),query.isAsc()));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;update_time&quot;</span>,<span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.2构造条件查询</span></span><br><span class="line">    Page&lt;User&gt; pages = lambdaQuery().like(name != <span class="literal">null</span>, User::getUsername, name)</span><br><span class="line">        .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">        .page(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.构造结构实体实例</span></span><br><span class="line">    QueryDTO&lt;UserVO&gt; userVOPageDTO = <span class="keyword">new</span> <span class="title class_">QueryDTO</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(pages.getRecords(), UserVO.class);</span><br><span class="line">    userVOPageDTO.setTotal(pages.getTotal());</span><br><span class="line">    userVOPageDTO.setPages(pages.getPages());</span><br><span class="line">    userVOPageDTO.setData(userVOS);</span><br><span class="line">    <span class="keyword">return</span> userVOPageDTO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写对应的Controller层方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据条件进行分页查询</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据条件分页查询&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;QueryDTO&lt;UserVO&gt;&gt; <span class="title function_">queryUsersByPage</span><span class="params">(UserQuery userQuery)</span>&#123;</span><br><span class="line">    QueryDTO&lt;UserVO&gt; userVOPageDTO = userService.queryUsersByPage(userQuery);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userVOPageDTO,<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化：函数封装"><a href="#优化：函数封装" class="headerlink" title="优化：函数封装"></a>优化：函数封装</h4><p><code>service</code>层中<code>page</code>分页条件的构建和根据查询结果构造分页查询结果实体的代码与业务无关，可以单独抽取出来进行封装</p><ul><li>在PageQuery中定义方法，将PageQuery对象转为MyBatisPlus中的Page对象</li><li>在PageDTO中定义方法，将MyBatisPlus中的Page结果转为PageDTO结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;查询通用实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页大小&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否升序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isAsc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  &lt;PO&gt; Page&lt;PO&gt; <span class="title function_">toMybatisPage</span><span class="params">()</span>&#123;</span><br><span class="line">        Page&lt;PO&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotEmpty(sortBy))&#123;</span><br><span class="line">            page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(sortBy,isAsc));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;update_time&quot;</span>,<span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;通用查询结果实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;数据总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页面总数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;当前页面数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;PO,VO&gt; QueryDTO&lt;VO&gt; <span class="title function_">toPageDTO</span><span class="params">(Page&lt;PO&gt; pages,Class&lt;VO&gt; clazz)</span>&#123;</span><br><span class="line">        QueryDTO&lt;VO&gt; userVOPageDTO = <span class="keyword">new</span> <span class="title class_">QueryDTO</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;VO&gt; userVOS = BeanUtil.copyToList(pages.getRecords(),clazz);</span><br><span class="line">        userVOPageDTO.setTotal(pages.getTotal());</span><br><span class="line">        userVOPageDTO.setPages(pages.getPages());</span><br><span class="line">        userVOPageDTO.setData(userVOS);</span><br><span class="line">        <span class="keyword">return</span> userVOPageDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service层方法改写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> QueryDTO&lt;UserVO&gt; <span class="title function_">queryUsersByPage</span><span class="params">(UserQuery query)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="comment">//1.1构造分页查询条件</span></span><br><span class="line">    Page&lt;User&gt; page = query.toMybatisPage();</span><br><span class="line">    <span class="comment">//1.2构造条件查询</span></span><br><span class="line">    Page&lt;User&gt; pages = lambdaQuery().like(name != <span class="literal">null</span>, User::getUsername, name)</span><br><span class="line">        .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">        .page(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.构造结构实体实例</span></span><br><span class="line">    <span class="keyword">return</span> QueryDTO.toPageDTO(pages, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis-Plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七章：本地方法栈</title>
      <link href="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/"/>
      <url>/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><h2 id="本地方法栈概述"><a href="#本地方法栈概述" class="headerlink" title="本地方法栈概述"></a>本地方法栈概述</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/image-20230831224231912.png" alt="image-20230831224231912"></p><p>  <img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/image-20230831224433183.png" alt="image-20230831224433183"></p><p> <img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/image-20230831224544933.png" alt="image-20230831224544933"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六章：本地方法接口</title>
      <link href="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/"/>
      <url>/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="本地方法接口"><a href="#本地方法接口" class="headerlink" title="本地方法接口"></a>本地方法接口</h1><h2 id="什么是本地方法"><a href="#什么是本地方法" class="headerlink" title="什么是本地方法"></a>什么是本地方法</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831222814621.png" alt="image-20230831222814621"></p><h2 id="为什么需要本地方法"><a href="#为什么需要本地方法" class="headerlink" title="为什么需要本地方法"></a>为什么需要本地方法</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223159429.png" alt="image-20230831223159429"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223514806.png" alt="image-20230831223514806"></p><h2 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223906690.png" alt="image-20230831223906690"></p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/image-20230831223948957.png" alt="image-20230831223948957"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八章：堆</title>
      <link href="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/"/>
      <url>/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="堆的核心概述"><a href="#堆的核心概述" class="headerlink" title="堆的核心概述"></a>堆的核心概述</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831230658229.png" alt="image-20230831230658229"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831231038739.png" alt="image-20230831231038739"></p><p>  每个Java程序代表一个进程，每个进程会创建一个单独的JVM示例，所以每个线程会有一个专门的堆区，而一个进程中的所有线程则共享一个堆区</p><p>查看堆空间的工具：<code>JDK</code>安装目录的<code>bin</code>目录下的<code>jvisualvm.exe</code></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831233155362.png" alt="image-20230831233155362"></p><p><strong>软件示例</strong></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831233310566.png" alt="image-20230831233310566"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831233613831.png" alt="image-20230831233613831"></p><p> 栈、堆、方法区之间的关系示例</p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831234101927.png" alt="image-20230831234101927"></p><h2 id="堆的内存细分"><a href="#堆的内存细分" class="headerlink" title="堆的内存细分"></a>堆的内存细分</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230831234709080.png" alt="image-20230831234709080"></p><p> <strong>JDK7版本堆内存结构</strong></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230903232946649.png" alt="image-20230903232946649" style="zoom:67%;"></p><p> <strong>JDK8堆内存结构</strong></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230903233627749.png" alt="image-20230903233627749" style="zoom:67%;"></p><h2 id="设置堆内存大小和OOM"><a href="#设置堆内存大小和OOM" class="headerlink" title="设置堆内存大小和OOM"></a>设置堆内存大小和OOM</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230903234114120.png" alt="image-20230903234114120"></p><h3 id="设置和查看堆空间大小"><a href="#设置和查看堆空间大小" class="headerlink" title="设置和查看堆空间大小"></a>设置和查看堆空间大小</h3><p><strong>设置堆空间大小参数</strong></p><ul><li><code>-Xms</code> 用来设置堆空间(年轻代+老年代)的初始内存大小<ul><li><code>-X</code>为<code>jvm</code>运行参数</li><li><code>ms</code>:<code>memory start</code></li></ul></li><li><code>-Xmx</code> 用来设置堆空间(年轻代+老年代)的最大内存大小</li></ul><p><strong>默认堆空间大小</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.jvm.ch8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSizeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//返回Java虚拟机堆内存总量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">initialMemory</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory() /<span class="number">1024</span> /<span class="number">1024</span>;</span><br><span class="line">        <span class="comment">//返回Java虚拟机试图使用的最大堆内存总量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">maxMemory</span> <span class="operator">=</span> Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-Xms: &quot;</span>+initialMemory+<span class="string">&quot;M&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-Xmx: &quot;</span>+maxMemory+<span class="string">&quot;M&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;系统内存大小:&quot;</span>+initialMemory*<span class="number">64</span>/<span class="number">1024</span>+<span class="string">&quot;G&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;系统内存大小:&quot;</span>+maxMemory*<span class="number">4</span>/<span class="number">1024</span>+<span class="string">&quot;G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>设置查看Java进程内存空间</strong></p><p>设置java程序运行内存空间</p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904000217587.png" alt="image-20230904000217587"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001306935.png" alt="image-20230904001306935"></p><p>查看当前进程的堆空间大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回Java虚拟机堆内存总量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">initialMemory</span> <span class="operator">=</span> Runtime.getRuntime().totalMemory() /<span class="number">1024</span> /<span class="number">1024</span>;</span><br><span class="line"><span class="comment">//返回Java虚拟机试图使用的最大堆内存总量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">maxMemory</span> <span class="operator">=</span> Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-Xms: &quot;</span>+initialMemory+<span class="string">&quot;M&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;-Xmx: &quot;</span>+maxMemory+<span class="string">&quot;M&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001325508.png" alt="image-20230904001325508"></p><p>Q:为什么手动设置空间大小为100M，而打印却只有96M</p><p>查看当前进程堆空间的构成方式一</p><ul><li><p>获取当前进程的PID：<code>jps</code></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001350362.png" alt="image-20230904001350362"></p></li><li><p>根据进程PID查看当前进程堆空间的构成</p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001404255.png" alt="image-20230904001404255"></p></li></ul><p>原因：新生代中的S0和S1区的空间大小只会算一个</p><p>查看当前进程堆空间的构成方式二</p><p>添加<code>jvm</code>运行参数：<code>-XX:+PrintGCDetails</code></p><p>会在控制台打印如下信息</p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904001810246.png" alt="image-20230904001810246"></p><h3 id="OutOfMemory-OOM-举例"><a href="#OutOfMemory-OOM-举例" class="headerlink" title="OutOfMemory(OOM)举例"></a>OutOfMemory(OOM)举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.jvm.ch8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapOOM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Object&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            lists.add(<span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1024</span>*<span class="number">1024</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    Animal(<span class="type">int</span> size)&#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230904002554837.png" alt="image-20230904002554837"></p><h2 id="年轻代与老年代"><a href="#年轻代与老年代" class="headerlink" title="年轻代与老年代"></a>年轻代与老年代</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20230909230316493.png" alt="image-20230909230316493"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021100233287.png" alt="image-20231021100233287"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021101645835.png" alt="image-20231021101645835"></p><p>默认虽然是<code>8:1:1</code>,但是实际情况存在偏差，要想真正的成为<code>8:1:1</code>，则必须要手动显示这只<code>XX:SurvivorRatio=8</code></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021102417326.png" alt="image-20231021102417326"></p><p>随着对象存活周期的增长，会从一个区转移到另一个区</p><p><strong>实例</strong>  设置<code>NewRatio-4</code></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021100715037.png" alt="image-20231021100715037"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021100846994.png" alt="image-20231021100846994"></p><p>一般不会更改此参数的设置，如果程序中明确生命周期长的对象比较多，可以将老年区的空间调大一些</p><p><strong>实例</strong>  如何查看<code>jvm</code>的一些参数值</p><p><code>jinfo -flag 参数值 pid</code></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021101449223.png" alt="image-20231021101449223"></p><h2 id="对象分配过程图解"><a href="#对象分配过程图解" class="headerlink" title="对象分配过程图解"></a>对象分配过程图解</h2><h3 id="对象分配过程概述"><a href="#对象分配过程概述" class="headerlink" title="对象分配过程概述"></a>对象分配过程概述</h3><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021102852030.png" alt="image-20231021102852030"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021104324473.png" alt="image-20231021104324473"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021104458947.png" alt="image-20231021104458947"></p><p>一般对象创建的过程：</p><ol><li>新创建的对象会存放在<code>Eden区</code>，<code>Eden</code>满了之后会触发<code>Young/Minor GC</code>，没有引用对象会被销毁，存活对象会存放在<code>to区</code>，<code>Survivor 0</code>和<code>Survivor 1</code>哪一个此时刻为空，则为<code>to区</code>，同时每个对象会添加一个属性<code>age</code></li><li>下一轮次，<code>eden</code>触发<code>GC</code>之后，执行1中同样操作，于此同时，还会对<code>from</code>区的对象进行<code>GC</code>，<code>from区</code>存活的对象同样也要移动到<code>to区</code>，在整个过程中如果某个对象的<code>age</code>达到了阈值，则会被移入老年区</li><li><code>survivor 0</code>和<code>survivor 1</code>哪一个为空则哪一个为<code>to区</code>，另一个则为<code>from</code>区</li></ol><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021105502296.png" alt="image-20231021105502296"></p><h3 id="对象分配的特殊情况"><a href="#对象分配的特殊情况" class="headerlink" title="对象分配的特殊情况"></a>对象分配的特殊情况</h3><h4 id="对象分配整体流程"><a href="#对象分配整体流程" class="headerlink" title="对象分配整体流程"></a>对象分配整体流程</h4><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021105741662.png" alt="image-20231021105741662"></p><h4 id="常用调优工具"><a href="#常用调优工具" class="headerlink" title="常用调优工具"></a>常用调优工具</h4><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021111912975.png" alt="image-20231021111912975"></p><h2 id="Minor-GC、Major-GC与Full-GC"><a href="#Minor-GC、Major-GC与Full-GC" class="headerlink" title="Minor GC、Major GC与Full GC"></a>Minor GC、Major GC与Full GC</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021142808781.png" alt="image-20231021142808781"></p><h3 id="最简单的分代式GC策略的触发条件"><a href="#最简单的分代式GC策略的触发条件" class="headerlink" title="最简单的分代式GC策略的触发条件"></a>最简单的分代式GC策略的触发条件</h3><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021162334160.png" alt="image-20231021162334160"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021162803064.png" alt="image-20231021162803064"></p><p>  <img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021162843135.png" alt="image-20231021162843135"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021163048893.png" alt="image-20231021163048893"></p><h2 id="堆空间分代思想"><a href="#堆空间分代思想" class="headerlink" title="堆空间分代思想"></a>堆空间分代思想</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021163924381.png" alt="image-20231021163924381"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021164034381.png" alt="image-20231021164034381"></p><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021164659893.png" alt="image-20231021164659893"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021164818236.png" alt="image-20231021164818236"></p><h2 id="为对象分配内存：TLAB"><a href="#为对象分配内存：TLAB" class="headerlink" title="为对象分配内存：TLAB"></a>为对象分配内存：TLAB</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021170441095.png" alt="image-20231021170441095"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021170817967.png" alt="image-20231021170817967"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021171010101.png" alt="image-20231021171010101"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021171322334.png" alt="image-20231021171322334"></p><h2 id="总结：堆空间的参数设置"><a href="#总结：堆空间的参数设置" class="headerlink" title="总结：堆空间的参数设置"></a>总结：堆空间的参数设置</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021171705040.png" alt="image-20231021171705040"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021172740415.png" alt="image-20231021172740415"></p><p> <img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021172834062.png" alt="image-20231021172834062"></p><h2 id="堆是分配对象存储的唯一选择吗？"><a href="#堆是分配对象存储的唯一选择吗？" class="headerlink" title="堆是分配对象存储的唯一选择吗？"></a>堆是分配对象存储的唯一选择吗？</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021173409671.png" alt="image-20231021173409671"></p><h3 id="逃逸分析：概述"><a href="#逃逸分析：概述" class="headerlink" title="逃逸分析：概述"></a>逃逸分析：概述</h3><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021225842468.png" alt="image-20231021225842468"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230005247.png" alt="image-20231021230005247"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230157826.png" alt="image-20231021230157826"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230513461.png" alt="image-20231021230513461"></p><p>如何快速判断是否发生了逃逸分析：看方法内<code>new</code>的对象实体是否有可能在方法外被调用</p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021230915451.png" alt="image-20231021230915451"></p><p><strong>结论：</strong>方法中使用局部变量的，就不要在方法外定义</p><h3 id="逃逸分析：代码优化"><a href="#逃逸分析：代码优化" class="headerlink" title="逃逸分析：代码优化"></a>逃逸分析：代码优化</h3><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021231136778.png" alt="image-20231021231136778"></p><h4 id="代码优化之栈上分配"><a href="#代码优化之栈上分配" class="headerlink" title="代码优化之栈上分配"></a>代码优化之栈上分配</h4><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021231339250.png" alt="image-20231021231339250"></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000000</span>;i++)&#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间:&quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//满足逃逸分析，new出来的实例不会在方法外使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不开启逃逸分析:</strong></p><p><code>-Xms1G -Xmx1G -XX:-doEscapeAnalysis -XX:+PrintGCDetails</code></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232630791.png" alt="image-20231021232630791"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232715545.png" alt="image-20231021232715545"></p><p><strong>开启逃逸分析</strong></p><p><code>-Xms1G -Xmx1G -XX:+doEscapeAnalysis -XX:+PrintGCDetails</code></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232804323.png" alt="image-20231021232804323"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021232833768.png" alt="image-20231021232833768"></p><p><strong>结论</strong></p><ul><li>开启逃逸分析，栈上分配，程序运行会更高效，时间更少</li><li>未开启逃逸分析。内存中<code>User</code>实例个数是<code>10000000</code>，开启逃逸分析后，内存中<code>User</code>实例较少，因为进行了栈上分配</li><li>如果堆空间不足，未开启逃逸分析会进行<code>GC</code>，开启逃逸分析则无<code>GC</code>发生</li></ul><h4 id="代码优化之同步省略"><a href="#代码优化之同步省略" class="headerlink" title="代码优化之同步省略"></a>代码优化之同步省略</h4><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233306833.png" alt="image-20231021233306833"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233420048.png" alt="image-20231021233420048"></p><h4 id="代码优化之标量替换"><a href="#代码优化之标量替换" class="headerlink" title="代码优化之标量替换"></a>代码优化之标量替换</h4><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233745285.png" alt="image-20231021233745285"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021233936858.png" alt="image-20231021233936858"></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234020569.png" alt="image-20231021234020569"></p><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000000</span>;i++)&#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间:&quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//满足逃逸分析，new出来的实例不会在方法外使用,可以进行标量替换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">alloc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.id=<span class="number">100</span>;</span><br><span class="line">        user.name=<span class="string">&quot;com.www.baidu.com&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不开启标量替换</strong></p><p><code>-Xms100m -Xmx100m -XX:+DoEscapeAnalysis -XX:+PrintGCDetails -XX:-EliminateAllocations</code></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234603826.png" alt="image-20231021234603826"></p><p><strong>开启标量替换</strong></p><p><code>-Xms100m -Xmx100m -XX:+DoEscapeAnalysis -XX:+PrintGCDetails -XX:+EliminateAllocations</code></p><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234617154.png" alt="image-20231021234617154"></p><p><strong>总结</strong></p><ul><li>开启标量替换，在堆空间操作，无需new对象，所以时间更短且无需进行垃圾回收</li></ul><h4 id="逃逸分析总结"><a href="#逃逸分析总结" class="headerlink" title="逃逸分析总结"></a>逃逸分析总结</h4><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021234924370.png" alt="image-20231021234924370"></p><h2 id="堆空间总结"><a href="#堆空间总结" class="headerlink" title="堆空间总结"></a>堆空间总结</h2><p><img src="/2023/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%A0%86/image-20231021235150818.png" alt="image-20231021235150818"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis6.0基础</title>
      <link href="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/"/>
      <url>/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>本文档参考自 <a href="https://www.bilibili.com/video/BV1Rv41177Af/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">B站尚硅谷Redis课程</a></p><h2 id="NoSQL数据库简介"><a href="#NoSQL数据库简介" class="headerlink" title="NoSQL数据库简介"></a>NoSQL数据库简介</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>web1.0时代，数据访问量有限，用高性能单节点服务器就可以解决大部分问题</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230906194602576.png" alt="image-20230906194602576"></p><p> web2.0时代，智能移动设备的普及，用户访问量大幅提升，产生大量用户数据，互联网平台面临巨大性能挑战</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230906194753722.png" alt="image-20230906194753722"></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><h4 id="解决CPU压力"><a href="#解决CPU压力" class="headerlink" title="解决CPU压力"></a>解决CPU压力</h4><p>解决应用服务器压力，一个最直观的方法就是采用集群，多个应用服务器分摊访问量</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230906195209890.png" alt="image-20230906195209890"></p><h5 id="此方案存在的问题："><a href="#此方案存在的问题：" class="headerlink" title="此方案存在的问题："></a>此方案存在的问题：</h5><p>session的问题，对于一个系统而言，用户初次访问，用户的信息会存储在session中，这样用户第二次访问就无需再次重复登陆</p><p>但是如果用集群的方式，session存在于服务器1中，但是下次访问用户可能分配到了服务器2，这样无法获取用户对应的session数据</p><h5 id="对应的解决办法"><a href="#对应的解决办法" class="headerlink" title="对应的解决办法"></a>对应的解决办法</h5><h6 id="方法一：存储到cookie中"><a href="#方法一：存储到cookie中" class="headerlink" title="方法一：存储到cookie中"></a>方法一：存储到cookie中</h6><p>session存储在服务器端、cookie是存储到客户端的，数据存储在cookie中会存在一定的安全性问题</p><h6 id="方法二：session复制"><a href="#方法二：session复制" class="headerlink" title="方法二：session复制"></a>方法二：session复制</h6><p>当前服务器session发生变化，就会复制多份传递给各个其他服务器</p><p>缺点：session数据冗余，节点越多浪费越大</p><h6 id="方案三：存在文件服务器或者数据库里"><a href="#方案三：存在文件服务器或者数据库里" class="headerlink" title="方案三：存在文件服务器或者数据库里"></a>方案三：存在文件服务器或者数据库里</h6><p>缺点：读取存储时大量的IO效率问题</p><h6 id="方案四：缓存数据库-NoSQL数据库"><a href="#方案四：缓存数据库-NoSQL数据库" class="headerlink" title="方案四：缓存数据库(NoSQL数据库)"></a>方案四：缓存数据库(NoSQL数据库)</h6><p>完全在内存中，速度快，数据结构简单</p><h4 id="解决IO的压力"><a href="#解决IO的压力" class="headerlink" title="解决IO的压力"></a>解决IO的压力</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230906211634240.png" alt="image-20230906211634240"></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>NoSQL(Not Only SQL)</code>，不仅仅是SQL，泛指<strong>非关系型数据库</strong>，其不依赖于业务逻辑方式存储，而是简单的以<code>key-value</code>的模式存储</p><h4 id="NoSQL应用场景"><a href="#NoSQL应用场景" class="headerlink" title="NoSQL应用场景"></a>NoSQL应用场景</h4><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高可扩展性的</li></ul><h4 id="NoSQL不适用场景"><a href="#NoSQL不适用场景" class="headerlink" title="NoSQL不适用场景"></a>NoSQL不适用场景</h4><ul><li>需要事务支持</li><li>基于sql的结构化查询存储，处理复杂的关系,需要即席查询</li></ul><h3 id="常见的NoSQL数据库"><a href="#常见的NoSQL数据库" class="headerlink" title="常见的NoSQL数据库"></a>常见的NoSQL数据库</h3><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230906212735090.png" alt="image-20230906212735090"></p><h2 id="Redis概述"><a href="#Redis概述" class="headerlink" title="Redis概述"></a>Redis概述</h2><ul><li>Redis是一个开源的key-value存储系统</li><li>和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set —有序集合)和hash（哈希类型）</li><li>这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的</li><li>在此基础上，Redis支持各种不同方式的排序</li><li>与memcached一样，为了保证效率，数据都是缓存在内存中</li><li>区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件</li><li>并且在此基础上实现了master-slave(主从)同步</li></ul><h3 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h3><h4 id="配合关系型数据库做高速缓存"><a href="#配合关系型数据库做高速缓存" class="headerlink" title="配合关系型数据库做高速缓存"></a><strong>配合关系型数据库做高速缓存</strong></h4><ul><li>高频次，热门访问的数据，降低数据库IO</li><li>分布式架构，做session共享</li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230906213821080.png" alt="image-20230906213821080"></p><h4 id="多样的数据结构存储持久化数据"><a href="#多样的数据结构存储持久化数据" class="headerlink" title="多样的数据结构存储持久化数据"></a><strong>多样的数据结构存储持久化数据</strong></h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230906213919471.png" alt="image-20230906213919471"></p><h2 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h2><p><code>Redis</code><a href="http://redis.io">官网</a>只提供了对<code>Linux</code>环境下的支持，在<code>Windows</code>环境下需要借助<code>WSL</code></p><ul><li><p>需要安装gcc编译器</p><ul><li><code>gcc --version</code>测试系统中是否存在<code>gcc</code></li><li>不存在，执行<code>yum install gcc</code>安装最新版<code>gcc</code></li></ul></li><li><p>下载<code>redis-6.2.1.tar.gz</code>放在<code>/opt</code>目录中</p></li><li><p>解压命令<code>tar -zxvf redis-6.2.1.tar.gz</code></p></li><li><p>解压完成后进入目录：<code>cd redis-6.2.1</code></p></li><li><p>在redis-6.2.1目录下再次执行make命令（只是编译好）</p></li><li><p>执行: make install(安装)</p></li><li><p>默认会安装在<code>/usr/local/bin</code>目录下</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230909211905656.png" alt="image-20230909211905656"></p></li></ul><h3 id="Redis安装目录各个文件介绍"><a href="#Redis安装目录各个文件介绍" class="headerlink" title="Redis安装目录各个文件介绍"></a>Redis安装目录各个文件介绍</h3><ul><li><code>redis-benchmark</code>：性能测试工具，可以在自己本子运行，看看自己本子性能如何</li><li><code>redis-check-aof</code>：修复有问题的AOF文件，rdb和aof后面讲</li><li><code>redis-check-rdb</code>：修复有问题的dump.rdb文件</li><li><code>redis-cli</code>：客户端，操作入口</li><li><code>redis-sentinel</code>：Redis集群使用</li><li><code>redis-server</code>：Redis服务器启动命令</li></ul><h3 id="Redis的启动"><a href="#Redis的启动" class="headerlink" title="Redis的启动"></a>Redis的启动</h3><h4 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h4><p>前台启动，命令行窗口不能关闭，否则服务器停止</p><p>终端输入:<code>redis-server</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230909212448667.png" alt="image-20230909212448667"></p><p>默认占用端口号<code>6379</code></p><h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><ul><li><p>备份redis.conf</p><ul><li>拷贝一份<code>redis.conf</code>到其他目录，此文件存在于redis安装包解压后的文件夹<code>/opt/redis-6.2.1</code></li><li>拷贝命令<code>cp redis.conf /etc/redis.conf</code> </li></ul></li><li><p>配置文件<code>redis.conf</code>修改</p><ul><li><p>修改<code>redis.conf</code>(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230910092520248.png" alt="image-20230910092520248"></p></li></ul></li><li><p>Redis 启动</p><ul><li><p>切换到<code>redis</code>安装目录，<code>cd  /usr/local/bin</code></p></li><li><p><code>redis-server /etc/redis.conf</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230910093022058.png" alt="image-20230910093022058"></p></li></ul></li><li><p>客户端访问</p><ul><li><code>redis-cli</code></li></ul></li><li><p>测试验证是否连接成功</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230910093148867.png" alt="image-20230910093148867"></p></li><li><p>redis关闭</p><ol><li><p>进入终端再关闭</p><ul><li><p><code>shutdown</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230910093524230.png" alt="image-20230910093524230"></p></li></ul></li><li><p>单实例关闭</p><ul><li><p><code>redis-cli shutdown</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230910093734744.png" alt="image-20230910093734744"></p></li></ul></li><li><p>直接杀死对应的进程</p><ul><li><p><code>kill -9 PID</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230910093827045.png" alt="image-20230910093827045"></p></li></ul></li></ol></li></ul><h2 id="Redis相关知识"><a href="#Redis相关知识" class="headerlink" title="Redis相关知识"></a>Redis相关知识</h2><h3 id="端口号的来源"><a href="#端口号的来源" class="headerlink" title="端口号的来源"></a>端口号的来源</h3><p>redis端口号默认为6379，人物<code>Alessia Merz</code>中的<code>Merz</code>与非智能手机上的键位对应关系</p><p><a href="https://www.zhihu.com/question/20084750">原因</a></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230910095139037.png" alt="image-20230910095139037"></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>默认16个数据库，类似数组下标从0开始，初始默认使用0号库</li><li>使用命令 select  <dbid>来切换数据库。如: select 8</dbid></li><li>统一密码管理，所有库同样密码</li><li>dbsize查看当前数据库的key的数量</li><li>flushdb清空当前库</li><li>flushall通杀全部库</li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230910095549435.png" alt="image-20230910095549435"></p><h3 id="单线程-多路IO复用技术"><a href="#单线程-多路IO复用技术" class="headerlink" title="单线程+多路IO复用技术"></a>单线程+多路IO复用技术</h3><p>Redis是单线程+多路IO复用技术</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</span><br></pre></td></tr></table></figure><h4 id="Redis与memcached的区别"><a href="#Redis与memcached的区别" class="headerlink" title="Redis与memcached的区别"></a>Redis与memcached的区别</h4><ul><li>redis支持多种类型，既可以内存使用也可以持久化存储</li><li><p>memcached支持单一数据类型，只能在内存使用</p></li><li><p>串行  vs  多线程+锁（memcached） vs  单线程+多路IO复用(Redis)</p><ul><li>redis：串行+多路IO复用</li><li>memcached: 多线程+锁</li></ul></li></ul><p>注意：IO多路复用最好能够充分理解</p><h2 id="Redis常用五大数据类型"><a href="#Redis常用五大数据类型" class="headerlink" title="Redis常用五大数据类型"></a>Redis常用五大数据类型</h2><ul><li>Redis字符串(String)</li><li>Redis列表(List)</li><li>Redis集合(Set)</li><li>Redis哈希(Hash)</li><li>Redis有序集合(Zset)</li></ul><h3 id="Redis键-Key"><a href="#Redis键-Key" class="headerlink" title="Redis键(Key)"></a>Redis键(Key)</h3><ul><li><p>set key value:向数据库中添加键值对</p></li><li><p>keys <em>查看当前库所有key  (匹配：keys </em>1)</p></li><li><p>exists key判断某个key是否存在</p></li><li><p>type key 查看你的key是什么类型</p></li><li><p>del key    删除指定的key数据</p></li><li><p>unlink key  根据value选择非阻塞删除 仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</p></li><li><p>expire key 10  10秒钟：为给定的key设置过期时间</p></li><li><p>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</p></li><li><p>select命令切换数据库</p></li><li><p>dbsize查看当前数据库的key的数量</p></li><li><p>flushdb清空当前库</p></li><li><p>flushall通杀全部库</p></li></ul><h3 id="Redis字符串-String"><a href="#Redis字符串-String" class="headerlink" title="Redis字符串(String)"></a>Redis字符串(String)</h3><ul><li>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value</li><li>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象</li><li>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>set  &lt;key&gt;&lt;value&gt;</code>添加键值对<ul><li><key> 存在则直接覆盖<value>值</value></key></li></ul></li><li><code>get  &lt;key&gt;</code>查询对应键值</li><li><code>append &lt;key&gt;&lt;value&gt;</code>将给定的<value> 追加到原值的末尾</value></li><li><code>strlen &lt;key&gt;</code>获得值的长度</li><li><code>setnx &lt;key&gt;&lt;value&gt;</code>只有在 key 不存在时  设置 key 的值</li><li><code>incr &lt;key&gt;</code>将 key 中储存的数字值增1,只能对数字值操作，如果为空，新增值为1</li><li><code>decr &lt;key&gt;</code>将 key 中储存的数字值减1,只能对数字值操作，如果为空，新增值为-1</li><li><code>incrby / decrby &lt;key&gt;&lt;步长&gt;</code>将 key 中储存的数字值增减。自定义步长</li><li><code>mset &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; .....</code>同时设置一个或多个 key-value对</li><li><code>mget &lt;key1&gt;&lt;key2&gt;&lt;key3&gt; .....</code>同时获取一个或多个 value</li><li><code>msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; .....</code>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</li><li><code>getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</code>获得值的范围，类似java中的substring，左闭右闭区间</li><li><code>setrange &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;</code>用 <value> 覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0开始</strong>)</key></value></li><li><code>setex &lt;key&gt;&lt;过期时间&gt;&lt;value&gt;</code>设置键值的同时，设置过期时间，单位秒</li><li><code>getset &lt;key&gt;&lt;value&gt;</code>以新换旧，设置了新值同时获得旧值</li></ul><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>所谓<strong>原子</strong>操作是指不会被线程调度机制打断的操作</p><p>这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）</p><ul><li>在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间。</li><li><p>在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。Redis单命令的原子性主要得益于Redis的单线程。 </p><p>redis中的<code>incr</code>操作是原子操作</p></li></ul><h4 id="String的数据结构"><a href="#String的数据结构" class="headerlink" title="String的数据结构"></a>String的数据结构</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</span><br></pre></td></tr></table></figure><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230910112035166.png" alt="image-20230910112035166"></p><p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h3 id="Redis列表-List"><a href="#Redis列表-List" class="headerlink" title="Redis列表(List)"></a>Redis列表(List)</h3><ul><li>单键多值</li><li>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</li><li>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差</li></ul><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>lpush/rpush &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt;</code>:从左边/右边插入一个或多个值</li><li><code>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;</code>:按照索引下标获得元素(从左到右)<ul><li><code>lrange mylist 0 -1</code>  0左边第一个，-1右边第一个，（0-1表示获取所有）</li></ul></li><li><code>lpop/rpop &lt;key&gt;</code>:从左边/右边吐出一个值。值在键在，值光键亡。</li><li><code>rpoplpush &lt;key1&gt;&lt;key2&gt;</code>:列表右边吐出一个值，插到<code>&lt;key2&gt;</code>列表左边</li><li><code>lindex &lt;key&gt;&lt;index&gt;</code>按照索引下标获得元素(从左到右)</li><li><code>llen &lt;key&gt;</code>获得列表长度</li><li><code>linsert &lt;key&gt; before(after) &lt;value&gt;&lt;newvalue&gt;</code>在<code>&lt;value&gt;</code>的前面(后面)插入<code>&lt;newvalue&gt;</code></li><li><code>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</code>从左边删除n个value(从左到右)</li><li><code>lset&lt;key&gt;&lt;index&gt;&lt;value&gt;</code>将列表key下标为index的值替换成value</li></ul><h4 id="Redis列表的数据结构"><a href="#Redis列表的数据结构" class="headerlink" title="Redis列表的数据结构"></a>Redis列表的数据结构</h4><p>List的数据结构为快速链表quickList</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成quicklist，因为普通的链表需要的附加指针空间太大，会比较浪费空间，比如列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230911211359820.png" alt="image-20230911211359820"></p><p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余</p><h3 id="Redis集合-Set"><a href="#Redis集合-Set" class="headerlink" title="Redis集合(Set)"></a>Redis集合(Set)</h3><ul><li>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</li><li>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的<strong>复杂度都是O(1)</strong>。</li></ul><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>sadd &lt;key&gt;&lt;value1&gt;&lt;value2&gt; .....</code>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</li><li><code>smembers &lt;key&gt;</code>取出该集合的所有值</li><li><code>sismember &lt;key&gt;&lt;value&gt;</code>判断集合<key>是否为含有该<value>值，有1，没有0</value></key></li><li><code>scard&lt;key&gt;</code>返回该集合的元素个数</li><li><code>srem &lt;key&gt;&lt;value1&gt;&lt;value2&gt; ....</code>删除集合中的某个元素</li><li><code>spop &lt;key&gt;</code>随机从该集合中吐出一个值</li><li><code>srandmember &lt;key&gt;&lt;n&gt;</code>随机从该集合中取出n个值。不会从集合中删除 </li><li><code>smove &lt;source&gt;&lt;destination&gt;value</code>把集合中一个值从一个集合移动到另一个集合</li><li><code>sinter &lt;key1&gt;&lt;key2&gt;</code>返回两个集合的交集元素</li><li><code>sunion &lt;key1&gt;&lt;key2&gt;</code>返回两个集合的并集元素</li><li><code>sdiff &lt;key1&gt;&lt;key2&gt;</code>返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</li></ul><h4 id="Redis集合数据结构"><a href="#Redis集合数据结构" class="headerlink" title="Redis集合数据结构"></a>Redis集合数据结构</h4><p>Set数据结构是dict字典，字典是用哈希表实现的</p><p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值</p><h3 id="Redis哈希-Hash"><a href="#Redis哈希-Hash" class="headerlink" title="Redis哈希(Hash)"></a>Redis哈希(Hash)</h3><ul><li><p>Redis hash 是一个键值对集合</p></li><li><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。类似Java里面的Map<String,Object></String,Object></p></li><li><p>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储,主要有以下2种存储方式：</p><ul><li><p>每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230912195005109.png" alt="image-20230912195005109"></p></li><li><p>用户ID数据冗余</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230912195027535.png" alt="image-20230912195027535"></p></li></ul></li><li><p>redis中的哈希</p><ul><li><p><strong>通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</strong></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230912195116200.png" alt="image-20230912195116200"></p></li></ul></li></ul><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>hset &lt;key&gt;&lt;field&gt;&lt;value&gt;</code>给<code>&lt;key&gt;</code>集合中的 <code>&lt;field&gt;</code>键赋值<code>&lt;value&gt;</code></li><li><code>hget &lt;key1&gt;&lt;field&gt;</code>从<code>&lt;key1&gt;</code>集合<code>&lt;field&gt;</code>取出 value </li><li><code>hmset &lt;key1&gt;&lt;field1&gt;&lt;value1&gt;&lt;field2&gt;&lt;value2&gt;...</code>批量设置hash的值</li><li><code>hexists&lt;key1&gt;&lt;field&gt;</code>查看哈希表 key 中，给定域 field 是否存在</li><li><code>hkeys &lt;key&gt;</code>列出该hash集合的所有field</li><li><code>hvals &lt;key&gt;</code>列出该hash集合的所有value</li><li><code>hincrby &lt;key&gt;&lt;field&gt;&lt;increment&gt;</code>为哈希表 key 中的域 field 的值加上增量</li><li><code>hsetnx &lt;key&gt;&lt;field&gt;&lt;value&gt;</code>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable</p><h3 id="Redis有序集合-Zset-sorted-set"><a href="#Redis有序集合-Zset-sorted-set" class="headerlink" title="Redis有序集合(Zset sorted set)"></a>Redis有序集合(Zset sorted set)</h3><ul><li>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合</li><li>不同之处是有序集合的每个成员都关联了一个评分（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了</li><li>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素</li><li>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表</li></ul><h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>zadd &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;…</code>将一个或多个 member 元素及其 score 值加入到有序集 key 当中</li><li><code>zrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; [WITHSCORES]</code>返回有序集 key 中，下标在<start><stop></stop>之间的元素,带WITHSCORES，可以让分数一起和值返回到结果集</start></li><li><code>zrangebyscore key min max [withscores] [limit offset count]</code>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</li><li><code>zrevrangebyscore key max min [withscores] [limit offset count]</code>同上，改为从大到小排列</li><li><code>zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt;</code> 为元素的score加上增量</li><li><code>zrem &lt;key&gt;&lt;value&gt;</code>删除该集合下，指定值的元素</li><li><code>zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;</code>统计该集合，分数区间内的元素个数</li><li><code>zrank &lt;key&gt;&lt;value&gt;</code>返回该值在集合中的排名，从0开始</li></ul><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map<String, double>，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</String,></p><p>zset底层使用了两个数据结构</p><ul><li>hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值</li><li>跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</li></ul><h4 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h4><p>有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p><h5 id="跳跃表的实例"><a href="#跳跃表的实例" class="headerlink" title="跳跃表的实例"></a>跳跃表的实例</h5><p>对比有序链表和跳跃表，从链表中查询出51</p><ul><li><p>有序链表</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230918193057787.png" alt="image-20230918193057787"></p><p>要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。</p></li><li><p>跳跃表</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230918193120656.png" alt="image-20230918193120656"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">从第2层开始，1节点比51节点小，向后比较。</span><br><span class="line">21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层</span><br><span class="line">在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下</span><br><span class="line">在第0层，51节点为要查找的节点，节点被找到，共查找4次。</span><br></pre></td></tr></table></figure></li><li><p>由此可以看出跳跃表比有序链表效率要高</p></li></ul><h2 id="Redis配置文件"><a href="#Redis配置文件" class="headerlink" title="Redis配置文件"></a>Redis配置文件</h2><p><code>redis</code>配置文件所在路径<code>/etc/redis.conf</code>(安装时从安装路径复制出来的配置文件路径)</p><p>可以在里面设置相关的配置项，具体含义查看相关文档</p><h2 id="Redis的发布和订阅"><a href="#Redis的发布和订阅" class="headerlink" title="Redis的发布和订阅"></a>Redis的发布和订阅</h2><h3 id="什么是发布和订阅"><a href="#什么是发布和订阅" class="headerlink" title="什么是发布和订阅"></a>什么是发布和订阅</h3><ul><li>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</li><li>Redis 客户端可以订阅任意数量的频道。</li></ul><h4 id="Redis发布和订阅示例"><a href="#Redis发布和订阅示例" class="headerlink" title="Redis发布和订阅示例"></a>Redis发布和订阅示例</h4><p>客户端可以订阅频道如下图</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923150149433.png" alt="image-20230923150149433"></p><p>当给这个频道发布消息后，消息就会发送给订阅的客户端</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923150204033.png" alt="image-20230923150204033"></p><h3 id="发布订阅命令行实现"><a href="#发布订阅命令行实现" class="headerlink" title="发布订阅命令行实现"></a>发布订阅命令行实现</h3><p>1、 打开一个客户端订阅channel1</p><p><code>SUBSCRIBE xxx</code>：订阅<code>某个频道</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923150714823.png" alt="image-20230923150714823"></p><p>2、打开另一个客户端，给channel1发布消息hello</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923150814371.png" alt="image-20230923150814371"></p><p>数字1代表订阅者的数量</p><p>3、打开第一个客户端可以看到发送的消息</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923150849381.png" alt="image-20230923150849381"></p><p>注意：发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息</p><h2 id="Redis6新数据类型"><a href="#Redis6新数据类型" class="headerlink" title="Redis6新数据类型"></a>Redis6新数据类型</h2><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图，合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923151521635.png" alt="image-20230923151521635"></p><p>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><ul><li><p>Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p></li><li><p>Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p></li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923151644324.png" alt="image-20230923151644324"></p><h4 id="常用命令-5"><a href="#常用命令-5" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h5><ol><li><p>格式</p><p><code>setbit&lt;key&gt;&lt;offset&gt;&lt;value&gt;设置Bitmaps中某个偏移量的值（0或1）</code></p><p>offset:偏移量从0开始</p></li><li><p>实例</p><p>  每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p></li></ol><p>​     设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid=1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图</p><p>​    <img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923152303764.png" alt="image-20230923152303764"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923152718409.png" alt="image-20230923152718409"></p><p>上图中的unique:users:20230912代表2023-09-12这天访问的用户bitmap记录</p><p>注意:</p><ul><li>很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</li><li>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</li></ul><h5 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h5><ol><li><p>格式</p><p><code>getbit&lt;key&gt;&lt;offset&gt;获取Bitmaps中某个偏移量的值</code>，获取键的第offset位的值（从0开始算）</p></li><li><p>实例</p><p>获取id为13的用户20230912是否访问过，0则表示未访问</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923153310637.png" alt="image-20230923153310637"></p></li></ol><h5 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount"></a>bitcount</h5><p>统计<strong>字符串</strong>被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含</p><ol><li><p>格式</p><p><code>bitcount&lt;key&gt;[start end] 统计字符串从start字节到end字节比特值为1的数量</code></p><p>注意是字节，一个字节八个比特</p></li><li><p>实例</p><p>统计20230912这天访问用户数目</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923153631611.png" alt="image-20230923153631611"></p></li></ol><p><strong>注意</strong>：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置。</p><h5 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h5><p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey(目标key)中。</p><ol><li><p>格式</p><p><code>bitop and(or/not/xor) &lt;destkey&gt; [key…]</code></p></li><li><p>实例</p><p>计算出20230912 和 20230913这两天都访问过网站的用户数量</p></li></ol><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923154217199.png" alt="image-20230923154217199"></p><h4 id="Bitmaps与set对比"><a href="#Bitmaps与set对比" class="headerlink" title="Bitmaps与set对比"></a>Bitmaps与set对比</h4><p>假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表</p><div class="table-container"><table><thead><tr><th style="text-align:center">set和Bitmaps存储一天活跃用户对比</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">每个用户id占用空间</td><td style="text-align:center">需要存储的用户量</td><td style="text-align:center">全部内存量</td></tr><tr><td style="text-align:center">64位</td><td style="text-align:center">50000000</td><td style="text-align:center">64位*50000000 = 400MB</td></tr><tr><td style="text-align:center">1位</td><td style="text-align:center">100000000</td><td style="text-align:center">1位*100000000 = 12.5MB</td></tr></tbody></table></div><p>很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</p><div class="table-container"><table><thead><tr><th style="text-align:center">set和Bitmaps存储独立用户空间对比</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">数据类型</td><td style="text-align:center">一天</td><td style="text-align:center">一个月</td><td style="text-align:center">一年</td></tr><tr><td style="text-align:center">集合类型</td><td style="text-align:center">400MB</td><td style="text-align:center">12GB</td><td style="text-align:center">144GB</td></tr><tr><td style="text-align:center">Bitmaps</td><td style="text-align:center">12.5MB</td><td style="text-align:center">375MB</td><td style="text-align:center">4.5GB</td></tr></tbody></table></div><p>但Bitmaps并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有10万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps就不太合适了， 因为基本上大部分位都是0。</p><p>原因：set访问用户才会被记录，而bitmaps由于是数组形式，需要时刻为每个注册的用户占用一个bit位</p><div class="table-container"><table><thead><tr><th style="text-align:center">set和Bitmaps存储一天活跃用户对比（独立用户比较少）</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">每个userid占用空间</td><td style="text-align:center">需要存储的用户量</td><td style="text-align:center">全部内存量</td></tr><tr><td style="text-align:center">64位</td><td style="text-align:center">100000</td><td style="text-align:center">64位*100000 = 800KB</td></tr><tr><td style="text-align:center">1位</td><td style="text-align:center">100000000</td><td style="text-align:center">1位*100000000 = 12.5MB</td></tr></tbody></table></div><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>解决基数问题有很多种方案：</p><ul><li>数据存储在MySQL表中，使用distinct count计算不重复个数</li><li>使用Redis提供的hash、set、bitmaps等数据结构来处理</li></ul><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><ul><li><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p></li><li><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p></li><li><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p></li></ul><p>什么是基数：</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><h4 id="常用命令-6"><a href="#常用命令-6" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="pfadd"><a href="#pfadd" class="headerlink" title="pfadd"></a>pfadd</h5><ol><li><p>格式</p><p><code>pfadd &lt;key&gt;&lt; element&gt; [element ...]  添加指定元素到 HyperLogLog 中</code></p></li><li><p>实例</p><p>将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923162800802.png" alt="image-20230923162800802"></p></li></ol><h5 id="pfcount"><a href="#pfcount" class="headerlink" title="pfcount"></a>pfcount</h5><ol><li><p>格式</p><p><code>pfcount&lt;key&gt; [key ...]</code>计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</p></li><li><p>实例</p></li></ol><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923163547873.png" alt="image-20230923163547873"></p><h5 id="pfmerge"><a href="#pfmerge" class="headerlink" title="pfmerge"></a>pfmerge</h5><ol><li><p>格式</p><p><code>pfmerge&lt;destkey&gt;&lt;sourcekey&gt; [sourcekey ...]</code></p><p>将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p></li><li><p>实例</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923163810999.png" alt="image-20230923163810999"></p></li></ol><h4 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h4><h5 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h5><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><h5 id="常用命令-7"><a href="#常用命令-7" class="headerlink" title="常用命令"></a>常用命令</h5><h5 id="geoadd"><a href="#geoadd" class="headerlink" title="geoadd"></a>geoadd</h5><ol><li><p>格式</p><p><code>geoadd&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;&lt;member&gt; [longitude latitude member...]</code>添加地理位置（经度，纬度，名称）</p></li><li><p>实例</p></li></ol><p>geoadd china:city 121.47 31.23 shanghai</p><p>geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923165124867.png" alt="image-20230923165124867"></p><p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>已经添加的数据，是无法再次往里面添加的。</p><h5 id="geopos"><a href="#geopos" class="headerlink" title="geopos"></a>geopos</h5><ol><li><p>格式</p><p><code>geopos &lt;key&gt;&lt;member&gt; [member...]</code>获得指定地区的坐标值</p></li><li><p>实例</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923172253638.png" alt="image-20230923172253638"></p></li></ol><h5 id="geodist"><a href="#geodist" class="headerlink" title="geodist"></a>geodist</h5><ol><li><p>格式</p><p><code>geodist&lt;key&gt;&lt;member1&gt;&lt;member2&gt; [m|km|ft|mi ]</code> 获取两个位置之间的直线距离</p><p>单位：</p><p>m 表示单位为米[默认值]。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p></li><li><p>实例</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923172431604.png" alt="image-20230923172431604"></p></li></ol><h5 id="georadius"><a href="#georadius" class="headerlink" title="georadius"></a>georadius</h5><ol><li><p>格式</p><p><code>georadius&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;radius m|km|ft|mi</code>以给定的经纬度为中心，找出某一半径内的元素</p></li><li><p>实例</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230923172520780.png" alt="image-20230923172520780"></p></li></ol><h2 id="Jedis操作Redis6"><a href="#Jedis操作Redis6" class="headerlink" title="Jedis操作Redis6"></a>Jedis操作Redis6</h2><h3 id="Jedis所需要的Jar包"><a href="#Jedis所需要的Jar包" class="headerlink" title="Jedis所需要的Jar包"></a>Jedis所需要的Jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Java连接redis测试"><a href="#Java连接redis测试" class="headerlink" title="Java连接redis测试"></a>Java连接redis测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建jedis对象</span></span><br><span class="line">        <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.测试是否连接成功</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">        System.out.println(<span class="string">&quot;连接成功&quot;</span>+message);</span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项:</strong>远程连接redis需要执行以下操作</p><ol><li><p>将redis配置文件<code>/etc/redis.conf</code>中的<code>bind 127.0.0,1</code>注释掉</p></li><li><p>将redis配置文件中的保护模式设置为：<code>protected-mode no</code></p><p>​    <img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230924193728222.png" alt="image-20230924193728222"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230924193641129.png" alt="image-20230924193641129"></p></li><li><p>关闭Linux的防火墙 <code>systemctl stop/disable firewalld.service</code></p></li></ol><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230924193545830.png" alt="image-20230924193545830"></p><h3 id="Jedis-API"><a href="#Jedis-API" class="headerlink" title="Jedis-API"></a>Jedis-API</h3><p>通过jedis对redis相关数据类型进行操作,下面展示对各个数据类型部分操作(用法与命令行形式类似)，相关API可以去查阅对应文档</p><h4 id="Key的操作"><a href="#Key的操作" class="headerlink" title="Key的操作"></a>Key的操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关于key相关的操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//往redis中添加数据</span></span><br><span class="line">    jedis.set(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;k3&quot;</span>,<span class="string">&quot;v3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有key</span></span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断key是否存在</span></span><br><span class="line">    System.out.println(jedis.exists(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.exists(<span class="string">&quot;k4&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取key的存活时间</span></span><br><span class="line">    System.out.println(jedis.ttl(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对应key的值</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="String类型操作"><a href="#String类型操作" class="headerlink" title="String类型操作"></a>String类型操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空数据库</span></span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    <span class="comment">//同时设置多个键值对</span></span><br><span class="line">    jedis.mset(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Lucy&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;27&quot;</span>,<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;male&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同时获取多个值</span></span><br><span class="line">    List&lt;String&gt; infoList = jedis.mget(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;sex&quot;</span>);</span><br><span class="line">    System.out.println(infoList);</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="List类型操作"><a href="#List类型操作" class="headerlink" title="List类型操作"></a>List类型操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从左往右添加</span></span><br><span class="line">    jedis.lpush(<span class="string">&quot;students&quot;</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Marray&quot;</span>,<span class="string">&quot;David&quot;</span>);</span><br><span class="line">    <span class="comment">//获取列表类型数据</span></span><br><span class="line">    List&lt;String&gt; students = jedis.lrange(<span class="string">&quot;students&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(students);</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Set类型操作"><a href="#Set类型操作" class="headerlink" title="Set类型操作"></a>Set类型操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    jedis.sadd(<span class="string">&quot;users&quot;</span>,<span class="string">&quot;xx1&quot;</span>,<span class="string">&quot;hh1&quot;</span>,<span class="string">&quot;kk1&quot;</span>,<span class="string">&quot;hh1&quot;</span>,<span class="string">&quot;lk1&quot;</span>);</span><br><span class="line">    <span class="comment">//获取所有元素</span></span><br><span class="line">    Set&lt;String&gt; users = jedis.smembers(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">    <span class="comment">//获取集合元素个数</span></span><br><span class="line">    System.out.println(jedis.scard(<span class="string">&quot;users&quot;</span>));</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hash类型操作"><a href="#Hash类型操作" class="headerlink" title="Hash类型操作"></a>Hash类型操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, String&gt; userInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">    userInfo.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;bobo&quot;</span>);</span><br><span class="line">    userInfo.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;27&quot;</span>);</span><br><span class="line">    userInfo.put(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="comment">//添加数据</span></span><br><span class="line">    jedis.hset(<span class="string">&quot;people01&quot;</span>,userInfo);</span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.hget(<span class="string">&quot;people01&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有field</span></span><br><span class="line">    Set&lt;String&gt; fields = jedis.hkeys(<span class="string">&quot;people01&quot;</span>);</span><br><span class="line">    System.out.println(fields);</span><br><span class="line">    <span class="comment">//获取所有value</span></span><br><span class="line">    List&lt;String&gt; values = jedis.hvals(<span class="string">&quot;people01&quot;</span>);</span><br><span class="line">    System.out.println(values);</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Zset数据类型"><a href="#Zset数据类型" class="headerlink" title="Zset数据类型"></a>Zset数据类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建jedis对象</span></span><br><span class="line">    <span class="comment">//传入连接redis的主机地址和端口号</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset&quot;</span>,<span class="number">23</span>,<span class="string">&quot;b1&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset&quot;</span>,<span class="number">34</span>,<span class="string">&quot;f1&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset&quot;</span>,<span class="number">12</span>,<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset&quot;</span>,<span class="number">67</span>,<span class="string">&quot;k1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元素个数</span></span><br><span class="line">    System.out.println(jedis.zcard(<span class="string">&quot;zset&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取元素</span></span><br><span class="line">    Set&lt;String&gt; zset = jedis.zrange(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(zset);</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jedis实例：手机验证码功能"><a href="#Jedis实例：手机验证码功能" class="headerlink" title="Jedis实例：手机验证码功能"></a>Jedis实例：手机验证码功能</h3><p>要求</p><ul><li>输入手机号，点击发送后随机生成6位数字码，2分钟有效</li><li>输入验证码，点击验证，返回成功或失败</li><li>每个手机号每天只能输入3次</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">思路分析</span><br><span class="line">①生成六位数字验证码：借助Random函数实现</span><br><span class="line">②验证码在两分钟内有效，把验证码放在redis中，同时设置key过期时间为120s</span><br><span class="line">③判断验证码是否一致：从redis中获取验证码与用户输入验证码进行比较</span><br><span class="line">④每个手机号每天只能输入3次:每次手机请求验证码时，incr，当次数大于3时，提示不能获取验证码</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JedisDemo02</span> <span class="variable">jedisDemo02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisDemo02</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.用户输入手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="string">&quot;18345469536&quot;</span>;</span><br><span class="line">        <span class="comment">//2.获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> jedisDemo02.getCode(phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.用户输入验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userCode</span> <span class="operator">=</span> code;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.验证是否正确</span></span><br><span class="line">        jedisDemo02.verifyCode(phone,userCode);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成并返回六位验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateCode</span><span class="params">()</span>&#123;</span><br><span class="line">        String code=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            code+=random.nextInt(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *统计当前手机号发送次数以及将对应验证码存入redis,并返回验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="comment">//连接redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key1</span> <span class="operator">=</span> <span class="string">&quot;verify:&quot;</span> + phone + <span class="string">&quot;:count&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> <span class="string">&quot;verify:&quot;</span> + phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        <span class="comment">//1.获取当前手机号使用次数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> jedis.get(key1);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//初次访问，次数设为1，存活时间24小时</span></span><br><span class="line">            jedis.setex(key1, <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Integer.parseInt(count) &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            jedis.incr(key1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前已超过三次，请明天再访问&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.获取验证码，并存储在redis，设置存活时间2 min</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> generateCode();</span><br><span class="line">        jedis.setex(key2, <span class="number">2</span> * <span class="number">60</span>, code);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verifyCode</span><span class="params">(String phone,String code)</span>&#123;</span><br><span class="line">        <span class="comment">//连接redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从redis中取出验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> <span class="string">&quot;verify:&quot;</span> + phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">redisCode</span> <span class="operator">=</span> jedis.get(key2);</span><br><span class="line">        <span class="keyword">if</span>(redisCode.equals(code))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证码不匹配&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot与Redis整合"><a href="#SpringBoot与Redis整合" class="headerlink" title="SpringBoot与Redis整合"></a>SpringBoot与Redis整合</h3><h4 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h4><h5 id="在pom-xml中引入redis的相关依赖"><a href="#在pom-xml中引入redis的相关依赖" class="headerlink" title="在pom.xml中引入redis的相关依赖"></a>在<code>pom.xml</code>中引入redis的相关依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="在application-properties中进行redis相关配置"><a href="#在application-properties中进行redis相关配置" class="headerlink" title="在application.properties中进行redis相关配置"></a>在application.properties中进行redis相关配置</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis服务器地址</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">192.168.140.136</span></span><br><span class="line"><span class="comment">#Redis服务器连接端口</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="attr">spring.redis.database</span>= <span class="string">0</span></span><br><span class="line"><span class="comment">#连接超时时间（毫秒）</span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">1800000</span></span><br><span class="line"><span class="comment">#连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-active</span>=<span class="string">20</span></span><br><span class="line"><span class="comment">#最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment">#连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#连接池中的最小空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><h5 id="添加redis配置类"><a href="#添加redis配置类" class="headerlink" title="添加redis配置类"></a>添加redis配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line"><span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"><span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line"><span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redisTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置值到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">//从redis获取值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h5><p>启动报错:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with &#x27;debug&#x27; enabled.</span><br><span class="line">2023-09-26 10:22:52.092 ERROR 39304 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : </span><br><span class="line"></span><br><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">An attempt was made to call a method that does not exist. The attempt was made from the following location:</span><br><span class="line"></span><br><span class="line">    org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration<span class="built_in">$</span>PoolBuilderFactory.getPoolConfig(LettuceConnectionConfiguration.java:188)</span><br><span class="line"></span><br><span class="line">The following method did not exist:</span><br><span class="line"></span><br><span class="line">    org.apache.commons.pool2.impl.GenericObjectPoolConfig.setMaxWait(Ljava/time/Duration;)V</span><br><span class="line"></span><br><span class="line">The calling method&#x27;s class, org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration<span class="built_in">$</span>PoolBuilderFactory, was loaded from the following location:</span><br><span class="line"></span><br><span class="line">    jar:file:/C:/Users/admin/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.7.17-SNAPSHOT/spring-boot-autoconfigure-2.7.17-20230925.102852-15.jar!/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration<span class="built_in">$</span>PoolBuilderFactory.class</span><br><span class="line"></span><br><span class="line">The called method&#x27;s class, org.apache.commons.pool2.impl.GenericObjectPoolConfig, is available from the following locations:</span><br><span class="line"></span><br><span class="line">    jar:file:/C:/Users/admin/.m2/repository/org/apache/commons/commons-pool2/2.6.0/commons-pool2-2.6.0.jar!/org/apache/commons/pool2/impl/GenericObjectPoolConfig.class</span><br><span class="line"></span><br><span class="line">The called method&#x27;s class hierarchy was loaded from the following locations:</span><br><span class="line"></span><br><span class="line">    org.apache.commons.pool2.impl.GenericObjectPoolConfig: file:/C:/Users/admin/.m2/repository/org/apache/commons/commons-pool2/2.6.0/commons-pool2-2.6.0.jar</span><br><span class="line">    org.apache.commons.pool2.impl.BaseObjectPoolConfig: file:/C:/Users/admin/.m2/repository/org/apache/commons/commons-pool2/2.6.0/commons-pool2-2.6.0.jar</span><br><span class="line">    org.apache.commons.pool2.BaseObject: file:/C:/Users/admin/.m2/repository/org/apache/commons/commons-pool2/2.6.0/commons-pool2-2.6.0.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Correct the classpath of your application so that it contains compatible versions of the classes org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration<span class="built_in">$</span>PoolBuilderFactory and org.apache.commons.pool2.impl.GenericObjectPoolConfig</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>报错原因</p><p><code>SpringBoot</code>与<code>org.apache.commons.pool2</code>版本不匹配</p><p>原始两者版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.17-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Jedis-demo02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jedis-demo02<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Jedis-demo02<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决办法一：降低<code>SpringBoot</code>版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决办法二：去掉<code>org.apache.commons.pool2</code>的版本限制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;version&gt;2.6.0&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Redis事务操作-锁机制和秒杀"><a href="#Redis事务操作-锁机制和秒杀" class="headerlink" title="Redis事务操作(锁机制和秒杀)"></a>Redis事务操作(锁机制和秒杀)</h2><h4 id="Redis事务定义"><a href="#Redis事务定义" class="headerlink" title="Redis事务定义"></a>Redis事务定义</h4><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是串联多个命令防止别的命令插队。</p><h4 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h4><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p>Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926144212297.png" alt="image-20230926144212297"></p><p>与<code>Mysql</code>类比</p><p><code>multi</code>相当于<code>start transaction</code></p><p><code>exec</code>相当于<code>commit</code></p><p><code>discard</code>相当于<code>rollback</code></p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p><code>multi</code>、<code>exec</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926144914623.png" alt="image-20230926144914623"></p><p><code>multi</code>、<code>discard</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926145012291.png" alt="image-20230926145012291"></p><h4 id="事务中的错误处理"><a href="#事务中的错误处理" class="headerlink" title="事务中的错误处理"></a>事务中的错误处理</h4><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926145453632.png" alt="image-20230926145453632"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926145653312.png" alt="image-20230926145653312"></p><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926145505899.png" alt="image-20230926145505899"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926201518755.png" alt="image-20230926201518755"></p><h4 id="事务冲突的问题"><a href="#事务冲突的问题" class="headerlink" title="事务冲突的问题"></a>事务冲突的问题</h4><h5 id="为什么要做成事务？"><a href="#为什么要做成事务？" class="headerlink" title="为什么要做成事务？"></a>为什么要做成事务？</h5><p>场景：有很多人有你的账户，同时去参加双十一抢购</p><p>一个请求想给金额减8000</p><p>一个请求想给金额减5000</p><p>一个请求想给金额减1000</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926202441774.png" alt="image-20230926202441774"></p><h4 id="事务冲突的解决方式"><a href="#事务冲突的解决方式" class="headerlink" title="事务冲突的解决方式"></a>事务冲突的解决方式</h4><h5 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h5><p><strong>悲观锁(Pessimistic Lock)</strong>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926202904609.png" alt="image-20230926202904609"></p><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p><strong>乐观锁(Optimistic Lock),</strong> 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926202935461.png" alt="image-20230926202935461"></p><h4 id="Redis乐观锁相关的命令"><a href="#Redis乐观锁相关的命令" class="headerlink" title="Redis乐观锁相关的命令"></a>Redis乐观锁相关的命令</h4><h5 id="WATCH-key-key…"><a href="#WATCH-key-key…" class="headerlink" title="WATCH key[key…]"></a>WATCH key[key…]</h5><p>redis中乐观锁的实现示例</p><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key被其他命令所改动，那么事务将被打断。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926211419279.png" alt="image-20230926211419279"></p><h5 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h5><p>取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p><p><a href="http://doc.redisfans.com/transaction/exec.html">参考文档</a></p><h4 id="Redis事务三特性"><a href="#Redis事务三特性" class="headerlink" title="Redis事务三特性"></a>Redis事务三特性</h4><ul><li>单独的隔离操作<ul><li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li></ul></li><li>没有隔离级别的概念<ul><li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li></ul></li><li>不保证原子性<ul><li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul></li></ul><h3 id="Redis事务秒杀案例"><a href="#Redis事务秒杀案例" class="headerlink" title="Redis事务秒杀案例"></a>Redis事务秒杀案例</h3><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>解决计数器和人员记录的事务操作</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230926213001707.png" alt="image-20230926213001707"></p><p>秒杀过程的核心操作其实就是对于商品而言库存数减1，对于成功抢购到的用户而言，其结算清单对应物品加1</p><h4 id="基本功能代码"><a href="#基本功能代码" class="headerlink" title="基本功能代码"></a><strong>基本功能代码</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondKillDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//测试功能</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">SecondKillDemo</span> <span class="variable">secondKillDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecondKillDemo</span>();</span><br><span class="line">        String proId=<span class="string">&quot;iphone15&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        secondKillDemo.doSecKill(proId,userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行秒杀操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proId 用户秒杀的商品ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否秒杀成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String proId,String userId)</span>&#123;</span><br><span class="line">        <span class="comment">//1.判断用户或者商品ID是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(proId==<span class="literal">null</span> || userId==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户或者商品ID无效&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.与jedis建立连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.80.129&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置相关的key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">proKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+proId+<span class="string">&quot;:pd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+proId+<span class="string">&quot;:user&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取商品库存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pdCount</span> <span class="operator">=</span> jedis.get(proKey);</span><br><span class="line">        <span class="keyword">if</span>(pdCount==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前商品还未参与秒杀，尽请期待&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Integer.parseInt(pdCount)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前商品的秒杀活动已经结束&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断当前用户是否已经参与过活动</span></span><br><span class="line">        <span class="keyword">if</span>(jedis.sismember(userKey,userId))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你已经参与过当前次的秒杀活动，不能重复参与&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.执行秒杀</span></span><br><span class="line">        <span class="comment">//商品库存减1</span></span><br><span class="line">        jedis.decr(proKey);</span><br><span class="line">        <span class="comment">//用户加入商品秒杀用户列表</span></span><br><span class="line">        jedis.sadd(userKey,userId);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户 &quot;</span>+userId+<span class="string">&quot;成功秒杀到商品&quot;</span>+proId);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230927155314051.png" alt="image-20230927155314051"></p><p>以上过程和代码只能满足于单个用户操作</p><h4 id="模拟-秒杀并发"><a href="#模拟-秒杀并发" class="headerlink" title="模拟 秒杀并发"></a>模拟 秒杀并发</h4><p>使用工具ab模拟测试</p><p>CentOS6 默认安装</p><p>CentOS7需要手动安装</p><h5 id="CentOS7安装ab"><a href="#CentOS7安装ab" class="headerlink" title="CentOS7安装ab"></a>CentOS7安装ab</h5><p>联网或者无网络条件下均可以安装</p><p>联网安装</p><p><code>yum install httpd-tools</code></p><p>无网络安装</p><p>进入<code>cd /run/media/root/CentOS 7 x86_64/Packages</code>（路径跟centos6不同）</p><p>顺序安装</p><p><code>apr-1.4.8-3.el7.x86_64.rpm</code></p><p><code>apr-util-1.5.2-6.el7.x86_64.rpm</code></p><p><code>httpd-tools-2.4.6-67.el7.centos.x86_64.rpm</code></p><p>测试是否安装成功</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20230927193843824.png" alt="image-20230927193843824"></p><p><code>ab</code>重要参数</p><ul><li><code>-n</code>：请求数目</li><li><code>-c</code>：并发数目</li><li><code>-p</code>: 包含提交数目的文件</li><li><code>-T</code>：提交数据类型，适用于<code>POST/PUT</code>请求</li></ul><h6 id="构建控制层"><a href="#构建控制层" class="headerlink" title="构建控制层"></a>构建控制层</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecKillController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/doKill&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSecKill</span><span class="params">(String prodId)</span>&#123;</span><br><span class="line">        <span class="type">SecondKillDemo</span> <span class="variable">secondKillDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecondKillDemo</span>();</span><br><span class="line">        <span class="comment">//随机生成用户</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> random.nextInt(<span class="number">100</span>);</span><br><span class="line">        String userId=<span class="string">&quot;user-&quot;</span>+id;</span><br><span class="line">        secondKillDemo.doSecKill(prodId,userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="利用db模拟并发请求"><a href="#利用db模拟并发请求" class="headerlink" title="利用db模拟并发请求"></a>利用db模拟并发请求</h6><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231006160513170.png" alt="image-20231006160513170"></p><p>模拟表单提交参数,以&amp;符号结尾;存放当前目录</p><p>文件内容</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231006160549905.png" alt="image-20231006160549905"></p><p>ab请求</p><p><code>ab -n 100 -c 50 -p ./refile -T application/x-www-form-urlencoded http://115.156.245.63:8080/doKill</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231006161812056.png" alt="image-20231006161812056"></p><p>后台显示</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231006161833125.png" alt="image-20231006161833125"></p><p>redis数据库显示</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231006161855248.png" alt="image-20231006161855248"></p><p>问题所在</p><ul><li>出现超卖现象，秒杀结束后出现其他用户秒杀成功</li><li>如果请求过多，redis无法处理，可能会出现连接超时的问题</li></ul><h6 id="问题一：连接超时问题"><a href="#问题一：连接超时问题" class="headerlink" title="问题一：连接超时问题"></a>问题一：连接超时问题</h6><p>采用连接池进行解决，节省每次连接redis服务带来的消耗，把连接好的实例反复利用，通过参数管理连接的行为</p><p>连接池常用参数</p><ul><li>MaxTotal：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了MaxTotal个jedis实例，则此时pool的状态为exhausted</li><li>maxIdle：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；</li><li>MaxWaitMillis：表示当borrow一个jedis实例时，最大的等待毫秒数，如果超过等待时间，则直接抛JedisConnectionException；</li><li>testOnBorrow：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；</li></ul><p>redis数据库连接池的构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisPoolUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RedisPoolUtils</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title function_">getJedisPoolInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span>==jedisPool)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RedisPoolUtils.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">null</span>==jedisPool)&#123;</span><br><span class="line">                    <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">                    jedisPoolConfig.setMaxTotal(<span class="number">2000</span>);</span><br><span class="line">                    jedisPoolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">                    jedisPoolConfig.setMaxWaitMillis(<span class="number">100</span>*<span class="number">1000</span>);</span><br><span class="line">                    jedisPoolConfig.setBlockWhenExhausted(<span class="literal">true</span>);</span><br><span class="line">                    jedisPoolConfig.setTestOnBorrow(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig, <span class="string">&quot;192.168.80.129&quot;</span>, <span class="number">6379</span>, <span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis连接示例的获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.与jedis建立连接</span></span><br><span class="line"><span class="comment">// Jedis jedis = new Jedis(&quot;192.168.80.129&quot;, 6379);</span></span><br><span class="line"><span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> RedisPoolUtils.getJedisPoolInstance();</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br></pre></td></tr></table></figure><h6 id="问题二：超卖问题"><a href="#问题二：超卖问题" class="headerlink" title="问题二：超卖问题"></a>问题二：超卖问题</h6><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007094131835.png" alt="image-20231007094131835"></p><p>解决办法：利用乐观锁淘汰用户，解决超卖问题</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007094207176.png" alt="image-20231007094207176"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加乐观锁，解决超卖问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecSecondKill</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doKill</span><span class="params">(String prodId,String userId)</span>&#123;</span><br><span class="line">        <span class="comment">//1.判断输入是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (prodId==<span class="literal">null</span> || userId==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品ID或者用户ID为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.构造对应的key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prodKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+prodId+<span class="string">&quot;:pd&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> <span class="string">&quot;sk:&quot;</span>+prodId+<span class="string">&quot;:user&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通过数据库连接池获取连接</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> RedisPoolUtils.getJedisPoolInstance();</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为商品库存添加乐观锁</span></span><br><span class="line">        jedis.watch(prodKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断商品库存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prodCount</span> <span class="operator">=</span> jedis.get(prodKey);</span><br><span class="line">        <span class="comment">//商品是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(prodCount==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此商品尚未参与秒杀活动&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//商品是否还有库存</span></span><br><span class="line">        <span class="keyword">if</span>(Integer.parseInt(prodCount)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此商品库存不足，此次秒杀结束&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(jedis.sismember(userKey,userId))&#123;</span><br><span class="line">            System.out.println(userId+<span class="string">&quot;你已经参与过当前次的秒杀活动，不能重复参与&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.开启秒杀</span></span><br><span class="line">        <span class="comment">//①开启事务</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line">        <span class="comment">//②命令进入事务队列</span></span><br><span class="line">        transaction.decr(prodKey);<span class="comment">//商品库存减一</span></span><br><span class="line">        transaction.sadd(userKey,userId);</span><br><span class="line">        <span class="comment">//③事务执行</span></span><br><span class="line">        List&lt;Object&gt; results = transaction.exec();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(results==<span class="literal">null</span> || results.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(userId+<span class="string">&quot;秒杀失败&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//秒杀成功</span></span><br><span class="line">        System.out.println(userId+<span class="string">&quot;秒杀成功&quot;</span>);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="问题三：已经秒杀结束，可能还有库存遗留"><a href="#问题三：已经秒杀结束，可能还有库存遗留" class="headerlink" title="问题三：已经秒杀结束，可能还有库存遗留"></a>问题三：已经秒杀结束，可能还有库存遗留</h6><p>已经秒光，可是还有库存。原因，就是乐观锁导致很多请求都失败。先点的没秒到，后点的可能秒到了</p><p><strong>解决方法</strong></p><p>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。</p><p>LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作。</p><p>但是注意redis的lua脚本功能，只有在Redis 2.6以上的版本才可以使用。</p><p>利用lua脚本淘汰用户，解决超卖问题。</p><p>redis 2.6版本以后，通过lua脚本解决<strong>争抢问题</strong>，实际上是<strong>redis</strong> <strong>利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007143900338.png" alt="image-20231007143900338"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品秒杀</span></span><br><span class="line"><span class="comment"> * ①使用乐观锁解决超卖问题</span></span><br><span class="line"><span class="comment"> * ②使用数据库连接池解决超时连接问题</span></span><br><span class="line"><span class="comment"> * ③使用lua脚本解决商品库存遗留问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecSecondKill_v2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">secKillScript</span> <span class="operator">=</span><span class="string">&quot;local userid=KEYS[1];\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local prodid=KEYS[2];\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local qtkey=&#x27;sk:&#x27;..prodid..\&quot;:pd\&quot;;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local usersKey=&#x27;sk:&#x27;..prodid..\&quot;:user\&quot;;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local userExists=redis.call(\&quot;sismember\&quot;,usersKey,userid);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;if tonumber(userExists)==1 then \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return 2;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;end\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;local num= redis.call(\&quot;get\&quot; ,qtkey);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;if tonumber(num)&lt;=0 then \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   return 0;\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;else \r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   redis.call(\&quot;decr\&quot;,qtkey);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;   redis.call(\&quot;sadd\&quot;,usersKey,userid);\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;end\r\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;return 1&quot;</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String prodId,String userId)</span>&#123;</span><br><span class="line">        <span class="comment">//1.判断输入是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (prodId==<span class="literal">null</span> || userId==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品ID或者用户ID为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.连接池获取redis</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> RedisPoolUtils.getJedisPoolInstance();</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sha1</span> <span class="operator">=</span> jedis.scriptLoad(secKillScript);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jedis.evalsha(sha1, <span class="number">2</span>, userId, prodId);</span><br><span class="line">        <span class="type">String</span> <span class="variable">reString</span> <span class="operator">=</span> String.valueOf(result);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals( reString )  ) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;已抢空！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals( reString )  )  &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;抢购成功！！！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals( reString )  )  &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;该用户已抢过！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;抢购异常！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis持久化操作"><a href="#Redis持久化操作" class="headerlink" title="Redis持久化操作"></a>Redis持久化操作</h2><p>Redis 提供了2个不同形式的持久化方式</p><ul><li>RDB（Redis DataBase）</li><li>AOF（Append Of File）</li></ul><h3 id="Redis持久化之RDB-Redis-DataBase"><a href="#Redis持久化之RDB-Redis-DataBase" class="headerlink" title="Redis持久化之RDB(Redis DataBase)"></a>Redis持久化之RDB(Redis DataBase)</h3><p>在<strong>指定的时间间隔内</strong>将内存中的<strong>数据集快照</strong>写入磁盘， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</p><h5 id="备份如何执行"><a href="#备份如何执行" class="headerlink" title="备份如何执行"></a>备份如何执行</h5><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<strong>RDB</strong>的缺点是最后一次持久化后的数据可能丢失。</p><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><ul><li>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</li><li>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“<strong>写时复制技术</strong>”</li><li><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li></ul><h4 id="RDB持久化流程"><a href="#RDB持久化流程" class="headerlink" title="RDB持久化流程"></a>RDB持久化流程</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007155910362.png" alt="image-20231007155910362"></p><h4 id="RDB-redis-database-相关配置"><a href="#RDB-redis-database-相关配置" class="headerlink" title="RDB(redis database)相关配置"></a>RDB(redis database)相关配置</h4><h5 id="dump-rdb文件"><a href="#dump-rdb文件" class="headerlink" title="dump.rdb文件"></a>dump.rdb文件</h5><p>在redis.conf中配置文件名称，默认为dump.rdb</p><p><code>vim /etc/redis.conf</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007160058947.png" alt="image-20231007160058947"></p><h5 id="配置位置"><a href="#配置位置" class="headerlink" title="配置位置"></a>配置位置</h5><p>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007170204142.png" alt="image-20231007170204142"></p><p>可以手动修改<code>dir /xx/xx/xx</code></p><h5 id="配置文件中的默认快照配置"><a href="#配置文件中的默认快照配置" class="headerlink" title="配置文件中的默认快照配置"></a>配置文件中的默认快照配置</h5><p>格式：save 秒钟 写操作次数</p><p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，</p><p><strong>默认是1</strong>分钟内改了<strong>1</strong>万次，或<strong>5</strong>分钟内改了<strong>10</strong>次，或1个小时内改了<strong>1</strong>次。</p><p>禁用</p><p>不设置save指令，或者给save传入空字符串</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007170432128.png" alt="image-20231007170432128"></p><h5 id="stop-writes-on-bgsave-error"><a href="#stop-writes-on-bgsave-error" class="headerlink" title="stop-writes-on-bgsave-error"></a>stop-writes-on-bgsave-error</h5><p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007170959768.png" alt="image-20231007170959768"></p><h5 id="rdbcompression-压缩文件"><a href="#rdbcompression-压缩文件" class="headerlink" title="rdbcompression 压缩文件"></a>rdbcompression <strong>压缩文件</strong></h5><p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。</p><p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007171125850.png" alt="image-20231007171125850"></p><h5 id="rdbchecksum-检查完整性"><a href="#rdbchecksum-检查完整性" class="headerlink" title="rdbchecksum 检查完整性"></a>rdbchecksum <strong>检查完整性</strong></h5><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007171219016.png" alt="image-20231007171219016"></p><p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，</p><p>但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p><p>推荐yes.</p><h5 id="命令save-VS-bgsave"><a href="#命令save-VS-bgsave" class="headerlink" title="命令save VS bgsave"></a>命令save VS bgsave</h5><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p><p><strong>bgsave：</strong>Redis<strong>会在后台异步进行快照操作，</strong> <strong>快照同时还可以响应客户端请求。</strong></p><p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p><h5 id="flushall命令"><a href="#flushall命令" class="headerlink" title="flushall命令"></a><strong>flushall命令</strong></h5><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p><h4 id="redis优缺点"><a href="#redis优缺点" class="headerlink" title="redis优缺点"></a>redis优缺点</h4><h5 id="redis优势"><a href="#redis优势" class="headerlink" title="redis优势"></a>redis优势</h5><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007172059740.png" alt="image-20231007172059740"></p><h5 id="redis劣势"><a href="#redis劣势" class="headerlink" title="redis劣势"></a>redis劣势</h5><ul><li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li><li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li><li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改</li></ul><h4 id="redis-rdb的备份"><a href="#redis-rdb的备份" class="headerlink" title="redis rdb的备份"></a>redis rdb的备份</h4><p>先通过config get dir 查询rdb文件的目录 </p><p>将*.rdb的文件拷贝到别的地方</p><p>db的恢复</p><ul><li><p>关闭Redis</p></li><li><p>先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</p></li><li><p>启动Redis, 备份数据会直接加载</p></li></ul><h4 id="redis-rdb的关闭"><a href="#redis-rdb的关闭" class="headerlink" title="redis rdb的关闭"></a>redis rdb的关闭</h4><p>动态停止RDB：redis-cli config set save “”#save后给空值，表示禁用保存策略</p><h4 id="redis-rdb小结"><a href="#redis-rdb小结" class="headerlink" title="redis rdb小结"></a>redis rdb小结</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007191933012.png" alt="image-20231007191933012"></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><strong>配置修改redis.conf文件</strong></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007192757498.png" alt="image-20231007192757498"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007192813780.png" alt="image-20231007192813780"></p><p><strong>查看当前目录文件</strong></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007192917151.png" alt="image-20231007192917151"></p><p><strong>修改redis数据库 key</strong></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007193006124.png" alt="image-20231007193006124"></p><p><strong>查看当前目录文件</strong></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007193037909.png" alt="image-20231007193037909"></p><p>出现了备份文件my_dump.rdb</p><p><strong>备份my_dump.rdb并且删除原文件</strong></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007193148129.png" alt="image-20231007193148129"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007193241071.png" alt="image-20231007193241071"></p><p>删除rdb文件，重启redis会发现此时数据库为空</p><p><strong>恢复备份数据</strong></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007193646448.png" alt="image-20231007193646448"></p><h3 id="Redis持久化之AOF"><a href="#Redis持久化之AOF" class="headerlink" title="Redis持久化之AOF"></a>Redis持久化之AOF</h3><h4 id="AOP-Append-Only-File"><a href="#AOP-Append-Only-File" class="headerlink" title="AOP(Append Only File)"></a>AOP(Append Only File)</h4><p>以<strong>日志</strong>的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><h4 id="AOF持久化流程"><a href="#AOF持久化流程" class="headerlink" title="AOF持久化流程"></a>AOF持久化流程</h4><ol><li>客户端的请求写命令会被append追加到AOF缓冲区内；</li><li>AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</li><li>AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</li><li>Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</li></ol><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007194411785.png" alt="image-20231007194411785"></p><h4 id="AOF默认不开启"><a href="#AOF默认不开启" class="headerlink" title="AOF默认不开启"></a>AOF默认不开启</h4><p>可以在redis.conf中配置文件名称，默认为 appendonly.aof</p><p>AOF文件的保存路径，同RDB的路径一致。</p><h4 id="AOF和RDB同时开启，redis听谁的？"><a href="#AOF和RDB同时开启，redis听谁的？" class="headerlink" title="AOF和RDB同时开启，redis听谁的？"></a>AOF和RDB同时开启，redis听谁的？</h4><p>AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</p><h4 id="AOF启动-修复-恢复"><a href="#AOF启动-修复-恢复" class="headerlink" title="AOF启动/修复/恢复"></a>AOF启动/修复/恢复</h4><ul><li>AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载</li><li>正常恢复<ul><li>修改默认的appendonly no，改为yes</li><li>将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)</li><li>恢复：重启redis然后重新加载</li></ul></li><li>异常恢复<ul><li>修改默认的appendonly no，改为yes</li><li>如遇到AOF文件损坏，通过<strong>/usr/local/bin/redis-check-aof—fix appendonly.aof</strong>进行恢复</li><li>备份被写坏的AOF文件</li><li>恢复：重启redis，然后重新加载</li></ul></li></ul><h4 id="AOF同步频率设置"><a href="#AOF同步频率设置" class="headerlink" title="AOF同步频率设置"></a>AOF同步频率设置</h4><p><code>appendfsync always</code></p><p>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p><p><code>appendfsync everysec</code></p><p>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p><p><code>appendfsync no</code></p><p>redis不主动进行同步，把同步时机交给操作系统。</p><h4 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="Rewrite压缩"></a>Rewrite压缩</h4><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</p><h5 id="重写原理，如何实现重写"><a href="#重写原理，如何实现重写" class="headerlink" title="重写原理，如何实现重写"></a>重写原理，如何实现重写</h5><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</p><p>no-appendfsync-on-rewrite：</p><p>如果 no-appendfsync-on-rewrite=yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</p><p>如果 no-appendfsync-on-rewrite=no, 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p><p>触发机制，何时重写</p><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</p><p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。 </p><p>auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）</p><p>auto-aof-rewrite-min-size：设置重写的基准值，最小文件64MB。达到这个值开始重写。</p><p>例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB</p><p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,</p><p>如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。 </p><h5 id="重写流程"><a href="#重写流程" class="headerlink" title="重写流程"></a>重写流程</h5><ol><li>bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</li><li>主进程fork出子进程执行重写操作，保证主进程不会阻塞。</li><li>子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</li><li>子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</li><li>使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</li></ol><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007202103812.png" alt="image-20231007202103812"></p><h4 id="AOF的优缺点"><a href="#AOF的优缺点" class="headerlink" title="AOF的优缺点"></a>AOF的优缺点</h4><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007202135307.png" alt="image-20231007202135307"></p><ul><li>备份机制更稳健，丢失数据概率更低。</li><li>可读的日志文本，通过操作AOF稳健，可以处理误操作。</li></ul><h5 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h5><ul><li>比起RDB占用更多的磁盘空间。</li><li>恢复备份速度要慢。</li><li>每次读写都同步的话，有一定的性能压力。</li><li>存在个别Bug，造成恢复不能。</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007202253228.png" alt="image-20231007202253228"></p><h3 id="Redis持久化总结"><a href="#Redis持久化总结" class="headerlink" title="Redis持久化总结"></a>Redis持久化总结</h3><h4 id="RDB和AOF用哪个好？"><a href="#RDB和AOF用哪个好？" class="headerlink" title="RDB和AOF用哪个好？"></a>RDB和AOF用哪个好？</h4><p>官方推荐两个都启用。</p><p>如果对数据不敏感，可以选单独用RDB。</p><p>不建议单独用 AOF，因为可能会出现Bug。</p><p>如果只是做纯内存缓存，可以都不用。</p><h4 id="官网建议"><a href="#官网建议" class="headerlink" title="官网建议"></a>官网建议</h4><ul><li><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</p></li><li><p>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾. </p></li><li><p>Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大</p></li><li><p>只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</p></li><li><p>同时开启两种持久化方式</p><ul><li>在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</li></ul></li><li><p>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？ </p><ul><li>建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</li></ul></li><li><p>性能建议</p><ul><li><p>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</p><p>如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。</p><p>代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</p><p>只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。</p><p>默认超过原大小100%大小时重写可以改到适当的数值。</p></li></ul></li></ul><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><h3 id="什么是主从复制"><a href="#什么是主从复制" class="headerlink" title="什么是主从复制"></a>什么是主从复制</h3><p>主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，<strong>Master**</strong>以写为主，<strong><strong>Slave</strong></strong>以读为主**</p><h3 id="主从复制的作用"><a href="#主从复制的作用" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h3><ul><li>读写分离、性能扩展<ul><li>主机专门负责写操作、从机专门负责读操作</li></ul></li><li>容灾快速恢复<ul><li>多台从机，一台从机挂掉，其他从机继续提供服务</li></ul></li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007211732330.png" alt="image-20231007211732330"></p><h3 id="搭建一主多从"><a href="#搭建一主多从" class="headerlink" title="搭建一主多从"></a>搭建一主多从</h3><p> 实例：搭建一主两从的环境</p><p>基本设置</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">拷贝多个redis.conf文件include(写绝对路径)</span><br><span class="line">开启daemonize yes</span><br><span class="line">Pid文件名字pidfile</span><br><span class="line">指定端口port</span><br><span class="line">dump.rdb名字dbfilename</span><br><span class="line">Appendonly 关掉或者换名字</span><br></pre></td></tr></table></figure><h4 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h4><p>在当前根目录下新建<code>/myredis</code>文件夹，将<code>/etc/redis.conf</code>拷贝一份到该文件夹下</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007214520521.png" alt="image-20231007214520521"></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>关闭AOF持久化</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007214646835.png" alt="image-20231007214646835"></p><h4 id="新建三个配置文件"><a href="#新建三个配置文件" class="headerlink" title="新建三个配置文件"></a>新建三个配置文件</h4><p>三个redis服务占用不同端口号，分别定为6379，6380，6381</p><p>新建对应的三个配置文件</p><p><code>vim redis6379.conf</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220148451.png" alt="image-20231007220148451"></p><p><code>vim redis6380.conf</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220132529.png" alt="image-20231007220132529"></p><p><code>vim redis6381.conf</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220117270.png" alt="image-20231007220117270"></p><h4 id="分别启动这三个redis服务"><a href="#分别启动这三个redis服务" class="headerlink" title="分别启动这三个redis服务"></a>分别启动这三个redis服务</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220035267.png" alt="image-20231007220035267"></p><h4 id="查看三台redis服务器的运行情况"><a href="#查看三台redis服务器的运行情况" class="headerlink" title="查看三台redis服务器的运行情况"></a>查看三台redis服务器的运行情况</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220328922.png" alt="image-20231007220328922"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220339750.png" alt="image-20231007220339750"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220351649.png" alt="image-20231007220351649"></p><h4 id="配置从机"><a href="#配置从机" class="headerlink" title="配置从机"></a>配置从机</h4><p>上述三台redis服务器均默认为主机</p><p>配置其中两台为从机(配置端口6380、6381为从机)</p><p><code>slaveof &lt;ip&gt;&lt;port&gt;</code>成为某个实例的从服务器</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220608137.png" alt="image-20231007220608137"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220631212.png" alt="image-20231007220631212"></p><h4 id="主机上写数据，从机上可读"><a href="#主机上写数据，从机上可读" class="headerlink" title="主机上写数据，从机上可读"></a>主机上写数据，从机上可读</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220857275.png" alt="image-20231007220857275"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220908612.png" alt="image-20231007220908612"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220918387.png" alt="image-20231007220918387"></p><h4 id="从机上写数据会报错"><a href="#从机上写数据会报错" class="headerlink" title="从机上写数据会报错"></a>从机上写数据会报错</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231007220943905.png" alt="image-20231007220943905"></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008105716715.png" alt="image-20231008105716715"></p><h6 id="Q：切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制-比如从k4进来，那之前的k1-k2-k3是否也可以复制？"><a href="#Q：切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制-比如从k4进来，那之前的k1-k2-k3是否也可以复制？" class="headerlink" title="Q：切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的k1,k2,k3是否也可以复制？"></a>Q：切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的k1,k2,k3是否也可以复制？</h6><ul><li>从服务器挂掉之后重启，会默认为主服务器，需要手动设置重新加入主服务器</li><li>从服务器断开之后，会重头开始复制，断开之前的数据都会复制</li></ul><p><strong>实例</strong></p><ol><li><p>断开端口号6381的从机</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008110630270.png" alt="image-20231008110630270"></p></li><li><p>在主机中新增内容</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008110807563.png" alt="image-20231008110807563"></p></li><li><p>重启挂掉的端口号6381的从机</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008111024970.png" alt="image-20231008111024970"></p></li><li><p>加重启的6381加入主机，成为6379的从机</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008111137378.png" alt="image-20231008111137378"></p></li></ol><h6 id="Q：从机是否可以写？set可否？"><a href="#Q：从机是否可以写？set可否？" class="headerlink" title="Q：从机是否可以写？set可否？"></a>Q：从机是否可以写？set可否？</h6><p>从机只允许读，不允许写，写会报错</p><h6 id="Q：主机shutdown后情况如何？从机是上位还是原地待命？"><a href="#Q：主机shutdown后情况如何？从机是上位还是原地待命？" class="headerlink" title="Q：主机shutdown后情况如何？从机是上位还是原地待命？"></a>Q：主机shutdown后情况如何？从机是上位还是原地待命？</h6><ul><li>主服务器挂掉之后，从服务器不做任何操作，并能够知悉主服务器挂掉了</li><li>主服务器重启，又会回到主服务器状态，且原始从服务器不变</li></ul><p><strong>实例</strong></p><ol><li><p>挂掉端口号6379的主服务器</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008111732629.png" alt="image-20231008111732629"></p></li><li><p>查看从服务器状态</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008111755713.png" alt="image-20231008111755713"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008111837454.png" alt="image-20231008111837454"></p></li><li><p>重启6379主服务器，查看状态信息</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008111935927.png" alt="image-20231008111935927"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008111954792.png" alt="image-20231008111954792"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008112016451.png" alt="image-20231008112016451"></p></li></ol><h6 id="Q：主机又回来了后，主机新增记录，从机还能否顺利复制？"><a href="#Q：主机又回来了后，主机新增记录，从机还能否顺利复制？" class="headerlink" title="Q：主机又回来了后，主机新增记录，从机还能否顺利复制？"></a>Q：主机又回来了后，主机新增记录，从机还能否顺利复制？</h6><ul><li>从机能顺利复制，主机挂掉过程中，从机不做任何操作</li></ul><p><strong>实例</strong></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008112158235.png" alt="image-20231008112158235"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008112211450.png" alt="image-20231008112211450"></p><h6 id="Q：其中一台从机down后情况如何？依照原有它能跟上大部队吗？"><a href="#Q：其中一台从机down后情况如何？依照原有它能跟上大部队吗？" class="headerlink" title="Q：其中一台从机down后情况如何？依照原有它能跟上大部队吗？"></a>Q：其中一台从机down后情况如何？依照原有它能跟上大部队吗？</h6><p>从机down掉之后，重启加入主机，会复制主机所有内容</p><h4 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h4><p>背景：从机数目较少时，可以依靠主机直接管理，但是从机数目较多时，主机无法管理，此时就应采取分层分组的模式</p><p>薪火相传：</p><p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用 slaveof  &lt;ip&gt;&lt;port&gt;</span><br><span class="line">中途变更转向:会清除之前的数据，重新建立拷贝最新的</span><br><span class="line">风险是一旦某个slave宕机，后面的slave都没法备份</span><br><span class="line">主机挂了，从机还是从机，无法写数据了</span><br></pre></td></tr></table></figure><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008142222721.png" alt="image-20231008142222721"></p><p><strong>实例</strong></p><p>6380作为6379的从机，6381作为6380的从机</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008142707933.png" alt="image-20231008142707933"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008142739230.png" alt="image-20231008142739230"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008142809123.png" alt="image-20231008142809123"></p><h4 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h4><p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</p><p>用<code>slaveof no one</code>  将从机变为主机。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008143105500.png" alt="image-20231008143105500"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008143153298.png" alt="image-20231008143153298"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008143205287.png" alt="image-20231008143205287"></p><h3 id="主从复制的复制原理"><a href="#主从复制的复制原理" class="headerlink" title="主从复制的复制原理"></a>主从复制的复制原理</h3><ul><li>Slave启动成功连接到master后会发送一个sync命令</li><li>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</li><li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li><li>但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008112601208.png" alt="image-20231008112601208"></p><h3 id="哨兵模式-sentinel"><a href="#哨兵模式-sentinel" class="headerlink" title="哨兵模式(sentinel)"></a>哨兵模式(sentinel)</h3><h4 id="什么是哨兵模式"><a href="#什么是哨兵模式" class="headerlink" title="什么是哨兵模式"></a>什么是哨兵模式</h4><p><strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008143524313.png" alt="image-20231008143524313"></p><h4 id="如何开启哨兵模式"><a href="#如何开启哨兵模式" class="headerlink" title="如何开启哨兵模式"></a>如何开启哨兵模式</h4><ol><li><h6 id="启动三台redis主机，端口号分别为6379，6380，6381调整其为一主二从模式，6379作为6380和6381的主机"><a href="#启动三台redis主机，端口号分别为6379，6380，6381调整其为一主二从模式，6379作为6380和6381的主机" class="headerlink" title="启动三台redis主机，端口号分别为6379，6380，6381调整其为一主二从模式，6379作为6380和6381的主机"></a>启动三台redis主机，端口号分别为6379，6380，6381调整其为一主二从模式，6379作为6380和6381的主机</h6><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008155130842.png" alt="image-20231008155130842"></p></li><li><p>在自定义的文件夹<code>~/myredis</code>中新建文件<code>sentinel.conf</code>，用于哨兵的配置</p></li><li><p>配置哨兵，在<code>~/myredis/sentinel.conf</code>中填写以下内容</p><p><code>sentinel monitor mymaster 127.0.0.1 6379 1</code></p><p>其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。 </p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008151210539.png" alt="image-20231008151210539"></p></li><li><p>启动哨兵</p><p>执行<code>redis-sentinel sentinel.conf</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008155318530.png" alt="image-20231008155318530"></p></li><li><p>主机挂掉之后，会从从机里面选取新的主机</p><ul><li>(大概10秒左右可以看到哨兵窗口日志，切换了新的主机)</li><li>原主机如果再次重启，会变成从机</li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008155606022.png" alt="image-20231008155606022"></p></li><li><p>重启以前的主机，会从成为新选举主机的从机</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008191241413.png" alt="image-20231008191241413"></p></li></ol><h4 id="存在问题：复制延时"><a href="#存在问题：复制延时" class="headerlink" title="存在问题：复制延时"></a>存在问题：复制延时</h4><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008191359973.png" alt="image-20231008191359973"></p><ul><li><p>优先级在redis.conf中默认：replica-priority 100，值越小优先级越高</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008191651799.png" alt="image-20231008191651799"></p></li><li><p>偏移量是指获得原主机数据最全的</p></li><li><p>每个redis实例启动后都会随机生成一个40位的runid</p></li></ul><h4 id="Java代码实现哨兵模式"><a href="#Java代码实现哨兵模式" class="headerlink" title="Java代码实现哨兵模式"></a>Java代码实现哨兵模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> JedisSentinelPool jedisSentinelPool=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedisFromSentinel</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(jedisSentinelPool==<span class="literal">null</span>)&#123;</span><br><span class="line">            Set&lt;String&gt; sentinelSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            sentinelSet.add(<span class="string">&quot;192.168.11.103:26379&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">            jedisPoolConfig.setMaxTotal(<span class="number">10</span>); <span class="comment">//最大可用连接数</span></span><br><span class="line">jedisPoolConfig.setMaxIdle(<span class="number">5</span>); <span class="comment">//最大闲置连接数</span></span><br><span class="line">jedisPoolConfig.setMinIdle(<span class="number">5</span>); <span class="comment">//最小闲置连接数</span></span><br><span class="line">jedisPoolConfig.setBlockWhenExhausted(<span class="literal">true</span>); <span class="comment">//连接耗尽是否等待</span></span><br><span class="line">jedisPoolConfig.setMaxWaitMillis(<span class="number">2000</span>); <span class="comment">//等待时间</span></span><br><span class="line">jedisPoolConfig.setTestOnBorrow(<span class="literal">true</span>); <span class="comment">//取连接的时候进行一下测试 ping pong</span></span><br><span class="line">jedisSentinelPool=<span class="keyword">new</span> <span class="title class_">JedisSentinelPool</span>(<span class="string">&quot;mymaster&quot;</span>,sentinelSet,jedisPoolConfig);</span><br><span class="line"><span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis集群操作"><a href="#Redis集群操作" class="headerlink" title="Redis集群操作"></a>Redis集群操作</h2><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><p>容量不够，redis如何进行扩容？</p><p>并发写操作， redis如何分摊？</p><p>另外，主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</p><p>之前通过<strong>代理主机</strong>来解决，但是redis3.0中提供了解决方案。就是<strong>无中心化集群配置</strong>。</p><p><strong>代理主机</strong></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008205652222.png" alt="image-20231008205652222"></p><p><strong>无中心化集群</strong></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231008205740250.png" alt="image-20231008205740250"></p><h3 id="什么是集群"><a href="#什么是集群" class="headerlink" title="什么是集群"></a>什么是集群</h3><p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。</p><p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><h3 id="Redis集群的搭建"><a href="#Redis集群的搭建" class="headerlink" title="Redis集群的搭建"></a>Redis集群的搭建</h3><p>启动6个Redis实例，端口号分别是6379，6380，6381，6389，6390，6391</p><h4 id="配置redis基本信息"><a href="#配置redis基本信息" class="headerlink" title="配置redis基本信息"></a>配置redis基本信息</h4><ul><li><p>开启daemonize yes</p></li><li><p>Pid文件名字</p></li><li><p>指定端口</p></li><li><p>Dump.rdb名字</p></li><li><p>Appendonly 关掉或者换名字</p></li><li><p>cluster-enabled yes  打开集群模式</p></li><li><p>cluster-config-file nodes-6379.conf 设定节点配置文件名</p></li><li><p>cluster-node-timeout 15000  设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</p></li></ul><p>配置信息示例</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">include /home/bigdata/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">pidfile &quot;/var/run/redis<span class="built_in">_</span>6379.pid&quot;</span><br><span class="line">dbfilename &quot;dump6379.rdb&quot;</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009201429852.png" alt="image-20231009201429852"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009201721949.png" alt="image-20231009201721949"></p><h4 id="启动6个redis服务"><a href="#启动6个redis服务" class="headerlink" title="启动6个redis服务"></a>启动6个redis服务</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009201851047.png" alt="image-20231009201851047"></p><h4 id="将六个节点合成一个集群"><a href="#将六个节点合成一个集群" class="headerlink" title="将六个节点合成一个集群"></a>将六个节点合成一个集群</h4><p>组合之前，请确保所有redis实例启动后，nodes-xxxx.conf文件都生成正常。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009201956060.png" alt="image-20231009201956060"></p><p>集群合体</p><p><code>cd /opt/redis-6.2.1/src</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 真实IP地址:6379 真实IP地址:6380 真实IP地址:6381 真实IP地址:6389 真实IP地址:6390 真实IP地址:6391</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis-cli --cluster create --cluster-replicas 1 192.168.80.129:6379 192.168.80.129:6380 192.168.80.129:6381 192.168.80.129:6389 192.168.80.129:6390 192.168.80.129:6391</span><br></pre></td></tr></table></figure><ul><li><p>此处不要用127.0.0.1， 请用真实IP地址</p></li><li><p>—replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组</p></li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009202406972.png" alt="image-20231009202406972"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009202436031.png" alt="image-20231009202436031"></p><h4 id="主机连接"><a href="#主机连接" class="headerlink" title="主机连接"></a>主机连接</h4><p>普通方式登录</p><p>可能直接进入读主机，存储数据时，会出现MOVED重定向操作。所以，应该以集群方式登录。</p><h5 id="c-采用集群策略连接，设置数据会自动切换到相应的写主机"><a href="#c-采用集群策略连接，设置数据会自动切换到相应的写主机" class="headerlink" title="-c  采用集群策略连接，设置数据会自动切换到相应的写主机"></a><strong>-c</strong>  采用集群策略连接，设置数据会自动切换到相应的写主机</h5><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009203243954.png" alt="image-20231009203243954"></p><h4 id="通过cluster-nodes命令查看集群信息"><a href="#通过cluster-nodes命令查看集群信息" class="headerlink" title="通过cluster nodes命令查看集群信息"></a>通过<code>cluster nodes</code>命令查看集群信息</h4><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009203408052.png" alt="image-20231009203408052"></p><h4 id="redis-cluster-如何分配这六个节点"><a href="#redis-cluster-如何分配这六个节点" class="headerlink" title="redis cluster 如何分配这六个节点?"></a>redis cluster <strong>如何分配这六个节点?</strong></h4><p>一个集群至少要有三个主节点。</p><p>选项<code>--cluster-replicas 1</code>表示我们希望为集群中的每个主节点创建一个从节点。</p><p>分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。</p><h4 id="什么是slots"><a href="#什么是slots" class="headerlink" title="什么是slots"></a>什么是slots</h4><p><strong><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009204457031.png" alt="image-20231009204457031"></strong></p><p>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， </p><p>集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>集群中的每个节点负责处理一部分插槽，插槽编号为0~16383</p><p>比如：下图所示</p><ul><li>6379端口主机负责的插槽：0~5460</li><li>6380端口主机负责的插槽：5461~10922</li><li>6381端口主机负责的插槽：10923~16383</li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009205123186.png" alt="image-20231009205123186"></p><p>插槽的作用：</p><p>比如执行命令<code>set k1 v1</code>会根据<code>k1</code>的CRC16计算其所属的插槽编号，来决定其所写入的主机</p><p>目的是为了尽可能平均地将所有值均摊到集群中各个主机，减小压力</p><h4 id="在集群中录入值"><a href="#在集群中录入值" class="headerlink" title="在集群中录入值"></a>在集群中录入值</h4><ul><li><p>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。</p></li><li><p>redis-cli客户端提供了 –c 参数实现自动重定向。</p></li></ul><p><strong>实例</strong></p><p><code>redis-cli -c -p 6379</code>登入，录入值，会自动重定向到插槽对应的主机</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009210641203.png" alt="image-20231009210641203"></p><p>不在一个插槽内下的键值，不能使用<code>mget</code>、<code>mset</code>等多键操作</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009210809303.png" alt="image-20231009210809303"></p><p>可以通过<strong>组</strong>的方式来进行多键操作，通过<code>&#123;&#125;</code>来定义组的概念，此时插槽的计算是根据组名来获取的，同一组下的所有键值对会放入同意插槽</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009211005097.png" alt="image-20231009211005097"></p><h4 id="集群中值的查询"><a href="#集群中值的查询" class="headerlink" title="集群中值的查询"></a>集群中值的查询</h4><ul><li><code>cluster keyslot 键名</code>:查询键所在插槽</li><li><code>cluster countkeysinslot 插槽号</code>：查询对应插槽键的数目</li><li><code>cluster getkeysinslot 插槽号 数目</code>：列出指定插槽下指定数目的键值列表</li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009211459946.png" alt="image-20231009211459946"></p><h4 id="故障恢复-1"><a href="#故障恢复-1" class="headerlink" title="故障恢复"></a>故障恢复</h4><h5 id="如果主节点下线-挂掉了-，从节点是否能自动升为主节点？"><a href="#如果主节点下线-挂掉了-，从节点是否能自动升为主节点？" class="headerlink" title="如果主节点下线(挂掉了)，从节点是否能自动升为主节点？"></a>如果主节点下线(挂掉了)，从节点是否能自动升为主节点？</h5><p>Q：从节点会自动升为主节点</p><p>如图，6379挂掉了，它的从机6390会自动升为主机</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009212351701.png" alt="image-20231009212351701"></p><h5 id="主节点恢复之后，从主关系会如何？"><a href="#主节点恢复之后，从主关系会如何？" class="headerlink" title="主节点恢复之后，从主关系会如何？"></a>主节点恢复之后，从主关系会如何？</h5><p>Q：主节点恢复之后，会自动变为从机(与哨兵模式类似)</p><p>如图：6379服务重启，会自动成为6390的从机</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009212741427.png" alt="image-20231009212741427"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009212815643.png" alt="image-20231009212815643"></p><h5 id="如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续"><a href="#如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续" class="headerlink" title="如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?"></a>如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?</h5><p>redis.conf中的参数 cluster-require-full-coverage</p><ul><li>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为yes ，那么 ，整个集群都挂掉</li><li>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为no ，那么，该插槽数据全都不能使用，也无法存储。</li></ul><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231009212931770.png" alt="image-20231009212931770"></p><h4 id="集群的Jedis开发"><a href="#集群的Jedis开发" class="headerlink" title="集群的Jedis开发"></a>集群的Jedis开发</h4><p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。</p><p>无中心化主从集群。无论从哪台主机写的数据，其他主机上都能读到数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jedis集群操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisClusterDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建JedisCluster对象</span></span><br><span class="line">        <span class="type">HostAndPort</span> <span class="variable">hostAndPort</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.80.129&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="type">JedisCluster</span> <span class="variable">jedisCluster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisCluster</span>(hostAndPort);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.进行相关操作</span></span><br><span class="line">        jedisCluster.set(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;China&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> jedisCluster.get(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Redis集群的优劣"><a href="#Redis集群的优劣" class="headerlink" title="Redis集群的优劣"></a>Redis集群的优劣</h4><h4 id="Redis集群的优势"><a href="#Redis集群的优势" class="headerlink" title="Redis集群的优势"></a>Redis集群的优势</h4><ul><li><p>实现扩容</p></li><li><p>分摊压力</p></li><li><p>无中心配置相对简单</p></li></ul><h4 id="Redis集群的劣势"><a href="#Redis集群的劣势" class="headerlink" title="Redis集群的劣势"></a>Redis集群的劣势</h4><p>多键操作是不被支持的 </p><p>多键的Redis事务是不被支持的。lua脚本不被支持</p><p>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p><h2 id="Redis应用问题及其对应的解决方案"><a href="#Redis应用问题及其对应的解决方案" class="headerlink" title="Redis应用问题及其对应的解决方案"></a>Redis应用问题及其对应的解决方案</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010152950287.png" alt="image-20231010152950287"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p>解决方案</p><h5 id="方案一：对空值缓存"><a href="#方案一：对空值缓存" class="headerlink" title="方案一：对空值缓存"></a>方案一：<strong>对空值缓存</strong></h5><p>如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p><h5 id="方案二：设置可访问的名单（白名单）"><a href="#方案二：设置可访问的名单（白名单）" class="headerlink" title="方案二：设置可访问的名单（白名单）"></a>方案二：<strong>设置可访问的名单（白名单）</strong></h5><p>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p><h5 id="方案三：采用布隆过滤器"><a href="#方案三：采用布隆过滤器" class="headerlink" title="方案三：采用布隆过滤器"></a>方案三：<strong>采用布隆过滤器</strong></h5><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。</p><p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力</p><h5 id="方案四：进行实时监控"><a href="#方案四：进行实时监控" class="headerlink" title="方案四：进行实时监控"></a>方案四：<strong>进行实时监控</strong></h5><p>当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010161714173.png" alt="image-20231010161714173"></p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。</p><h5 id="方案一：预先设置热门数据"><a href="#方案一：预先设置热门数据" class="headerlink" title="方案一：预先设置热门数据"></a>方案一：<strong>预先设置热门数据</strong></h5><p>在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p><h5 id="方案二：实时调整"><a href="#方案二：实时调整" class="headerlink" title="方案二：实时调整"></a>方案二：<strong>实时调整</strong></h5><p>现场监控哪些数据热门，实时调整key的过期时长</p><h5 id="方案三：使用锁"><a href="#方案三：使用锁" class="headerlink" title="方案三：使用锁"></a>方案三：<strong>使用锁</strong></h5><ol><li>就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db</li><li>先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key</li><li>当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；</li><li>当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</li></ol><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010161951828.png" alt="image-20231010161951828"></p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key</p><p>正常访问</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010165116024.png" alt="image-20231010165116024"></p><p>缓存失效瞬间</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010165134933.png" alt="image-20231010165134933"></p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p><h5 id="方案一：构建多级缓存架构"><a href="#方案一：构建多级缓存架构" class="headerlink" title="方案一：构建多级缓存架构"></a>方案一：<strong>构建多级缓存架构</strong></h5><p>nginx缓存 + redis缓存 +其他缓存（ehcache等）</p><h5 id="方案二：使用锁或队列"><a href="#方案二：使用锁或队列" class="headerlink" title="方案二：使用锁或队列"></a>方案二：<strong>使用锁或队列</strong></h5><p>用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</p><h5 id="方案三：设置过期标志更新缓存"><a href="#方案三：设置过期标志更新缓存" class="headerlink" title="方案三：设置过期标志更新缓存"></a>方案三：<strong>设置过期标志更新缓存</strong></h5><p>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</p><h5 id="方案四：将缓存失效时间分散开"><a href="#方案四：将缓存失效时间分散开" class="headerlink" title="方案四：将缓存失效时间分散开"></a>方案四：<strong>将缓存失效时间分散开</strong></h5><p>比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><ol><li><p>基于数据库实现分布式锁</p></li><li><p>基于缓存（Redis等）</p></li><li><p>基于Zookeeper</p></li></ol><p>每一种分布式锁解决方案都有各自的优缺点：</p><ol><li><p>性能：redis最高</p></li><li><p>可靠性：zookeeper最高</p></li></ol><p>这里，我们就基于redis实现分布式锁。</p><h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="使用Redis实现分布锁"><a href="#使用Redis实现分布锁" class="headerlink" title="使用Redis实现分布锁"></a>使用Redis实现分布锁</h5><p>redis命令<code>setnx key value</code>自带锁，只有当key不存在时，才可以进行操作</p><p>因此可以通过<code>setnx</code>对操作进行上锁，通过<code>del key</code>释放锁</p><p>问题1：如果锁长时间无法得到释放，该怎么办？</p><p>A：设置锁之后，对对应的key设置过期时间</p><p><code>setnx key val</code></p><p><code>expire key 过期时间</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010172019006.png" alt="image-20231010172019006"></p><p>问题2：设置锁与设置过期时间两者是分散进行的，无法保证原子性，如果加锁之后出现故障，无法设置过期时间怎么办？</p><p>A：<code>set key val nx ex 过期时间</code>：一条命令完成两个功能，保证操作的原子性</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010172217270.png" alt="image-20231010172217270"></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010171400182.png" alt="image-20231010171400182"></p><h4 id="Jedis实现分布式锁"><a href="#Jedis实现分布式锁" class="headerlink" title="Jedis实现分布式锁"></a>Jedis实现分布式锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redisLock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取对应的锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2.如果成功获取锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>+val+<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(val))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span>  <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;&quot;</span>+val);</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line">            <span class="comment">//操作结束，释放锁</span></span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//获取锁失败</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                redisLock();<span class="comment">//再次发送请求</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用ab工具模拟并发测试</p><p><code>ab -n 1000 -c 50 115.156.245.63:8080/redisLock</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010191118792.png" alt="image-20231010191118792"></p><p>查看redis数据库</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010191139280.png" alt="image-20231010191139280"></p><p>1000次请求，num值变成了1000，加锁成功</p><h4 id="Jedis实现分布式锁——-设置锁的过期时间"><a href="#Jedis实现分布式锁——-设置锁的过期时间" class="headerlink" title="Jedis实现分布式锁——-设置锁的过期时间"></a>Jedis实现分布式锁——-设置锁的过期时间</h4><p>背景：如果<code>setnx</code>刚好获取到锁，业务逻辑出现异常，导致锁无法释放；如果将<code>setnx</code>与<code>expire</code>分开执行，无法保证原子性操作，中间出现异常，也会导致锁无法释放</p><p>解决方法<code>set key val nx ex 过期时间</code>，设置锁的同时设置过期时间</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010211619148.png" alt="image-20231010211619148"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redisLock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取对应的锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, <span class="number">1</span>,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//2.如果成功获取锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>+val+<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(val))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span>  <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;&quot;</span>+val);</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line">            <span class="comment">//操作结束，释放锁</span></span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//获取锁失败</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                redisLock();<span class="comment">//再次发送请求</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用ab工具模拟并发测试</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010211800069.png" alt="image-20231010211800069"></p><p>查看<code>redis</code>，压力测试同样也没有问题</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010212303310.png" alt="image-20231010212303310"></p><h4 id="设置锁的UUID，防止误删"><a href="#设置锁的UUID，防止误删" class="headerlink" title="设置锁的UUID，防止误删"></a>设置锁的UUID，防止误删</h4><p><strong>背景：</strong></p><p>如果业务逻辑的执行时间是7s。执行流程如下</p><ol><li><p>index1业务逻辑没执行完，3秒后锁被自动释放。</p></li><li><p>index2获取到锁，执行业务逻辑，3秒后锁被自动释放。</p></li><li><p>index3获取到锁，执行业务逻辑</p></li><li><p>index1业务逻辑执行完成，开始调用del释放锁，这时释放的是index3的锁，导致index3的业务只执行1s就被别人释放。</p></li></ol><p>最终等于没锁的情况。 </p><p>解决：setnx获取锁时，设置一个指定的唯一值（例如：uuid）；释放前获取这个值，判断是否自己的锁</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010213117188.png" alt="image-20231010213117188"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redisLock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//0.随机初始化当前用的UUID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//1.获取对应的锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//2.如果成功获取锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>+val+<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(val))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span>  <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;&quot;</span>+val);</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line">            <span class="comment">//操作结束，释放锁</span></span><br><span class="line">            <span class="comment">//释放锁之前，校验uuid的值，防止锁被误删</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">lockId</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(lockId!=<span class="literal">null</span> &amp;&amp; uuid.equals((String) lockId))&#123;</span><br><span class="line">                redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//获取锁失败</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                redisLock();<span class="comment">//再次发送请求</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作缺乏原子性"><a href="#删除操作缺乏原子性" class="headerlink" title="删除操作缺乏原子性"></a>删除操作缺乏原子性</h4><h5 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h5><ol><li><p>index1执行删除时，查询到的lock值确实和uuid相等</p></li><li><p>index1执行删除前，lock刚好过期时间已到，被redis自动释放，在redis中没有了lock，没有了锁。</p></li><li><p>index2获取了lock，index2线程获取到了cpu的资源，开始执行方法</p></li><li><p>index1执行删除，此时会把index2的lock删除</p></li></ol><p>index1 因为已经在方法中了，所以不需要重新上锁。index1有执行的权限。index1已经比较完成了，这个时候，开始执行</p><p>删除的却是index2的锁！</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p><strong>LUA脚本保证删除的原子性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redisLock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//0.随机初始化当前用的UUID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//1.获取对应的锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//2.如果成功获取锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>+val+<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(val))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span>  <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;&quot;</span>+val);</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line">            <span class="comment">//操作结束，释放锁</span></span><br><span class="line">            <span class="comment">// 定义lua 脚本,将uuid值的判断和lock的释放绑定成原子操作</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">            <span class="comment">// 使用redis执行lua执行</span></span><br><span class="line">            DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">            redisScript.setScriptText(script);</span><br><span class="line">            <span class="comment">// 设置一下返回值类型 为Long</span></span><br><span class="line">            <span class="comment">// 因为删除判断的时候，返回的0,给其封装为数据类型。如果不封装那么默认返回String 类型，</span></span><br><span class="line">            <span class="comment">// 那么返回字符串与0 会有发生错误。</span></span><br><span class="line">            redisScript.setResultType(Long.class);</span><br><span class="line">            <span class="comment">// 第一个要是script 脚本 ，第二个需要判断的key，第三个就是key所对应的值。</span></span><br><span class="line">            redisTemplate.execute(redisScript, Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//获取锁失败</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                redisLock();<span class="comment">//再次发送请求</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分布式锁总结"><a href="#分布式锁总结" class="headerlink" title="分布式锁总结"></a>分布式锁总结</h4><p>为了确保分布式锁可用，我们至少要确保锁的实现同时<strong>满足以下四个条件</strong>：</p><ul><li><p>互斥性。在任意时刻，只有一个客户端能持有锁。</p></li><li><p>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p></li><li><p>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p></li><li><p>加锁和解锁必须具有原子性。</p></li></ul><h2 id="Redis6-0的新功能"><a href="#Redis6-0的新功能" class="headerlink" title="Redis6.0的新功能"></a>Redis6.0的新功能</h2><h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>Redis ACL是Access Control List（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p><p>在Redis 5版本之前，Redis 安全规则只有密码控制 还有通过rename 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供ACL的功能对用户进行更细粒度的权限控制 ：</p><p>（1）接入权限:用户名和密码 </p><p>（2）可以执行的命令 </p><p>（3）可以操作的 KEY</p><p>参考官网：<a href="https://redis.io/topics/acl">https://redis.io/topics/acl</a></p><h4 id="常用命令-8"><a href="#常用命令-8" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="使用acl-list命令展现用户权限列表"><a href="#使用acl-list命令展现用户权限列表" class="headerlink" title="使用acl list命令展现用户权限列表"></a>使用acl list命令展现用户权限列表</h5><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010221420493.png" alt="image-20231010221420493"></p><h5 id="使用acl-cat命令，查看添加权限指令类别"><a href="#使用acl-cat命令，查看添加权限指令类别" class="headerlink" title="使用acl cat命令，查看添加权限指令类别"></a>使用acl cat命令，查看添加权限指令类别</h5><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010221446730.png" alt="image-20231010221446730"></p><h5 id="加参数类型名可以查看类型下具体命令"><a href="#加参数类型名可以查看类型下具体命令" class="headerlink" title="加参数类型名可以查看类型下具体命令"></a>加参数类型名可以查看类型下具体命令</h5><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010221515083.png" alt="image-20231010221515083"></p><h5 id="使用acl-whoami命令查看当前用户"><a href="#使用acl-whoami命令查看当前用户" class="headerlink" title="使用acl whoami命令查看当前用户"></a>使用acl whoami命令查看当前用户</h5><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010221527717.png" alt="image-20231010221527717"></p><h5 id="使用acl-set-user命令创建和编辑用户"><a href="#使用acl-set-user命令创建和编辑用户" class="headerlink" title="使用acl set user命令创建和编辑用户"></a>使用<code>acl set user</code>命令创建和编辑用户</h5><h6 id="通过命令创建新用户默认权限-acl-set-user-user1"><a href="#通过命令创建新用户默认权限-acl-set-user-user1" class="headerlink" title="通过命令创建新用户默认权限:acl set user user1"></a>通过命令创建新用户默认权限:<code>acl set user user1</code></h6><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010221713248.png" alt="image-20231010221713248"></p><p>在上面的示例中，我根本没有指定任何规则。如果用户不存在，这将使用just created的默认属性来创建用户。如果用户已经存在，则上面的命令将不执行任何操作。</p><h6 id="设置有用户名、密码、ACL权限、并启用的用户"><a href="#设置有用户名、密码、ACL权限、并启用的用户" class="headerlink" title="设置有用户名、密码、ACL权限、并启用的用户"></a>设置有用户名、密码、ACL权限、并启用的用户</h6><p><code>acl set user user2 on &gt;password ~cached:* +get</code></p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010221749393.png" alt="image-20231010221749393"></p><h6 id="切换用户，验证权限"><a href="#切换用户，验证权限" class="headerlink" title="切换用户，验证权限"></a>切换用户，验证权限</h6><p><code>auth 用户名 密码</code>切换用户</p><p><img src="/2023/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/redis/redis/image-20231010221759407.png" alt="image-20231010221759407"></p><h3 id="IO多线程"><a href="#IO多线程" class="headerlink" title="IO多线程"></a>IO多线程</h3><p>Redis6终于支撑多线程了，告别单线程了吗？</p><p>IO多线程其实指<strong>客户端交互部分</strong>的<strong>网络IO</strong>交互处理模块<strong>多线程</strong>，而非<strong>执行命令多线程</strong>。Redis6执行命令依然是单线程。</p><p> Redis采用：单线程+多路IO复用的形式</p><h3 id="工具支持-Cluster"><a href="#工具支持-Cluster" class="headerlink" title="工具支持 Cluster**"></a>工具支持<strong> </strong>Cluster**</h3><p>之前老版Redis想要搭集群需要单独安装ruby环境，Redis 5 将 redis-trib.rb 的功能集成到 redis-cli 。另外官方 redis-benchmark 工具开始支持 cluster 模式了，通过多线程的方式对多个分片进行压测</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>redis6.0主要知识点</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装与网络配置</title>
      <link href="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/"/>
      <url>/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><h2 id="Linux安装-1"><a href="#Linux安装-1" class="headerlink" title="Linux安装"></a>Linux安装</h2><p>基于虚拟机<code>VMWare</code>在<code>windows</code>系统搭建<code>Linux</code>环境</p><h3 id="需要的软件"><a href="#需要的软件" class="headerlink" title="需要的软件"></a>需要的软件</h3><ul><li>虚拟机<code>VMWare</code></li><li><code>Centos镜像文件</code></li><li>SSH客户端<code>SecureCRT</code></li><li>文件传输工具<code>WinScp</code></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以上软件的百度网盘链接:</span><br><span class="line">链接：https://pan.baidu.com/s/1vpmwnmAcQL0rG906wl_NyQ </span><br><span class="line">提取码：oo34 </span><br><span class="line">--来自百度网盘超级会员V6的分享</span><br></pre></td></tr></table></figure><h3 id="虚拟机Linux安装"><a href="#虚拟机Linux安装" class="headerlink" title="虚拟机Linux安装"></a>虚拟机Linux安装</h3><ul><li><p>打开<code>VMWARE</code>软件</p><p><img src="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/image-20230906231148084.png" alt="image-20230906231148084"></p></li><li><p>加载对应的<code>CentOS</code>映像文件，并设置对应磁盘和内存大小</p><p><img src="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/image-20230906231231168.png" alt="image-20230906231231168"></p></li><li><p>配置完一个虚拟机，其他相同环境配置的环境可以借助<strong>快照克隆</strong>技术实现快速创建若干相同配置的虚拟机</p></li></ul><h3 id="虚拟机网络配置"><a href="#虚拟机网络配置" class="headerlink" title="虚拟机网络配置"></a>虚拟机网络配置</h3><p>安装后的虚拟机，进入<code>CentOS</code>，网络是不可用的，无法与宿主机和外部进行网络访问</p><p>我们需要将虚拟机系统的网络ip地址设置为静态，这样当作服务器连接时不会丢失</p><h5 id="网络适配器设置为NAT模式"><a href="#网络适配器设置为NAT模式" class="headerlink" title="网络适配器设置为NAT模式"></a>网络适配器设置为NAT模式</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点击：虚拟机-》设置-》网络适配器</span><br></pre></td></tr></table></figure><p><img src="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/image-20230907232001776.png" alt="image-20230907232001776"></p><h5 id="虚拟机Ip地址和网关设置"><a href="#虚拟机Ip地址和网关设置" class="headerlink" title="虚拟机Ip地址和网关设置"></a>虚拟机Ip地址和网关设置</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点击: 编辑-》虚拟网络编辑器</span><br></pre></td></tr></table></figure><p><img src="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/image-20230907232529388.png" alt="image-20230907232529388"></p><h6 id="更改子网地址"><a href="#更改子网地址" class="headerlink" title="更改子网地址"></a>更改子网地址</h6><p>子网地址前16位应该与主机保持一致，比如图中主机子网地址为<code>192.168.86.0</code>，则虚拟机子网地址可以设置为<code>192.168.xx.xx</code></p><p>本例中我们设置为<code>192.168.134.0</code></p><p><img src="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/image-20230907232603371.png" alt="image-20230907232603371"></p><h6 id="DHCP设置"><a href="#DHCP设置" class="headerlink" title="DHCP设置"></a>DHCP设置</h6><p>点击DHCP设置按钮，可以查看当前子网可以设置的IP地址范围，此虚拟机IP地址可以设置为此范围内的任意一个即可</p><p><img src="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/image-20230907232819056.png" alt="image-20230907232819056"></p><h6 id="网关设置"><a href="#网关设置" class="headerlink" title="网关设置"></a>网关设置</h6><p>点击NAT设置，可以查看网关地址，即<code>192.168.134.2</code></p><p><img src="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/image-20230907232936627.png" alt="image-20230907232936627"></p><h6 id="更改Centos的网络配置文件"><a href="#更改Centos的网络配置文件" class="headerlink" title="更改Centos的网络配置文件"></a>更改Centos的网络配置文件</h6><ul><li><p>切换到<code>/etc/sysconfig/network-scripts/</code>目录下</p><p><img src="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/image-20230907233300541.png" alt="image-20230907233300541"></p></li><li><p>修改网络配置文件<code>ifcfg-ens33</code></p><p><img src="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/image-20230907233644864.png" alt="image-20230907233644864"></p></li><li><p>保存配置文件、重启虚拟机即可</p><p>此时虚拟机IP地址即设置成了指定的值</p><p><img src="/2023/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/Linux%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Linux%E5%AE%89%E8%A3%85/image-20230907234020651.png" alt="image-20230907234020651"></p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/qq_41311691/article/details/124377318">资料一</a></p><p><a href="https://zhuanlan.zhihu.com/p/145102034">资料二</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="/2023/09/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java_lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/09/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/java_lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p><code>Lambda</code>表达式是一个匿名函数，可以理解为一段可以传递的代码(将代码像数据一样进行传递)</p><h2 id="Lambda表达式的使用"><a href="#Lambda表达式的使用" class="headerlink" title="Lambda表达式的使用"></a>Lambda表达式的使用</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><code>-&gt;</code>：<code>Lambda</code>操作符或者箭头操作符</li><li><code>-&gt;左边</code>：<code>Lambda</code>形参列表(接口中抽象方法的形参列表)</li><li><code>-&gt;右边</code>：<code>Lambda</code>体(重写抽象方法的方法体)</li><li><code>Lambda</code>表达式本质上是接口的一个实例</li></ul><h2 id="Lambda表达式使用六种场景实例"><a href="#Lambda表达式使用六种场景实例" class="headerlink" title="Lambda表达式使用六种场景实例"></a>Lambda表达式使用六种场景实例</h2><h3 id="场景一：无参、无返回值"><a href="#场景一：无参、无返回值" class="headerlink" title="场景一：无参、无返回值"></a>场景一：无参、无返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建线程实例</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;We are Family&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        r1.run();</span><br><span class="line">        <span class="comment">//使用Lambada表达式进行改写</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;We are family Lambda&quot;</span>);</span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景二：Lambda表达式需要一个参数，但是没有返回值"><a href="#场景二：Lambda表达式需要一个参数，但是没有返回值" class="headerlink" title="场景二：Lambda表达式需要一个参数，但是没有返回值"></a>场景二：Lambda表达式需要一个参数，但是没有返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//lambda表达式有参无返回值</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> (String str) -&gt; System.out.println(str);</span><br><span class="line">        myInterface.func(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景三：数据类型可以省略，因为可由编译器推断得出，称之为类型推断"><a href="#场景三：数据类型可以省略，因为可由编译器推断得出，称之为类型推断" class="headerlink" title="场景三：数据类型可以省略，因为可由编译器推断得出，称之为类型推断"></a>场景三：数据类型可以省略，因为可由编译器推断得出，称之为类型推断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        MyInterface&lt;String&gt; myInterface = (str) -&gt; System.out.println(str);</span><br><span class="line">        myInterface.func(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(T str)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景四：Lambda表达式若只需要一个参数，参数的小括号可以省略"><a href="#场景四：Lambda表达式若只需要一个参数，参数的小括号可以省略" class="headerlink" title="场景四：Lambda表达式若只需要一个参数，参数的小括号可以省略"></a>场景四：Lambda表达式若只需要一个参数，参数的小括号可以省略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        MyInterface&lt;String&gt; myInterface = str -&gt; System.out.println(str);</span><br><span class="line">        myInterface.func(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(T str)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景五：Lambda表达式需要两个或者以上的参数，多条执行语句，并且可以有返回值"><a href="#场景五：Lambda表达式需要两个或者以上的参数，多条执行语句，并且可以有返回值" class="headerlink" title="场景五：Lambda表达式需要两个或者以上的参数，多条执行语句，并且可以有返回值"></a>场景五：Lambda表达式需要两个或者以上的参数，多条执行语句，并且可以有返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> (String s1,String s2,<span class="type">int</span> i) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> s1+s2+i;</span><br><span class="line">          <span class="keyword">return</span>  s;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> myInterface.func(<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;张飞&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    String <span class="title function_">func</span><span class="params">(String str1,String str2,<span class="type">int</span> num)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景六：当Lambda体只有一条语句时，return与大括号都可以省略"><a href="#场景六：当Lambda体只有一条语句时，return与大括号都可以省略" class="headerlink" title="场景六：当Lambda体只有一条语句时，return与大括号都可以省略"></a>场景六：当Lambda体只有一条语句时，return与大括号都可以省略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> (String s1,String s2,<span class="type">int</span> i) -&gt; s1+s2+i;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> myInterface.func(<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;张飞&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    String <span class="title function_">func</span><span class="params">(String str1,String str2,<span class="type">int</span> num)</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章：虚拟机栈</title>
      <link href="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/"/>
      <url>/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章：虚拟机栈"><a href="#第五章：虚拟机栈" class="headerlink" title="第五章：虚拟机栈"></a>第五章：虚拟机栈</h1><h2 id="虚拟机栈概述"><a href="#虚拟机栈概述" class="headerlink" title="虚拟机栈概述"></a>虚拟机栈概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821144552583.png" alt="image-20230821144552583"></p><h3 id="内存中的栈和堆"><a href="#内存中的栈和堆" class="headerlink" title="内存中的栈和堆"></a>内存中的栈和堆</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821145008687.png" alt="image-20230821145008687"></p><h3 id="虚拟机栈基本内容"><a href="#虚拟机栈基本内容" class="headerlink" title="虚拟机栈基本内容"></a>虚拟机栈基本内容<img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821145610045.png" alt="image-20230821145610045"></h3><p>  <img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821150340899.png" alt="image-20230821150340899"></p><p> 对于栈存在<code>OOM(栈溢出)</code>，不存在<code>GC(垃圾回收)</code></p><h3 id="面试题：开发过程中遇到的异常有哪些？"><a href="#面试题：开发过程中遇到的异常有哪些？" class="headerlink" title="面试题：开发过程中遇到的异常有哪些？"></a>面试题：开发过程中遇到的异常有哪些？</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821151030878.png" alt="image-20230821151030878"></p><p><code>java.lang.StackOverFlow</code>异常举例：死递归</p><h3 id="设置栈内存大小"><a href="#设置栈内存大小" class="headerlink" title="设置栈内存大小"></a>设置栈内存大小</h3><p>可以使用参数<code>-Xss</code>来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度</p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821152310563.png" alt="image-20230821152310563"></p><p> <strong>示例</strong><code>IDEA</code>中如何修改<code>JVM</code>的配置</p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821153231288.png" alt="image-20230821153231288" style="zoom:80%;"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821153308462.png" alt="image-20230821153308462" style="zoom:80%;"></p><p>可以通过设置不同的虚拟机栈内存大小，比较<strong>死递归</strong>中调用的次数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackErroTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的存储单位"><a href="#栈的存储单位" class="headerlink" title="栈的存储单位"></a>栈的存储单位</h2><p> <img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821154314842.png" alt="image-20230821154314842"></p><h3 id="栈运行原理"><a href="#栈运行原理" class="headerlink" title="栈运行原理"></a>栈运行原理</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821154729071.png" alt="image-20230821154729071"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821155546010.png" alt="image-20230821155546010"></p><h3 id="栈帧的内部结构"><a href="#栈帧的内部结构" class="headerlink" title="栈帧的内部结构"></a>栈帧的内部结构<img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821160632671.png" alt="image-20230821160632671"></h3><h2 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h2><h3 id="局部变量表基础知识"><a href="#局部变量表基础知识" class="headerlink" title="局部变量表基础知识"></a>局部变量表基础知识</h3><p> <img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230821161848966.png" alt="image-20230821161848966"></p><p>为什么是数字数组：因为<code>char</code>、<code>boolean</code>等非数字类型均可以转换成<code>int</code>类型数据<img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826221909484.png" alt="image-20230826221909484"></p><p><strong>局部变量表查看示例</strong></p><p>终端执行<code>javap -v xxx.class</code>即可对<code>.class</code>文件进行反编译</p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826222644929.png" alt="image-20230826222644929"></p><p>也可在<code>IDEA</code>中下载插件<code>jclasslib Bytecode Viewer</code>查看<code>.class</code>文件结构</p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826223355194.png" alt="image-20230826223355194" style="zoom:67%;"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826223450761.png" alt="image-20230826223450761"></p><h3 id="Slot的理解"><a href="#Slot的理解" class="headerlink" title="Slot的理解"></a>Slot的理解</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826224125077.png" alt="image-20230826224125077" style="zoom:67%;"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826224835917.png" alt="image-20230826224835917" style="zoom:80%;"></p><p><strong>数据类型示例</strong></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826225222042.png" alt="image-20230826225222042"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826225534867.png" alt="image-20230826225534867"></p><h3 id="Slot的重复利用"><a href="#Slot的重复利用" class="headerlink" title="Slot的重复利用"></a>Slot的重复利用</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826230220379.png" alt="image-20230826230220379"></p><p><strong>代码示例</strong></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826230835402.png" alt="image-20230826230835402"></p><h3 id="静态变量与局部变量的区别"><a href="#静态变量与局部变量的区别" class="headerlink" title="静态变量与局部变量的区别"></a>静态变量与局部变量的区别</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826231023836.png" alt="image-20230826231023836"></p><p>类变量准备阶段和初始化阶段的操作，具体细节见第二章：类加载子系统</p><p><strong>java中变量的总结</strong></p><p>变量的分类</p><ul><li>按照数据类型分类<ul><li>基本数据类型</li><li>引用数据类型</li></ul></li><li>按照在类中申明的位置进行分类<ul><li>成员变量：使用之前，都经历过默认初始化赋值<ul><li>类变量<ul><li>类加载子系统中链接(linking)的准备阶段(prepare)，给类变量默认复制，在初始化阶段(initial)，给类变量显示赋值</li></ul></li><li>实例变量<ul><li>随着对象创建，会在堆空间中分配实例变量空间，并进行默认赋值</li></ul></li></ul></li><li>局部变量：在使用之前必须显示赋值，否则编译无法通过</li></ul></li></ul><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826232400345.png" alt="image-20230826232400345"></p><h2 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h2><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826234344651.png" alt="image-20230826234344651"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826234749038.png" alt="image-20230826234749038"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826234913080.png" alt="image-20230826234913080"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235258320.png" alt="image-20230826235258320"></p><h2 id="代码追踪"><a href="#代码追踪" class="headerlink" title="代码追踪"></a>代码追踪</h2><p>代码演示指令执行过程中，PC寄存器、局部变量表和操作数栈的变化情况</p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235845034.png" alt="image-20230826235845034"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235901938.png" alt="image-20230826235901938"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235912799.png" alt="image-20230826235912799"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235930674.png" alt="image-20230826235930674"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230826235956374.png" alt="image-20230826235956374"></p><p><strong>补充</strong>：面试题：<code>i++</code>和<code>++i</code>的区别以及其衍生出来的相关问题</p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230827000941557.png" alt="image-20230827000941557"></p><h2 id="栈顶缓存技术"><a href="#栈顶缓存技术" class="headerlink" title="栈顶缓存技术"></a>栈顶缓存技术</h2><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230827001258000.png" alt="image-20230827001258000"></p><h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230827001845394.png" alt="image-20230827001845394"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230827002512030.png" alt="image-20230827002512030"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230827002854861.png" alt="image-20230827002854861"></p><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829223030480.png" alt="image-20230829223030480"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829223326874.png" alt="image-20230829223326874"></p><p>动态链接或者晚期绑定一个直接的例子就是<code>类的多态</code>，父类的引用指向子类的对象，只有在执行的过程中才能确定调用的是父类的方法或者是某个子类的方法</p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829224955541.png" alt="image-20230829224955541"></p><p><code>final</code>修饰的类方法无法被子类重写，所以这一类方法的引用在编译期就可以确定</p><h3 id="虚方法与非虚方法"><a href="#虚方法与非虚方法" class="headerlink" title="虚方法与非虚方法"></a>虚方法与非虚方法</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829225241570.png" alt="image-20230829225241570"></p><p>  <img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829225913900.png" alt="image-20230829225913900"></p><p> <strong>使用示例</strong></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829233347842.png" alt="image-20230829233347842"></p><h3 id="动态调用指令—invokeddynamic指令"><a href="#动态调用指令—invokeddynamic指令" class="headerlink" title="动态调用指令—invokeddynamic指令"></a>动态调用指令—invokeddynamic指令</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829233556770.png" alt="image-20230829233556770"></p><p>  <img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829233727453.png" alt="image-20230829233727453"></p><p>示例：</p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829234012424.png" alt="image-20230829234012424"></p><h3 id="方法重写的本质"><a href="#方法重写的本质" class="headerlink" title="方法重写的本质"></a>方法重写的本质</h3><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829234523185.png" alt="image-20230829234523185"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829234935811.png" alt="image-20230829234935811"></p><p><strong>示例</strong></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829235321427.png" alt="image-20230829235321427"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829235543303.png" alt="image-20230829235543303"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230829235717667.png" alt="image-20230829235717667"></p><h2 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h2><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830000034774.png" alt="image-20230830000034774"></p><p> <img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830000245934.png" alt="image-20230830000245934"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830000528984.png" alt="image-20230830000528984"></p><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830000927188.png" alt="image-20230830000927188"></p><h2 id="一些附加信息"><a href="#一些附加信息" class="headerlink" title="一些附加信息"></a>一些附加信息</h2><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830001254857.png" alt="image-20230830001254857"></p><h2 id="虚拟机栈相关面试题"><a href="#虚拟机栈相关面试题" class="headerlink" title="虚拟机栈相关面试题"></a>虚拟机栈相关面试题</h2><p><img src="/2023/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/image-20230830001402476.png" alt="image-20230830001402476"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十九、电脑商城项目总结</title>
      <link href="/2023/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/19%E7%94%B5%E8%84%91%E5%95%86%E5%9C%BA%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/"/>
      <url>/2023/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/19%E7%94%B5%E8%84%91%E5%95%86%E5%9C%BA%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="电脑商城项目总结"><a href="#电脑商城项目总结" class="headerlink" title="电脑商城项目总结"></a>电脑商城项目总结</h1><p>本项目来源于B站视频，项目对于新手非常友好</p><ul><li>后端利用<code>SpringBoot</code>+<code>MyBatis</code>+<code>Mysql</code>来实现</li><li>前端利用<code>html+css+javascript</code>来实现</li><li>前后端并未实现分离，是传统的前后端一体的web项目</li></ul><p><a href="https://www.bilibili.com/video/BV1bf4y1V7Bx/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=91a99cf2cdc8a7bec61c79b14c7a9800">B站视频链接</a></p><p>项目资源链接:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1M4L1qzjcHCnYvVV00g9VKw </span><br><span class="line">提取码：1wqc </span><br></pre></td></tr></table></figure><h2 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h2><p>整个项目学习下来，对于个人最大的帮助总结如下</p><ul><li><p>了解了一个项目各个业务开发的具体流程，充分体会了web项目的<code>MVC</code>思想</p><ul><li><p>一个项目代码开发的流程</p><ul><li>业务模块整体功能分析</li><li>设计并创建数据库</li><li>数据库表对应实体类创建</li><li>持久层开发<ul><li>规划需要执行的SQL语句</li><li>接口和抽象方法设计</li><li>SQL映射文件配置(<code>Mybatis mapper.xml</code>文件的编写)</li><li>单元测试(每编写一个功能函数，都需要在测试类中进行单元测试，确保功能正常)</li></ul></li><li>业务层开发<ul><li>规划异常(设计对应的异常基类)</li><li>接口和抽象方法(方法名不重要，重要的是方法参数列表的设计，需要前端传递何种参数)</li><li>抽象方法实现</li><li>单元测试</li></ul></li><li>控制层开发<ul><li>异常处理(创建控制层基类，基类中做异常处理拦截，统一进行异常处理，<code>@ExceptionHandler</code>)</li><li>设计请求<ul><li>request url</li><li>request method</li><li>request params</li><li>response data</li></ul></li><li>处理请求，在控制类中编写对应方法</li></ul></li><li>前端页面<ul><li>作为后端人员，只需要关注如何发送<code>ajax</code>请求，如何发送表单请求即可</li></ul></li></ul></li><li><p>一些重要的开发技巧</p><ul><li><p>业务层规划异常，设计异常基类<code>ServiceException</code>，其他新增异常均继承自该基类</p></li><li><p>控制层异常处理，设计控制层基类，利用<code>@ExceptionHandler</code>注解，拦截控制层所有异常进行处理</p></li><li><p>控制层响应数据设计，新建对应数据的类，以<code>JSON</code>形式返回数据，包含<strong>响应状态码、响应状态描述符、响应数据</strong>，响应数据类型未知，采用注解形式；此格式具体应与前端人员进行协商</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="comment">//状态描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//请求返回数据,数据类型位置,泛型</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//捕获异常,异常信息的传递</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message=e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state,String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state, E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state, String message, E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图像上传模块，学会了文件上传前后端之间如何协作，后端存储、前端回显等功能</p></li><li><p>拦截器的实现，对于一个项目安全性考虑，设计对应拦截器，只有登录之后才能访问其他页面</p><ul><li>拦截器如何添加白名单和黑名单</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十八、图像上传功能优化功能实现</title>
      <link href="/2023/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%9B%BE%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BC%98%E5%8C%96/"/>
      <url>/2023/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%9B%BE%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="图像上传功能优化"><a href="#图像上传功能优化" class="headerlink" title="图像上传功能优化"></a>图像上传功能优化</h1><h2 id="优化之前的图片上传模块"><a href="#优化之前的图片上传模块" class="headerlink" title="优化之前的图片上传模块"></a>优化之前的图片上传模块</h2><h3 id="控制层代码"><a href="#控制层代码" class="headerlink" title="控制层代码"></a>控制层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 设置上传文件的最大值 10MB */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_AVATAR_SIZE</span> <span class="operator">=</span> <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="comment">/** 设置允许接收的文件类型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; AVATAR_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/bmp&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MultiPartFile是SpringMVC提供的一个接口，这个接口为我们包装了获取文件类型的数据，任何类型的File都可以接受</span></span><br><span class="line"><span class="comment">     * SpringBoot整合了SpringMVC,只需要在处理请求的方法参数列表上申明一个MultiPartFile的参数</span></span><br><span class="line"><span class="comment">     * SpringBoot会自定将接受的文件数据赋值给这个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_avatar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">alertAvatar</span><span class="params">(MultipartFile file,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.getSize()&gt;MAX_AVATAR_SIZE)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;文件超出大小限制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!AVATAR_TYPE.contains(file.getContentType()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>(<span class="string">&quot;文件类型错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//规定文件存储路径 .../upload/xxx.xx</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent);</span><br><span class="line">    <span class="comment">//parent文件夹不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    String[] splits = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="comment">//文件后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> splits[splits.length-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//生成随机的文件名(为避免不同用户文件名重复导致数据被覆盖丢失</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> uuid+<span class="string">&quot;.&quot;</span>+suffix; <span class="comment">//新的文件名</span></span><br><span class="line">    System.out.println(newFileName);</span><br><span class="line">    <span class="comment">//存储路径</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,newFileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.transferTo(dest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>(<span class="string">&quot;文件读写错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    System.out.println(dest.getPath());</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>+newFileName;</span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line"></span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户头像修改成功&quot;</span>,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户图像在数据库中存在的形式"><a href="#用户图像在数据库中存在的形式" class="headerlink" title="用户图像在数据库中存在的形式"></a>用户图像在数据库中存在的形式</h3><p><img src="/2023/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%9B%BE%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BC%98%E5%8C%96/image-20230815105556661.png" alt="image-20230815105556661"></p><h3 id="获取根目录路径方式"><a href="#获取根目录路径方式" class="headerlink" title="获取根目录路径方式"></a>获取根目录路径方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>通过上面方式获取的图像目录路径在<code>SpringBoot</code>内嵌环境下拿到的是其内嵌<code>Tomcat</code>的临时文件路径，每次启动项目，<code>Tomcat</code>都会创建一个新的临时文件夹，从而导致当前登录无法获取历史上传图像路径</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p><code>SpringBoot</code>启动后，会将<code>COMMON_DOC_ROOTS</code>设置成以下三个位置，如果这三个位置找不到，则会创建临时目录地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] COMMON_DOC_ROOTS = &#123; <span class="string">&quot;src/main/webapp&quot;</span>, <span class="string">&quot;public&quot;</span>,<span class="string">&quot;static&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>SpringBoot 内嵌 Tomcat创建的临时目录</strong></p><p><img src="/2023/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%9B%BE%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BC%98%E5%8C%96/image-20230815110643974.png" alt="image-20230815110643974"></p><h2 id="解决方法一-手动指定存储路径"><a href="#解决方法一-手动指定存储路径" class="headerlink" title="解决方法一:手动指定存储路径"></a>解决方法一:手动指定存储路径</h2><p>1.手动指定固定磁盘路劲去存储文件，不使用<code>String parent = session.getServletContext().getRealPath(&quot;upload&quot;);</code>而使用固定路径<code>String parent = &quot;G:/upload/&quot;;</code></p><p>2.定制对应的配置类，配置<code>Tomacat</code>虚拟目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.configure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解，让SpringBoot识别</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptorConfigure</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">/** 更改配置SpringBoot文件上传虚拟目录 */</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/upload/**&quot;</span>).addResourceLocations(<span class="string">&quot;file:G:/upload/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li><code>addResourceLocations(&quot;file:G:/upload/&quot;)</code>里面的参数必须要写成<code>&quot;file:+路径&quot;</code>的形式，该路径为你上传图片存储的位置</li><li><code>addResourceLocations(&quot;file:G:/upload/&quot;)</code>路径最后面的斜杠必须加</li></ul><p>3.控制层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 设置上传文件的最大值 10MB */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_AVATAR_SIZE</span> <span class="operator">=</span> <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="comment">/** 设置允许接收的文件类型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; AVATAR_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/bmp&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MultiPartFile是SpringMVC提供的一个接口，这个接口为我们包装了获取文件类型的数据，任何类型的File都可以接受</span></span><br><span class="line"><span class="comment">     * SpringBoot整合了SpringMVC,只需要在处理请求的方法参数列表上申明一个MultiPartFile的参数</span></span><br><span class="line"><span class="comment">     * SpringBoot会自定将接受的文件数据赋值给这个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_avatar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">alertAvatar</span><span class="params">(MultipartFile file,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.getSize()&gt;MAX_AVATAR_SIZE)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;文件超出大小限制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!AVATAR_TYPE.contains(file.getContentType()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>(<span class="string">&quot;文件类型错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//规定文件存储路径 .../upload/xxx.xx</span></span><br><span class="line">    <span class="comment">//        String parent = session.getServletContext().getRealPath(&quot;upload&quot;);</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="string">&quot;G:/upload/&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent);</span><br><span class="line">    <span class="comment">//parent文件夹不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    String[] splits = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="comment">//文件后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> splits[splits.length-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//生成随机的文件名(为避免不同用户文件名重复导致数据被覆盖丢失</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> uuid+<span class="string">&quot;.&quot;</span>+suffix; <span class="comment">//新的文件名</span></span><br><span class="line">    System.out.println(newFileName);</span><br><span class="line">    <span class="comment">//存储路径</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,newFileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.transferTo(dest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>(<span class="string">&quot;文件读写错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    System.out.println(dest.getPath());</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>+newFileName;</span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line"></span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户头像修改成功&quot;</span>,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方法二：新建文件夹"><a href="#解决方法二：新建文件夹" class="headerlink" title="解决方法二：新建文件夹"></a>解决方法二：新建文件夹</h2><p>在项目根目录下新建<code>public</code>文件夹，这样在<code>SpringBoot</code>项目启动时不会去创建临时文件夹</p><p><img src="/2023/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/18%E5%9B%BE%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BC%98%E5%8C%96/image-20230815112923608.png" alt="image-20230815112923608"></p><p>此时可以通过<code>String parent = session.getServletContext().getRealPath(&quot;upload&quot;);</code>获取文件存取根路径</p><p>1.定制对应的配置类，配置<code>Tomacat</code>虚拟目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.configure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解，让SpringBoot识别</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptorConfigure</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">/** 更改配置SpringBoot文件上传虚拟目录 */</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/upload/**&quot;</span>).addResourceLocations(<span class="string">&quot;file:G:/store/public/upload/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.控制层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 设置上传文件的最大值 10MB */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_AVATAR_SIZE</span> <span class="operator">=</span> <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="comment">/** 设置允许接收的文件类型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; AVATAR_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/bmp&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MultiPartFile是SpringMVC提供的一个接口，这个接口为我们包装了获取文件类型的数据，任何类型的File都可以接受</span></span><br><span class="line"><span class="comment">     * SpringBoot整合了SpringMVC,只需要在处理请求的方法参数列表上申明一个MultiPartFile的参数</span></span><br><span class="line"><span class="comment">     * SpringBoot会自定将接受的文件数据赋值给这个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_avatar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">alertAvatar</span><span class="params">(MultipartFile file,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.getSize()&gt;MAX_AVATAR_SIZE)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;文件超出大小限制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!AVATAR_TYPE.contains(file.getContentType()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>(<span class="string">&quot;文件类型错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//规定文件存储路径 .../upload/xxx.xx</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">    <span class="comment">//        String parent = &quot;G:/upload/&quot;;</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent);</span><br><span class="line">    <span class="comment">//parent文件夹不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    String[] splits = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="comment">//文件后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> splits[splits.length-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//生成随机的文件名(为避免不同用户文件名重复导致数据被覆盖丢失</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> uuid+<span class="string">&quot;.&quot;</span>+suffix; <span class="comment">//新的文件名</span></span><br><span class="line">    System.out.println(newFileName);</span><br><span class="line">    <span class="comment">//存储路径</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,newFileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.transferTo(dest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>(<span class="string">&quot;文件读写错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    System.out.println(dest.getPath());</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>+newFileName;</span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line"></span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户头像修改成功&quot;</span>,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/weixin_45535665/article/details/124087545">博客1</a></p><p><a href="https://blog.csdn.net/weixin_43272781/article/details/109480082">博客2</a></p><p><a href="https://blog.csdn.net/liuweilong07/article/details/80686998">博客3</a></p><p><a href="https://blog.csdn.net/qq_43290288/article/details/108863221">博客4</a></p>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十三、购物车列表展示功能实现</title>
      <link href="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/"/>
      <url>/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="购物车列表展示"><a href="#购物车列表展示" class="headerlink" title="购物车列表展示"></a>购物车列表展示</h1><p>用户登录之后，进入购物车页面，即将当前用户购物车列表展示在该页面对应位置</p><p><img src="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/13%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/image-20230813150844386.png" alt="image-20230813150844386"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>购物车列表展示页面数据来源于<code>t_product</code>和<code>t_cart</code>两张数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line"> cid,</span><br><span class="line"> uid,</span><br><span class="line"> pid,</span><br><span class="line"> t_cart.price <span class="keyword">AS</span> cartPrice,</span><br><span class="line"> t_cart.num <span class="keyword">AS</span> cartNum, </span><br><span class="line"> t_product.title <span class="keyword">AS</span> productTitle,</span><br><span class="line"> t_product.image <span class="keyword">AS</span> productImage,</span><br><span class="line"> t_product.price <span class="keyword">AS</span> productPrice</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">t_cart <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_product <span class="keyword">ON</span> t_cart.pid<span class="operator">=</span>t_product.id </span><br><span class="line"><span class="keyword">WHERE</span> uid<span class="operator">=</span>? </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">t_cart.modified_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>VO: Value Object，值对象，当进行<code>select</code>查询时，查询的结果数据来自于多张表，发现无法使用某个POJO实体类来接收，POJO实体类不能包含多表查询出来的结果，解决方法是：重新构建一个新的对象存储查询结果对应的映射，这种对象称之为<strong>值对象</strong></p><h2 id="值对象创建"><a href="#值对象创建" class="headerlink" title="值对象创建"></a>值对象创建</h2><p>在包<code>com.bang.store.vo</code>中创建值对象类<code>CartProductVO</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车商品两张表对应的值对象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartProductVO</span> &#123;</span><br><span class="line">    Integer cid;</span><br><span class="line">    Integer uid;</span><br><span class="line">    Integer pid;</span><br><span class="line">    Long cartPrice;</span><br><span class="line">    Integer cartNum;</span><br><span class="line">    String productTitle;</span><br><span class="line">    String productImage;</span><br><span class="line">    Long productPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>CartMapper</code>接口中编写对应的抽象方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询当前用户的购物车数据列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;CartProductVO&gt; <span class="title function_">findVOByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>在<code>CartMapper.xml</code>中编写对应的SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findVOByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bang.store.vo.CartProductVO&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    cid,</span><br><span class="line">    uid,</span><br><span class="line">    pid,</span><br><span class="line">    t_cart.price AS cartPrice,</span><br><span class="line">    t_cart.num AS cartNum,</span><br><span class="line">    t_product.title AS productTitle,</span><br><span class="line">    t_product.image AS productImage,</span><br><span class="line">    t_product.price AS productPrice</span><br><span class="line">    FROM</span><br><span class="line">    t_cart LEFT JOIN t_product ON t_cart.pid=t_product.id</span><br><span class="line">    WHERE uid=#&#123;uid&#125;</span><br><span class="line">    ORDER BY</span><br><span class="line">    t_cart.modified_time DESC;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findVOByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartMapper.findVOByUid(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">        System.out.println(cartProductVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>无新增异常</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>ICartService</code>接口中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户购物车列表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户购物车列表数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;CartProductVO&gt; <span class="title function_">getVOByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CartProductVO&gt; <span class="title function_">getVOByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cartMapper.findVOByUid(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getVOByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartService.getVOByUid(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">        System.out.println(cartProductVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层无新增异常</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /cart/</span><br><span class="line">request method: GET</span><br><span class="line">request params: HttpSession session</span><br><span class="line">response data: new JsonResult&lt;List&lt;CartProductVO&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;&quot;&quot;,&quot;/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;CartProductVO&gt;&gt; <span class="title function_">getVOByUid</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartService.getVOByUid(uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;购物车获取数据成功&quot;</span>,cartProductVOList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>购物车页面一加载，就向后端发送请求，获取当前用户购物车列表数据，并展示在购物车页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">//购物车页面一加载就向后端发送请求</span></span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">showCartList</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showCartList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/cart/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;购物车数据获取成功&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                cartList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;cartList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    htmlContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;input name=\&quot;cids\&quot; value=&#x27;#&#123;cid&#125;&#x27; type=\&quot;checkbox\&quot; class=\&quot;ckitem\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;&lt;img src=\&quot;..#&#123;image&#125;collect.png\&quot; class=\&quot;img-responsive\&quot; /&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;#&#123;title&#125;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;¥&lt;span id=\&quot;goodsPrice#&#123;cid&#125;\&quot;&gt;#&#123;price&#125;&lt;/span&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;input id=\&quot;price-#&#123;cid&#125;\&quot; type=\&quot;button\&quot; value=\&quot;-\&quot; class=\&quot;num-btn\&quot; onclick=\&quot;reduceNum(1)\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;input id=\&quot;goodsCount#&#123;cid&#125;\&quot; type=\&quot;text\&quot; size=\&quot;2\&quot; readonly=\&quot;readonly\&quot; class=\&quot;num-text\&quot; value=\&quot;#&#123;num&#125;\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;input id=\&quot;price+#&#123;cid&#125;\&quot; class=\&quot;num-btn\&quot; type=\&quot;button\&quot; value=\&quot;+\&quot; onclick=\&quot;addNum(1)\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;&lt;span id=\&quot;goodsCast#&#123;cid&#125;\&quot;&gt;#&#123;totalPrice&#125;&lt;/span&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;input type=\&quot;button\&quot; onclick=\&quot;delCartItem(this)\&quot; class=\&quot;cart-del btn btn-default btn-xs\&quot; value=\&quot;删除\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;cid&#125;&quot;</span>,cartList[i].<span class="property">cid</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;image&#125;&quot;</span>,cartList[i].<span class="property">productImage</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;title&#125;&quot;</span>,cartList[i].<span class="property">productTitle</span>+(cartList[i].<span class="property">cartPrice</span>-cartList[i].<span class="property">productPrice</span>));</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;num&#125;&quot;</span>,cartList[i].<span class="property">cartNum</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;price&#125;&quot;</span>,cartList[i].<span class="property">cartPrice</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;totalPrice&#125;&quot;</span>,cartList[i].<span class="property">cartNum</span>*cartList[i].<span class="property">cartPrice</span>);</span><br><span class="line">                    $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">append</span>(htmlContent);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;购物车获取数据失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;购物车获取数据发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十四、更新购物车商品数量功能实现</title>
      <link href="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E6%9B%B4%E6%96%B0%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%95%86%E5%93%81%E6%95%B0%E9%87%8F/"/>
      <url>/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E6%9B%B4%E6%96%B0%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%95%86%E5%93%81%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="更新购物车商品数量"><a href="#更新购物车商品数量" class="headerlink" title="更新购物车商品数量"></a>更新购物车商品数量</h1><p>用户点击商品数量加减按钮，向后端发送请求，更新购物车数据表</p><p><img src="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/14%E6%9B%B4%E6%96%B0%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%95%86%E5%93%81%E6%95%B0%E9%87%8F/image-20230813194840858.png" alt="image-20230813194840858"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>本质是更新语句，更具cid跟新num字段值，在前面功能模块中已经实现</p><p>在执行更新操作之前，还需要判断当前购物车记录在数据库表中是否存在，本质是查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_cart <span class="keyword">where</span> cid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询对应的购物车记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid 购物车id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Cart <span class="title function_">findByCid</span><span class="params">(Integer cid)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;findByCid&quot;</span> resultMap=<span class="string">&quot;cartPojoMap&quot;</span>&gt;</span><br><span class="line">    select * from t_cart where cid=#&#123;cid&#125;;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByCid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> cartMapper.findByCid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(cart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>1.数据更新过程中会发生异常，此异常类在此前的功能模块中已经定义</p><p>2.查询数据与登录用户不匹配引发的异常，此异常在此前功能模块中也已经定义</p><p>3.查询的购物车记录在数据库中不存在，创建对应的异常类<code>CartNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CartNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">CartNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改变购物车商品数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid 购物车记录id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> changeNum 商品数量改变数目,为正则是新增，为负则是减少</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作之后，购物车中该商品的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">alterNum</span><span class="params">(Integer cid,Integer uid,String username,Integer changeNum)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">alterNum</span><span class="params">(Integer cid, Integer uid, String username, Integer changeNum)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询数据库中该购物车记录是否存在</span></span><br><span class="line">    <span class="type">Cart</span> <span class="variable">result</span> <span class="operator">=</span> cartMapper.findByCid(cid);</span><br><span class="line">    <span class="keyword">if</span>(result==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CartNotFoundException</span>(<span class="string">&quot;数据库该数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断该条记录是否属于当前用户</span></span><br><span class="line">    <span class="keyword">if</span>(!result.getUid().equals(uid))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;非法数据访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.改变商品数量</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.updateNumByCid(cid, result.getNum() + changeNum, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;数据更新过程发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.getNum()+changeNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertNum</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> cartService.alterNum(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;admin&quot;</span>, -<span class="number">20</span>);</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>在控制层基类<code>BaseController</code>中添加购物车数据不存在异常<code>CartNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CartNotFoundException) &#123;</span><br><span class="line">    result.setState(<span class="number">9000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;购物车数据不存在&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /cart/alter<span class="built_in">_</span>num/&#123;cid&#125;/&#123;opcode&#125;  //restful数据访问,cid代表购物车数据id,opcode:1代表增加商品数量，0代表较小商品数量</span><br><span class="line">request method: GET</span><br><span class="line">request params: Integer cid,Integr opcode,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Integer&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/alter_num/&#123;cid&#125;/&#123;opcode&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Integer&gt; <span class="title function_">alterNum</span><span class="params">(<span class="meta">@PathVariable</span> Integer cid,<span class="meta">@PathVariable</span> Integer opcode,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(opcode==<span class="number">0</span>)&#123; <span class="comment">//减少商品数量</span></span><br><span class="line">        num = cartService.alterNum(cid,uid,username,-<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opcode==<span class="number">1</span>) &#123; <span class="comment">//增加商品数量</span></span><br><span class="line">        num = cartService.alterNum(cid,uid,username,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;商品数量改变成功&quot;</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在<code>cart.html</code>页面点击增加或者减少按钮，改变购物车中对应商品的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">showCartList</span><span class="params">()</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">&quot;/cart/&quot;</span></span><br><span class="line">            ,type: <span class="string">&quot;GET&quot;</span></span><br><span class="line">                ,success: function (data)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(data.state == <span class="number">200</span>)&#123;</span><br><span class="line">                        alert(<span class="string">&quot;购物车数据获取成功&quot;</span>);</span><br><span class="line">                        $(<span class="string">&quot;#cart-list&quot;</span>).empty();</span><br><span class="line">                        cartList = data.data;</span><br><span class="line">                        <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;cartList.length;i++)&#123;</span><br><span class="line">                            htmlContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;input name=\&quot;cids\&quot; value=&#x27;#&#123;cid&#125;&#x27; type=\&quot;checkbox\&quot; class=\&quot;ckitem\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;&lt;img src=\&quot;..#&#123;image&#125;collect.png\&quot; class=\&quot;img-responsive\&quot; /&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;#&#123;title&#125;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;¥&lt;span id=\&quot;goodsPrice#&#123;cid&#125;\&quot;&gt;#&#123;price&#125;&lt;/span&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&#x27;&lt;input id=\&quot;price-#&#123;cid&#125;\&quot; type=\&quot;button\&quot; value=\&quot;-\&quot; class=\&quot;num-btn\&quot; onclick=&quot;chageNum(#&#123;cid&#125;,0)&quot;/&gt;\n&#x27;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;input id=\&quot;goodsCount#&#123;cid&#125;\&quot; type=\&quot;text\&quot; size=\&quot;2\&quot; readonly=\&quot;readonly\&quot; class=\&quot;num-text\&quot; value=\&quot;#&#123;num&#125;\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;input id=\&quot;price+#&#123;cid&#125;\&quot; class=\&quot;num-btn\&quot; type=\&quot;button\&quot; value=\&quot;+\&quot; onclick=\&quot;chageNum(#&#123;cid&#125;,1)\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;&lt;span id=\&quot;goodsCast#&#123;cid&#125;\&quot;&gt;#&#123;totalPrice&#125;&lt;/span&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;input type=\&quot;button\&quot; class=\&quot;cart-del btn btn-default btn-xs\&quot; value=\&quot;删除\&quot; /&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                            htmlContent = htmlContent.replaceAll(<span class="string">&quot;#&#123;cid&#125;&quot;</span>,cartList[i].cid);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;image&#125;&quot;</span>,cartList[i].productImage);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;title&#125;&quot;</span>,cartList[i].productTitle+(cartList[i].cartPrice-cartList[i].productPrice));</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;num&#125;&quot;</span>,cartList[i].cartNum);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;price&#125;&quot;</span>,cartList[i].cartPrice);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;totalPrice&#125;&quot;</span>,cartList[i].cartNum*cartList[i].cartPrice);</span><br><span class="line">                            $(<span class="string">&quot;#cart-list&quot;</span>).append(htmlContent);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        alert(<span class="string">&quot;购物车获取数据失败 &quot;</span>+data.message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        ,error:function (xmh)&#123;</span><br><span class="line">            alert(<span class="string">&quot;购物车获取数据发生未知异常&quot;</span>+xmh.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">chageNum</span><span class="params">(cid,opcode)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">&quot;/cart/alter_num/&quot;</span>+cid+<span class="string">&quot;/&quot;</span>+opcode</span><br><span class="line">            ,type: <span class="string">&quot;GET&quot;</span></span><br><span class="line">                ,dataType: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">                    ,success: function (data)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(data.state == <span class="number">200</span>)&#123;</span><br><span class="line">                            <span class="comment">//改变页面数值</span></span><br><span class="line">                            $(<span class="string">&quot;#goodsCount&quot;</span>+cid).val(data.data);</span><br><span class="line">                            <span class="type">let</span> <span class="variable">price</span> <span class="operator">=</span> $(<span class="string">&quot;#goodsPrice&quot;</span>+cid).html();</span><br><span class="line">                            <span class="type">let</span> <span class="variable">totalPrice</span> <span class="operator">=</span> price*data.data;</span><br><span class="line">                            $(<span class="string">&quot;#goodsCast&quot;</span>+cid).html(totalPrice);</span><br><span class="line">                            alert(<span class="string">&quot;购物车商品数量修改成功&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            alert(<span class="string">&quot;购物车商品数量修改失败 &quot;</span>+data.message);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">        ,error:function (xmh)&#123;</span><br><span class="line">            alert(<span class="string">&quot;购物车商品数量修改发生未知异常&quot;</span>+xmh.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十五、显示勾选的购物车数据功能实现</title>
      <link href="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E6%98%BE%E7%A4%BA%E5%8B%BE%E9%80%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E6%98%BE%E7%A4%BA%E5%8B%BE%E9%80%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="显示勾选的购物车数据"><a href="#显示勾选的购物车数据" class="headerlink" title="显示勾选的购物车数据"></a>显示勾选的购物车数据</h1><p>用户在购物车页面勾选指定商品，然后点击<strong>结算</strong>按钮，跳转到订单结算页面，展示用户勾选的数据。订单结算页面数据的展示内容还是来自于购物车数据表</p><p><img src="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E6%98%BE%E7%A4%BA%E5%8B%BE%E9%80%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%B0%E6%8D%AE/image-20230814091515399.png" alt="image-20230814091515399" style="zoom:80%;"></p><p><img src="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E6%98%BE%E7%A4%BA%E5%8B%BE%E9%80%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%B0%E6%8D%AE/image-20230814091541864.png" alt="image-20230814091541864" style="zoom:80%;"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划需要执行的SQL语句"><a href="#规划需要执行的SQL语句" class="headerlink" title="规划需要执行的SQL语句"></a>规划需要执行的SQL语句</h3><p>两个页面跳转，传递用户勾选商品的<code>cid</code>列表，然后根据<code>cid</code>查询对应的数据，本质是一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">        cid,</span><br><span class="line">        uid,</span><br><span class="line">        pid,</span><br><span class="line">        t_cart.price <span class="keyword">AS</span> cartPrice,</span><br><span class="line">        t_cart.num <span class="keyword">AS</span> cartNum,</span><br><span class="line">        t_product.title <span class="keyword">AS</span> productTitle,</span><br><span class="line">        t_product.image <span class="keyword">AS</span> productImage,</span><br><span class="line">        t_product.price <span class="keyword">AS</span> productPrice</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">        t_cart <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_product <span class="keyword">ON</span> t_cart.pid<span class="operator">=</span>t_product.id</span><br><span class="line"><span class="keyword">WHERE</span> cid <span class="keyword">in</span> ?</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">        t_cart.modified_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>CartMapper</code>接口中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据cid列表查询对应的购物车数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cids 购物车数据id列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;CartProductVO&gt; <span class="title function_">findByCids</span><span class="params">(Integer[] cids)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>在<code>CartMapper.xml</code>中编写对应的SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCids&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bang.store.vo.CartProductVO&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    cid,</span><br><span class="line">    uid,</span><br><span class="line">    pid,</span><br><span class="line">    t_cart.price AS cartPrice,</span><br><span class="line">    t_cart.num AS cartNum,</span><br><span class="line">    t_product.title AS productTitle,</span><br><span class="line">    t_product.image AS productImage,</span><br><span class="line">    t_product.price AS productPrice</span><br><span class="line">    FROM</span><br><span class="line">    t_cart LEFT JOIN t_product ON t_cart.pid=t_product.id</span><br><span class="line">    WHERE cid in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    ORDER BY</span><br><span class="line">    t_cart.modified_time DESC;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByCids</span><span class="params">()</span>&#123;</span><br><span class="line">    Integer[] cids = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartMapper.findByCids(cids);</span><br><span class="line">    <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">        System.out.println(cartProductVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>没有需要定义的新异常</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>ICartService</code>中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据cid列表查询购物车数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cids 购物车id列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;CartProductVO&gt; <span class="title function_">getVOByCids</span><span class="params">(Integer uid,Integer[] cids)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CartProductVO&gt; <span class="title function_">getVOByCids</span><span class="params">(Integer uid, Integer[] cids)</span> &#123;</span><br><span class="line">    <span class="comment">//查询购物车数据列表</span></span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartMapper.findByCids(cids);</span><br><span class="line">    <span class="comment">//删除不匹配的数据</span></span><br><span class="line">    Iterator&lt;CartProductVO&gt; iterator = cartProductVOList.listIterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="type">CartProductVO</span> <span class="variable">cartProductVO</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        <span class="keyword">if</span>(!cartProductVO.getUid().equals(uid))&#123;</span><br><span class="line">            iterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cartProductVOList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>List</code>列表循环删除不符合条件元素的参考做法:<a href="https://www.cnblogs.com/boboblue/p/14145397.html">参考资料</a></p><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getVOByCids</span><span class="params">()</span>&#123;</span><br><span class="line">    Integer uid=<span class="number">1</span>;</span><br><span class="line">    Integer[] cids = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartService.getVOByCids(uid, cids);</span><br><span class="line">    <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">        System.out.println(cartProductVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层无新增异常，无需进行异常处理</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /cart/list</span><br><span class="line">request method: POST</span><br><span class="line">request params: List&lt;Integer&gt; cids,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;List&lt;CartProductVO&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;CartProductVO&gt;&gt; <span class="title function_">getVOByCids</span><span class="params">(Integer[] cids,HttpSession session)</span>&#123;</span><br><span class="line">    List&lt;CartProductVO&gt; cartProductVOList = cartService.getVOByCids(getUidFromSession(session), cids);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;数据获取成功&quot;</span>,cartProductVOList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-2"><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h3><p>先登录，再访问<code>http://localhost:8080/cart/list?cids=2&amp;cids=3</code>，会进行参数自动映射成整数数组(这里参数cids定义用数组不用列表的原因：url中参数可以自动映射成数组，而无法映射成list)</p><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>1.<code>cart.html</code>页面点击结算按钮，跳转到<code>orderConfirm.html</code>订单确认界面</p><p>2.在<code>orderConfirm.html</code>界面，根据上个界面传过来的<code>cid</code>列表，向后端页面发送请求，获取对应购物车数据列表并展示在页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页面一加载就向后端发送请求</span></span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">showCartList</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showCartList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/cart/list&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>) <span class="comment">//获取表单参数列表</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;购物车数据获取成功&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> cartList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">let</span> totalCount=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">let</span> totalMoney=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;cartList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> htmlContent=<span class="string">&#x27;&lt;tr&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;td&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;td&gt;#&#123;title&#125;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;td&gt;¥&lt;span&gt;#&#123;price&#125;&lt;/span&gt;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;td&gt;#&#123;num&#125;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;td&gt;&lt;span&gt;#&#123;totalprice&#125;&lt;/span&gt;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27;&lt;/tr&gt;&#x27;</span></span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;image&#125;&quot;</span>,cartList[i].<span class="property">productImage</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;title&#125;&quot;</span>,cartList[i].<span class="property">productTitle</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;price&#125;&quot;</span>,cartList[i].<span class="property">cartPrice</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;num&#125;&quot;</span>,cartList[i].<span class="property">cartNum</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;totalprice&#125;&quot;</span>,cartList[i].<span class="property">cartPrice</span>*cartList[i].<span class="property">cartNum</span>);</span><br><span class="line">                    $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">append</span>(htmlContent);</span><br><span class="line">                    totalCount+=cartList[i].<span class="property">cartNum</span>;</span><br><span class="line">                    totalMoney+=cartList[i].<span class="property">cartNum</span>*cartList[i].<span class="property">cartPrice</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                $(<span class="string">&quot;#all-count&quot;</span>).<span class="title function_">html</span>(totalCount);</span><br><span class="line">                $(<span class="string">&quot;#all-price&quot;</span>).<span class="title function_">html</span>(totalMoney);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;购物车获取数据失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;购物车获取数据发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="订单确认页面用户收货地址列表—前端页面"><a href="#订单确认页面用户收货地址列表—前端页面" class="headerlink" title="订单确认页面用户收货地址列表—前端页面"></a>订单确认页面用户收货地址列表—前端页面</h2><p><img src="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/15%E6%98%BE%E7%A4%BA%E5%8B%BE%E9%80%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%95%B0%E6%8D%AE/image-20230814111207840.png" alt="image-20230814111207840" style="zoom:80%;"></p><p>根据用户<code>uid</code>查询用户列表，展示在<code>orderConfirm.html</code>的下拉列表中，根据用户<code>uid</code>查询对应的地址列表在后端已有对应的请求接口<code>/address/get_by_uid</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面一加载就向后端发送请求</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">showCartList</span>();</span><br><span class="line">    <span class="title function_">showAddressList</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showAddressList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;收获地址数据获取成功&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> htmlContent=<span class="string">&#x27;&lt;option&gt;#&#123;name&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&#123;tag&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&#123;address&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&#123;phone&#125;&lt;/option&gt;&#x27;</span>;</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;name&#125;&quot;</span>,addressList[i].<span class="property">name</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;tag&#125;&quot;</span>,addressList[i].<span class="property">tag</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;address&#125;&quot;</span>,addressList[i].<span class="property">address</span>);</span><br><span class="line">                    htmlContent = htmlContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;phone&#125;&quot;</span>,addressList[i].<span class="property">phone</span>);</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(htmlContent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;收货地址数据获取失败&quot;</span> +data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;收货地址数据获取发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十六、订单模块功能实现</title>
      <link href="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97/"/>
      <url>/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h1><h2 id="数据库表创建"><a href="#数据库表创建" class="headerlink" title="数据库表创建"></a>数据库表创建</h2><p><img src="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97/image-20230814154832948.png" alt="image-20230814154832948"></p><p><img src="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/16%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97/image-20230814154847205.png" alt="image-20230814154847205"></p><h2 id="订单实体类创建"><a href="#订单实体类创建" class="headerlink" title="订单实体类创建"></a>订单实体类创建</h2><p>在<code>com.bang.store.pojo</code>包下新建对应的实体类<code>Order</code>和<code>OrderItem</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer oid;</span><br><span class="line">    Integer uid;</span><br><span class="line">    String recvName;</span><br><span class="line">    String recvPhone;</span><br><span class="line">    String recvProvince;</span><br><span class="line">    String recvCity;</span><br><span class="line">    String recvArea;</span><br><span class="line">    String recvAddress;</span><br><span class="line">    Long totalPrice;</span><br><span class="line">    Integer status;</span><br><span class="line">    Date orderTime;</span><br><span class="line">    Date payTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    Integer oid;</span><br><span class="line">    Integer pid;</span><br><span class="line">    String title;</span><br><span class="line">    String image;</span><br><span class="line">    Long price;</span><br><span class="line">    Integer num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划需要执行的SQL语句"><a href="#规划需要执行的SQL语句" class="headerlink" title="规划需要执行的SQL语句"></a>规划需要执行的SQL语句</h3><p>创建订单的过程本质是一种数据插入的操作，即<code>insert</code>语句</p><p>1.数据插入订单表<code>t_order</code>中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_order(uid,recv_name,recv_phone,recv_province,recv_city,recv_area</span><br><span class="line">                   ,recv_address,recv_price,total_price,status,</span><br><span class="line">                   order_time,pay_time</span><br><span class="line">                   ,created_user,created_time,modified_user,modified_time)</span><br><span class="line">                   <span class="keyword">values</span>(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);</span><br></pre></td></tr></table></figure><p>2.数据插入订单项表<code>t_order_item</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_order_item(oid,pid,title,image,price,num,created_user,created_time,modified_user,modified_time) <span class="keyword">values</span>(?,?,?,?,?,?,?,?,?,?);</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建订单的持久层接口<code>OrderMapper</code>，在其中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.OrderItem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单功能持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据插入订单数据库表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> order 订单数据对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insertOrder</span><span class="params">(Order order)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据插入订单项数据库表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderItem 订单项数据对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insertOrderItem</span><span class="params">(OrderItem orderItem)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>新建映射文件<code>OrderMapper.xml</code>，在其中编写订单相关的SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;oid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_phone&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvPhone&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_province&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvProvince&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_city&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvCity&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_area&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvArea&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;recv_address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;recvAddress&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total_price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;totalPrice&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pay_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;payTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderItemPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.OrderItem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertOrder&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;oid&quot;</span>&gt;</span></span><br><span class="line">        insert into t_order(uid,recv_name,recv_phone,recv_province,recv_city,recv_area</span><br><span class="line">        ,recv_address,recv_price,total_price,status,</span><br><span class="line">        order_time,pay_time</span><br><span class="line">        ,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values(#&#123;uid&#125;,#&#123;recvName&#125;,#&#123;recvPhone&#125;,#&#123;recvProvince&#125;,#&#123;recvCity&#125;,#&#123;recvArea&#125;,#&#123;recvAddress&#125;,#&#123;recvPrice&#125;</span><br><span class="line">        ,#&#123;totalPrice&#125;,#&#123;status&#125;,#&#123;orderTime&#125;,#&#123;payTime&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertOrderItem&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into t_order_item(oid,pid,title,image,price,num,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values(#&#123;oid&#125;,#&#123;pid&#125;,#&#123;title&#125;,#&#123;image&#125;,#&#123;price&#125;,#&#123;num&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.OrderItem;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUid(<span class="number">2</span>);</span><br><span class="line">        order.setRecvName(<span class="string">&quot;张佳玮&quot;</span>);</span><br><span class="line">        order.setCreatedUser(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        order.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> orderMapper.insertOrder(order);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">        System.out.println(order.getOid()); <span class="comment">//可以获取对应的主键值oid</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOrderItem</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">        orderItem.setOid(<span class="number">1</span>);</span><br><span class="line">        orderItem.setPid(<span class="number">2</span>);</span><br><span class="line">        orderItem.setTitle(<span class="string">&quot;测试用例&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> orderMapper.insertOrderItem(orderItem);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>插入语句异常类，<code>InsertException</code>在前面的功能模块中已经定义过了</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>1.用户收货地址数据，需要依赖于前端页面传递过来的<code>aid</code>，所以首先对于<code>IAddressService</code>接口新增业务方法<code>getByAid</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid查询对应收货地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 收货地址对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Address <span class="title function_">getByAid</span><span class="params">(Integer aid,Integer uid)</span>;</span><br></pre></td></tr></table></figure><p>2.创建订单业务层接口<code>IOrderService</code>，在其中申明对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 用户地址id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cids 用户结算订单购物车商品id列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 订单数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Address <span class="title function_">creatOrder</span><span class="params">(Integer uid,String username,Integer aid,Integer[] cids)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>1.在<code>AddressServiceImpl</code>中编写<code>getByAid</code>抽象方法的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IOrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 用户地址id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cids 用户结算订单购物车商品id列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 订单数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Order <span class="title function_">creatOrder</span><span class="params">(Integer uid, String username, Integer aid, Integer[] cids)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.创建<code>IOrderService</code>的实现类<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.OrderItem;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IAddressService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ICartService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.vo.CartProductVO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IAddressService addressService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ICartService cartService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">creatOrder</span><span class="params">(Integer uid, String username, Integer aid, Integer[] cids)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建order对象</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        <span class="comment">//2.获取地址数据</span></span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressService.getByAid(aid, uid);</span><br><span class="line">        <span class="comment">//3.获取订单商品列表数据</span></span><br><span class="line">        List&lt;CartProductVO&gt; cartProductVOList = cartService.getVOByCids(uid, cids);</span><br><span class="line">        <span class="comment">//4.计算商品总价</span></span><br><span class="line">        Long totalPrice=<span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">            totalPrice+=cartProductVO.getCartNum()*cartProductVO.getCartPrice();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        order.setUid(uid);</span><br><span class="line">        order.setRecvName(address.getName());</span><br><span class="line">        order.setRecvPhone(address.getPhone());</span><br><span class="line">        order.setRecvProvince(address.getProvinceName());</span><br><span class="line">        order.setRecvCity(address.getCityName());</span><br><span class="line">        order.setRecvArea(address.getAreaName());</span><br><span class="line">        order.setRecvAddress(address.getAddress());</span><br><span class="line">        order.setTotalPrice(totalPrice);</span><br><span class="line">        order.setStatus(<span class="number">0</span>);</span><br><span class="line">        order.setOrderTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="comment">//        order.setPayTime(new Date());</span></span><br><span class="line">        order.setCreatedUser(username);</span><br><span class="line">        order.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        order.setModifiedUser(username);</span><br><span class="line">        order.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> orderMapper.insertOrder(order);</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;订单数据插入发生未知错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.为每个结算商品创建一个订单项</span></span><br><span class="line">        <span class="keyword">for</span> (CartProductVO cartProductVO : cartProductVOList) &#123;</span><br><span class="line">            <span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">            orderItem.setOid(order.getOid());</span><br><span class="line">            orderItem.setPid(cartProductVO.getPid());</span><br><span class="line">            orderItem.setTitle(cartProductVO.getProductTitle());</span><br><span class="line">            orderItem.setImage(cartProductVO.getProductImage());</span><br><span class="line">            orderItem.setPrice(cartProductVO.getCartPrice());</span><br><span class="line">            orderItem.setNum(cartProductVO.getCartNum());</span><br><span class="line">            orderItem.setCreatedUser(username);</span><br><span class="line">            orderItem.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            orderItem.setModifiedUser(username);</span><br><span class="line">            orderItem.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            rows = orderMapper.insertOrderItem(orderItem);</span><br><span class="line">            <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;订单详细项数据插入发生未知错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressService.getByAid(<span class="number">8</span>,<span class="number">4</span>);</span><br><span class="line">    System.out.println(address);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.mockito.internal.matchers.Or;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IOrderService orderService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">creatOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        Integer uid=<span class="number">3</span>;</span><br><span class="line">        String username=<span class="string">&quot;adminTest&quot;</span>;</span><br><span class="line">        Integer aid=<span class="number">11</span>;</span><br><span class="line">        Integer[] cids=&#123;<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.creatOrder(uid, username, aid, cids);</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层无新增异常，无需新增异常处理逻辑</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /order/create</span><br><span class="line">request method: POST</span><br><span class="line">request params: Integer aid,Integer[] cids,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Order&gt;()</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在<code>com.bang.store.controller</code>包下新建订单对应的控制层类<code>OrderController</code>，在其中编写对应处理请求方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单功能对应控制层类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IOrderService orderService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Order&gt; <span class="title function_">createOrder</span><span class="params">(Integer aid, Integer[] cids, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.creatOrder(uid, username, aid, cids);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;订单创建成功&quot;</span>,order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在订单确认页面<code>OrderConfirm.html</code>页面点击结算按钮，向后端发送创建订单请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-create-order&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">createOrder</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createOrder</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// alert(&quot;点击结算按钮&quot;);</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/order/create?aid=&quot;</span>+$(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">val</span>()+<span class="string">&quot;&amp;&quot;</span>+location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>)</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;订单创建成功&quot;</span>);</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;订单号:&quot;</span>+data.<span class="property">data</span>.<span class="property">oid</span>+<span class="string">&quot;,支付金额:￥&quot;</span>+data.<span class="property">data</span>.<span class="property">totalPrice</span>+<span class="string">&quot;.收款方圆心电脑商城&quot;</span>)</span><br><span class="line">                location.<span class="property">href</span>=<span class="string">&quot;payment.html&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;订单创建失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;订单创建发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十七、统计业务方法耗时功能实现</title>
      <link href="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E7%BB%9F%E8%AE%A1%E4%B8%9A%E5%8A%A1%E6%96%B9%E6%B3%95%E8%80%97%E6%97%B6/"/>
      <url>/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/17%E7%BB%9F%E8%AE%A1%E4%B8%9A%E5%8A%A1%E6%96%B9%E6%B3%95%E8%80%97%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="统计业务方法耗时"><a href="#统计业务方法耗时" class="headerlink" title="统计业务方法耗时"></a>统计业务方法耗时</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>检测整个项目所有业务层方法的耗时(开始执行时间和结束执行时间之差)，并且不会影响原始所有代码的逻辑</p><p>使用<code>Spring AOP</code>技术来实现，面向切面编程 </p><p><code>AOP</code>使用示例:</p><ul><li>导入对应依赖maven`坐标</li><li>定义一个类，将这个类作为切面类</li><li>在这个类中定义切面方法(5类)<ul><li>切面方法的修饰符必须是<code>public</code></li><li>切面方法的返回值可以是<code>void</code>或者<code>Object</code>，如果这个方法被<code>@Around</code>注解修饰则此方法必须神明为<code>Object</code>类型，反之随意</li><li>切面方法名称可以自定义</li><li>切面方法可以接收参数，参数是<code>ProceedingJoinPoint proceedingJoinPoint</code>，注解<code>@Around</code>修饰的切面方法必须要传递该参数，其他类型切面方法不做此要求</li></ul></li><li>在切面方法中编辑需要执行的功能代码逻辑</li><li>通过连接点来连接目标方法</li></ul><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="导入对应的依赖"><a href="#导入对应的依赖" class="headerlink" title="导入对应的依赖"></a>导入对应的依赖</h3><p>在项目的<code>pom.xml</code>文件中添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义切面类和对应的切面方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务方法计时切面类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.bang.store.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">timeCount</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//获取目标方法的方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> proceedingJoinPoint.getSignature().getName();</span><br><span class="line">        Object object;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//方法执行前时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            object = proceedingJoinPoint.proceed();</span><br><span class="line">            <span class="comment">//方法执行结束时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;方法&quot;</span>+methodName+<span class="string">&quot;执行耗时:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十二、购物车模块功能实现</title>
      <link href="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A8%A1%E5%9D%97/"/>
      <url>/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h1><h2 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h2><p><img src="/2023/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/12%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A8%A1%E5%9D%97/image-20230813101249386.png" alt="image-20230813101249386" style="zoom:80%;"></p><h2 id="实体类创建"><a href="#实体类创建" class="headerlink" title="实体类创建"></a>实体类创建</h2><p>在<code>com.bang.store.pojo</code>中创建购物车对应的实体类<code>Cart</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cart</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer cid;</span><br><span class="line">    Integer uid;</span><br><span class="line">    Integer pid;</span><br><span class="line">    Long price;</span><br><span class="line">    Integer num;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决实体类<code>tostring</code>无法打印父类属性的问题</p><p><a href="https://blog.csdn.net/m4330187/article/details/118742946?ydreferer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8%3D">资料参考</a></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>1.用户在商品详细页点击<strong>加入购物车</strong>按钮，像后端发送请求，将对应数据插入数据库，本质是<code>insert</code>语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_cart(uid,pid,price,num,created_user,created_time,modified_user,modified_time) <span class="keyword">values</span>(?,?,?,?,?,?,?,?);</span><br></pre></td></tr></table></figure><p> 2.当前商品在数据库中已经存在时，直接更新数据库中属性num的值即可</p><p>为什么根据cid来更新？</p><p>因为在决定执行插入或者更新操作之前，需要先查询商品在数据库中是否存在，如果存在则执行更新操作，查询即可获取当前记录的cid</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_cart <span class="keyword">set</span> num<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> cid<span class="operator">=</span>?</span><br></pre></td></tr></table></figure><p>3.查询当前商品在购物车中是否存在</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_cart <span class="keyword">where</span> uid<span class="operator">=</span>? <span class="keyword">and</span> pid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建购物车模块业务层接口<code>CartMapper</code>，在其中定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Cart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CartMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询某个商品在购物车中是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 购物车商品数据,不存在返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Cart <span class="title function_">findByUidPid</span><span class="params">(Integer uid, Integer pid)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 享购物车中插入商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cart 商品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(Cart cart)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新购物车商品数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid 购物车数据id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 商品数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 修改者用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 修改操作时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">updateNumByCid</span><span class="params">(Integer cid, Integer num, String modifiedUser, Date modifiedTime)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件的配置"><a href="#SQL映射文件的配置" class="headerlink" title="SQL映射文件的配置"></a>SQL映射文件的配置</h3><p>在<code>resource/static/mapper</code>文件夹下新建映射文件<code>CartMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.CartMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;cartPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Cart&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;cid&quot;</span>&gt;</span></span><br><span class="line">        insert into t_cart(uid,pid,price,num,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values(#&#123;uid&#125;,#&#123;pid&#125;,#&#123;price&#125;,#&#123;num&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateNumByCid&quot;</span>&gt;</span></span><br><span class="line">        update t_cart set num=#&#123;num&#125;,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125; where cid=#&#123;cid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUidPid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;cartPojoMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_cart where uid=#&#123;uid&#125; and pid=#&#123;pid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Cart;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    CartMapper cartMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        cart.setUid(<span class="number">1</span>);</span><br><span class="line">        cart.setPid(<span class="number">2</span>);</span><br><span class="line">        cart.setNum(<span class="number">5</span>);</span><br><span class="line">        cart.setPrice(<span class="number">32L</span>);</span><br><span class="line">        cart.setCreatedUser(<span class="string">&quot;管理者&quot;</span>);</span><br><span class="line">        cart.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        cart.setModifiedUser(<span class="string">&quot;管理者&quot;</span>);</span><br><span class="line">        cart.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.insert(cart);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUidPid</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> cartMapper.findByUidPid(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(cart);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNumByCid</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.updateNumByCid(<span class="number">1</span>, <span class="number">15</span>, <span class="string">&quot;管理员&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>插入数据时异常,<code>InsertException</code>在此前模块已经定义过</p><p>更新数据时异常，<code>UpdateException</code>，在此前模块也已经定义过</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>编写购物车业务层接口<code>com.bang.store.service.IAddressService</code>，在其中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将商品添加至购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 商品数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add2Cart</span><span class="params">(Integer uid,String username,Integer pid,Integer num)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.CartMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Cart;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ICartService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.ProductNotFoundException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UpdateException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    CartMapper cartMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ProductMapper productMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add2Cart</span><span class="params">(Integer uid, String username, Integer pid, Integer num)</span> &#123;</span><br><span class="line">        <span class="comment">//查询当前商品记录在数据库中是否存在</span></span><br><span class="line">        <span class="type">Cart</span> <span class="variable">result</span> <span class="operator">=</span> cartMapper.findByUidPid(uid, pid);</span><br><span class="line">        <span class="keyword">if</span>(result==<span class="literal">null</span>)&#123; <span class="comment">//商品不存在执行插入操作</span></span><br><span class="line">            <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">            <span class="comment">//查询商品信息</span></span><br><span class="line">            <span class="comment">//Q:为什么这里价格不从前端页面传回数据?</span></span><br><span class="line">            <span class="comment">//A:这里可以从前端传递,但是如果功能扩展，需要根据pid查询商品信息，查询商品是否下架或者商品数量是否有货等</span></span><br><span class="line">            <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findById(pid);</span><br><span class="line">            <span class="keyword">if</span>(product==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProductNotFoundException</span>(<span class="string">&quot;商品不存在异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            cart.setUid(uid);</span><br><span class="line">            cart.setPid(pid);</span><br><span class="line">            cart.setPrice(product.getPrice());</span><br><span class="line">            cart.setNum(num);</span><br><span class="line">            cart.setCreatedUser(username);</span><br><span class="line">            cart.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            cart.setModifiedUser(username);</span><br><span class="line">            cart.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.insert(cart);</span><br><span class="line">            <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;商品插入未知异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">//商品存在则执行更新操作</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">cid</span> <span class="operator">=</span> result.getCid();</span><br><span class="line">            num+=result.getNum();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.updateNumByCid(cid, num, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;购物车数据更新发生未知异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.CartMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ICartService cartService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add2Cart</span><span class="params">()</span>&#123;</span><br><span class="line">        Integer uid=<span class="number">1</span>;</span><br><span class="line">        String username=<span class="string">&quot;admin1&quot;</span>;</span><br><span class="line">        Integer pid=<span class="number">100000424</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">        cartService.add2Cart(uid,username,pid,num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p><code>InsertException</code>和<code>UpdateExcpetion</code>的异常处理在前面模块中已经编写，业务层无新增异常类型</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /cart/add<span class="built_in">_</span>to<span class="built_in">_</span>cart</span><br><span class="line">request method: GET</span><br><span class="line">request params: Integer pid,Integer num,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>编写购物车控制层接口<code>com.bang.store.controller.CartController</code>并继承控制层基类<code>BaseController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ICartService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ICartService cartService;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;/add_to_cart&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">add2cart</span><span class="params">(Integer pid, Integer num, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        cartService.add2Cart(uid,username,pid,num);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;商品成功添加到购物车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在商品详情页界面<code>product.html</code>中，用户点击添加购物车按钮，则向后端发送请求，将对应商品数据存入购物车数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击加入一样购物车按钮，向后端发送ajax请求</span></span><br><span class="line">$(<span class="string">&quot;#btn-add-to-cart&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">addToCart</span>(pid,$(<span class="string">&quot;#num&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addToCart</span>(<span class="params">pid,num</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/cart/add_to_cart&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="string">&quot;pid&quot;</span>: pid</span><br><span class="line">            ,<span class="string">&quot;num&quot;</span>: num</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(data.<span class="property">data</span>.<span class="property">message</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;商品添加至购物车失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;商品添加至购物车发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、热销商品和商品详情展示功能实现</title>
      <link href="/2023/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/"/>
      <url>/2023/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="热销商品排行"><a href="#热销商品排行" class="headerlink" title="热销商品排行"></a>热销商品排行</h1><p><img src="/2023/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/image-20230811225640333.png" alt="image-20230811225640333" style="zoom:80%;"></p><p><img src="/2023/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/11%E7%83%AD%E9%94%80%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C/image-20230811225700167.png" alt="image-20230811225700167" style="zoom:80%;"></p><h2 id="商品数据库创建"><a href="#商品数据库创建" class="headerlink" title="商品数据库创建"></a>商品数据库创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_product (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  category_id <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类id&#x27;</span>,</span><br><span class="line">  item_type <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品系列&#x27;</span>,</span><br><span class="line">  title <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品标题&#x27;</span>,</span><br><span class="line">  sell_point <span class="type">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品卖点&#x27;</span>,</span><br><span class="line">  price <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品单价&#x27;</span>,</span><br><span class="line">  num <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存数量&#x27;</span>,</span><br><span class="line">  image <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图片路径&#x27;</span>,</span><br><span class="line">  status <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;商品状态  1：上架   2：下架   3：删除&#x27;</span>,</span><br><span class="line">  priority <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;显示优先级&#x27;</span>,</span><br><span class="line">  created_time datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  modified_time datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  created_user <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">  modified_user <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后修改人&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h2 id="商品实体类的创建"><a href="#商品实体类的创建" class="headerlink" title="商品实体类的创建"></a>商品实体类的创建</h2><p>在<code>com.bang.store.pojo</code>包下新建<code>Product</code>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品对应实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    Integer category_id;</span><br><span class="line">    String item_type;</span><br><span class="line">    String title;</span><br><span class="line">    String sell_point;</span><br><span class="line">    Long price;</span><br><span class="line">    Integer num;</span><br><span class="line">    String image;</span><br><span class="line">    Integer status;</span><br><span class="line">    Integer priority;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>热销商品展示，本质是查询语句，根据优先级对所有已上架的商品进行排序，选取优先级最高的四条记录在页面进行展示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_product <span class="keyword">where</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> priority <span class="keyword">DESC</span> limit <span class="number">0</span>,<span class="number">4</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>新建商品持久层接口<code>ProductMapper</code>，在其中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询热销商品前四位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 前四位热销商品数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Product&gt; <span class="title function_">findHotProductList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>在<code>resource/mapper</code>文件夹下创建映射文件<code>ProductMapper.xml</code>，编写对应SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;productPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Product&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;categoryId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;item_type&quot;</span> <span class="attr">property</span>=<span class="string">&quot;itemType&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sell_point&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sellPoint&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findHotProductList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;productPojoMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_product where status=1 order by priority DESC limit 0,4;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ProductMapper productMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHotProductList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Product&gt; productList = productMapper.findHotProductList();</span><br><span class="line">        <span class="keyword">for</span> (Product product : productList) &#123;</span><br><span class="line">            System.out.println(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>无明显异常</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>新建商品业务层接口<code>IProductService</code>，在其中申明对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IProductService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询返回热销商品的前四条数据列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Product&gt; <span class="title function_">findHotProducts</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IProductService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IProductService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ProductMapper productMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">findHotProducts</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Product&gt; hotProductList = productMapper.findHotProductList();</span><br><span class="line">        <span class="comment">//前端页面只需要id、title、price和image四个字段，</span></span><br><span class="line">        <span class="comment">//为了减小数据传输带宽消耗，可以将其他字段设置为null</span></span><br><span class="line">        <span class="comment">//这里为了便利，我们不做此处理</span></span><br><span class="line">        <span class="keyword">return</span> hotProductList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IProductService productService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hotProductList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Product&gt; hotProducts = productService.findHotProducts();</span><br><span class="line">        <span class="keyword">for</span> (Product hotProduct : hotProducts) &#123;</span><br><span class="line">            System.out.println(hotProduct);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层无新增异常，所以控制层无新增异常处理逻辑</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /product</span><br><span class="line">request method: GET</span><br><span class="line">request params: null</span><br><span class="line">response data: new JsonResult&lt;List&lt;Product&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>创建商品控制层类<code>ProductController</code>，继承于控制层基类<code>BaseController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IProductService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IProductService productService;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;Product&gt;&gt; <span class="title function_">findHotProducts</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Product&gt; hotProducts = productService.findHotProducts();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;热销商品数据获取成功&quot;</span>,hotProducts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p><code>index.html</code>页面一加载，就像后端发送请求，获取热销商品数据并展示在前端页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(document).ready(function ()&#123;</span><br><span class="line">    showHotList();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function <span class="title function_">showHotList</span><span class="params">()</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">&quot;/product/&quot;</span></span><br><span class="line">            ,type: <span class="string">&quot;GET&quot;</span></span><br><span class="line">                ,success: function (data)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(data.state == <span class="number">200</span>)&#123;</span><br><span class="line">                        alert(<span class="string">&quot;热销商品数据获取成功&quot;</span>);</span><br><span class="line">                        <span class="comment">//将数据展示在对应的页面</span></span><br><span class="line">                        <span class="comment">//清空原始页面</span></span><br><span class="line">                        $(<span class="string">&quot;#hot-list&quot;</span>).empty();</span><br><span class="line">                        <span class="type">let</span> <span class="variable">hotProducts</span> <span class="operator">=</span> data.data;</span><br><span class="line">                        <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;hotProducts.length;i++)&#123;</span><br><span class="line">                            <span class="type">let</span> <span class="variable">htmlContent</span> <span class="operator">=</span> <span class="string">&quot;&lt;div class=\&quot;col-md-12\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;div class=\&quot;col-md-7 text-row-2\&quot;&gt;&lt;a href=\&quot;product.html？id#&#123;id&#125;\&quot;&gt;#&#123;title&#125;&lt;/a&gt;&lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;div class=\&quot;col-md-2\&quot;&gt;¥#&#123;price&#125;&lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;div class=\&quot;col-md-3\&quot;&gt;&lt;img src=../#&#123;image&#125;/collect.png class=\&quot;img-responsive\&quot; /&gt;&lt;/div&gt;\n&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;&lt;/div&gt;&quot;</span></span><br><span class="line">                                htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;title&#125;&quot;</span>,hotProducts[i].title);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;price&#125;&quot;</span>,hotProducts[i].price);</span><br><span class="line">                            htmlContent = htmlContent.replace(<span class="string">&quot;#&#123;image&#125;&quot;</span>,<span class="string">&quot;../&quot;</span>+hotProducts[i].image);</span><br><span class="line">                            $(<span class="string">&quot;#hot-list&quot;</span>).append(htmlContent);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        alert(<span class="string">&quot;热销商品数据获取失败 &quot;</span>+data.message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        ,error:function (xmh)&#123;</span><br><span class="line">            alert(<span class="string">&quot;热销商品数据获取发生未知错误&quot;</span>+xmh.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="热销商品详情展示"><a href="#热销商品详情展示" class="headerlink" title="热销商品详情展示"></a>热销商品详情展示</h1><p>用户点击热销商品列表中的某个商品名，即跳转到对应的商品详情页</p><p>热销商品列表页和商品详情页之间的关联,通过<code>&lt;a href=\&quot;product.html？id#&#123;id&#125;\&quot;&gt;#&#123;title&#125;&lt;/a&gt;</code>进行关联</p><h2 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句-1"><a href="#规划执行的SQL语句-1" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>根据用户点击商品<code>id</code>查询对应的商品信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_product <span class="keyword">where</span> id<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-2"><a href="#接口和抽象方法-2" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>ProductMapper</code>接口中编写对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商品信息数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Product <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置-1"><a href="#SQL映射文件配置-1" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;productPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_product where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试-2"><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findById(<span class="number">10000017</span>);</span><br><span class="line">    System.out.println(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层-1"><a href="#业务层-1" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常-1"><a href="#规划异常-1" class="headerlink" title="规划异常"></a>规划异常</h3><p>查询时，数据库中可能不存在该商品信息，此时应触发<code>ProductNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProductNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ProductNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-3"><a href="#接口和抽象方法-3" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>IProductAddress</code>中编写对应抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Product <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现-1"><a href="#抽象方法实现-1" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Product <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findById(id);</span><br><span class="line">    <span class="keyword">if</span>(product==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProductNotFoundException</span>(<span class="string">&quot;商品不存在异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-3"><a href="#单元测试-3" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.getById(<span class="number">10000017</span>);</span><br><span class="line">    System.out.println(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层-1"><a href="#控制层-1" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理-1"><a href="#异常处理-1" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层新增<code>ProductNotFound</code>异常，需要在控制层基类<code>BaseController</code>中添加对应的异常处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ProductNotFoundException) &#123;</span><br><span class="line">    result.setState(<span class="number">8000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;商品不存在&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求-1"><a href="#设计请求-1" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/&#123;id&#125;</span><br><span class="line">request method: GET</span><br><span class="line">request params: Integer id</span><br><span class="line">response data: new JsonResult&lt;Product&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求-1"><a href="#处理请求-1" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Product&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;商品数据获取成功&quot;</span>,product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面-1"><a href="#前端页面-1" class="headerlink" title="前端页面"></a>前端页面</h2><p>通过<code>$.getUrlParam(&quot;id&quot;)</code>获取传递的参数值(商品堵塞<code>id</code>)</p><p>需要引入相关的库文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/jquery-getUrlParam.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id =$.<span class="title function_">getUrlParam</span>(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>编写商品数据加载代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//解析url传递的参数值</span></span><br><span class="line">    <span class="keyword">let</span> id =$.<span class="title function_">getUrlParam</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="title function_">showProduct</span>(id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showProduct</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/product/&quot;</span>+id</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;商品数据获取成功&quot;</span>);</span><br><span class="line">                <span class="comment">//将数据展示在对应的页面</span></span><br><span class="line">                $(<span class="string">&quot;#product-title&quot;</span>).<span class="title function_">html</span>(data.<span class="property">data</span>.<span class="property">title</span>);</span><br><span class="line">                $(<span class="string">&quot;#product-sell-point&quot;</span>).<span class="title function_">html</span>(data.<span class="property">data</span>.<span class="property">sellPoint</span>);</span><br><span class="line">                $(<span class="string">&quot;#product-price&quot;</span>).<span class="title function_">html</span>(data.<span class="property">data</span>.<span class="property">price</span>);</span><br><span class="line">                <span class="comment">//图片属性</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#product-image-&quot;</span>+i).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;..&quot;</span>+data.<span class="property">data</span>.<span class="property">image</span>+i+<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">                    $(<span class="string">&quot;#product-image-&quot;</span>+i+<span class="string">&quot;-big&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;..&quot;</span>+data.<span class="property">data</span>.<span class="property">image</span>+i+<span class="string">&quot;_big.png&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;商品数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;商品数据获取发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十、收货地址删除功能的实现</title>
      <link href="/2023/08/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%A0%E9%99%A4/"/>
      <url>/2023/08/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="收货地址删除"><a href="#收货地址删除" class="headerlink" title="收货地址删除"></a>收货地址删除</h1><p>用户点击删除按钮，向后端发送请求，删除用户该条地址记录，同时前端页面该地址删除</p><p><img src="/2023/08/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/10%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%A0%E9%99%A4/image-20230811152159496.png" alt="image-20230811152159496"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>1.删除该地址之前需要判断该数据在数据库中是否存在，此功能在设置默认地址模块已经实现</p><p>2.判断该条地址是否与当前登录用户相匹配，此功能在设置默认地址模块也已经实现</p><p>3.删除对应的地址数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> aid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>4.如果用户删除的是默认收货地址，则将剩下的地址中的某一条设置为新的默认地址，规则可以自定义：将最新修改时间的收货地址设置为默认的收货地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> uid<span class="operator">=</span>? <span class="keyword">order</span> <span class="keyword">by</span> modified_time <span class="keyword">DESC</span> limit <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>5.如果用户本身只有一条收货地址，删除之后，不用进行后续操作；查询用户地址数目语句在前面新增地址功能模块已经实现过了</p><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>AddressMapper</code>类中定义对应抽象方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对应的地址记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">deleteByAid</span><span class="params">(Integer aid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询某个用户最新修改的地址记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询的最新修改地址数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Address <span class="title function_">findLastModified</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL映射文件配置"><a href="#SQL映射文件配置" class="headerlink" title="SQL映射文件配置"></a>SQL映射文件配置</h3><p>在<code>AddressMapper.xml</code>中编写对应的SQL映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByAid&quot;</span>&gt;</span></span><br><span class="line">    delete from t_address where aid=#&#123;aid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findLastModified&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;addressPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_address where uid=#&#123;uid&#125; order by modified_time DESC limit 0,1;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">aid</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.deleteByAid(aid);</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findLastModified</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findLastModified(<span class="number">3</span>);</span><br><span class="line">    System.out.println(address);</span><br><span class="line">    System.out.println(address.getModifiedTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p> 当前数据不存在异常；地址数据与用户不匹配异常在之前功能模块中已经定义过了</p><p>删除过程中可能发生未知错误引发异常，定义对应的异常类<code>DeleteException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">DeleteException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p><code>在IAddressService</code>接口中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户指定的地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址数据id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer aid,Integer uid,String username)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer aid, Integer uid, String username)</span> &#123;</span><br><span class="line">    <span class="comment">//1.删除地址数据是否存在</span></span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findByAid(aid);</span><br><span class="line">    <span class="keyword">if</span>(address==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressNotFoundException</span>(<span class="string">&quot;地址数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断当前地址数据是否属于登陆的用户</span></span><br><span class="line">    <span class="keyword">if</span>(!address.getUid().equals(uid))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;非法数据访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.删除指定地址数据</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.deleteByAid(aid);</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeleteException</span>(<span class="string">&quot;删除过程发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果删除是非默认地址，则无需进行后续操作</span></span><br><span class="line">    <span class="keyword">if</span>(address.getIsDefault()==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//4.查询用户所剩地址数目</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//5.查询最新修改记录的数据</span></span><br><span class="line">        <span class="type">Address</span> <span class="variable">lastModifiedAddress</span> <span class="operator">=</span> addressMapper.findLastModified(uid);</span><br><span class="line">        <span class="comment">//6.将最新修改的地址数据设置为默认收货地址</span></span><br><span class="line">        rows = addressMapper.updateDefaultByAid(lastModifiedAddress.getAid(), username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;数据更新发生未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">aid</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">    Integer uid=<span class="number">3</span>;</span><br><span class="line">    String username=<span class="string">&quot;管理员二号&quot;</span>;</span><br><span class="line">    addressService.delete(aid,uid,username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层新增<code>DeleteException</code>，在控制基类<code>BaseController</code>中添加对应的异常处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DeleteException)&#123;</span><br><span class="line">    result.setState(<span class="number">7003</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;数据删除过程发生未知错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/delete/&#123;aid&#125;  <span class="params">#</span>restful风格数据请求</span><br><span class="line">request method: GET</span><br><span class="line">request params: Integer aid,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;()</span><br></pre></td></tr></table></figure><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/delete/&#123;aid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;aid&quot;)</span> Integer aid,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    addressService.delete(aid,uid,username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;地址数据删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在<code>address.html</code>编写对应的页面逻辑</p><p>在删除按钮组件添加<code>onclick</code>属性，绑定对应删除逻辑函数</p><p>组件添加<code>onclick</code>属性，绑定事件处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="comment">//清空原始内容</span></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> trContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">tag</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">address</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">phone</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-edit\&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a onclick=&#x27;del(#&#123;aid&#125;)&#x27; class=\&quot;btn btn-xs add-del btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-trash-o\&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a onclick=&#x27;setDefault(#&#123;aid&#125;)&#x27; class=\&quot;btn btn-xs add-def btn-default\&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    trContent = trContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;aid&#125;&quot;</span>,addressList[i].<span class="property">aid</span>);</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(trContent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第一个地址默认为默认地址，所以其所在的默认地址按钮需要隐藏</span></span><br><span class="line">                <span class="comment">//某个元素隐藏，采用hide()方法</span></span><br><span class="line">                $(<span class="string">&quot;.add-def:eq(0)&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>编写删除按钮事件处理函数<code>del</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">del</span>(<span class="params">aid</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/delete/&quot;</span>+aid</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;删除地址成功&quot;</span>);</span><br><span class="line">                <span class="comment">//刷新页面，展示地址列表</span></span><br><span class="line">                <span class="title function_">showAddress</span>()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;删除地址失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;删除地址发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九、设置默认收货地址功能的实现</title>
      <link href="/2023/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/09%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/"/>
      <url>/2023/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/09%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="设置默认收货地址"><a href="#设置默认收货地址" class="headerlink" title="设置默认收货地址"></a>设置默认收货地址</h1><p>点击<strong>设为默认</strong>按钮，当前地址设置为默认，后面的按钮隐藏，其他的地址全部显示该按钮</p><p><img src="/2023/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/09%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80/image-20230810231339259.png" alt="image-20230810231339259"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>1.检测用户想设置为默认地址的数据在数据库中是否存在，本质是一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> aid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>2.将用户选择的地址设为默认地址之前，先将该用户所有的收货地址全部设置为非默认</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_address <span class="keyword">set</span> is_default<span class="operator">=</span><span class="number">0</span> <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>3.将用户选择的该条地址设置为默认</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_address <span class="keyword">set</span> is_default<span class="operator">=</span><span class="number">1</span>,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> aid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>AddressMapper</code>接口中申明对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid查询收货地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 记录存在则返回对应地址数据，反之返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Address <span class="title function_">findByAid</span><span class="params">(Integer aid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将某个用户所有地址均设置为非默认</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateNoneDefaulit</span><span class="params">(Integer uid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将用户某条地址设置为默认</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 修改者名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 记录修改时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateDefaultByAid</span><span class="params">(Integer aid, String modifiedUser, Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射"><a href="#配置SQL映射" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><p>在<code>AddressMapper.xml</code>中编写对应的映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByAid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;addressPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_address where aid=#&#123;aid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateNoneDefaulit&quot;</span>&gt;</span></span><br><span class="line">    update t_address set is_default=0 where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateDefaultByAid&quot;</span>&gt;</span></span><br><span class="line">    update t_address set is_default=1,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125; where aid=#&#123;aid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findByAid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(address);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNoneDefaulit</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.updateNoneDefaulit(<span class="number">2</span>);</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDefaultByAid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.updateDefaultByAid(<span class="number">3</span>, <span class="string">&quot;管理员&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>1.数据更新过程中可能发生未知异常，<code>UpdateException</code>，此异常类在其他功能中已经定义过了</p><p>2.访问的收货地址不属于当前登录的用户，非法访问异常<code>AccessDeniedException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非法访问异常:</span></span><br><span class="line"><span class="comment"> *      可能由于其他模块存在BUG，导致展示的数据不属于当前登录用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccessDeniedException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AccessDeniedException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.当前收货地址在数据库不存在所引发的异常，<code>AddressNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前地址数据在数据库中不存在所引发的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AddressNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>IAddressService</code>接口中定义对应的抽象方法</p><p>业务逻辑：根据<code>aid</code>查询当前地址记录是否存在，不存在触发<code>AddressNotFoundException</code>；判断当前地址是否属于当前登录的用户，不属于触发<code>AccessDeniedExcption</code>;否则，首先将当前用户所有收获地址全部设为非默认，然后再将当前用户选择的地址设置为默认</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更改当前用户的默认地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 地址编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 操作者姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDefault</span><span class="params">(Integer aid,Integer uid,String username)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDefault</span><span class="params">(Integer aid, Integer uid, String username)</span> &#123;</span><br><span class="line">    <span class="comment">//1.查询当前地址记录是否存在</span></span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findByAid(aid);</span><br><span class="line">    <span class="keyword">if</span>(address==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressNotFoundException</span>(<span class="string">&quot;当前地址不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断当前地址是否属于该用户</span></span><br><span class="line">    <span class="keyword">if</span>(!address.getUid().equals(uid))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;拒绝访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.将该用户所有地址设置为非默认</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.updateNoneDefaulit(uid);</span><br><span class="line">    <span class="keyword">if</span>(rows==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;数据更新发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.将用户选择的收货地址设置为默认</span></span><br><span class="line">    rows = addressMapper.updateDefaultByAid(aid, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;数据更新发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">setDefault</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">aid</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;管理员&quot;</span>;</span><br><span class="line">    addressService.setDefault(aid,uid,username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>在控制层基类<code>BaseController</code>中增加新的异常处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AddressNotFoundException)&#123;</span><br><span class="line">    result.setState(<span class="number">7001</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;收货地址不存在&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccessDeniedException)&#123;</span><br><span class="line">    result.setState(<span class="number">7002</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;非法数据访问&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/set<span class="built_in">_</span>default/&#123;aid&#125;   //采用RestFul风格进行访问  </span><br><span class="line">request method: GET</span><br><span class="line">request params: @PathVariable(&quot;aid&quot;) Integer aid,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;()</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//采用restful风格进行数据传输</span></span><br><span class="line"><span class="comment">//采用注解 @PathVariable进行参数和数据之间的映射</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/set_default/&#123;aid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@PathVariable(&quot;aid&quot;)</span> Integer aid, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    addressService.setDefault(aid,uid,username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;地址设置默认成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>用户点击<code>Address.html</code>页面中的设置默认按钮，会向后端服务器发送请求</p><p>给页面中的设置默认组件添加<code>onclick()</code>函数，然后绑定对应的事件处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">showAddress</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="comment">//清空原始内容</span></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> trContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">tag</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">address</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">phone</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-edit\&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs add-del btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-trash-o\&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a onclick=&#x27;setDefault(#&#123;aid&#125;)&#x27; class=\&quot;btn btn-xs add-def btn-default\&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    trContent = trContent.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;aid&#125;&quot;</span>,addressList[i].<span class="property">aid</span>);</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(trContent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第一个地址默认为默认地址，所以其所在的默认地址按钮需要隐藏</span></span><br><span class="line">                <span class="comment">//某个元素隐藏，采用hide()方法</span></span><br><span class="line">                $(<span class="string">&quot;.add-def:eq(0)&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认按钮点击事件响应函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setDefault</span>(<span class="params">aid</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/set_default/&quot;</span>+aid</span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;默认地址设置成功&quot;</span>);</span><br><span class="line">                <span class="comment">//刷新页面，展示地址列表</span></span><br><span class="line">                <span class="title function_">showAddress</span>()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;默认地址设置失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;默认地址设置失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、收获地址列表展示功能的实现</title>
      <link href="/2023/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/08%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/"/>
      <url>/2023/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/08%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="收获地址列表展示"><a href="#收获地址列表展示" class="headerlink" title="收获地址列表展示"></a>收获地址列表展示</h1><p>用户收货地址展示页面</p><p><img src="/2023/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/08%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/image-20230809233924765.png" alt="image-20230809233924765" style="zoom: 80%;"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>用户收货地址页面展示，本质上是SQL查询语句，按照<code>is_default</code>字段进行排序，因为按照逻辑默认收货地址应该排在第一个;其余地址按照创建时间进行排序，最近创建的排在前面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> uid<span class="operator">=</span>? <span class="keyword">order</span> <span class="keyword">by</span> is_default <span class="keyword">DESC</span>,created_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>AddressMapper</code>接口中定义抽象方法<code>findByUid</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询当前用户的收货地址列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户拥有地址列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;Address&gt; <span class="title function_">findByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="SQL关系映射"><a href="#SQL关系映射" class="headerlink" title="SQL关系映射"></a>SQL关系映射</h3><p>在<code>AddressMapper.xml</code>文件中编写抽象方法对应的映射语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;addressPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_default&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDefault&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 部分属性，实体类与数据库表命名不一致，需要编写映射规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;addressPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_address where uid=#&#123;uid&#125; order by is_default DESC,created_time DESC;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Address&gt; addressList = addressMapper.findByUid(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (Address address : addressList) &#123;</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>无额外的异常发生</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在接口<code>IAddressService</code>中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前用户拥有的所有收货地址列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 收获地址列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;Address&gt; <span class="title function_">getByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>在实现类实现对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">getByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    List&lt;Address&gt; addressList = addressMapper.findByUid(uid);</span><br><span class="line">    <span class="comment">//前端只需展示:地址类型、收货人姓名、详细地址、联系电话、是否默认这几个字段的信息</span></span><br><span class="line">    <span class="comment">//为了节省传输带宽和提高效率，将其他属性值进行清空</span></span><br><span class="line">    <span class="comment">//清空字段太多，其实这里也可以在持久层的SQL语句上进行处理，只查询对应的那几个字段，这样其他字段默认为null,这样可能造成复用困难</span></span><br><span class="line">    <span class="comment">//如果后续其他位置需要address对象其他信息，则不建议在持久层只查询几个字段</span></span><br><span class="line">    <span class="keyword">for</span> (Address address : addressList) &#123;</span><br><span class="line">        address.setAid(<span class="literal">null</span>);</span><br><span class="line">        address.setUid(<span class="literal">null</span>);</span><br><span class="line">        address.setProvinceCode(<span class="literal">null</span>);</span><br><span class="line">        address.setCityCode(<span class="literal">null</span>);</span><br><span class="line">        address.setAreaCode(<span class="literal">null</span>);</span><br><span class="line">        address.setTel(<span class="literal">null</span>);</span><br><span class="line">        address.setCreatedUser(<span class="literal">null</span>);</span><br><span class="line">        address.setCreatedTime(<span class="literal">null</span>);</span><br><span class="line">        address.setModifiedUser(<span class="literal">null</span>);</span><br><span class="line">        address.setModifiedTime(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> addressList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Address&gt; addressList = addressService.getByUid(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (Address address : addressList) &#123;</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>无新增异常</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/get<span class="built_in">_</span>by<span class="built_in">_</span>uid</span><br><span class="line">request method: GET</span><br><span class="line">request params: HttpSession session</span><br><span class="line">response data: new JsonResult&lt;List&lt;Address&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get_by_uid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;Address&gt;&gt; <span class="title function_">getByUid</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//获取当前登录用户id</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    List&lt;Address&gt; addressList = addressService.getByUid(uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户地址列表请求成功&quot;</span>,addressList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>一加载<code>address.html</code>页面，就向后端发送请求，获取当前用户的收货地址列表，并展示在页面对应位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/get_by_uid&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="comment">//清空原始内容</span></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">                <span class="keyword">let</span> addressList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;addressList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">let</span> trContent = <span class="string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">tag</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">address</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&quot;</span>+addressList[i].<span class="property">phone</span>+<span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-edit\&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs add-del btn-info\&quot;&gt;&lt;span class=\&quot;fa fa-trash-o\&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t\t&lt;td&gt;&lt;a class=\&quot;btn btn-xs add-def btn-default\&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\t\t\t\t\t\t\t\t&lt;/tr&gt;&quot;</span>;</span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(trContent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第一个地址默认为默认地址，所以其所在的默认地址按钮需要隐藏</span></span><br><span class="line">                <span class="comment">//某个元素隐藏，采用hide()方法</span></span><br><span class="line">                $(<span class="string">&quot;.add-def:eq(0)&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户地址获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、新增收货地址功能的实现</title>
      <link href="/2023/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="新增收货地址"><a href="#新增收货地址" class="headerlink" title="新增收货地址"></a>新增收货地址</h1><p>收货地址管理页面</p><p><img src="/2023/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230808193330806.png" alt="image-20230808193330806" style="zoom:80%;"></p><p>点击新增收货地址按钮，出现新的页面，地址信息编辑表单</p><p><img src="/2023/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230808193413631.png" alt="image-20230808193413631" style="zoom:80%;"></p><h2 id="各功能的开发顺序"><a href="#各功能的开发顺序" class="headerlink" title="各功能的开发顺序"></a>各功能的开发顺序</h2><p>收货地址模块的功能：列表的展示、修改、删除、设置默认、新增收货地址</p><p>功能模块的开发顺序：新增收货地址-》列表展示-》设置默认收货地址-》删除收货地址-》修改收货地址</p><h2 id="数据库表的创建"><a href="#数据库表的创建" class="headerlink" title="数据库表的创建"></a>数据库表的创建</h2><p><img src="/2023/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230808194228462.png" alt="image-20230808194228462" style="zoom: 50%;"></p><h2 id="收货地址实体类的创建"><a href="#收货地址实体类的创建" class="headerlink" title="收货地址实体类的创建"></a>收货地址实体类的创建</h2><p>创建收货地址实体类<code>com.bang.store.pojo.Address</code>,继承自<code>BasePojo</code>基类，因为其同样含有四个公共字段 </p><p>属性名与数据表名一致，只是注意数据库字段一般命名方式为<code>xx_xx</code>，而java采用驼峰命名法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    Integer aid;</span><br><span class="line">    Integer uid;</span><br><span class="line">    String name;</span><br><span class="line">    String provinceName;</span><br><span class="line">    String provinceCode;</span><br><span class="line">    String cityName;</span><br><span class="line">    String cityCode;</span><br><span class="line">    String areaName;</span><br><span class="line">    String areaCode;</span><br><span class="line">    String zip;</span><br><span class="line">    String address;</span><br><span class="line">    String phone;</span><br><span class="line">    String tel;</span><br><span class="line">    String tag;</span><br><span class="line">    Integer isDefault;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>新增收货地址本质上是将表单数据插入对应数据库表中，对应插入语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address(uid,name,province_name,province_code,city_name,city_code,area_name,area_code,zip,address,phone,tel,tag,is_default,created_user,created_time,modified_user,modified_time) <span class="keyword">values</span>(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);</span><br></pre></td></tr></table></figure><p>各个平台用户收货地址的保存是有上限的，在这里我们规定每个用户最多只能有3条(便于测试，实际上允许的地址数据会多很多)地址数据， 所以总体逻辑发生改变，即插入数据之前都需判断当前用户地址数目</p><p>本质上为依据用户id(uid)查询对应数据条数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> t_address <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建一个新的接口<code>AddressMapper</code>，在该接口中定义上述两个<code>sql</code>语句对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址模块的mapper接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入用户收货地址到数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 用户地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(Address address)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询当前用户收货地址条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户收货地址条数 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">countByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射"><a href="#配置SQL映射" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><p>在<code>resource/mapper</code>下创建地址映射文件<code>Address.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.AddressMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;addressPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_default&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDefault&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from t_address where uid=#&#123;uid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- useGeneratedKeys=&quot;true&quot; keyProperty=&quot;uid&quot; 开启某个字段作为主键并值自动递增，并指明字段名称  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;aid&quot;</span>&gt;</span></span><br><span class="line">        insert into t_address(uid,name,province_name,province_code,city_name,city_code,</span><br><span class="line">        area_name,area_code,zip,address,phone,tel,tag,is_default,created_user,created_time,modified_user,modified_time)</span><br><span class="line">        values(#&#123;uid&#125;,#&#123;name&#125;,#&#123;provinceName&#125;,#&#123;provinceCode&#125;,#&#123;cityName&#125;,#&#123;cityCode&#125;,</span><br><span class="line">        #&#123;areaName&#125;,#&#123;areaCode&#125;,#&#123;zip&#125;,#&#123;address&#125;,#&#123;phone&#125;,#&#123;tel&#125;,#&#123;tag&#125;,#&#123;isDefault&#125;</span><br><span class="line">        ,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>在<code>test/java</code>下创建<code>com.bang.store.mapper.AddressMapperTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AddressMapper addressMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countByUid</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前用户地址数目:&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address.setUid(<span class="number">1</span>);</span><br><span class="line">        address.setProvinceName(<span class="string">&quot;安徽省&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.insert(address);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><p>如果用户插入的是第一条收货地址，需要将当前地址设置为默认的收货地址(即当前地址的<code>is_default</code>字段设置为1)。如果查询到的结果大于3，这是需要抛出业务层的异常<code>AddressCountLimit</code>表明单个用户插入地址数据已达上限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单个用户地址数目超过上限异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressCountLimitException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressCountLimit</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AddressCountLimit</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>地址数据插入过程的异常，<code>InsertException</code>在之前用户信息的功能模块中已经定义过了</p><h3 id="接口和抽象方法-1"><a href="#接口和抽象方法-1" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建地址业务逻辑接口<code>IAddressService</code>，在其中定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增收货地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 用户地址数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Integer uid, String username, Address address)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>创建接口实现类，<code>AddressServiceImpl</code>，在其中实现接口抽象方法</p><p>在配置文件<code>application.properties</code>文件中定义收货地址数量上限</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user.address.max-count</span>:<span class="string">3</span></span><br></pre></td></tr></table></figure><p><code>Spring</code>读取配置文件数据方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer maxCount;</span><br></pre></td></tr></table></figure><p>业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AddressMapper addressMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址上限设置在application.properties配置文件里</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxCount;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Integer uid, String username, Address address)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询当前用户拥有地址数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">        <span class="comment">//超出地址上限，报异常</span></span><br><span class="line">        <span class="keyword">if</span>(count&gt;maxCount)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressCountLimitException</span>(<span class="string">&quot;收货地址数目超出规定上限&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首条收货地址设置为默认收货地址</span></span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">            address.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        address.setCreatedUser(username);</span><br><span class="line">        address.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        address.setModifiedUser(username);</span><br><span class="line">        address.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//插入地址数据</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.insert(address);</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;地址数据插入未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IAddressService addressService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;孙权&quot;</span>;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        address.setName(<span class="string">&quot;王伟&quot;</span>);</span><br><span class="line"></span><br><span class="line">        addressService.addAddress(uid,username,address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层抛出的收货地址数目大于规定最大阈值的异常处理,在控制层基类<code>BaseController</code>中定义对应的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AddressCountLimitException) &#123;</span><br><span class="line">    result.setState(<span class="number">7000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;收获地址数目超出上限&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /address/add<span class="built_in">_</span>new<span class="built_in">_</span>address</span><br><span class="line">request method: POST</span><br><span class="line">request params: Address address,HttpSession session</span><br><span class="line">response data: new JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>新建收货地址控制层类<code>AddressController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/address&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IAddressService addressService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add_new_address&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">addAddress</span><span class="params">(Address address, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//获取uid和用户名</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        <span class="comment">//调用业务层,插入地址数据</span></span><br><span class="line">        addressService.addAddress(uid,username,address);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;新增收货地址成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-add-new-address&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/add_new_address&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-add-new-address&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="获取省市区列表"><a href="#获取省市区列表" class="headerlink" title="获取省市区列表"></a>获取省市区列表</h1><h2 id="省市区列表数据库表的创建"><a href="#省市区列表数据库表的创建" class="headerlink" title="省市区列表数据库表的创建"></a>省市区列表数据库表的创建</h2><p>创建数据库存储省市区列表数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_dict_district (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  parent <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  code <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/07%E6%96%B0%E5%A2%9E%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230809192240718.png" alt="image-20230809192240718"></p><p>数据库字段说明</p><ul><li><code>parent</code>表示父区域代码号</li><li><code>code</code>表示区域自己的代码号</li><li><code>name</code>区域名称</li></ul><h2 id="省市区列表实体类的创建"><a href="#省市区列表实体类的创建" class="headerlink" title="省市区列表实体类的创建"></a>省市区列表实体类的创建</h2><p>创建对应的实体类<code>com.bang.store.pojo.district</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省市区地址实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">District</span> &#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String parent;</span><br><span class="line">    String code;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表持久层"><a href="#省市区列表持久层" class="headerlink" title="省市区列表持久层"></a>省市区列表持久层</h2><h3 id="规划执行的SQL语句-1"><a href="#规划执行的SQL语句-1" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>查询语句，根据父代号进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_dict_district <span class="keyword">where</span> parent<span class="operator">=</span>? <span class="keyword">order</span> <span class="keyword">by</span> code <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-2"><a href="#接口和抽象方法-2" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>创建新的接口<code>DistrictMapper</code>，在其中定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省市区地址持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DistrictMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父代号查询所有的省市区列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;District&gt; <span class="title function_">findByParent</span><span class="params">(String parent)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射-1"><a href="#配置SQL映射-1" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><p>在<code>resource/mapper</code>文件夹下创建<code>DistrictMappper.xml</code>文件，编写对应的SQL映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.DistrictMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByParent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bang.store.pojo.District&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dict_district where parent=#&#123;parent&#125; order by code ASC;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试-2"><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line">import com.bang.store.pojo.District;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class DistrictMapperTest &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    DistrictMapper districtMapper;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void findByParent()&#123;</span><br><span class="line">        String parent=&quot;86&quot;;</span><br><span class="line">        List&lt;District&gt; districtList = districtMapper.findByParent(parent);</span><br><span class="line">        for (District district : districtList) &#123;</span><br><span class="line">            System.out.println(district);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表持久层-1"><a href="#省市区列表持久层-1" class="headerlink" title="省市区列表持久层"></a>省市区列表持久层</h2><h3 id="规划异常-1"><a href="#规划异常-1" class="headerlink" title="规划异常"></a>规划异常</h3><p>此功能无异常需要处理</p><h3 id="抽象接口和方法"><a href="#抽象接口和方法" class="headerlink" title="抽象接口和方法"></a>抽象接口和方法</h3><p>新建省市区列表业务层接口<code>IDistrictService</code>，在其中创建对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省市区数据业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IDistrictService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父代号查询省市区信息列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区信息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;District&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现-1"><a href="#抽象方法实现-1" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>创建业务层接口实现类<code>DistrictServiceImpl</code>，在其中实现接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IDistrictService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    DistrictMapper districtMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;District&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span> &#123;</span><br><span class="line">        <span class="comment">//调用持久层查询数据列表</span></span><br><span class="line">        List&lt;District&gt; districtList = districtMapper.findByParent(parent);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在进行网络数据传输时，为了避免无效数据的传递，可以将无效数据设置为null，</span></span><br><span class="line"><span class="comment">         * 这样一方面可以节省流量另一方面可以提高效率</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 在此问题中，依据parent代号查询其下的所有省市区信息，真正有效字段其实只有code和name，一次其他字段可以认为i设置为null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (District district : districtList) &#123;</span><br><span class="line">            district.setId(<span class="literal">null</span>);</span><br><span class="line">            district.setParent(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> districtList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-3"><a href="#单元测试-3" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.District;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByParent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="string">&quot;86&quot;</span>;</span><br><span class="line">        List&lt;District&gt; districts = districtService.getByParent(parent);</span><br><span class="line">        <span class="keyword">for</span> (District district : districts) &#123;</span><br><span class="line">            System.out.println(district);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表控制层"><a href="#省市区列表控制层" class="headerlink" title="省市区列表控制层"></a>省市区列表控制层</h2><h3 id="设计请求-1"><a href="#设计请求-1" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /district/</span><br><span class="line">request method: GET</span><br><span class="line">request params: String parent</span><br><span class="line">response data: new JsonResult&lt;Lsit&lt;District&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><p>创建新的控制层类<code>DistrictController</code>，在里面编写对应的请求处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.District;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IDistrictService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/district&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以/district开头的请求url均会被拦截到该方法</span></span><br><span class="line">    <span class="comment">//url=/district或者url=/district/均有效</span></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;District&gt;&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span>&#123;</span><br><span class="line">        List&lt;District&gt; districtList = districtService.getByParent(parent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;省市区信息获取成功&quot;</span>,districtList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区列表前端页面"><a href="#省市区列表前端页面" class="headerlink" title="省市区列表前端页面"></a>省市区列表前端页面</h2><p>前一个版本省市区信息是保存在前端页面的<code>js</code>文件中，通过<code>js</code>代码获取的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/distpicker.data.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/distpicker.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现将这两行代码注释掉，让省市区数据信息依靠后端接口获取</p><p>检查前端页面在提交表单数据省市区数据时是否有相关的name属性和id属性</p><h1 id="获取省市区名称"><a href="#获取省市区名称" class="headerlink" title="获取省市区名称"></a>获取省市区名称</h1><p>依据省市区代码获取对应的省市区名称</p><h2 id="省市区名称持久层"><a href="#省市区名称持久层" class="headerlink" title="省市区名称持久层"></a>省市区名称持久层</h2><h3 id="规划执行的SQL语句-2"><a href="#规划执行的SQL语句-2" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><p>依据省市区code查询对应省市区的name，本质为一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> t_dict_district <span class="keyword">where</span> code<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="接口和抽象方法-3"><a href="#接口和抽象方法-3" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据省市区代号查询对应的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 省市区代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">String <span class="title function_">findNameByCode</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure><h3 id="配置SQL映射-2"><a href="#配置SQL映射-2" class="headerlink" title="配置SQL映射"></a>配置SQL映射</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findNameByCode&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">    select name from t_dict_district where code=#&#123;code&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试-4"><a href="#单元测试-4" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findNameByCode</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> districtMapper.findNameByCode(<span class="string">&quot;110000&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="省市区名称业务层"><a href="#省市区名称业务层" class="headerlink" title="省市区名称业务层"></a>省市区名称业务层</h2><p>无特定的异常需要处理，所以跳过<strong>规划异常</strong></p><h3 id="接口和抽象方法-4"><a href="#接口和抽象方法-4" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依据省市区代码获取对应名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 省市区号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 省市区名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">String <span class="title function_">getNameByCode</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现-2"><a href="#抽象方法实现-2" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> districtMapper.findNameByCode(code);</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-5"><a href="#单元测试-5" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getNameByCode</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> districtService.getNameByCode(<span class="string">&quot;120000&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增收货地址业务层的优化"><a href="#新增收货地址业务层的优化" class="headerlink" title="新增收货地址业务层的优化"></a>新增收货地址业务层的优化</h2><p>用户新增收货地址，前端页面只会向后端传递省市区的代码，所以业务层在调用持久层接口将数据存入数据库时，需要调用<code>IDistrictService</code>接口中的<code>getNameByCode</code>来获取对应省市区名称，再存入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收货地址业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AddressMapper addressMapper;</span><br><span class="line">    <span class="comment">//地址业务层接口需要依赖省市区业务层接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址上限设置在application.properties配置文件里</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxCount;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Integer uid, String username, Address address)</span> &#123;</span><br><span class="line">        <span class="comment">//1.查询当前用户拥有地址数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">        <span class="comment">//超出地址上限，报异常</span></span><br><span class="line">        <span class="keyword">if</span>(count&gt;maxCount)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressCountLimitException</span>(<span class="string">&quot;收货地址数目超出规定上限&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首条收货地址设置为默认收货地址</span></span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">            address.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        address.setCreatedUser(username);</span><br><span class="line">        address.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        address.setModifiedUser(username);</span><br><span class="line">        address.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//依据前端反馈的省市区号码获取对应省市区名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">provinceName</span> <span class="operator">=</span> districtService.getNameByCode(address.getProvinceCode());</span><br><span class="line">        <span class="type">String</span> <span class="variable">cityName</span> <span class="operator">=</span> districtService.getNameByCode(address.getCityCode());</span><br><span class="line">        <span class="type">String</span> <span class="variable">areaName</span> <span class="operator">=</span> districtService.getNameByCode(address.getAreaCode());</span><br><span class="line">        address.setProvinceName(provinceName);</span><br><span class="line">        address.setCityName(cityName);</span><br><span class="line">        address.setAreaName(areaName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入地址数据</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.insert(address);</span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;地址数据插入未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取省市区前端页面"><a href="#获取省市区前端页面" class="headerlink" title="获取省市区前端页面"></a>获取省市区前端页面</h2><p><code>addAddress.html</code>页面中编写对应的省市区展示，根据用户不同的选择将对应的省市区信息填充到对应的下拉列表</p><h3 id="编写相关事件代码"><a href="#编写相关事件代码" class="headerlink" title="编写相关事件代码"></a>编写相关事件代码</h3><p>整体前端页面的逻辑</p><ol><li>用户点击新增收货地址按钮</li><li>出现地址信息表单页面，触发事件，自动将86(代表中国地区编号)发送后端，请求省份信息列表，填充到省份下拉列表，此时城市和区县下拉列表为只存在默认选项</li><li>省份下拉列表值发生改变，触发事件，自动向后端发送请求(携带当前选中省份号码)，请求该省份的所有城市信息列表，填充到城市下拉列表</li><li>城市下拉列表发生改变，出发事件，自动向后端发送请求(携带当前选中城市号码)，请求该城市的所有区县信息列表，填充到区县下拉列表</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//每个下拉列表的默认选项</span></span><br><span class="line">    <span class="comment">//注意:value属性非常重要,实际传给后端的值就是value属性值,这里将其定义为对应省市区的代码编号</span></span><br><span class="line">    <span class="keyword">let</span> defaultOption = <span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择 ----&lt;/option&gt;&quot;</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">showProvinceList</span>();<span class="comment">//外部定于对应的方法</span></span><br><span class="line">    <span class="comment">//城市下拉列表添加对应子标签 option子标签</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(defaultOption);</span><br><span class="line">    <span class="comment">//区域下拉列表添加对应子标签 option子标签</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(defaultOption);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//省的下拉列表数据展示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showProvinceList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择省/直辖市 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/district/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="string">&quot;parent=86&quot;</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="keyword">let</span> provinceList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;provinceList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+provinceList[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+provinceList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;省份数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;省份数据获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * change()函数用于监听某个空间是否发生改变，一旦发生改变，触发事件，执行对应函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//省的下拉列表如果发生改变,会向后端服务器发送请求查询对应省下的所有市数据列表,并展示在对应的下拉列表</span></span><br><span class="line">$(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//清空城市和区县下拉列表中所有内容</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    <span class="comment">//填充默认值</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择市 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择区县 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">val</span>()==<span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">//默认选项直接返回</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/district/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="string">&quot;parent=&quot;</span>+$(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="keyword">let</span> cityList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;cityList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+cityList[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+cityList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;城市数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;城市数据获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//城市的下拉列表发生改变,会向后端服务器发送请求,查询对应市下面的区县信息列表，并展示在对应的下拉列表</span></span><br><span class="line">$(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//清空区县下拉列表中所有的原始子标签</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    <span class="comment">//填充默认值</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;---- 请选择区县 ----&lt;/option&gt;&quot;</span>)</span><br><span class="line">    <span class="comment">//选择默认无效项,直接返回</span></span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">val</span>()==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/district/&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="string">&quot;parent=&quot;</span>+$(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//后端传回数据是list列表</span></span><br><span class="line">                <span class="keyword">let</span> areaList = data.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;areaList.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+areaList[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+areaList[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;区县数据获取失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;区县数据获取过程中发生未知错误&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;#btn-add-new-address&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/address/add_new_address&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-add-new-address&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;地址保存失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、上传头像功能的实现</title>
      <link href="/2023/08/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/06%E4%B8%8A%E4%BC%A0%E5%A4%B4%E5%83%8F%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/06%E4%B8%8A%E4%BC%A0%E5%A4%B4%E5%83%8F%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="上传头像功能的实现"><a href="#上传头像功能的实现" class="headerlink" title="上传头像功能的实现"></a>上传头像功能的实现</h1><p>用户上传头像图片，涉及到的问题：图片在数据库中以何种形式存在？</p><p>文件上传保存在服务器的某个位置，只需要将该位置记录即可，即数据库中对应字段存储的是头像图片在服务器中的存储路径</p><p>在实际应用场景中，一般是将静态资源文件(图片、视频、文本文件等资源文件)存储在一台专门的电脑上，将该电脑作为一个单独的服务器使用</p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划SQL语句"><a href="#规划SQL语句" class="headerlink" title="规划SQL语句"></a>规划SQL语句</h3><p>将用户头像存储路径更新到数据库表中的avatar字段，本质为一条更新语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> avatar<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="抽象接口和方法"><a href="#抽象接口和方法" class="headerlink" title="抽象接口和方法"></a>抽象接口和方法</h3><p>在<code>UserMapper</code>接口定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户图像</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户ide</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> avatar 用户图像存储地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 信息修改者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 信息修改时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateAvatarByUid</span><span class="params">(Integer uid,String avatar,String modifiedUser,Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法配置到映射文件UserMapper-xml"><a href="#抽象方法配置到映射文件UserMapper-xml" class="headerlink" title="抽象方法配置到映射文件UserMapper.xml"></a>抽象方法配置到映射文件<code>UserMapper.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAvatarByUid&quot;</span>&gt;</span></span><br><span class="line">    update t_user set avatar=#&#123;avatar&#125;,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125; where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAvatarByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    String avatar=<span class="string">&quot;/userPhoto/yifei.png&quot;</span>;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">modifiedTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">modifiedUser</span> <span class="operator">=</span> <span class="string">&quot;管理员&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateAvatarByUid(<span class="number">3</span>, avatar, modifiedUser, modifiedTime);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响行数:&quot;</span>+rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><ul><li>打开页面时，可能找不到用户的信息或用户已被删除</li><li>信息插入过程中发生未知错误</li></ul><blockquote><p>前面的功能以前模块已经实现对应代码</p></blockquote><h3 id="抽象接口和方法-1"><a href="#抽象接口和方法-1" class="headerlink" title="抽象接口和方法"></a>抽象接口和方法</h3><p>在 <code>IUserService</code>接口中编写对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户图像信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> avatar 用户图像数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">alertAvatar</span><span class="params">(Integer uid,String avatar)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertAvatar</span><span class="params">(Integer uid, String avatar)</span> &#123;</span><br><span class="line">    <span class="comment">//查询当前用户是否存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新数据库avatar字段</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateAvatarByUid(uid, avatar, user.getUsername(), <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;图像信息更新过程发生未知异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertAvatar</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/libai.png&quot;</span>;</span><br><span class="line">    iUserService.alertAvatar(uid,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>业务层的两种可能异常，在以前功能模块中，控制层异常处理类中均有对应的逻辑处理</p><p>由于文件上传过程中可能由于大小、格式、类型等错误引发异常，所以需要专门规划文件上传的异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FileUploadException: 泛指文件上传异常，基类，继承自RunTimeException</span><br><span class="line">FileEmptyException: 文件为空异常</span><br><span class="line">FileSizeException: 文件大小超出限制异常</span><br><span class="line">FileTypeException: 文件类型异常</span><br><span class="line">FileUploadIoException: 文件读写异常</span><br></pre></td></tr></table></figure><p>在控制层异常处理基类中定义对应的异常逻辑(不同的异常，基于不同的状态响应码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(&#123;ServiceException.class, FileUploadException.class&#125;)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileEmptyException) &#123;</span><br><span class="line">    result.setState(<span class="number">6000</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileSizeException) &#123;</span><br><span class="line">    result.setState(<span class="number">6001</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件大小超出限制异常&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileTypeException)&#123;</span><br><span class="line">    result.setState(<span class="number">6002</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件类型异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileUploadIOException) &#123;</span><br><span class="line">    result.setState(<span class="number">6003</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;文件读写异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /user/alert_avatar</span><br><span class="line">request method: POST(原因:GET最大允许提交数据量为2K)</span><br><span class="line">request params: HttpSession,MultiPartFile File //(SpringMVC提供的文件上传对象)</span><br><span class="line">response data: JsonResult&lt;String&gt; //(页面切换，需要时刻保存头像路径，否则再次切换头像页面无法显示)</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 设置上传文件的最大值 10MB */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_AVATAR_SIZE</span> <span class="operator">=</span> <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"><span class="comment">/** 设置允许接收的文件类型 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; AVATAR_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/bmp&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MultiPartFile是SpringMVC提供的一个接口，这个接口为我们包装了获取文件类型的数据，任何类型的File都可以接受</span></span><br><span class="line"><span class="comment">     * SpringBoot整合了SpringMVC,只需要在处理请求的方法参数列表上申明一个MultiPartFile的参数</span></span><br><span class="line"><span class="comment">     * SpringBoot会自定将接受的文件数据赋值给这个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_avatar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">alertAvatar</span><span class="params">(MultipartFile file,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;文件为空异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.getSize()&gt;MAX_AVATAR_SIZE)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;文件超出大小限制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!AVATAR_TYPE.contains(file.getContentType()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>(<span class="string">&quot;文件类型错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//规定文件存储路径 .../upload/xxx.xx</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent);</span><br><span class="line">    <span class="comment">//parent文件夹不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    String[] splits = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="comment">//文件后缀</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> splits[splits.length-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//生成随机的文件名(为避免不同用户文件名重复导致数据被覆盖丢失</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> uuid+<span class="string">&quot;.&quot;</span>+suffix; <span class="comment">//新的文件名</span></span><br><span class="line">    System.out.println(newFileName);</span><br><span class="line">    <span class="comment">//存储路径</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,newFileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.transferTo(dest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>(<span class="string">&quot;文件读写错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    System.out.println(dest.getPath());</span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span>+newFileName;</span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line"></span><br><span class="line">    userService.alertAvatar(uid,avatar);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户头像修改成功&quot;</span>,avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>直接通过表单发送请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--上传头像表单开始--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/user/alert_avatar&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 control-label&quot;</span>&gt;</span>选择头像:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img-avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../images/index/user.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-responsive&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-offset-2 col-md-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-primary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="部分功能优化和Bug解决"><a href="#部分功能优化和Bug解决" class="headerlink" title="部分功能优化和Bug解决"></a>部分功能优化和Bug解决</h2><h3 id="更改SpringMVC默认文件大小"><a href="#更改SpringMVC默认文件大小" class="headerlink" title="更改SpringMVC默认文件大小"></a>更改SpringMVC默认文件大小</h3><p>方式一：在配置文件<code>application.yaml</code>里修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">       <span class="attr">multipart:</span></span><br><span class="line">         <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">         <span class="attr">max-request-size:</span> <span class="string">15MB</span></span><br></pre></td></tr></table></figure><p>方式二：采用Java代码修改上传文件大小限制，在主类中进行配置，可以定义一个方法，用@Bean修饰，在类的前面添加@Configuration修饰，该方法返回值类型`MultiPartConfigElement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//指明当前项目中mapper接口的路径,项目启动会自动加载对应接口文件</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.bang.store.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(StoreApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MultipartConfigElement <span class="title function_">getMultipartConfigElement</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建配置类工厂类对象</span></span><br><span class="line">        <span class="type">MultipartConfigFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultipartConfigFactory</span>();</span><br><span class="line">        <span class="comment">//设置需要创建对象相关信息</span></span><br><span class="line">        <span class="comment">//10MB</span></span><br><span class="line">        factory.setMaxFileSize(DataSize.of(<span class="number">10</span>, DataUnit.MEGABYTES));</span><br><span class="line">        factory.setMaxRequestSize(DataSize.of(<span class="number">15</span>,DataUnit.MEGABYTES));</span><br><span class="line">        <span class="comment">//通过工厂类创建MultiPartConfigElement对象</span></span><br><span class="line">        <span class="keyword">return</span> factory.createMultipartConfig();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面图像显示"><a href="#页面图像显示" class="headerlink" title="页面图像显示"></a>页面图像显示</h3><p>通过ajax发送请求，解析数据，设置到image对应标签进行数据展示</p><p>前端表单数据映射</p><ul><li>$(“#表单id”).serialize()<ul><li>可以将表单数据自动拼接成key=value的结构提交给服务器，一般提交的是普通的空间数据(比如:text\password\radio\checkbox等)</li></ul></li><li><p>new FormData($(“#表单id”)[index])</p><ul><li>FormData类，将表单中数据保持原有结构进行数据的发送</li></ul></li><li><p>ajax默认处理数据时按照字符串的形式进行处理，以及默认采用字符串的形式提交数据，关闭这两个默认功能</p><ul><li>```javascript<br>processData: false //处理数据的形式，false为关闭以字符串的形式处理数据<br>contentType: false // 关闭默认的数据提交格式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&quot;#btn-change-avatar&quot;).click(function ()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &quot;/user/alert_avatar&quot;</span><br><span class="line">        ,type: &quot;POST&quot;</span><br><span class="line">        ,data: new FormData($(&quot;#form-horizontal&quot;)[0])</span><br><span class="line">        ,processData: false //处理数据的形式，false为关闭以字符串的形式处理数据</span><br><span class="line">        ,contentType: false // 关闭默认的数据提交格式</span><br><span class="line">        ,dataType: &quot;JSON&quot;</span><br><span class="line">        ,success: function (data)&#123;</span><br><span class="line">            if(data.state == 200)&#123;</span><br><span class="line">                //图像显示在页面</span><br><span class="line">                //attr(key,val) 给标签对应属性设置对应值</span><br><span class="line">                $(&quot;#img-avatar&quot;).attr(&quot;src&quot;,data.data);</span><br><span class="line">                alert(&quot;图像修改成功&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                alert(&quot;图像上传失败 &quot;+data.message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,error:function (xmh)&#123;</span><br><span class="line">            alert(&quot;图像上传发生未知异常&quot;+xmh.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="页面跳转图像消失解决办法"><a href="#页面跳转图像消失解决办法" class="headerlink" title="页面跳转图像消失解决办法"></a>页面跳转图像消失解决办法</h3><p>从其他页面再次回到当前页面或者登陆时显示图像</p><ul><li><p>图像上传成功后，可以将图像路径保存在cookie对象，然后每次检测用户打开上传图像页面，在该页面中通过<code>$(document).ready()</code>方法自动检测读取cookie中图像并设置到image的src属性</p></li><li><p>此逻辑应该写在登陆页面</p><ul><li><p>前端query中cookie的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入cookie js文件</span></span><br><span class="line">&lt;script src=<span class="string">&quot;../bootstrap3/js/jquery.cookie.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">//2.调用cookie方法</span></span><br><span class="line"><span class="comment">//三个参数,key,avlue为键值对，time为cookie的存活时间,单位为天</span></span><br><span class="line">$.<span class="title function_">cookie</span>(key,value,time); </span><br></pre></td></tr></table></figure></li><li><p>login.html页面新增逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-login&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-login&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                <span class="comment">//图像路径设置到cookie对象</span></span><br><span class="line">                $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>,data.<span class="property">data</span>.<span class="property">avatar</span>, &#123;<span class="attr">expires</span>:<span class="number">1</span>&#125;);</span><br><span class="line">                <span class="comment">//跳转到对应页面</span></span><br><span class="line">                <span class="comment">//相对路径指定对应页面位置</span></span><br><span class="line">                location.<span class="property">href</span>=<span class="string">&quot;index.html&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;登陆失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;登陆失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>upload.html里面检测加载cookie的逻辑代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//获取cookie数据</span></span><br><span class="line">    <span class="keyword">let</span> avatar = $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(avatar);</span><br><span class="line">    $(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,avatar);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>重新上传图像，需要覆盖原始cookie里的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-change-avatar&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/alert_avatar&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>($(<span class="string">&quot;#form-horizontal&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        ,<span class="attr">processData</span>: <span class="literal">false</span> <span class="comment">//处理数据的形式，false为关闭以字符串的形式处理数据</span></span><br><span class="line">        ,<span class="attr">contentType</span>: <span class="literal">false</span> <span class="comment">// 关闭默认的数据提交格式</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//图像显示在页面</span></span><br><span class="line">                <span class="comment">//attr(key,val) 给标签对应属性设置对应值</span></span><br><span class="line">                $(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,data.<span class="property">data</span>);</span><br><span class="line">                <span class="comment">//覆盖原来的cookie</span></span><br><span class="line">                $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>,data.<span class="property">data</span>, &#123;<span class="attr">expires</span>:<span class="number">1</span>&#125;);</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;图像修改成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;图像上传失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;图像上传发生未知异常&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、个人资料功能的实现</title>
      <link href="/2023/08/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/05%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/05%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="个人资料功能"><a href="#个人资料功能" class="headerlink" title="个人资料功能"></a>个人资料功能</h1><p>用户提交在页面填写个人资料，点击修改按钮提交至后台程序，保存至数据库</p><p><img src="/2023/08/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/05%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230806093455640.png" alt="image-20230806093455640"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划执行的SQL语句"><a href="#规划执行的SQL语句" class="headerlink" title="规划执行的SQL语句"></a>规划执行的SQL语句</h3><h4 id="更新用户信息的SQL语句"><a href="#更新用户信息的SQL语句" class="headerlink" title="更新用户信息的SQL语句"></a>更新用户信息的SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> phone<span class="operator">=</span>?,email<span class="operator">=</span>?,gender<span class="operator">=</span>?，modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h4 id="根据用户名查询用户数据"><a href="#根据用户名查询用户数据" class="headerlink" title="根据用户名查询用户数据"></a>根据用户名查询用户数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>此功能在修改密码功能模块已经实现</p><h3 id="接口和抽象方法的设计"><a href="#接口和抽象方法的设计" class="headerlink" title="接口和抽象方法的设计"></a>接口和抽象方法的设计</h3><p>在<code>UserMapper</code>接口中定义更新用户信息方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据uid更新用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 更新操作受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">Integer <span class="title function_">updateInfoByUid</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法配置到映射文件UserMapper-xml中"><a href="#抽象方法配置到映射文件UserMapper-xml中" class="headerlink" title="抽象方法配置到映射文件UserMapper.xml中"></a>抽象方法配置到映射文件<code>UserMapper.xml</code>中</h3><p>采用<code>Mybatis</code>的<code>if</code>标签，只有在各个字段不为空时，才会执行更新操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateInfoByUid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.bang.store.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update t_user</span><br><span class="line">    set</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone!=null&quot;</span>&gt;</span>phone=#&#123;phone&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span>gender=#&#123;gender&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedTime&#125;</span><br><span class="line">    where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateInfoByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUid(<span class="number">2</span>);</span><br><span class="line">    user.setPhone(<span class="string">&quot;15823209876&quot;</span>);</span><br><span class="line">    user.setGender(<span class="number">1</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;zhangfei@163.com&quot;</span>);</span><br><span class="line">    user.setModifiedUser(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">    user.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateInfoByUid(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;受影响函数:&quot;</span>+rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>业务层主要实现的功能</p><ul><li>用户进入当前页面，系统查询用户信息，并填充到页面对应的文本框</li><li>用户如果点击修改按钮，则执行用户信息更新操作，将对应信息写入数据库</li></ul><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><ul><li>打开页面时，可能找不到用户的信息或用户已被删除</li><li>信息插入过程中发生未知错误</li></ul><h3 id="接口和抽象方法"><a href="#接口和抽象方法" class="headerlink" title="接口和抽象方法"></a>接口和抽象方法</h3><p>在<code>IUserService</code>接口中，定义对应的抽象方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 根据用户id查询对应用户信息</span><br><span class="line">* @param uid 用户id</span><br><span class="line">* @return 用户信息</span><br><span class="line">*/</span><br><span class="line">User findUserByUid(Integer uid);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 修改更新用户信息</span><br><span class="line">* @param uid 用户id</span><br><span class="line">* @param username 用户姓名</span><br><span class="line">* @param user 用户信息对象</span><br><span class="line">*/</span><br><span class="line">void alertInfo(Integer uid,String username,User user);</span><br></pre></td></tr></table></figure><h3 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h3><p>在<code>`UserServiceImpl</code>中实现上述两个抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findUserByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;当前用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertInfo</span><span class="params">(Integer uid, String username, User user)</span> &#123;</span><br><span class="line">    <span class="comment">//存入信息之前，仍然要判断当前用户是否存在</span></span><br><span class="line">    <span class="comment">//可能用户在此页面停留很久导致用户不存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">curuser</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="keyword">if</span>(curuser==<span class="literal">null</span> || curuser.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;当前用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填充信息</span></span><br><span class="line">    user.setUid(uid);</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setModifiedUser(username);</span><br><span class="line">    user.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据库</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateInfoByUid(user);</span><br><span class="line">    <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;更新用户信息过程发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findUserByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> iUserService.findUserByUid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateInfoByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUid(<span class="number">2</span>);</span><br><span class="line">    user.setPhone(<span class="string">&quot;122&quot;</span>);</span><br><span class="line">    user.setGender(<span class="number">1</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;zhangfei@163.com&quot;</span>);</span><br><span class="line">    user.setModifiedUser(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">    user.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    iUserService.alertInfo(<span class="number">2</span>,<span class="string">&quot;张飞2&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>用户不存在异常和插入过程异常在前面的功能中均已经实现，所以异常处理类中无需增加新的代码逻辑</p><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><h4 id="打开页面，用户信息展示"><a href="#打开页面，用户信息展示" class="headerlink" title="打开页面，用户信息展示"></a>打开页面，用户信息展示</h4><p>一打开个人资料页面，便向后台发送查询当前用户请求</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /user/get<span class="built_in">_</span>by<span class="built_in">_</span>id</span><br><span class="line">request method: GET</span><br><span class="line">request params: HttpSession session</span><br><span class="line">response data: new JsonResult&lt;User&gt;</span><br></pre></td></tr></table></figure><h4 id="点击修改按钮，更新用户信息"><a href="#点击修改按钮，更新用户信息" class="headerlink" title="点击修改按钮，更新用户信息"></a>点击修改按钮，更新用户信息</h4><p>用户点击修改按钮，向后台发送请求，后台进行数据库更新</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request url: /user/alert<span class="built_in">_</span>info</span><br><span class="line">request method: POST</span><br><span class="line">request params: User user,HttpSession session</span><br><span class="line">response data: JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在<code>UserController</code>里编写对应的请求处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(&quot;/get_by_id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">getById</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findUserByUid(uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;OK&quot;</span>,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alert_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">alertInfo</span><span class="params">(User user,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    userService.alertInfo(uid,username,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面修改"><a href="#前端页面修改" class="headerlink" title="前端页面修改"></a>前端页面修改</h2><h3 id="功能1"><a href="#功能1" class="headerlink" title="功能1"></a>功能1</h3><p>打开<code>userdata.html</code>页面，会自动发送<code>ajax</code>请求到<code>\user\get_by_uid</code>，查询对应数据并展示到页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;&#125; );</span><br><span class="line"><span class="comment">//页面加载完成自动执行里面的函数逻辑</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/get_by_id&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//请求成功，数据展示</span></span><br><span class="line">                $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(data.<span class="property">data</span>.<span class="property">username</span>);</span><br><span class="line">                $(<span class="string">&quot;#phone&quot;</span>).<span class="title function_">val</span>(data.<span class="property">data</span>.<span class="property">phone</span>);</span><br><span class="line">                $(<span class="string">&quot;#email&quot;</span>).<span class="title function_">val</span>(data.<span class="property">data</span>.<span class="property">email</span>);</span><br><span class="line">                <span class="keyword">let</span> gender = (data.<span class="property">data</span>.<span class="property">gender</span>==<span class="number">0</span>?$(<span class="string">&quot;#gender-female&quot;</span>):$(<span class="string">&quot;#gender-male&quot;</span>));</span><br><span class="line">                gender.<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>,<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户信息获取失败&quot;</span> +data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户信息获取失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="功能2"><a href="#功能2" class="headerlink" title="功能2"></a>功能2</h3><p>检测用户点击修改按钮，发送请求到<code>\user\alert_info</code>，进行后台数据更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-change-info&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/alert_info&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-change-info&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户信息修改成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;用户信息修改失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;用户信息修改失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章：运行时数据区概述及线程</title>
      <link href="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章：运行时数据区概述及线程"><a href="#第三章：运行时数据区概述及线程" class="headerlink" title="第三章：运行时数据区概述及线程"></a>第三章：运行时数据区概述及线程</h1><h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p>java程序执行流程</p><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104157210.png" alt="image-20230805104157210" style="zoom:80%;"></p><p> <img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104430286.png" alt="image-20230805104430286" style="zoom:80%;"></p><h3 id="JVM系统概述"><a href="#JVM系统概述" class="headerlink" title="JVM系统概述"></a>JVM系统概述</h3><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104726588.png" alt="image-20230805104726588" style="zoom:80%;"></p><h3 id="运行时数据区内存划分"><a href="#运行时数据区内存划分" class="headerlink" title="运行时数据区内存划分"></a>运行时数据区内存划分</h3><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805104944035.png" alt="image-20230805104944035" style="zoom:80%;"></p><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805105219674.png" alt="image-20230805105219674" style="zoom:80%;"></p><h3 id="线程间共享"><a href="#线程间共享" class="headerlink" title="线程间共享"></a>线程间共享</h3><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805105747129.png" alt="image-20230805105747129" style="zoom:80%;"></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程概述"><a href="#线程概述" class="headerlink" title="线程概述"></a>线程概述</h3><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805105936035.png" alt="image-20230805105936035" style="zoom:80%;"></p><h3 id="JVM系统线程"><a href="#JVM系统线程" class="headerlink" title="JVM系统线程"></a>JVM系统线程</h3><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/image-20230805110315551.png" alt="image-20230805110315551" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章：程序计数器</title>
      <link href="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
      <url>/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章：程序计数器"><a href="#第四章：程序计数器" class="headerlink" title="第四章：程序计数器"></a>第四章：程序计数器</h1><h2 id="程序计数器-PC寄存器-的介绍"><a href="#程序计数器-PC寄存器-的介绍" class="headerlink" title="程序计数器(PC寄存器)的介绍"></a>程序计数器(PC寄存器)的介绍</h2><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805144249787.png" alt="image-20230805144249787" style="zoom:80%;"></p><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805144642697.png" alt="image-20230805144642697" style="zoom:80%;"></p><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805145041516.png" alt="image-20230805145041516" style="zoom:80%;"></p><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805145741710.png" alt="image-20230805145741710" style="zoom:80%;"></p><p>  对于运行时数据区里的每一个内存结构，需要重点关注以下两个部分：GC(垃圾回收)和OOM(OutOfMemoryError)</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805150200250.png" alt="image-20230805150200250" style="zoom:80%;"></p><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805151257080.png" alt="image-20230805151257080" style="zoom:80%;"></p><h2 id="PC寄存器面试常见问题"><a href="#PC寄存器面试常见问题" class="headerlink" title="PC寄存器面试常见问题"></a>PC寄存器面试常见问题</h2><h3 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h3><ul><li>使用PC寄存器存储字节码指令地址有什么用？</li><li>为什么使用PC寄存器记录当前线程的执行地址呢？</li></ul><p><strong>Ans:</strong></p><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805151822032.png" alt="image-20230805151822032" style="zoom:80%;"></p><h3 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h3><ul><li>PC寄存器为什么会被设定为线程私有？</li></ul><p><strong>Ans:</strong></p><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805152201883.png" alt="image-20230805152201883" style="zoom:80%;"></p><h2 id="补充：CPU时间片"><a href="#补充：CPU时间片" class="headerlink" title="补充：CPU时间片"></a>补充：CPU时间片</h2><p><strong>宏观并行，微观并发</strong></p><p><img src="/2023/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8(PC%E5%AF%84%E5%AD%98%E5%99%A8)/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/image-20230805152647595.png" alt="image-20230805152647595" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、用户密码修改功能的实现</title>
      <link href="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/04%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/04%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h1><p>需要用户提交原始密码和新密码，再根据当前登录用户进行信息的修改操作</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/04%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230803224929626.png" alt="image-20230803224929626"></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划需要执行的SQL语句"><a href="#规划需要执行的SQL语句" class="headerlink" title="规划需要执行的SQL语句"></a>规划需要执行的SQL语句</h3><p>根据用户uid修改用户的password值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> password<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>根据uid查询用户数据，在修改密码之前，要保证当前用户数据存在，检测当前用户是否被标记删除，检测用户输入的原始密码是否正确</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> uid<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法"><a href="#设计接口和抽象方法" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p>在接口<code>UserMapper</code>中定义对应的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据uid更改用户密码字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password 更改的新密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modifiedUser 更改者用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modifiedDate 更改操作时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 受影响的行数，用于后续判断是否更新成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Integer <span class="title function_">updatePasswordByUid</span><span class="params">(Integer uid, String password, String modifiedUser, Date modifiedDate)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户uid查询用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前用户对象，找不到返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">findByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><h3 id="抽象方法配置到映射文件UserMapper-xml中"><a href="#抽象方法配置到映射文件UserMapper-xml中" class="headerlink" title="抽象方法配置到映射文件UserMapper.xml中"></a>抽象方法配置到映射文件<code>UserMapper.xml</code>中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserPojoMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePasswordByUid&quot;</span>&gt;</span></span><br><span class="line">    update t_user set password=#&#123;password&#125;,modified_user=#&#123;modifiedUser&#125;,modified_time=#&#123;modifiedDate&#125;</span><br><span class="line">    where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="功能单元测试"><a href="#功能单元测试" class="headerlink" title="功能单元测试"></a>功能单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePasswordByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">row</span> <span class="operator">=</span> userMapper.updatePasswordByUid(<span class="number">2</span>,<span class="string">&quot;znew&quot;</span>,<span class="string">&quot;张飞&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    System.out.println(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划可能产生的异常"><a href="#规划可能产生的异常" class="headerlink" title="规划可能产生的异常"></a>规划可能产生的异常</h3><p>整个过程可能发生的错误</p><ul><li>用户输入的原始密码错误；用户找不到或者已被删除(is_delete字段为1)</li><li>update执行过程中引发的未知错误</li></ul><p>密码不匹配，用户找不到的异常类在登陆功能中以实现过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户插入数据时产生的未知异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UpdateException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法-1"><a href="#设计接口和抽象方法-1" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p>用户密码修改核心方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改密码和新方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 当前用户名,也可视为密码修改操作的执行者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldPassword 用户输入的原始密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newPassword 用户输入的新密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">alertPassword</span><span class="params">(Integer uid,String username,String oldPassword,String newPassword)</span>;</span><br></pre></td></tr></table></figure><p>实现方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertPassword</span><span class="params">(Integer uid, String username, String oldPassword, String newPassword)</span> &#123;</span><br><span class="line">    <span class="comment">//1.根据uid查询当前用户信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">    <span class="comment">//2.判断当前用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(user==<span class="literal">null</span> || user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;当前用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.判断用户输入的原始密码是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> user.getSalt();</span><br><span class="line">    <span class="keyword">if</span>(!user.getPassword().equals(getMD5password(oldPassword,salt)))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordNotMatchException</span>(<span class="string">&quot;用户密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.修改密码</span></span><br><span class="line">    <span class="comment">//计算新密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> getMD5password(newPassword,salt);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updatePasswordByUid(uid, password, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">if</span>(rows==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;用户信息插入发生未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="功能单元测试-1"><a href="#功能单元测试-1" class="headerlink" title="功能单元测试"></a>功能单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alertPassword</span><span class="params">()</span>&#123;</span><br><span class="line">    iUserService.alertPassword(<span class="number">1</span>,<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;li123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>在基类<code>BaseController</code>中添加新的异常类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UpdateException)&#123;</span><br><span class="line">            result.setState(<span class="number">5003</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;更新数据时未知异常&quot;</span>);</span><br><span class="line">        &#125; </span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: /user/alert<span class="built_in">_</span>password</span><br><span class="line">method: post</span><br><span class="line">request params: String oldPassword,String newPassword</span><br><span class="line">response data: new JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/alert_password&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">alertPassword</span><span class="params">(String oldPassword,String newPassword,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//1.获取当前用户名和用户密码</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    userService.alertPassword(uid,username,oldPassword,newPassword);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;密码修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面开发"><a href="#前端页面开发" class="headerlink" title="前端页面开发"></a>前端页面开发</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-change-password&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/user/alert_password&quot;</span></span><br><span class="line">        ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">        ,<span class="attr">data</span>: $(<span class="string">&quot;#form-change-password&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">        ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;密码修改成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;密码修改失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;密码修改失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章：JVM与Java体系结构</title>
      <link href="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：JVM与Java体系结构"><a href="#第一章：JVM与Java体系结构" class="headerlink" title="第一章：JVM与Java体系结构"></a>第一章：JVM与Java体系结构</h1><h2 id="虚拟机与Java虚拟机介绍"><a href="#虚拟机与Java虚拟机介绍" class="headerlink" title="虚拟机与Java虚拟机介绍"></a>虚拟机与Java虚拟机介绍</h2><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>虚拟机就是一台虚拟的计算机，本质是一款软件，用来执行一系列虚拟计算机指令。虚拟机可以分为<strong>系统虚拟机</strong>和<strong>程序虚拟机</strong></p><ul><li><p>系统虚拟机</p><p>系统虚拟机完全是对物理计算机的仿真，提供一个可运行完整操作系统的软件平台，比如Visual Box，VMware就属于系统虚拟机</p></li><li><p>程序虚拟机</p><p>程序虚拟机专门为执行单个计算机程序而设计，比较典型的就是Java虚拟机，在Java虚拟机中执行的指令我们称之为Java字节码指令</p></li></ul><p>无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中</p><h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><p>Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细的定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里</p><p>特点：</p><ul><li>一次编译，到处运行</li><li>自动内存管理</li><li>自动垃圾回收功能</li></ul><p>​     </p><h2 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h2><p>JVM运行在操作系统基础之上，与硬件之间没有直接的交互</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190045749.png" alt="image-20230802190045749" style="zoom: 80%;"></p><p> JDK、JRE、JVM三者之间的关系</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190254484.png" alt="image-20230802190254484" style="zoom:80%;"></p><h2 id="JVM的整体结构"><a href="#JVM的整体结构" class="headerlink" title="JVM的整体结构"></a>JVM的整体结构</h2><p><code>HotSpot VM</code>是目前市面上高性能虚拟机代表作之一</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190808090.png" alt="image-20230802190808090"></p><p>JVM结构示意图</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802190721731.png" alt="image-20230802190721731" style="zoom:80%;"></p><h2 id="Java代码执行流程"><a href="#Java代码执行流程" class="headerlink" title="Java代码执行流程"></a>Java代码执行流程</h2><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802191815948.png" alt="image-20230802191815948" style="zoom:80%;"></p><p>JVM的架构模型</p><p>Java编译器的输入指令流基本上是一种<strong>基于栈的指令集架构</strong>，另外一种指令集架构则是<strong>基于寄存器的指令集架构</strong></p><p>基于栈式架构的特点</p><ul><li>设计和实现更简单，适用于资源受限的系统</li><li>避开了寄存器的分配难题：使用零地址指令方式分配</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈，指令集更小，编译器容易实现</li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ul><p>基于寄存器架构的特点</p><ul><li>典型应用为X86的二进制指令集：比如传统的PC以及Android的Davik虚拟机</li><li>指令集架构则完全依赖硬件，可以执行差</li><li>性能优秀和执行更高效</li><li>花费更少的时间去完成一系列操作</li><li>在大部分情况下，基于寄存器架构的指令集往往都是以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令集为主</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>查看java文件的字节码文件</p><ul><li><p>编写.java源文件</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802221427828.png" alt="image-20230802221427828"></p></li><li><p>执行<code>javac xxx.java</code>得到对应的字节码文件<code>xxx.class</code></p></li><li><p>执行<code>javap -v xxx.class</code>即可查看对应的汇编指令</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230802221540486.png" alt="image-20230802221540486"></p></li></ul><h2 id="JVM生命周期"><a href="#JVM生命周期" class="headerlink" title="JVM生命周期"></a>JVM生命周期</h2><h3 id="虚拟机的启动"><a href="#虚拟机的启动" class="headerlink" title="虚拟机的启动"></a>虚拟机的启动</h3><p>Java虚拟机的启动是通过引导类加载器(bootstrap class loader)创建一个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的</p><h3 id="虚拟机的执行"><a href="#虚拟机的执行" class="headerlink" title="虚拟机的执行"></a>虚拟机的执行</h3><ul><li>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序</li><li>程序开始执行时他才运行，程序结束时他就停止</li><li>执行一个所谓的的Java程序的时候，真真正正在执行的时一个叫做Java虚拟机的进程</li></ul><p>查看运行的进程:在命令行输入<code>jps</code>，显示当前所有java进程pid的命令</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9AJVM%E4%B8%8EJava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230803192556421.png" alt="image-20230803192556421"></p><h3 id="虚拟机的退出"><a href="#虚拟机的退出" class="headerlink" title="虚拟机的退出"></a>虚拟机的退出</h3><ul><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致Java虚拟机进程终止</li><li>某线程调用Runtime类或System类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作</li><li>除此之外，JNI(Java Native Interface)规范描述了用JNI Invocation API来加载或卸载Java虚拟机时，Java虚拟机的退出情况</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章：类加载子系统</title>
      <link href="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章：类加载子系统"><a href="#第二章：类加载子系统" class="headerlink" title="第二章：类加载子系统"></a>第二章：类加载子系统</h1><h2 id="类加载器与类的加载过程"><a href="#类加载器与类的加载过程" class="headerlink" title="类加载器与类的加载过程"></a>类加载器与类的加载过程</h2><h3 id="JVM的内存结构"><a href="#JVM的内存结构" class="headerlink" title="JVM的内存结构"></a>JVM的内存结构</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803200538663.png" alt="image-20230803200538663" style="zoom:80%;"></p><h3 id="类加载器子系统作用"><a href="#类加载器子系统作用" class="headerlink" title="类加载器子系统作用"></a>类加载器子系统作用</h3><ul><li>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识</li><li>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定</li><li>加载的类信息存放于一块称为方法区的内存空间。除了类信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量(这部分信息是Class文件中常量池部分的内存映射)</li></ul><h3 id="类加载器中ClassLoader的角色"><a href="#类加载器中ClassLoader的角色" class="headerlink" title="类加载器中ClassLoader的角色"></a>类加载器中ClassLoader的角色</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803202014873.png" alt="image-20230803202014873"></p><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803202508503.png" alt="image-20230803202508503" style="zoom:80%;"></p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803202528634.png" alt="image-20230803202528634" style="zoom:80%;"></p><p>整个<strong>类的加载</strong>过程主要包括：</p><ul><li>加载</li><li>链接</li><li>初始化</li></ul><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><ol><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口</li></ol><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803203109097.png" alt="image-20230803203109097" style="zoom:80%;"></p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803203310262.png" alt="image-20230803203310262" style="zoom:80%;"></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>.class文件查看，所需软件：<code>Binary Viewer</code>和<code>jclasslib bytecode viewer</code></p><p>所需软件下载地址</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1YcdprQTBQTGJzp<span class="built_in">_</span>vVBiNFg </span><br><span class="line">提取码：4hmi </span><br></pre></td></tr></table></figure><p>发现所有的<code>.class</code>文件都有一个统一的前缀<code>CA FE BA BE</code>，即相同的前缀标识，验证阶段工作之一就是校验头部标识</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803204637266.png" alt></p><p>  准备阶段：会为每个类变量根据其数据类型，默认初始化为对应的零值，即使显示赋值了，也只在初始化阶段赋值</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803205800679.png" alt></p><p><code>&lt;clinit&gt;()</code>的示例</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803210703082.png" alt></p><p>父类与子类的<code>clinit()</code>执行示例</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803212431043.png" alt="image-20230803212431043" style="zoom:80%;"></p><p>一个类的<code>clinit()</code>方法在对线程下会添加同步锁，只会加载一次，要是加载中断，其他线程就无法执行</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803213639515.png" alt="image-20230803213639515" style="zoom:80%;"></p><h2 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h2><p>JVM支持两种类型的类加载器，分别为<strong>引导类加载器(Bootstrap ClassLoader)</strong>和<strong>自定义类加载器(User-Defined ClassLoader)</strong></p><p>Java虚拟机规范中将所有<strong>派生于抽象类<code>ClassLoader</code>的类加载器都划分为自定义类加载器</strong></p><p>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下图所示</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803214053321.png" alt="image-20230803214053321" style="zoom:80%;"></p><p> 四种类加载查看示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">        <span class="comment">//获取其上层:扩展类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">exClassLoader</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line">        System.out.println(exClassLoader);<span class="comment">//sun.misc.Launcher$ExtClassLoader@4554617c</span></span><br><span class="line">        <span class="comment">//获取其上层,获取不到引导类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">boostrapClassLoader</span> <span class="operator">=</span> exClassLoader.getParent();</span><br><span class="line">        System.out.println(boostrapClassLoader);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户自定义类加载器，m默认使用系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String类使用引导类加载器（Java核心类库都是使用引导类加载器）</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader1</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230803215854587.png" alt="image-20230803215854587" style="zoom:80%;"></p><ul><li>扩展类加载器和系统类加载器，在运行时也需要类加载器进行加载，他们的类加载器就是<strong>引导类加载器</strong></li></ul><h3 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805092508374.png" alt="image-20230805092508374" style="zoom:80%;"></p><h3 id="应用程序类加载器-系统类加载器"><a href="#应用程序类加载器-系统类加载器" class="headerlink" title="应用程序类加载器(系统类加载器)"></a>应用程序类加载器(系统类加载器)</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805092700564.png" alt="image-20230805092700564" style="zoom:80%;"></p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><h4 id="查看启动类加载所能够加载的类路径"><a href="#查看启动类加载所能够加载的类路径" class="headerlink" title="查看启动类加载所能够加载的类路径"></a>查看启动类加载所能够加载的类路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;启动类加载器&quot;</span>);</span><br><span class="line"><span class="comment">//获取BoostrapClassLoader能够加载的api的路径</span></span><br><span class="line">URL[] urLs = Launcher.getBootstrapClassPath().getURLs();</span><br><span class="line"><span class="keyword">for</span> (URL urL : urLs) &#123;</span><br><span class="line">    System.out.println(urL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805093148931.png" alt="image-20230805093148931"></p><h4 id="查看扩展类加载器所能够加载类路径"><a href="#查看扩展类加载器所能够加载类路径" class="headerlink" title="查看扩展类加载器所能够加载类路径"></a>查看扩展类加载器所能够加载类路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;扩展类加载器&quot;</span>);</span><br><span class="line"><span class="comment">//获取扩展类加载器所能加载类路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">extDirs</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String path : extDirs.split(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">    System.out.println(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805093644021.png" alt="image-20230805093644021"></p><h3 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805094112234.png" alt="image-20230805094112234" style="zoom:80%;"></p><h4 id="用户自定义类加载器的实现步骤"><a href="#用户自定义类加载器的实现步骤" class="headerlink" title="用户自定义类加载器的实现步骤"></a>用户自定义类加载器的实现步骤</h4><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805094504480.png" alt="image-20230805094504480" style="zoom:80%;"></p><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p><code>ClassLoader</code>是一个抽象类，其后所有的类加载器都继承自<code>ClassLoader</code>(除引导类加载器除外)</p><h3 id="ClassLoader的常用方法"><a href="#ClassLoader的常用方法" class="headerlink" title="ClassLoader的常用方法"></a>ClassLoader的常用方法</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805095106233.png" alt="image-20230805095106233" style="zoom:80%;"></p><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805095315466.png" alt="image-20230805095315466" style="zoom:80%;"></p><h3 id="获取ClassLoader的途径"><a href="#获取ClassLoader的途径" class="headerlink" title="获取ClassLoader的途径"></a>获取ClassLoader的途径</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805095359793.png" alt="image-20230805095359793" style="zoom:80%;"></p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805100002277.png" alt="image-20230805100002277"></p><h3 id="双亲委派机制—-工作原理"><a href="#双亲委派机制—-工作原理" class="headerlink" title="双亲委派机制—-工作原理"></a>双亲委派机制—-工作原理</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805100503027.png" alt="image-20230805100503027" style="zoom:80%;"></p><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>自定义一个类<code>java.lang.String</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户自定义的Java.lang.String类的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,String&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行里面的<code>main</code>方法，会报错</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805101446427.png" alt="image-20230805101446427"></p><p>原因分析</p><p>根据类加载的<code>双亲委派机制</code>，最终类加载请求会到达<code>引导类加载器</code>，引导类加载器会直接加载系统类库中的<code>java.lang.String</code>类，进行实例化对象，而系统类库是没有<code>main</code>方法，所以最后会报错<strong>找不到main方法</strong></p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>反向委托</p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805101859062.png" alt="image-20230805101859062" style="zoom:80%;"></p><h3 id="双亲委派机制的优势"><a href="#双亲委派机制的优势" class="headerlink" title="双亲委派机制的优势"></a>双亲委派机制的优势</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805102050913.png" alt="image-20230805102050913" style="zoom:80%;"></p><h3 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805102437891.png" alt="image-20230805102437891" style="zoom:80%;"></p><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="内容一"><a href="#内容一" class="headerlink" title="内容一"></a>内容一</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805102900262.png" alt="image-20230805102900262" style="zoom:80%;"></p><h3 id="内容二"><a href="#内容二" class="headerlink" title="内容二"></a>内容二</h3><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805103303449.png" alt="image-20230805103303449" style="zoom:80%;"></p><h3 id="内容三"><a href="#内容三" class="headerlink" title="内容三"></a>内容三</h3><p><strong>类的主动使用和被动使用</strong></p><p><img src="/2023/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E6%A1%86%E6%9E%B6%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3/jvm/JVM%E4%B8%8A%E7%AF%87/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/image-20230805103448811.png" alt="image-20230805103448811" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、用户注册功能实现</title>
      <link href="/2023/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a><strong>用户表</strong></h3><p><img src="/2023/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230713225827901.png" alt="image-20230713225827901" style="zoom:67%;"></p><h2 id="创建用户的实体类"><a href="#创建用户的实体类" class="headerlink" title="创建用户的实体类"></a>创建用户的实体类</h2><p>实体类的包名规定:<code>com.bang.store.pojo</code></p><h3 id="数据表公共字段抽取"><a href="#数据表公共字段抽取" class="headerlink" title="数据表公共字段抽取"></a>数据表公共字段抽取</h3><p>数据库设计过程中，多个业务数据表均存在以下公共字段，则可以将公共字段抽象成一个新的基类<code>com.bang.store.BasePojo</code>，供各个数据库表使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">created_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;日志-创建人&#x27;</span>,</span><br><span class="line">created_time DATETIME COMMENT <span class="string">&#x27;日志-创建时间&#x27;</span>,</span><br><span class="line">modified_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;日志-最后修改执行人&#x27;</span>,</span><br><span class="line">modified_time DATETIME COMMENT <span class="string">&#x27;日志-最后修改时间&#x27;</span>,</span><br></pre></td></tr></table></figure><h4 id="java基类"><a href="#java基类" class="headerlink" title="java基类"></a><strong>java基类</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasePojo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String createdUser;</span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="keyword">private</span> String modifiedUser;</span><br><span class="line">    <span class="keyword">private</span> Date modifiedTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">BasePojo</span> <span class="variable">basePojo</span> <span class="operator">=</span> (BasePojo) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(createdUser, basePojo.createdUser) &amp;&amp; Objects.equals(createdTime, basePojo.createdTime) &amp;&amp; Objects.equals(modifiedUser, basePojo.modifiedUser) &amp;&amp; Objects.equals(modifiedTime, basePojo.modifiedTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(createdUser, createdTime, modifiedUser, modifiedTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a><strong>补充说明</strong></h4><ul><li><p>数据库字段中的日期类型对应于<code>java</code>中的<code>java.util.Date</code></p></li><li><p><code>Lombok</code>的注解<code>@Date</code>里面包含了<code>get、set、toString、equals、hashCode</code>等方法</p></li><li><code>Lombok</code>的<code>equals</code>好像不能比较属性，所以最好对<code>equals</code>方法进行重写<ul><li><a href="https://zhuanlan.zhihu.com/p/85906077">参考博客</a></li></ul></li></ul><h3 id="用户实体类创建"><a href="#用户实体类创建" class="headerlink" title="用户实体类创建"></a>用户实体类创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户表实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">BasePojo</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">super</span>.equals(o)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(uid, user.uid) &amp;&amp; Objects.equals(username, user.username) &amp;&amp; Objects.equals(password, user.password) &amp;&amp; Objects.equals(salt, user.salt) &amp;&amp; Objects.equals(phone, user.phone) &amp;&amp; Objects.equals(email, user.email) &amp;&amp; Objects.equals(gender, user.gender) &amp;&amp; Objects.equals(avatar, user.avatar) &amp;&amp; Objects.equals(isDelete, user.isDelete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(<span class="built_in">super</span>.hashCode(), uid, username, password, salt, phone, email, gender, avatar, isDelete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>数据访问层，主要是通过<code>mybatis</code>操作数据库</p><h3 id="需要执行的SQL语句的设计"><a href="#需要执行的SQL语句的设计" class="headerlink" title="需要执行的SQL语句的设计"></a>需要执行的<code>SQL</code>语句的设计</h3><p>用户注册，通常需要输入<code>用户名</code>和<code>密码</code>这两个字段，相当于数据库的插入过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(username,password) <span class="keyword">values</span>(值列表)</span><br></pre></td></tr></table></figure><p>用户注册时，还应该判断当前用户名是否被注册过了，如果用户名已存在，则无法进行注册，需要用户重新输入用户名，这个过程本质是相当于一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> username<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法"><a href="#设计接口和抽象方法" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p><code>Mapper</code>接口方法</p><p>整个项目存在多个<code>Mapper</code>接口，需要在当前包目录结构下创建一个<code>mapper</code>包，在该<code>包</code>下根据功能模块创建对应的<code>Mapper</code>接口。</p><ol><li>创建<code>UserMapper</code>接口，实现与3.1中两条<code>SQL</code>语句对应的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块的Mapper接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将用户数据插入数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user :用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响行数，根据受影响函数返回当前操作是否执行成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查找到对应用户数据，返回数据，否则返回null值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>在项目启动类中添加注解<code>@MapperScan</code>，指明<code>Mapper</code>接口路径，避免在每个接口类中都要添加注解<code>@Mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指明当前项目中mapper接口的路径,项目启动会自动加载对应接口文件</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.bang.store.mapper&quot;)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="编写映射"><a href="#编写映射" class="headerlink" title="编写映射"></a>编写映射</h3><p><code>Mybatis</code>的映射文件<code>xxMapper.xml</code>的编写，与对应的接口相关联</p><p>映射文件都需要放置在<code>resources</code>文件夹下，为便于管理，可以新建一个<code>mapper</code>文件夹，在该文件夹下再创建不同功能模块的映射文件，注意各个映射文件的命名要与对应接口的命名保持一致</p><p>创建<code>UserMapper.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace属性，与当前映射文件对应接口的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bang.store.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义映射规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        ResultMap:</span></span><br><span class="line"><span class="comment">            id属性: 映射规则名称，唯一标识</span></span><br><span class="line"><span class="comment">            type属性: 数据库表映射对应的java实体类全类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserPojoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.bang.store.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            将表的字段与Java实体类属性字段一一对应,名称匹配的可以省略</span></span><br><span class="line"><span class="comment">            id标签:主键映射关系，必须保留</span></span><br><span class="line"><span class="comment">            result: 其他字段</span></span><br><span class="line"><span class="comment">                column: 数据库字段名</span></span><br><span class="line"><span class="comment">                property: 实体类属性名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;idDelete&quot;</span> <span class="attr">column</span>=<span class="string">&quot;is_delete&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- id属性值需要与对应接口对应方法名一致 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- useGeneratedKeys=&quot;true&quot; keyProperty=&quot;uid&quot; 开启某个字段作为主键并值自动递增，并指明字段名称  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.bang.store.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user(username,password,salt,phone,email,gender,avatar,is_delete,created_user,created_time,modified_user,modified_time) values(</span><br><span class="line">        #&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,#&#123;phone&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;avatar&#125;,#&#123;isDelete&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        resultType=&quot;com.bang.store.pojo.User&quot;  指明返回值类型，该类中各个字段应该与数据库各个字段名称保持一致</span></span><br><span class="line"><span class="comment">        resultMap: 字段名称不一致时，自定义结果集的映射规则</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserPojoMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username=#&#123;username&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis配置文件"><a href="#Mybatis配置文件" class="headerlink" title="Mybatis配置文件"></a>Mybatis配置文件</h3><p><code>Spring</code>里面会有一个<code>Mybatis Config.xml</code>文件，在配置文件里会指定<code>mapper</code>映射文件的位置，<code>SpringBoot</code>里可以省去这个文件</p><p>但是需要在<code>配置文件application.yml里要指明</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>每一个部分功能模块编写完成之后。都需要进行专门的功能测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.mapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="comment">//@MapperScan(&quot;com.bang.store.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;li123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">insert</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUsernameTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUsername(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>业务层与实际应用场景相挂钩</p><p>常见包目录结构</p><ul><li>service<ul><li>ex：异常类</li><li>impl：接口文件对应的实现类</li><li>接口文件</li></ul></li></ul><h3 id="异常规划"><a href="#异常规划" class="headerlink" title="异常规划"></a>异常规划</h3><p>结合用户使用具体场景，设计对应的异常</p><p>在实际项目中，异常要进行分级，各个具体问题要建立自定义的异常</p><p>比如：业务层的异常需定义一个<code>ServiceException</code>基类，继承自<code>RuntimeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层异常基类,继承自运行时异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ServiceException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&gt;<br>&gt;</p><blockquote><p>业务层根据应用场景定义对应具体的异常类，均需继承于<code>ServivceException</code></p></blockquote><h4 id="用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常"><a href="#用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常" class="headerlink" title="用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常"></a>用户在进行注册时可能会出现用户名被占用的情况，此时应抛出一个异常</h4><p>定义名为<code>UsernameOccupiedException</code>来表明用户名占用错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户名被占用异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameOccupiedException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UsernameOccupiedException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常"><a href="#用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常" class="headerlink" title="用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常"></a>用户数据插入过程中，由于服务器宕机、数据库宕机所引发的异常</h4><p>定义名为<code>insertException</code>来表明由于此类问题所引起的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据插入过程引发的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">InsertException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>具体业务逻辑，接口命名建议参考<code>IxxxService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><p>实现业务接口中的业务方法，命名建议<code>xxxSericeImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//1.判断用户名是否存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">isOccupied</span> <span class="operator">=</span> userMapper.findByUsername(user.getUsername());</span><br><span class="line">        <span class="comment">//用户名存在，则抛出对应的异常</span></span><br><span class="line">        <span class="keyword">if</span>(isOccupied!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameOccupiedException</span>(<span class="string">&quot;用户名已经被占用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.不存在，将用户信息存入数据库</span></span><br><span class="line">        <span class="comment">//用户密码加密</span></span><br><span class="line">        <span class="comment">//生成盐值,盐值+password+盐值: 送入MD5算法加密三次再存入数据库</span></span><br><span class="line">        <span class="comment">//盐值也要存入数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">        password = getMD5password(password,salt);</span><br><span class="line">        user.setSalt(salt);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户类其他信息的补全操作</span></span><br><span class="line">        user.setIsDelete(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//创建和修改的用户名称</span></span><br><span class="line">        user.setCreatedUser(user.getUsername());</span><br><span class="line">        user.setModifiedUser(user.getUsername());</span><br><span class="line">        <span class="comment">//创建和修改时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        user.setCreatedTime(date);</span><br><span class="line">        user.setModifiedTime(date);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        <span class="comment">//数据插入不一定会成功，此时需检测插入是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(rows!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;用户注册过程中产生了未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMD5password</span><span class="params">(String password,String salt)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            password = DigestUtils.md5DigestAsHex((salt+password+salt).getBytes()).toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><p>创建对应的测试文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUsername(<span class="string">&quot;刘备&quot;</span>);</span><br><span class="line">            user.setPassword(<span class="string">&quot;liu123456&quot;</span>);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">            iUserService.reg(user);</span><br><span class="line">            System.out.println(<span class="string">&quot;注册成功！！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ServiceException e)&#123;</span><br><span class="line">            System.out.println(e.getClass());</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充项"><a href="#补充项" class="headerlink" title="补充项"></a>补充项</h3><p>密码明文展示存在安全隐患，利用<code>md5</code>加密算法，对密码进行加密再存储在数据库</p><p>常见解决方案: 串+真实password+串 -》MD5算法加密，连续加载三次</p><p>串是指：盐值，一个随机的字符串</p><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="创建响应"><a href="#创建响应" class="headerlink" title="创建响应"></a>创建响应</h3><p> 所有的控制层的响应应该都包含：状态码、状态描述信息、数据</p><p>所以将其分装成一个类，将这个类作为返回值返回给前端浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="comment">//状态描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//请求返回数据,数据类型位置,泛型</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//捕获异常,异常信息的传递</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message=e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer state, E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><p>依据具体的业务设计对应的请求，常见请求应该包含以下四个主题：请求地址、请求参数、请求方法、请求响应</p><p>比如针对用户注册功能</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求地址: /user/reg</span><br><span class="line">请求参数： User user</span><br><span class="line">请求方法：Post</span><br><span class="line">请求响应：JsonResult&lt;void&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在控制层创建对应的实现类，借助业务层的相关接口方法，对用户的请求做出对应逻辑的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">reg</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            userService.reg(user);</span><br><span class="line">            result.setState(<span class="number">200</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户注册成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UsernameOccupiedException e)&#123;</span><br><span class="line">            result.setState(<span class="number">4000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户名被占用&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InsertException e)&#123;</span><br><span class="line">            result.setState(<span class="number">5000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;注册时未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层代码优化设计"><a href="#控制层代码优化设计" class="headerlink" title="控制层代码优化设计"></a>控制层代码优化设计</h3><p>观察5.3中控制层请求处理代码逻辑，发现异常捕获部分存在较大冗余，对于业务层而言，其代码确定之后，异常类型也就可以确定，所以控制层可能捕获的异常也就可能确定，可以将异常捕获处理这部分代码剥离出来，构建一个基础类，让控制层处理请求类继承至该类</p><p>这么设计的可行性：</p><ul><li>Spring提供了ExceptionHandle注解，该注解可以当某种类型异常发生之后，会统一拦截到对应方法上进行处理</li></ul><h4 id="抽象出的基类"><a href="#抽象出的基类" class="headerlink" title="抽象出的基类"></a><strong>抽象出的基类</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer OK=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandle注解: 项目中如果产生指定类型的异常，会统一拦截到此方法上进行处理</span></span><br><span class="line">    <span class="comment">//                     参数:对应拦截的异常类类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> UsernameOccupiedException)&#123;</span><br><span class="line">            result.setState(<span class="number">4000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户名被占用&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InsertException) &#123;</span><br><span class="line">            result.setState(<span class="number">5000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;注册时未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制层注册逻辑代码简化版本"><a href="#控制层注册逻辑代码简化版本" class="headerlink" title="控制层注册逻辑代码简化版本"></a><strong>控制层注册逻辑代码简化版本</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.service.ex.UsernameOccupiedException;</span><br><span class="line"><span class="keyword">import</span> com.bang.store.utils.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/reg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">reg</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        userService.reg(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;用户注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面的开发"><a href="#前端页面的开发" class="headerlink" title="前端页面的开发"></a>前端页面的开发</h2><ol><li><p>在注册页面编写发送请求的方法，利用事件来完成。首先根据选择器的到对应的按钮对象(比如$(选择器))，对按钮对象绑定对应的点击事件</p><p><img src="/2023/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/02%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/image-20230718235451253.png" alt="image-20230718235451253" style="zoom:50%;"></p></li><li><p>利用异步请求(<code>ajax</code>技术)，对后端程序发送对应的请求</p><p><code>ajax</code>的使用方法，<code>ajax</code>函数会接受多个参数，参数类似于键值对的形式，用,分割</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">type</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">data</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">dataType</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    ,<span class="attr">success</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    ,<span class="attr">error</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">参数功能</th></tr></thead><tbody><tr><td style="text-align:center">url</td><td style="text-align:center">标识请求的地址，不包含参数列表 ，比如：url:<a href="http://localhost:8080/user/reg">http://localhost:8080/user/reg</a></td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">请求方法类型(GET、POST)  ，比如: type:”POST”</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">请求发送的数据，例如: data:”username=张飞&amp;password=123456”</td></tr><tr><td style="text-align:center">dataType</td><td style="text-align:center">请求传送数据数据类型，一般为json类型，比如： dataType:”json”</td></tr><tr><td style="text-align:center">success</td><td style="text-align:center">服务器正常响应客户端时，会自动调用该参数对应的方法，并将服务器返回值自动装填到方法参数上</td></tr><tr><td style="text-align:center">error</td><td style="text-align:center">服务器不能够正常响应客户端时，会自动调用该参数对应的方法，并将服务器返回值自动装填到方法参数上</td></tr></tbody></table></div><ol><li><p>前端核心代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">//1.获取对应按钮对象，绑定点击事件</span></span><br><span class="line">      $(<span class="string">&quot;#btn-reg&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//2.点击之后发送ajax异步请求</span></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>:<span class="string">&quot;/user/reg&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">          <span class="comment">//动态获取对应表单数据,会自动拼接成:表单name1=val1&amp;表单name2=val2&amp;...</span></span><br><span class="line">          <span class="attr">data</span>:$(<span class="string">&quot;#form-reg&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">          <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">          <span class="comment">//服务器返回数据</span></span><br><span class="line">          <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(data.<span class="property">message</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//xhr对象,status对应的状态码</span></span><br><span class="line">          <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;注册时产生未知错误&quot;</span>+ xhr.<span class="property">status</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、用户登录功能的实现</title>
      <link href="/2023/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/03%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/03%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h1><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><p>用户进入登陆页面，输入用户名和密码，点击登录按钮，向后台程序发送请求，后台根据用户信息在数据库中进行查找，如果用户名和密码均正确，则会跳转到对应的主页面，即<code>index.html</code></p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><h3 id="规划要执行的SQL语句"><a href="#规划要执行的SQL语句" class="headerlink" title="规划要执行的SQL语句"></a>规划要执行的SQL语句</h3><p>分析：一般逻辑是根据用户名查询数据库返回用户记录给业务层，由于密码存储一般是经过加密后的数据，数据库中与用户输入一般不一致，所以密码等其他信息的校验一般放在业务层去进行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> username<span class="operator">=</span>?;</span><br></pre></td></tr></table></figure><p>相关持久层的功能在用户注册模块已经实现</p><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><h3 id="规划异常"><a href="#规划异常" class="headerlink" title="规划异常"></a>规划异常</h3><h4 id="密码错误异常"><a href="#密码错误异常" class="headerlink" title="密码错误异常"></a>密码错误异常</h4><p>用户名正确，密码错误引发的异常，<code>PasswordNotMatchException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordNotMatchException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">PasswordNotMatchException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="用户名不存在异常"><a href="#用户名不存在异常" class="headerlink" title="用户名不存在异常"></a>用户名不存在异常</h4><p>用户名数据库中不存在所引发的异常，<code>UsernameNotFoundException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UsernameNotFoundException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计接口和抽象方法"><a href="#设计接口和抽象方法" class="headerlink" title="设计接口和抽象方法"></a>设计接口和抽象方法</h3><p>直接在<code>IUserService</code>接口中编写登录方法<code>login(String username,String password)</code></p><p>如果登录成功，将用户数据对象需要作为方法返回值返回</p><p>状态管理：将相关数据保存在cookie或者session中，可以避免重复度很好的数据多次频繁操作数据库获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password 用户密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> : 用户对象,因为登陆成功后，各个页面右上角会显示用户信息，需要用到用户对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">login</span><span class="params">(String username,String password)</span>;</span><br></pre></td></tr></table></figure><h3 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">       <span class="comment">//根据用户名称查询用户对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUsername(username);</span><br><span class="line">       <span class="comment">//用户对象不存在，抛出用户名不存在异常</span></span><br><span class="line">       <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//用户密码匹配</span></span><br><span class="line">       <span class="keyword">if</span>(!user.getPassword().equals(getMD5password(password,user.getSalt())))&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordNotMatchException</span>(<span class="string">&quot;用户密码错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断用户是否注销</span></span><br><span class="line">       <span class="keyword">if</span>(user.getIsDelete()==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>根据业务层抛出异常，在统一异常处理基类中做出对应的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UsernameNotFoundException) &#123;</span><br><span class="line">    result.setState(<span class="number">5001</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;用户名不存在异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> PasswordNotMatchException) &#123;</span><br><span class="line">    result.setState(<span class="number">5002</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;用户密码不匹配异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计请求"><a href="#设计请求" class="headerlink" title="设计请求"></a>设计请求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求路径：/user/login</span><br><span class="line">请求方法：POST</span><br><span class="line">请求参数：String username,String password</span><br><span class="line">响应结果：JsonResult&lt;User&gt;</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在<code>UserController</code>类中编写对应的请求处理方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">login</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(username, password);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;User&gt;(OK,<span class="string">&quot;登陆成功&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>在<code>login.html</code>页面中找到对应表单，在表单中找到登录按钮，将登录按钮与指定时间绑定，按钮点击，向后端指定程序发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     $(<span class="string">&quot;#btn-login&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">       $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">         <span class="attr">url</span>: <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">         ,<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">         ,<span class="attr">data</span>: $(<span class="string">&quot;#form-login&quot;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">         ,<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span></span><br><span class="line">         ,<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.<span class="property">state</span> == <span class="number">200</span>)&#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">              <span class="comment">//跳转到对应页面</span></span><br><span class="line">              <span class="comment">//相对路径指定对应页面位置</span></span><br><span class="line">              location.<span class="property">href</span>=<span class="string">&quot;index.html&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;登陆失败 &quot;</span>+data.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         ,<span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">xmh</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;登陆失败&quot;</span>+xmh.<span class="property">status</span>);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="用户会话Session"><a href="#用户会话Session" class="headerlink" title="用户会话Session"></a>用户会话Session</h2><p>session对象主要存储在服务器端，可以用于保存服务器的临时数据，其在整个项目中都可以被访问，可以在不同模块之间进行数据共享。</p><p>对于用户登录功能，可以将用户当前首次登录输入的信息数据存储在session对象中，供整个会话期间，其他模块共用。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//session对象存储数据</span></span><br><span class="line">session.setAttribute(key,value);</span><br><span class="line"><span class="comment">//从session对象获取数据</span></span><br><span class="line">session.getAttribute(key)</span><br></pre></td></tr></table></figure><p>可能在一个项目中，多次用到session对象存储数据或者从session对象中读取数据，为了减少代码冗余，应该将这两个操作封装到函数中</p><p>可以封装到工具类，但是由于这两个操作只会在控制层使用，而本项目控制层存在基类，所以将该方法定义在控制层基类<code>BaseController</code>中</p><p>由于存储操作要视具体情况而定，所以只封装从session对象读取数据功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从session对象中获取当前登录用户的uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> uid:当前登录用户的uid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">getUidFromSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Integer) session.getAttribute(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从session对象中获取当前用户的username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> username:当前登录用户的username</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getUsernameFromSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (String) session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关位置将数据存取到session对象中"><a href="#相关位置将数据存取到session对象中" class="headerlink" title="相关位置将数据存取到session对象中"></a>相关位置将数据存取到session对象中</h3><p>在<code>UserController</code>类中的<code>login</code>函数中将相关数据存取到session对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">login</span><span class="params">(String username, String password, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(username, password);</span><br><span class="line">    <span class="comment">//数据存取到session对象</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;uid&quot;</span>,user.getUid());</span><br><span class="line">    session.setAttribute(<span class="string">&quot;username&quot;</span>,user.getUsername());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;User&gt;(OK,<span class="string">&quot;登陆成功&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户登录拦截器"><a href="#用户登录拦截器" class="headerlink" title="用户登录拦截器"></a>用户登录拦截器</h2><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>会首先将用户所有请求统一拦截到拦截器中进行处理，所以可以到拦截器中自定义过滤规则，达到拦截请求、过滤响应的目的</p><p>比如：对于当前项目(商城系统)，访问其他页面会全部拦截到拦截器，判断用户是否登录，如果没有则统一会打开<code>login.html</code>用户登录页面，打开其他页面，可以使用<strong>重定向</strong>或者<strong>请求转发</strong>技术来完成</p><p>推荐使用重定向技术，如果两个模块不在同一个服务器上，转发可能会出现错误</p><h3 id="SpringBoot中如何拦截器的使用"><a href="#SpringBoot中如何拦截器的使用" class="headerlink" title="SpringBoot中如何拦截器的使用"></a>SpringBoot中如何拦截器的使用</h3><p>SpringMVC提供了一个<code>HandleInterceptor</code>接口，用于表示拦截器</p><p>使用步骤</p><ol><li><p>自定义一个类，实现<code>HandleInterceptor</code>接口，项目一般会将所有拦截器统一放在一个目录下，本项目中统一放在<code>com.bang.store.interceptor</code>包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义用户登录拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//在所有请求处理方法之前被调用执行，即在请求到达Dispatcher中央处理器之前</span></span><br><span class="line">    <span class="comment">//拦截器的重点关注位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能:检测session对象中是否含有uid数据,如果有则放行请求，否则重定向到用户登录界面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果返回值为true,正常放行;如果为false,则表示拦截，不放行,</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//获取uid数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">uid</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(uid==<span class="literal">null</span>)&#123; <span class="comment">//表明用户没有登录</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/web/login.html&quot;</span>); <span class="comment">//重定向到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//拦截请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//用户登录后则直接放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求执行后被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有关联操作完成之后调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册拦截器</p><p>添加白名单与黑名单，即当前拦截器只对那些请求起作用、对哪些请求不起作用</p><p>比如：注册、登录页面不能够被拦截，否则任何界面都无法进入，造成死循环</p></li><li><p>拦截器注册操作</p><p>借助<code>WebMVCConfigure</code>接口，可以将用户定义的拦截器进行注册，才能使拦截器生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bang.store.configure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bang.store.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解，让SpringBoot识别</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptorConfigure</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//实例化自定义拦截器</span></span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">loginInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">        <span class="comment">//配置白名单</span></span><br><span class="line">        List&lt;String&gt; whiteList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        whiteList.add(<span class="string">&quot;/web/login.html&quot;</span>);</span><br><span class="line">        whiteList.add(<span class="string">&quot;/web/register.html&quot;</span>);</span><br><span class="line">        whiteList.add(<span class="string">&quot;/web/product.html&quot;</span>);</span><br><span class="line">        whiteList.add(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">        <span class="comment">//注册拦截器</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/web/**&quot;</span>)  <span class="comment">//配置黑名单,即拦截器要拦截的路径</span></span><br><span class="line">                .excludePathPatterns(whiteList); <span class="comment">//配置白名单,即拦截器不拦截的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、项目环境搭建</title>
      <link href="/2023/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/01%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/B%E7%AB%99%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/01%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h1><h2 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h2><p>项目 功能包括:登录、注册、热销产品、用户管理(密码、个人信息、头像、收货地址)、购物车（商品展示、增加、删除）、订单模块</p><h2 id="开发顺序"><a href="#开发顺序" class="headerlink" title="开发顺序"></a>开发顺序</h2><p>注册、登录、用户管理、购物车、商品、订单模块</p><h2 id="某个模块的开发顺序"><a href="#某个模块的开发顺序" class="headerlink" title="某个模块的开发顺序"></a>某个模块的开发顺序</h2><ul><li>持久层开发<ul><li>依据前端页面的设置规划相应的SQL语句，以及进行配置</li></ul></li><li>业务层开发<ul><li>核心功能控制、业务操作以及异常的处理</li></ul></li><li>控制层开发<ul><li>接收请求、处理相应</li></ul></li><li>前端开发<ul><li>简单JS、JQuery、AJAX的代码编写</li></ul></li></ul><h1 id="项目搭建的工具和环境"><a href="#项目搭建的工具和环境" class="headerlink" title="项目搭建的工具和环境"></a>项目搭建的工具和环境</h1><ol><li>JDK：1.8及其以上的版本</li><li>maven：配置到IDEA，要求3.6.1及其以上版本</li><li>数据库: Mysql，5.1及其以上版本</li><li>开发平台：IDEA</li></ol><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><ol><li>项目名称：<code>store</code>，表示商城</li><li>主包名：<code>com.bang.store</code></li><li>资源文件：统一放置在<code>resources</code>文件夹下</li><li>单元测试：<code>test.com.bang.store</code></li></ol><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>导入设计对应的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database store charcater <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>项目的<code>application.yml</code>文件配置数据库相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#数据库相关配置信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/store?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span></span><br></pre></td></tr></table></figure></li><li><p>测试连接</p><ol><li>运行<code>SpringBoot</code>主类</li><li>在单元测试文件中测试数据库连接情况</li></ol></li><li><p>测试项目的静态资源文件是否可以正常访问</p><ol><li>将所有静态资源复制到<code>resources</code>下的<code>static</code>文件</li><li>启动项目，在浏览器访问指定静态资源文件测试是否正常</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 电脑商城项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本概念</title>
      <link href="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络基本概念"><a href="#计算机网络基本概念" class="headerlink" title="计算机网络基本概念"></a>计算机网络基本概念</h1><h2 id="1-因特网"><a href="#1-因特网" class="headerlink" title="1 因特网"></a>1 因特网</h2><h4 id="1-网络、互联网和因特网"><a href="#1-网络、互联网和因特网" class="headerlink" title="1 网络、互联网和因特网"></a>1 网络、互联网和因特网</h4><ul><li>网络<ul><li>若干个节点和连接这些节点的链路组成的即称为网络</li></ul></li><li>互联网<ul><li>多个网络通过路由器互联起来，构成一个覆盖范围更大的网络，即称为互联网</li><li>互联网—-网络的网络</li></ul></li><li>因特网<ul><li>一个专有名词，专指世界上最大的互联网</li></ul></li></ul><h4 id="2-ISP"><a href="#2-ISP" class="headerlink" title="2 ISP"></a>2 ISP</h4><p>因特网服务提供者(<code>Internet Service Provider</code>)</p><p>电信、移动、联通等运营商即可称之为ISP</p><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710001309793.png" alt="image-20230710001309793" style="zoom:50%;"></p><h4 id="3-因特网的组成"><a href="#3-因特网的组成" class="headerlink" title="3 因特网的组成"></a>3 因特网的组成</h4><h5 id="边缘部分-网络边缘"><a href="#边缘部分-网络边缘" class="headerlink" title="边缘部分(网络边缘)"></a>边缘部分(网络边缘)</h5><p>由所有连接在因特网上的主机组成。用户直接使用，用来进行数据通信和资源共享的设备</p><h5 id="核心部分-网络核心"><a href="#核心部分-网络核心" class="headerlink" title="核心部分(网络核心)"></a>核心部分(网络核心)</h5><p>由大量网络和连接这些网络的的路由器组成。网络核心为网络边缘提供服务(连通性和数据交换)</p><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710001702834.png" alt="image-20230710001702834" style="zoom:50%;"></p><h2 id="2-数据交换方式"><a href="#2-数据交换方式" class="headerlink" title="2 数据交换方式"></a>2 数据交换方式</h2><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p>以前的电话机通过连接电话线的方式即为电路交换</p><p>电路交换常见的三个步骤</p><ol><li>建立连接(分配通信资源)</li><li>通话(在此期间，独占通信资源)</li><li>释放连接(归还通信资源)</li></ol><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710002103273.png" alt="image-20230710002103273" style="zoom:50%;"></p><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p>现存的计算机网络体系使用的数据交换方式</p><ul><li>发送方构造分组，发送分组</li><li>分组交换机(路由器等设备)缓存转发分组</li><li>接收方接受分许，还原报文</li></ul><h4 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h4><p>与分组交换类似，只是其传输单位为整个报文，分组交换为单个分组(将一个报文切割为多个分组)</p><h4 id="三者数据交换对比"><a href="#三者数据交换对比" class="headerlink" title="三者数据交换对比"></a>三者数据交换对比</h4><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710002456854.png" alt="image-20230710002456854" style="zoom: 33%;"></p><h2 id="3-计算机网络定义和分类"><a href="#3-计算机网络定义和分类" class="headerlink" title="3 计算机网络定义和分类"></a>3 计算机网络定义和分类</h2><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h4><p>最简单定义：<strong>互联自治</strong>的计算机的集合</p><ul><li>互联<ul><li>强调计算机之间可以通过有线或无线的方式进行数据通信</li></ul></li><li>自治<ul><li>计算机拥有自己的硬件和软件，可以独立单独使用</li></ul></li><li>集合<ul><li>至少含有两台计算机</li></ul></li></ul><h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2 分类"></a>2 分类</h4><p>按照不同的标准可以分为不同的类别</p><h5 id="按交换技术分类"><a href="#按交换技术分类" class="headerlink" title="按交换技术分类"></a>按交换技术分类</h5><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><h5 id="按使用者分类"><a href="#按使用者分类" class="headerlink" title="按使用者分类"></a>按使用者分类</h5><ul><li>公用网</li><li>专用网</li></ul><h5 id="按传输介质分类"><a href="#按传输介质分类" class="headerlink" title="按传输介质分类"></a>按传输介质分类</h5><ul><li>有线网</li><li>无线网</li></ul><h5 id="按覆盖范围分类"><a href="#按覆盖范围分类" class="headerlink" title="按覆盖范围分类"></a>按覆盖范围分类</h5><ul><li>广域网<code>WAN</code></li><li>城域网<code>MAN</code></li><li>局域网<code>LAN</code></li><li>个域网<code>PAN</code></li></ul><h5 id="按拓扑类型分类"><a href="#按拓扑类型分类" class="headerlink" title="按拓扑类型分类"></a>按拓扑类型分类</h5><ul><li>总线型网络</li><li>星型网络</li><li>环形网络</li><li>网状型网络</li></ul><h2 id="4-计算机网络性能指标"><a href="#4-计算机网络性能指标" class="headerlink" title="4 计算机网络性能指标"></a>4 计算机网络性能指标</h2><p>常用评判计算机网络性能主要为以下8个指标</p><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>连接在计算机网络上的主机在数字信道上传送比特的速率，也称之为比特率或者数据率</p><p>单位为：<code>bit/s</code></p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>计算机网络中从一点到另一点所能达到的最高速率</p><p>带宽通常用来表示网络通信线路传送数据的能力</p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>单位时间内通过某个网络的数据量</p><ul><li>吞吐量经常用于对现实世界网络的一种测量，能够衡量实际上到底有多少数据能够通过网络</li><li>受网络带宽或额定速率的限制</li></ul><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>网络时延一般由发送时延、处理时延、传播时延三部分组成</p><ul><li>发送时延<ul><li>分组通过网卡发送到链路所需时间</li><li>$\frac{分组长度(bit)}{发送速率(bit/s)}$</li></ul></li><li>处理时延<ul><li>分组在路由器处排队时间、路由器对其缓存转发的时间</li></ul></li><li>传播时延<ul><li>分组在通信链路上传播所需时间</li><li>$\frac{链路长度}{电磁波传播速率}$</li></ul></li></ul><p><img src="/2023/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20230710004156154.png" alt="image-20230710004156154" style="zoom:50%;"></p><h4 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h4><h4 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h4><h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><h4 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h4><h2 id="5-计算机网络体系结构"><a href="#5-计算机网络体系结构" class="headerlink" title="5 计算机网络体系结构"></a>5 计算机网络体系结构</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目录结构测试</title>
      <link href="/2023/07/08/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/07/08/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>ghhjjjkjk</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>hjjkjkkjS</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><script type="math/tex; mode=display">x_2+y_2=32</script><script type="math/tex; mode=display">matrix = x^2+y^2=z^2</script><p>发广告哼哼唧唧</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>GHhjiig</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><img src="/2023/07/08/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%B5%8B%E8%AF%95/1.png" alt="1"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码测试</title>
      <link href="/2023/07/08/%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/07/08/%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/08/hello-world/"/>
      <url>/2023/07/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
